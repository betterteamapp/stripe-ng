{-# LANGUAGE DataKinds #-}
{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE GeneralizedNewtypeDeriving #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE StandaloneDeriving #-}
{-# LANGUAGE TemplateHaskell #-}
{-# LANGUAGE UndecidableInstances #-}
{-# LANGUAGE KindSignatures #-}
{-# LANGUAGE PolyKinds #-}
-- Derived from OpenAPI spec
module Stripe.Types where

-- TODO all of this needs to be qualified to account for generated output causing conflicts
import Control.Applicative ((<|>))
import Control.DeepSeq (NFData(..))
import Control.Lens.TH
import Data.Aeson (ToJSON1(..), FromJSON1(..), toJSON1, parseJSON1)
import Data.Binary (Binary(..))
import Data.Data (Data(..))
import Data.Functor.Const
import Data.Functor.Classes
import qualified Data.Sum
import GHC.Generics (Generic)
import GHC.Exts (IsString(..), IsList(..))
import Text.Printf (PrintfArg(..))
import OpenAPI.Support hiding (Error(..))

-- TODO All objects going into qery string need instance of QueryValueLike based on parameter format

-- TODO stripe specific, move out
newtype Id (a :: k) = Id { fromId :: Text }
  deriving (Show, Eq, Ord, Data, Read, IsString, Semigroup, Monoid, PrintfArg, Binary, NFData, IsList, ToJSON, FromJSON)

data Expandable (fs :: [* -> *])
  = Unexpanded (Id fs)
  | Expanded (AnyOf fs)

instance Data.Sum.Apply ToJSON1 fs => ToJSON (Expandable fs) where
  toJSON (Unexpanded k) = toJSON k
  toJSON (Expanded s) = toJSON1 s

instance FromJSON1 (Data.Sum.Sum fs) => FromJSON (Expandable fs) where
  parseJSON v = (Unexpanded <$> parseJSON v) <|> (Expanded <$> parseJSON1 v)
deriving instance Data.Sum.Apply Show1 a => Show (Expandable a)
deriving instance Data.Sum.Apply Eq1 a => Eq (Expandable a)
deriving instance (Data.Sum.Apply Eq1 a, Data.Sum.Apply Ord1 a) => Ord (Expandable a)
-- , Eq, Ord)

data AccountCapabilities_CardPayments
  = AccountCapabilities_CardPayments_Active
  | AccountCapabilities_CardPayments_Inactive
  | AccountCapabilities_CardPayments_Pending
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON AccountCapabilities_CardPayments where
  toJSON e = Text $ case e of
    AccountCapabilities_CardPayments_Active -> "active"
    AccountCapabilities_CardPayments_Inactive -> "inactive"
    AccountCapabilities_CardPayments_Pending -> "pending"

instance FromJSON AccountCapabilities_CardPayments where
  parseJSON = withText "AccountCapabilities_CardPayments" $ \case
    "active" -> pure AccountCapabilities_CardPayments_Active
    "inactive" -> pure AccountCapabilities_CardPayments_Inactive
    "pending" -> pure AccountCapabilities_CardPayments_Pending
    str -> fail (show str <> " is not a known valid option for AccountCapabilities_CardPayments")

data AccountCapabilities_LegacyPayments
  = AccountCapabilities_LegacyPayments_Active
  | AccountCapabilities_LegacyPayments_Inactive
  | AccountCapabilities_LegacyPayments_Pending
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON AccountCapabilities_LegacyPayments where
  toJSON e = Text $ case e of
    AccountCapabilities_LegacyPayments_Active -> "active"
    AccountCapabilities_LegacyPayments_Inactive -> "inactive"
    AccountCapabilities_LegacyPayments_Pending -> "pending"

instance FromJSON AccountCapabilities_LegacyPayments where
  parseJSON = withText "AccountCapabilities_LegacyPayments" $ \case
    "active" -> pure AccountCapabilities_LegacyPayments_Active
    "inactive" -> pure AccountCapabilities_LegacyPayments_Inactive
    "pending" -> pure AccountCapabilities_LegacyPayments_Pending
    str -> fail (show str <> " is not a known valid option for AccountCapabilities_LegacyPayments")

data AccountCapabilities_Transfers
  = AccountCapabilities_Transfers_Active
  | AccountCapabilities_Transfers_Inactive
  | AccountCapabilities_Transfers_Pending
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON AccountCapabilities_Transfers where
  toJSON e = Text $ case e of
    AccountCapabilities_Transfers_Active -> "active"
    AccountCapabilities_Transfers_Inactive -> "inactive"
    AccountCapabilities_Transfers_Pending -> "pending"

instance FromJSON AccountCapabilities_Transfers where
  parseJSON = withText "AccountCapabilities_Transfers" $ \case
    "active" -> pure AccountCapabilities_Transfers_Active
    "inactive" -> pure AccountCapabilities_Transfers_Inactive
    "pending" -> pure AccountCapabilities_Transfers_Pending
    str -> fail (show str <> " is not a known valid option for AccountCapabilities_Transfers")

data AccountLink_Object
  = AccountLink_Object_AccountLink
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON AccountLink_Object where
  toJSON e = Text $ case e of
    AccountLink_Object_AccountLink -> "account_link"

instance FromJSON AccountLink_Object where
  parseJSON = withText "AccountLink_Object" $ \case
    "account_link" -> pure AccountLink_Object_AccountLink
    str -> fail (show str <> " is not a known valid option for AccountLink_Object")

data Account_Object
  = Account_Object_Account
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON Account_Object where
  toJSON e = Text $ case e of
    Account_Object_Account -> "account"

instance FromJSON Account_Object where
  parseJSON = withText "Account_Object" $ \case
    "account" -> pure Account_Object_Account
    str -> fail (show str <> " is not a known valid option for Account_Object")

data AlipayAccount_Object
  = AlipayAccount_Object_AlipayAccount
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON AlipayAccount_Object where
  toJSON e = Text $ case e of
    AlipayAccount_Object_AlipayAccount -> "alipay_account"

instance FromJSON AlipayAccount_Object where
  parseJSON = withText "AlipayAccount_Object" $ \case
    "alipay_account" -> pure AlipayAccount_Object_AlipayAccount
    str -> fail (show str <> " is not a known valid option for AlipayAccount_Object")

data ApiErrors_Type
  = ApiErrors_Type_ApiConnectionError
  | ApiErrors_Type_ApiError
  | ApiErrors_Type_AuthenticationError
  | ApiErrors_Type_CardError
  | ApiErrors_Type_IdempotencyError
  | ApiErrors_Type_InvalidRequestError
  | ApiErrors_Type_RateLimitError
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON ApiErrors_Type where
  toJSON e = Text $ case e of
    ApiErrors_Type_ApiConnectionError -> "api_connection_error"
    ApiErrors_Type_ApiError -> "api_error"
    ApiErrors_Type_AuthenticationError -> "authentication_error"
    ApiErrors_Type_CardError -> "card_error"
    ApiErrors_Type_IdempotencyError -> "idempotency_error"
    ApiErrors_Type_InvalidRequestError -> "invalid_request_error"
    ApiErrors_Type_RateLimitError -> "rate_limit_error"

instance FromJSON ApiErrors_Type where
  parseJSON = withText "ApiErrors_Type" $ \case
    "api_connection_error" -> pure ApiErrors_Type_ApiConnectionError
    "api_error" -> pure ApiErrors_Type_ApiError
    "authentication_error" -> pure ApiErrors_Type_AuthenticationError
    "card_error" -> pure ApiErrors_Type_CardError
    "idempotency_error" -> pure ApiErrors_Type_IdempotencyError
    "invalid_request_error" -> pure ApiErrors_Type_InvalidRequestError
    "rate_limit_error" -> pure ApiErrors_Type_RateLimitError
    str -> fail (show str <> " is not a known valid option for ApiErrors_Type")

data ApplePayDomain_Object
  = ApplePayDomain_Object_ApplePayDomain
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON ApplePayDomain_Object where
  toJSON e = Text $ case e of
    ApplePayDomain_Object_ApplePayDomain -> "apple_pay_domain"

instance FromJSON ApplePayDomain_Object where
  parseJSON = withText "ApplePayDomain_Object" $ \case
    "apple_pay_domain" -> pure ApplePayDomain_Object_ApplePayDomain
    str -> fail (show str <> " is not a known valid option for ApplePayDomain_Object")

data ApplicationFee_Object
  = ApplicationFee_Object_ApplicationFee
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON ApplicationFee_Object where
  toJSON e = Text $ case e of
    ApplicationFee_Object_ApplicationFee -> "application_fee"

instance FromJSON ApplicationFee_Object where
  parseJSON = withText "ApplicationFee_Object" $ \case
    "application_fee" -> pure ApplicationFee_Object_ApplicationFee
    str -> fail (show str <> " is not a known valid option for ApplicationFee_Object")

data Application_Object
  = Application_Object_Application
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON Application_Object where
  toJSON e = Text $ case e of
    Application_Object_Application -> "application"

instance FromJSON Application_Object where
  parseJSON = withText "Application_Object" $ \case
    "application" -> pure Application_Object_Application
    str -> fail (show str <> " is not a known valid option for Application_Object")

data BalanceTransaction_Object
  = BalanceTransaction_Object_BalanceTransaction
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON BalanceTransaction_Object where
  toJSON e = Text $ case e of
    BalanceTransaction_Object_BalanceTransaction -> "balance_transaction"

instance FromJSON BalanceTransaction_Object where
  parseJSON = withText "BalanceTransaction_Object" $ \case
    "balance_transaction" -> pure BalanceTransaction_Object_BalanceTransaction
    str -> fail (show str <> " is not a known valid option for BalanceTransaction_Object")

data BalanceTransaction_Type
  = BalanceTransaction_Type_Adjustment
  | BalanceTransaction_Type_Advance
  | BalanceTransaction_Type_AdvanceFunding
  | BalanceTransaction_Type_ApplicationFee
  | BalanceTransaction_Type_ApplicationFeeRefund
  | BalanceTransaction_Type_Charge
  | BalanceTransaction_Type_ConnectCollectionTransfer
  | BalanceTransaction_Type_IssuingAuthorizationHold
  | BalanceTransaction_Type_IssuingAuthorizationRelease
  | BalanceTransaction_Type_IssuingTransaction
  | BalanceTransaction_Type_Payment
  | BalanceTransaction_Type_PaymentFailureRefund
  | BalanceTransaction_Type_PaymentRefund
  | BalanceTransaction_Type_Payout
  | BalanceTransaction_Type_PayoutCancel
  | BalanceTransaction_Type_PayoutFailure
  | BalanceTransaction_Type_Refund
  | BalanceTransaction_Type_RefundFailure
  | BalanceTransaction_Type_ReserveTransaction
  | BalanceTransaction_Type_ReservedFunds
  | BalanceTransaction_Type_StripeFee
  | BalanceTransaction_Type_StripeFxFee
  | BalanceTransaction_Type_TaxFee
  | BalanceTransaction_Type_Topup
  | BalanceTransaction_Type_TopupReversal
  | BalanceTransaction_Type_Transfer
  | BalanceTransaction_Type_TransferCancel
  | BalanceTransaction_Type_TransferFailure
  | BalanceTransaction_Type_TransferRefund
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON BalanceTransaction_Type where
  toJSON e = Text $ case e of
    BalanceTransaction_Type_Adjustment -> "adjustment"
    BalanceTransaction_Type_Advance -> "advance"
    BalanceTransaction_Type_AdvanceFunding -> "advance_funding"
    BalanceTransaction_Type_ApplicationFee -> "application_fee"
    BalanceTransaction_Type_ApplicationFeeRefund -> "application_fee_refund"
    BalanceTransaction_Type_Charge -> "charge"
    BalanceTransaction_Type_ConnectCollectionTransfer -> "connect_collection_transfer"
    BalanceTransaction_Type_IssuingAuthorizationHold -> "issuing_authorization_hold"
    BalanceTransaction_Type_IssuingAuthorizationRelease -> "issuing_authorization_release"
    BalanceTransaction_Type_IssuingTransaction -> "issuing_transaction"
    BalanceTransaction_Type_Payment -> "payment"
    BalanceTransaction_Type_PaymentFailureRefund -> "payment_failure_refund"
    BalanceTransaction_Type_PaymentRefund -> "payment_refund"
    BalanceTransaction_Type_Payout -> "payout"
    BalanceTransaction_Type_PayoutCancel -> "payout_cancel"
    BalanceTransaction_Type_PayoutFailure -> "payout_failure"
    BalanceTransaction_Type_Refund -> "refund"
    BalanceTransaction_Type_RefundFailure -> "refund_failure"
    BalanceTransaction_Type_ReserveTransaction -> "reserve_transaction"
    BalanceTransaction_Type_ReservedFunds -> "reserved_funds"
    BalanceTransaction_Type_StripeFee -> "stripe_fee"
    BalanceTransaction_Type_StripeFxFee -> "stripe_fx_fee"
    BalanceTransaction_Type_TaxFee -> "tax_fee"
    BalanceTransaction_Type_Topup -> "topup"
    BalanceTransaction_Type_TopupReversal -> "topup_reversal"
    BalanceTransaction_Type_Transfer -> "transfer"
    BalanceTransaction_Type_TransferCancel -> "transfer_cancel"
    BalanceTransaction_Type_TransferFailure -> "transfer_failure"
    BalanceTransaction_Type_TransferRefund -> "transfer_refund"

instance FromJSON BalanceTransaction_Type where
  parseJSON = withText "BalanceTransaction_Type" $ \case
    "adjustment" -> pure BalanceTransaction_Type_Adjustment
    "advance" -> pure BalanceTransaction_Type_Advance
    "advance_funding" -> pure BalanceTransaction_Type_AdvanceFunding
    "application_fee" -> pure BalanceTransaction_Type_ApplicationFee
    "application_fee_refund" -> pure BalanceTransaction_Type_ApplicationFeeRefund
    "charge" -> pure BalanceTransaction_Type_Charge
    "connect_collection_transfer" -> pure BalanceTransaction_Type_ConnectCollectionTransfer
    "issuing_authorization_hold" -> pure BalanceTransaction_Type_IssuingAuthorizationHold
    "issuing_authorization_release" -> pure BalanceTransaction_Type_IssuingAuthorizationRelease
    "issuing_transaction" -> pure BalanceTransaction_Type_IssuingTransaction
    "payment" -> pure BalanceTransaction_Type_Payment
    "payment_failure_refund" -> pure BalanceTransaction_Type_PaymentFailureRefund
    "payment_refund" -> pure BalanceTransaction_Type_PaymentRefund
    "payout" -> pure BalanceTransaction_Type_Payout
    "payout_cancel" -> pure BalanceTransaction_Type_PayoutCancel
    "payout_failure" -> pure BalanceTransaction_Type_PayoutFailure
    "refund" -> pure BalanceTransaction_Type_Refund
    "refund_failure" -> pure BalanceTransaction_Type_RefundFailure
    "reserve_transaction" -> pure BalanceTransaction_Type_ReserveTransaction
    "reserved_funds" -> pure BalanceTransaction_Type_ReservedFunds
    "stripe_fee" -> pure BalanceTransaction_Type_StripeFee
    "stripe_fx_fee" -> pure BalanceTransaction_Type_StripeFxFee
    "tax_fee" -> pure BalanceTransaction_Type_TaxFee
    "topup" -> pure BalanceTransaction_Type_Topup
    "topup_reversal" -> pure BalanceTransaction_Type_TopupReversal
    "transfer" -> pure BalanceTransaction_Type_Transfer
    "transfer_cancel" -> pure BalanceTransaction_Type_TransferCancel
    "transfer_failure" -> pure BalanceTransaction_Type_TransferFailure
    "transfer_refund" -> pure BalanceTransaction_Type_TransferRefund
    str -> fail (show str <> " is not a known valid option for BalanceTransaction_Type")

data Balance_Object
  = Balance_Object_Balance
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON Balance_Object where
  toJSON e = Text $ case e of
    Balance_Object_Balance -> "balance"

instance FromJSON Balance_Object where
  parseJSON = withText "Balance_Object" $ \case
    "balance" -> pure Balance_Object_Balance
    str -> fail (show str <> " is not a known valid option for Balance_Object")

data BankAccount_Object
  = BankAccount_Object_BankAccount
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON BankAccount_Object where
  toJSON e = Text $ case e of
    BankAccount_Object_BankAccount -> "bank_account"

instance FromJSON BankAccount_Object where
  parseJSON = withText "BankAccount_Object" $ \case
    "bank_account" -> pure BankAccount_Object_BankAccount
    str -> fail (show str <> " is not a known valid option for BankAccount_Object")

data Billing
  = Billing_ChargeAutomatically
  | Billing_SendInvoice
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON Billing where
  toJSON e = Text $ case e of
    Billing_ChargeAutomatically -> "charge_automatically"
    Billing_SendInvoice -> "send_invoice"

instance FromJSON Billing where
  parseJSON = withText "Billing" $ \case
    "charge_automatically" -> pure Billing_ChargeAutomatically
    "send_invoice" -> pure Billing_SendInvoice
    str -> fail (show str <> " is not a known valid option for Billing")

data BitcoinReceiver_Object
  = BitcoinReceiver_Object_BitcoinReceiver
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON BitcoinReceiver_Object where
  toJSON e = Text $ case e of
    BitcoinReceiver_Object_BitcoinReceiver -> "bitcoin_receiver"

instance FromJSON BitcoinReceiver_Object where
  parseJSON = withText "BitcoinReceiver_Object" $ \case
    "bitcoin_receiver" -> pure BitcoinReceiver_Object_BitcoinReceiver
    str -> fail (show str <> " is not a known valid option for BitcoinReceiver_Object")

data BitcoinTransaction_Object
  = BitcoinTransaction_Object_BitcoinTransaction
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON BitcoinTransaction_Object where
  toJSON e = Text $ case e of
    BitcoinTransaction_Object_BitcoinTransaction -> "bitcoin_transaction"

instance FromJSON BitcoinTransaction_Object where
  parseJSON = withText "BitcoinTransaction_Object" $ \case
    "bitcoin_transaction" -> pure BitcoinTransaction_Object_BitcoinTransaction
    str -> fail (show str <> " is not a known valid option for BitcoinTransaction_Object")

data Capability_Object
  = Capability_Object_Capability
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON Capability_Object where
  toJSON e = Text $ case e of
    Capability_Object_Capability -> "capability"

instance FromJSON Capability_Object where
  parseJSON = withText "Capability_Object" $ \case
    "capability" -> pure Capability_Object_Capability
    str -> fail (show str <> " is not a known valid option for Capability_Object")

data Capability_Status
  = Capability_Status_Active
  | Capability_Status_Disabled
  | Capability_Status_Inactive
  | Capability_Status_Pending
  | Capability_Status_Unrequested
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON Capability_Status where
  toJSON e = Text $ case e of
    Capability_Status_Active -> "active"
    Capability_Status_Disabled -> "disabled"
    Capability_Status_Inactive -> "inactive"
    Capability_Status_Pending -> "pending"
    Capability_Status_Unrequested -> "unrequested"

instance FromJSON Capability_Status where
  parseJSON = withText "Capability_Status" $ \case
    "active" -> pure Capability_Status_Active
    "disabled" -> pure Capability_Status_Disabled
    "inactive" -> pure Capability_Status_Inactive
    "pending" -> pure Capability_Status_Pending
    "unrequested" -> pure Capability_Status_Unrequested
    str -> fail (show str <> " is not a known valid option for Capability_Status")

data Card_AvailablePayoutMethods
  = Card_AvailablePayoutMethods_Instant
  | Card_AvailablePayoutMethods_Standard
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON Card_AvailablePayoutMethods where
  toJSON e = Text $ case e of
    Card_AvailablePayoutMethods_Instant -> "instant"
    Card_AvailablePayoutMethods_Standard -> "standard"

instance FromJSON Card_AvailablePayoutMethods where
  parseJSON = withText "Card_AvailablePayoutMethods" $ \case
    "instant" -> pure Card_AvailablePayoutMethods_Instant
    "standard" -> pure Card_AvailablePayoutMethods_Standard
    str -> fail (show str <> " is not a known valid option for Card_AvailablePayoutMethods")

data Card_Object
  = Card_Object_Card
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON Card_Object where
  toJSON e = Text $ case e of
    Card_Object_Card -> "card"

instance FromJSON Card_Object where
  parseJSON = withText "Card_Object" $ \case
    "card" -> pure Card_Object_Card
    str -> fail (show str <> " is not a known valid option for Card_Object")

data Charge_Object
  = Charge_Object_Charge
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON Charge_Object where
  toJSON e = Text $ case e of
    Charge_Object_Charge -> "charge"

instance FromJSON Charge_Object where
  parseJSON = withText "Charge_Object" $ \case
    "charge" -> pure Charge_Object_Charge
    str -> fail (show str <> " is not a known valid option for Charge_Object")

data Checkout_Session_Locale
  = Checkout_Session_Locale_Auto
  | Checkout_Session_Locale_Da
  | Checkout_Session_Locale_De
  | Checkout_Session_Locale_En
  | Checkout_Session_Locale_Es
  | Checkout_Session_Locale_Fi
  | Checkout_Session_Locale_Fr
  | Checkout_Session_Locale_It
  | Checkout_Session_Locale_Ja
  | Checkout_Session_Locale_Nb
  | Checkout_Session_Locale_Nl
  | Checkout_Session_Locale_Pl
  | Checkout_Session_Locale_Pt
  | Checkout_Session_Locale_Sv
  | Checkout_Session_Locale_Zh
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON Checkout_Session_Locale where
  toJSON e = Text $ case e of
    Checkout_Session_Locale_Auto -> "auto"
    Checkout_Session_Locale_Da -> "da"
    Checkout_Session_Locale_De -> "de"
    Checkout_Session_Locale_En -> "en"
    Checkout_Session_Locale_Es -> "es"
    Checkout_Session_Locale_Fi -> "fi"
    Checkout_Session_Locale_Fr -> "fr"
    Checkout_Session_Locale_It -> "it"
    Checkout_Session_Locale_Ja -> "ja"
    Checkout_Session_Locale_Nb -> "nb"
    Checkout_Session_Locale_Nl -> "nl"
    Checkout_Session_Locale_Pl -> "pl"
    Checkout_Session_Locale_Pt -> "pt"
    Checkout_Session_Locale_Sv -> "sv"
    Checkout_Session_Locale_Zh -> "zh"

instance FromJSON Checkout_Session_Locale where
  parseJSON = withText "Checkout_Session_Locale" $ \case
    "auto" -> pure Checkout_Session_Locale_Auto
    "da" -> pure Checkout_Session_Locale_Da
    "de" -> pure Checkout_Session_Locale_De
    "en" -> pure Checkout_Session_Locale_En
    "es" -> pure Checkout_Session_Locale_Es
    "fi" -> pure Checkout_Session_Locale_Fi
    "fr" -> pure Checkout_Session_Locale_Fr
    "it" -> pure Checkout_Session_Locale_It
    "ja" -> pure Checkout_Session_Locale_Ja
    "nb" -> pure Checkout_Session_Locale_Nb
    "nl" -> pure Checkout_Session_Locale_Nl
    "pl" -> pure Checkout_Session_Locale_Pl
    "pt" -> pure Checkout_Session_Locale_Pt
    "sv" -> pure Checkout_Session_Locale_Sv
    "zh" -> pure Checkout_Session_Locale_Zh
    str -> fail (show str <> " is not a known valid option for Checkout_Session_Locale")

data Checkout_Session_Mode
  = Checkout_Session_Mode_Payment
  | Checkout_Session_Mode_Setup
  | Checkout_Session_Mode_Subscription
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON Checkout_Session_Mode where
  toJSON e = Text $ case e of
    Checkout_Session_Mode_Payment -> "payment"
    Checkout_Session_Mode_Setup -> "setup"
    Checkout_Session_Mode_Subscription -> "subscription"

instance FromJSON Checkout_Session_Mode where
  parseJSON = withText "Checkout_Session_Mode" $ \case
    "payment" -> pure Checkout_Session_Mode_Payment
    "setup" -> pure Checkout_Session_Mode_Setup
    "subscription" -> pure Checkout_Session_Mode_Subscription
    str -> fail (show str <> " is not a known valid option for Checkout_Session_Mode")

data Checkout_Session_Object
  = Checkout_Session_Object_Checkout_Session
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON Checkout_Session_Object where
  toJSON e = Text $ case e of
    Checkout_Session_Object_Checkout_Session -> "checkout.session"

instance FromJSON Checkout_Session_Object where
  parseJSON = withText "Checkout_Session_Object" $ \case
    "checkout.session" -> pure Checkout_Session_Object_Checkout_Session
    str -> fail (show str <> " is not a known valid option for Checkout_Session_Object")

data Checkout_Session_SubmitType
  = Checkout_Session_SubmitType_Auto
  | Checkout_Session_SubmitType_Book
  | Checkout_Session_SubmitType_Donate
  | Checkout_Session_SubmitType_Pay
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON Checkout_Session_SubmitType where
  toJSON e = Text $ case e of
    Checkout_Session_SubmitType_Auto -> "auto"
    Checkout_Session_SubmitType_Book -> "book"
    Checkout_Session_SubmitType_Donate -> "donate"
    Checkout_Session_SubmitType_Pay -> "pay"

instance FromJSON Checkout_Session_SubmitType where
  parseJSON = withText "Checkout_Session_SubmitType" $ \case
    "auto" -> pure Checkout_Session_SubmitType_Auto
    "book" -> pure Checkout_Session_SubmitType_Book
    "donate" -> pure Checkout_Session_SubmitType_Donate
    "pay" -> pure Checkout_Session_SubmitType_Pay
    str -> fail (show str <> " is not a known valid option for Checkout_Session_SubmitType")

data CollectionMethod
  = CollectionMethod_ChargeAutomatically
  | CollectionMethod_SendInvoice
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON CollectionMethod where
  toJSON e = Text $ case e of
    CollectionMethod_ChargeAutomatically -> "charge_automatically"
    CollectionMethod_SendInvoice -> "send_invoice"

instance FromJSON CollectionMethod where
  parseJSON = withText "CollectionMethod" $ \case
    "charge_automatically" -> pure CollectionMethod_ChargeAutomatically
    "send_invoice" -> pure CollectionMethod_SendInvoice
    str -> fail (show str <> " is not a known valid option for CollectionMethod")

data ConnectCollectionTransfer_Object
  = ConnectCollectionTransfer_Object_ConnectCollectionTransfer
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON ConnectCollectionTransfer_Object where
  toJSON e = Text $ case e of
    ConnectCollectionTransfer_Object_ConnectCollectionTransfer -> "connect_collection_transfer"

instance FromJSON ConnectCollectionTransfer_Object where
  parseJSON = withText "ConnectCollectionTransfer_Object" $ \case
    "connect_collection_transfer" -> pure ConnectCollectionTransfer_Object_ConnectCollectionTransfer
    str -> fail (show str <> " is not a known valid option for ConnectCollectionTransfer_Object")

data CountrySpec_Object
  = CountrySpec_Object_CountrySpec
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON CountrySpec_Object where
  toJSON e = Text $ case e of
    CountrySpec_Object_CountrySpec -> "country_spec"

instance FromJSON CountrySpec_Object where
  parseJSON = withText "CountrySpec_Object" $ \case
    "country_spec" -> pure CountrySpec_Object_CountrySpec
    str -> fail (show str <> " is not a known valid option for CountrySpec_Object")

data Coupon_Duration
  = Coupon_Duration_Forever
  | Coupon_Duration_Once
  | Coupon_Duration_Repeating
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON Coupon_Duration where
  toJSON e = Text $ case e of
    Coupon_Duration_Forever -> "forever"
    Coupon_Duration_Once -> "once"
    Coupon_Duration_Repeating -> "repeating"

instance FromJSON Coupon_Duration where
  parseJSON = withText "Coupon_Duration" $ \case
    "forever" -> pure Coupon_Duration_Forever
    "once" -> pure Coupon_Duration_Once
    "repeating" -> pure Coupon_Duration_Repeating
    str -> fail (show str <> " is not a known valid option for Coupon_Duration")

data Coupon_Object
  = Coupon_Object_Coupon
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON Coupon_Object where
  toJSON e = Text $ case e of
    Coupon_Object_Coupon -> "coupon"

instance FromJSON Coupon_Object where
  parseJSON = withText "Coupon_Object" $ \case
    "coupon" -> pure Coupon_Object_Coupon
    str -> fail (show str <> " is not a known valid option for Coupon_Object")

data CreditNote_Object
  = CreditNote_Object_CreditNote
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON CreditNote_Object where
  toJSON e = Text $ case e of
    CreditNote_Object_CreditNote -> "credit_note"

instance FromJSON CreditNote_Object where
  parseJSON = withText "CreditNote_Object" $ \case
    "credit_note" -> pure CreditNote_Object_CreditNote
    str -> fail (show str <> " is not a known valid option for CreditNote_Object")

data CreditNote_Reason
  = CreditNote_Reason_Duplicate
  | CreditNote_Reason_Fraudulent
  | CreditNote_Reason_OrderChange
  | CreditNote_Reason_ProductUnsatisfactory
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON CreditNote_Reason where
  toJSON e = Text $ case e of
    CreditNote_Reason_Duplicate -> "duplicate"
    CreditNote_Reason_Fraudulent -> "fraudulent"
    CreditNote_Reason_OrderChange -> "order_change"
    CreditNote_Reason_ProductUnsatisfactory -> "product_unsatisfactory"

instance FromJSON CreditNote_Reason where
  parseJSON = withText "CreditNote_Reason" $ \case
    "duplicate" -> pure CreditNote_Reason_Duplicate
    "fraudulent" -> pure CreditNote_Reason_Fraudulent
    "order_change" -> pure CreditNote_Reason_OrderChange
    "product_unsatisfactory" -> pure CreditNote_Reason_ProductUnsatisfactory
    str -> fail (show str <> " is not a known valid option for CreditNote_Reason")

data CreditNote_Status
  = CreditNote_Status_Issued
  | CreditNote_Status_Void
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON CreditNote_Status where
  toJSON e = Text $ case e of
    CreditNote_Status_Issued -> "issued"
    CreditNote_Status_Void -> "void"

instance FromJSON CreditNote_Status where
  parseJSON = withText "CreditNote_Status" $ \case
    "issued" -> pure CreditNote_Status_Issued
    "void" -> pure CreditNote_Status_Void
    str -> fail (show str <> " is not a known valid option for CreditNote_Status")

data CreditNote_Type
  = CreditNote_Type_PostPayment
  | CreditNote_Type_PrePayment
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON CreditNote_Type where
  toJSON e = Text $ case e of
    CreditNote_Type_PostPayment -> "post_payment"
    CreditNote_Type_PrePayment -> "pre_payment"

instance FromJSON CreditNote_Type where
  parseJSON = withText "CreditNote_Type" $ \case
    "post_payment" -> pure CreditNote_Type_PostPayment
    "pre_payment" -> pure CreditNote_Type_PrePayment
    str -> fail (show str <> " is not a known valid option for CreditNote_Type")

data CustomerBalanceTransaction_Object
  = CustomerBalanceTransaction_Object_CustomerBalanceTransaction
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON CustomerBalanceTransaction_Object where
  toJSON e = Text $ case e of
    CustomerBalanceTransaction_Object_CustomerBalanceTransaction -> "customer_balance_transaction"

instance FromJSON CustomerBalanceTransaction_Object where
  parseJSON = withText "CustomerBalanceTransaction_Object" $ \case
    "customer_balance_transaction" -> pure CustomerBalanceTransaction_Object_CustomerBalanceTransaction
    str -> fail (show str <> " is not a known valid option for CustomerBalanceTransaction_Object")

data CustomerBalanceTransaction_Type
  = CustomerBalanceTransaction_Type_Adjustment
  | CustomerBalanceTransaction_Type_AppliedToInvoice
  | CustomerBalanceTransaction_Type_CreditNote
  | CustomerBalanceTransaction_Type_Initial
  | CustomerBalanceTransaction_Type_InvoiceTooLarge
  | CustomerBalanceTransaction_Type_InvoiceTooSmall
  | CustomerBalanceTransaction_Type_Migration
  | CustomerBalanceTransaction_Type_UnspentReceiverCredit
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON CustomerBalanceTransaction_Type where
  toJSON e = Text $ case e of
    CustomerBalanceTransaction_Type_Adjustment -> "adjustment"
    CustomerBalanceTransaction_Type_AppliedToInvoice -> "applied_to_invoice"
    CustomerBalanceTransaction_Type_CreditNote -> "credit_note"
    CustomerBalanceTransaction_Type_Initial -> "initial"
    CustomerBalanceTransaction_Type_InvoiceTooLarge -> "invoice_too_large"
    CustomerBalanceTransaction_Type_InvoiceTooSmall -> "invoice_too_small"
    CustomerBalanceTransaction_Type_Migration -> "migration"
    CustomerBalanceTransaction_Type_UnspentReceiverCredit -> "unspent_receiver_credit"

instance FromJSON CustomerBalanceTransaction_Type where
  parseJSON = withText "CustomerBalanceTransaction_Type" $ \case
    "adjustment" -> pure CustomerBalanceTransaction_Type_Adjustment
    "applied_to_invoice" -> pure CustomerBalanceTransaction_Type_AppliedToInvoice
    "credit_note" -> pure CustomerBalanceTransaction_Type_CreditNote
    "initial" -> pure CustomerBalanceTransaction_Type_Initial
    "invoice_too_large" -> pure CustomerBalanceTransaction_Type_InvoiceTooLarge
    "invoice_too_small" -> pure CustomerBalanceTransaction_Type_InvoiceTooSmall
    "migration" -> pure CustomerBalanceTransaction_Type_Migration
    "unspent_receiver_credit" -> pure CustomerBalanceTransaction_Type_UnspentReceiverCredit
    str -> fail (show str <> " is not a known valid option for CustomerBalanceTransaction_Type")

data Customer_Object
  = Customer_Object_Customer
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON Customer_Object where
  toJSON e = Text $ case e of
    Customer_Object_Customer -> "customer"

instance FromJSON Customer_Object where
  parseJSON = withText "Customer_Object" $ \case
    "customer" -> pure Customer_Object_Customer
    str -> fail (show str <> " is not a known valid option for Customer_Object")

data Customer_TaxExempt
  = Customer_TaxExempt_Exempt
  | Customer_TaxExempt_None
  | Customer_TaxExempt_Reverse
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON Customer_TaxExempt where
  toJSON e = Text $ case e of
    Customer_TaxExempt_Exempt -> "exempt"
    Customer_TaxExempt_None -> "none"
    Customer_TaxExempt_Reverse -> "reverse"

instance FromJSON Customer_TaxExempt where
  parseJSON = withText "Customer_TaxExempt" $ \case
    "exempt" -> pure Customer_TaxExempt_Exempt
    "none" -> pure Customer_TaxExempt_None
    "reverse" -> pure Customer_TaxExempt_Reverse
    str -> fail (show str <> " is not a known valid option for Customer_TaxExempt")

data DeletedAccount_Object
  = DeletedAccount_Object_Account
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON DeletedAccount_Object where
  toJSON e = Text $ case e of
    DeletedAccount_Object_Account -> "account"

instance FromJSON DeletedAccount_Object where
  parseJSON = withText "DeletedAccount_Object" $ \case
    "account" -> pure DeletedAccount_Object_Account
    str -> fail (show str <> " is not a known valid option for DeletedAccount_Object")

data DeletedAlipayAccount_Object
  = DeletedAlipayAccount_Object_AlipayAccount
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON DeletedAlipayAccount_Object where
  toJSON e = Text $ case e of
    DeletedAlipayAccount_Object_AlipayAccount -> "alipay_account"

instance FromJSON DeletedAlipayAccount_Object where
  parseJSON = withText "DeletedAlipayAccount_Object" $ \case
    "alipay_account" -> pure DeletedAlipayAccount_Object_AlipayAccount
    str -> fail (show str <> " is not a known valid option for DeletedAlipayAccount_Object")

data DeletedApplePayDomain_Object
  = DeletedApplePayDomain_Object_ApplePayDomain
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON DeletedApplePayDomain_Object where
  toJSON e = Text $ case e of
    DeletedApplePayDomain_Object_ApplePayDomain -> "apple_pay_domain"

instance FromJSON DeletedApplePayDomain_Object where
  parseJSON = withText "DeletedApplePayDomain_Object" $ \case
    "apple_pay_domain" -> pure DeletedApplePayDomain_Object_ApplePayDomain
    str -> fail (show str <> " is not a known valid option for DeletedApplePayDomain_Object")

data DeletedBankAccount_Object
  = DeletedBankAccount_Object_BankAccount
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON DeletedBankAccount_Object where
  toJSON e = Text $ case e of
    DeletedBankAccount_Object_BankAccount -> "bank_account"

instance FromJSON DeletedBankAccount_Object where
  parseJSON = withText "DeletedBankAccount_Object" $ \case
    "bank_account" -> pure DeletedBankAccount_Object_BankAccount
    str -> fail (show str <> " is not a known valid option for DeletedBankAccount_Object")

data DeletedBitcoinReceiver_Object
  = DeletedBitcoinReceiver_Object_BitcoinReceiver
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON DeletedBitcoinReceiver_Object where
  toJSON e = Text $ case e of
    DeletedBitcoinReceiver_Object_BitcoinReceiver -> "bitcoin_receiver"

instance FromJSON DeletedBitcoinReceiver_Object where
  parseJSON = withText "DeletedBitcoinReceiver_Object" $ \case
    "bitcoin_receiver" -> pure DeletedBitcoinReceiver_Object_BitcoinReceiver
    str -> fail (show str <> " is not a known valid option for DeletedBitcoinReceiver_Object")

data DeletedCard_Object
  = DeletedCard_Object_Card
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON DeletedCard_Object where
  toJSON e = Text $ case e of
    DeletedCard_Object_Card -> "card"

instance FromJSON DeletedCard_Object where
  parseJSON = withText "DeletedCard_Object" $ \case
    "card" -> pure DeletedCard_Object_Card
    str -> fail (show str <> " is not a known valid option for DeletedCard_Object")

data DeletedCoupon_Object
  = DeletedCoupon_Object_Coupon
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON DeletedCoupon_Object where
  toJSON e = Text $ case e of
    DeletedCoupon_Object_Coupon -> "coupon"

instance FromJSON DeletedCoupon_Object where
  parseJSON = withText "DeletedCoupon_Object" $ \case
    "coupon" -> pure DeletedCoupon_Object_Coupon
    str -> fail (show str <> " is not a known valid option for DeletedCoupon_Object")

data DeletedCustomer_Object
  = DeletedCustomer_Object_Customer
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON DeletedCustomer_Object where
  toJSON e = Text $ case e of
    DeletedCustomer_Object_Customer -> "customer"

instance FromJSON DeletedCustomer_Object where
  parseJSON = withText "DeletedCustomer_Object" $ \case
    "customer" -> pure DeletedCustomer_Object_Customer
    str -> fail (show str <> " is not a known valid option for DeletedCustomer_Object")

data DeletedDiscount_Object
  = DeletedDiscount_Object_Discount
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON DeletedDiscount_Object where
  toJSON e = Text $ case e of
    DeletedDiscount_Object_Discount -> "discount"

instance FromJSON DeletedDiscount_Object where
  parseJSON = withText "DeletedDiscount_Object" $ \case
    "discount" -> pure DeletedDiscount_Object_Discount
    str -> fail (show str <> " is not a known valid option for DeletedDiscount_Object")

data DeletedInvoice_Object
  = DeletedInvoice_Object_Invoice
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON DeletedInvoice_Object where
  toJSON e = Text $ case e of
    DeletedInvoice_Object_Invoice -> "invoice"

instance FromJSON DeletedInvoice_Object where
  parseJSON = withText "DeletedInvoice_Object" $ \case
    "invoice" -> pure DeletedInvoice_Object_Invoice
    str -> fail (show str <> " is not a known valid option for DeletedInvoice_Object")

data DeletedInvoiceitem_Object
  = DeletedInvoiceitem_Object_Invoiceitem
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON DeletedInvoiceitem_Object where
  toJSON e = Text $ case e of
    DeletedInvoiceitem_Object_Invoiceitem -> "invoiceitem"

instance FromJSON DeletedInvoiceitem_Object where
  parseJSON = withText "DeletedInvoiceitem_Object" $ \case
    "invoiceitem" -> pure DeletedInvoiceitem_Object_Invoiceitem
    str -> fail (show str <> " is not a known valid option for DeletedInvoiceitem_Object")

data DeletedPerson_Object
  = DeletedPerson_Object_Person
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON DeletedPerson_Object where
  toJSON e = Text $ case e of
    DeletedPerson_Object_Person -> "person"

instance FromJSON DeletedPerson_Object where
  parseJSON = withText "DeletedPerson_Object" $ \case
    "person" -> pure DeletedPerson_Object_Person
    str -> fail (show str <> " is not a known valid option for DeletedPerson_Object")

data DeletedPlan_Object
  = DeletedPlan_Object_Plan
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON DeletedPlan_Object where
  toJSON e = Text $ case e of
    DeletedPlan_Object_Plan -> "plan"

instance FromJSON DeletedPlan_Object where
  parseJSON = withText "DeletedPlan_Object" $ \case
    "plan" -> pure DeletedPlan_Object_Plan
    str -> fail (show str <> " is not a known valid option for DeletedPlan_Object")

data DeletedProduct_Object
  = DeletedProduct_Object_Product
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON DeletedProduct_Object where
  toJSON e = Text $ case e of
    DeletedProduct_Object_Product -> "product"

instance FromJSON DeletedProduct_Object where
  parseJSON = withText "DeletedProduct_Object" $ \case
    "product" -> pure DeletedProduct_Object_Product
    str -> fail (show str <> " is not a known valid option for DeletedProduct_Object")

data DeletedRadar_ValueListItem_Object
  = DeletedRadar_ValueListItem_Object_Radar_ValueListItem
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON DeletedRadar_ValueListItem_Object where
  toJSON e = Text $ case e of
    DeletedRadar_ValueListItem_Object_Radar_ValueListItem -> "radar.value_list_item"

instance FromJSON DeletedRadar_ValueListItem_Object where
  parseJSON = withText "DeletedRadar_ValueListItem_Object" $ \case
    "radar.value_list_item" -> pure DeletedRadar_ValueListItem_Object_Radar_ValueListItem
    str -> fail (show str <> " is not a known valid option for DeletedRadar_ValueListItem_Object")

data DeletedRadar_ValueList_Object
  = DeletedRadar_ValueList_Object_Radar_ValueList
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON DeletedRadar_ValueList_Object where
  toJSON e = Text $ case e of
    DeletedRadar_ValueList_Object_Radar_ValueList -> "radar.value_list"

instance FromJSON DeletedRadar_ValueList_Object where
  parseJSON = withText "DeletedRadar_ValueList_Object" $ \case
    "radar.value_list" -> pure DeletedRadar_ValueList_Object_Radar_ValueList
    str -> fail (show str <> " is not a known valid option for DeletedRadar_ValueList_Object")

data DeletedRecipient_Object
  = DeletedRecipient_Object_Recipient
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON DeletedRecipient_Object where
  toJSON e = Text $ case e of
    DeletedRecipient_Object_Recipient -> "recipient"

instance FromJSON DeletedRecipient_Object where
  parseJSON = withText "DeletedRecipient_Object" $ \case
    "recipient" -> pure DeletedRecipient_Object_Recipient
    str -> fail (show str <> " is not a known valid option for DeletedRecipient_Object")

data DeletedSku_Object
  = DeletedSku_Object_Sku
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON DeletedSku_Object where
  toJSON e = Text $ case e of
    DeletedSku_Object_Sku -> "sku"

instance FromJSON DeletedSku_Object where
  parseJSON = withText "DeletedSku_Object" $ \case
    "sku" -> pure DeletedSku_Object_Sku
    str -> fail (show str <> " is not a known valid option for DeletedSku_Object")

data DeletedSubscriptionItem_Object
  = DeletedSubscriptionItem_Object_SubscriptionItem
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON DeletedSubscriptionItem_Object where
  toJSON e = Text $ case e of
    DeletedSubscriptionItem_Object_SubscriptionItem -> "subscription_item"

instance FromJSON DeletedSubscriptionItem_Object where
  parseJSON = withText "DeletedSubscriptionItem_Object" $ \case
    "subscription_item" -> pure DeletedSubscriptionItem_Object_SubscriptionItem
    str -> fail (show str <> " is not a known valid option for DeletedSubscriptionItem_Object")

data DeletedTaxId_Object
  = DeletedTaxId_Object_TaxId
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON DeletedTaxId_Object where
  toJSON e = Text $ case e of
    DeletedTaxId_Object_TaxId -> "tax_id"

instance FromJSON DeletedTaxId_Object where
  parseJSON = withText "DeletedTaxId_Object" $ \case
    "tax_id" -> pure DeletedTaxId_Object_TaxId
    str -> fail (show str <> " is not a known valid option for DeletedTaxId_Object")

data DeletedTerminal_Location_Object
  = DeletedTerminal_Location_Object_Terminal_Location
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON DeletedTerminal_Location_Object where
  toJSON e = Text $ case e of
    DeletedTerminal_Location_Object_Terminal_Location -> "terminal.location"

instance FromJSON DeletedTerminal_Location_Object where
  parseJSON = withText "DeletedTerminal_Location_Object" $ \case
    "terminal.location" -> pure DeletedTerminal_Location_Object_Terminal_Location
    str -> fail (show str <> " is not a known valid option for DeletedTerminal_Location_Object")

data DeletedTerminal_Reader_Object
  = DeletedTerminal_Reader_Object_Terminal_Reader
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON DeletedTerminal_Reader_Object where
  toJSON e = Text $ case e of
    DeletedTerminal_Reader_Object_Terminal_Reader -> "terminal.reader"

instance FromJSON DeletedTerminal_Reader_Object where
  parseJSON = withText "DeletedTerminal_Reader_Object" $ \case
    "terminal.reader" -> pure DeletedTerminal_Reader_Object_Terminal_Reader
    str -> fail (show str <> " is not a known valid option for DeletedTerminal_Reader_Object")

data DeletedWebhookEndpoint_Object
  = DeletedWebhookEndpoint_Object_WebhookEndpoint
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON DeletedWebhookEndpoint_Object where
  toJSON e = Text $ case e of
    DeletedWebhookEndpoint_Object_WebhookEndpoint -> "webhook_endpoint"

instance FromJSON DeletedWebhookEndpoint_Object where
  parseJSON = withText "DeletedWebhookEndpoint_Object" $ \case
    "webhook_endpoint" -> pure DeletedWebhookEndpoint_Object_WebhookEndpoint
    str -> fail (show str <> " is not a known valid option for DeletedWebhookEndpoint_Object")

data Discount_Object
  = Discount_Object_Discount
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON Discount_Object where
  toJSON e = Text $ case e of
    Discount_Object_Discount -> "discount"

instance FromJSON Discount_Object where
  parseJSON = withText "Discount_Object" $ \case
    "discount" -> pure Discount_Object_Discount
    str -> fail (show str <> " is not a known valid option for Discount_Object")

data Dispute_Object
  = Dispute_Object_Dispute
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON Dispute_Object where
  toJSON e = Text $ case e of
    Dispute_Object_Dispute -> "dispute"

instance FromJSON Dispute_Object where
  parseJSON = withText "Dispute_Object" $ \case
    "dispute" -> pure Dispute_Object_Dispute
    str -> fail (show str <> " is not a known valid option for Dispute_Object")

data Dispute_Status
  = Dispute_Status_ChargeRefunded
  | Dispute_Status_Lost
  | Dispute_Status_NeedsResponse
  | Dispute_Status_UnderReview
  | Dispute_Status_WarningClosed
  | Dispute_Status_WarningNeedsResponse
  | Dispute_Status_WarningUnderReview
  | Dispute_Status_Won
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON Dispute_Status where
  toJSON e = Text $ case e of
    Dispute_Status_ChargeRefunded -> "charge_refunded"
    Dispute_Status_Lost -> "lost"
    Dispute_Status_NeedsResponse -> "needs_response"
    Dispute_Status_UnderReview -> "under_review"
    Dispute_Status_WarningClosed -> "warning_closed"
    Dispute_Status_WarningNeedsResponse -> "warning_needs_response"
    Dispute_Status_WarningUnderReview -> "warning_under_review"
    Dispute_Status_Won -> "won"

instance FromJSON Dispute_Status where
  parseJSON = withText "Dispute_Status" $ \case
    "charge_refunded" -> pure Dispute_Status_ChargeRefunded
    "lost" -> pure Dispute_Status_Lost
    "needs_response" -> pure Dispute_Status_NeedsResponse
    "under_review" -> pure Dispute_Status_UnderReview
    "warning_closed" -> pure Dispute_Status_WarningClosed
    "warning_needs_response" -> pure Dispute_Status_WarningNeedsResponse
    "warning_under_review" -> pure Dispute_Status_WarningUnderReview
    "won" -> pure Dispute_Status_Won
    str -> fail (show str <> " is not a known valid option for Dispute_Status")

data EphemeralKey_Object
  = EphemeralKey_Object_EphemeralKey
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON EphemeralKey_Object where
  toJSON e = Text $ case e of
    EphemeralKey_Object_EphemeralKey -> "ephemeral_key"

instance FromJSON EphemeralKey_Object where
  parseJSON = withText "EphemeralKey_Object" $ \case
    "ephemeral_key" -> pure EphemeralKey_Object_EphemeralKey
    str -> fail (show str <> " is not a known valid option for EphemeralKey_Object")

data Event_Object
  = Event_Object_Event
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON Event_Object where
  toJSON e = Text $ case e of
    Event_Object_Event -> "event"

instance FromJSON Event_Object where
  parseJSON = withText "Event_Object" $ \case
    "event" -> pure Event_Object_Event
    str -> fail (show str <> " is not a known valid option for Event_Object")

data ExchangeRate_Object
  = ExchangeRate_Object_ExchangeRate
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON ExchangeRate_Object where
  toJSON e = Text $ case e of
    ExchangeRate_Object_ExchangeRate -> "exchange_rate"

instance FromJSON ExchangeRate_Object where
  parseJSON = withText "ExchangeRate_Object" $ \case
    "exchange_rate" -> pure ExchangeRate_Object_ExchangeRate
    str -> fail (show str <> " is not a known valid option for ExchangeRate_Object")

data FeeRefund_Object
  = FeeRefund_Object_FeeRefund
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON FeeRefund_Object where
  toJSON e = Text $ case e of
    FeeRefund_Object_FeeRefund -> "fee_refund"

instance FromJSON FeeRefund_Object where
  parseJSON = withText "FeeRefund_Object" $ \case
    "fee_refund" -> pure FeeRefund_Object_FeeRefund
    str -> fail (show str <> " is not a known valid option for FeeRefund_Object")

data FileLink_Object
  = FileLink_Object_FileLink
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON FileLink_Object where
  toJSON e = Text $ case e of
    FileLink_Object_FileLink -> "file_link"

instance FromJSON FileLink_Object where
  parseJSON = withText "FileLink_Object" $ \case
    "file_link" -> pure FileLink_Object_FileLink
    str -> fail (show str <> " is not a known valid option for FileLink_Object")

data File_Object
  = File_Object_File
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON File_Object where
  toJSON e = Text $ case e of
    File_Object_File -> "file"

instance FromJSON File_Object where
  parseJSON = withText "File_Object" $ \case
    "file" -> pure File_Object_File
    str -> fail (show str <> " is not a known valid option for File_Object")

data Invoice_Billing
  = Invoice_Billing_ChargeAutomatically
  | Invoice_Billing_SendInvoice
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON Invoice_Billing where
  toJSON e = Text $ case e of
    Invoice_Billing_ChargeAutomatically -> "charge_automatically"
    Invoice_Billing_SendInvoice -> "send_invoice"

instance FromJSON Invoice_Billing where
  parseJSON = withText "Invoice_Billing" $ \case
    "charge_automatically" -> pure Invoice_Billing_ChargeAutomatically
    "send_invoice" -> pure Invoice_Billing_SendInvoice
    str -> fail (show str <> " is not a known valid option for Invoice_Billing")

data Invoice_BillingReason
  = Invoice_BillingReason_AutomaticPendingInvoiceItemInvoice
  | Invoice_BillingReason_Manual
  | Invoice_BillingReason_Subscription
  | Invoice_BillingReason_SubscriptionCreate
  | Invoice_BillingReason_SubscriptionCycle
  | Invoice_BillingReason_SubscriptionThreshold
  | Invoice_BillingReason_SubscriptionUpdate
  | Invoice_BillingReason_Upcoming
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON Invoice_BillingReason where
  toJSON e = Text $ case e of
    Invoice_BillingReason_AutomaticPendingInvoiceItemInvoice -> "automatic_pending_invoice_item_invoice"
    Invoice_BillingReason_Manual -> "manual"
    Invoice_BillingReason_Subscription -> "subscription"
    Invoice_BillingReason_SubscriptionCreate -> "subscription_create"
    Invoice_BillingReason_SubscriptionCycle -> "subscription_cycle"
    Invoice_BillingReason_SubscriptionThreshold -> "subscription_threshold"
    Invoice_BillingReason_SubscriptionUpdate -> "subscription_update"
    Invoice_BillingReason_Upcoming -> "upcoming"

instance FromJSON Invoice_BillingReason where
  parseJSON = withText "Invoice_BillingReason" $ \case
    "automatic_pending_invoice_item_invoice" -> pure Invoice_BillingReason_AutomaticPendingInvoiceItemInvoice
    "manual" -> pure Invoice_BillingReason_Manual
    "subscription" -> pure Invoice_BillingReason_Subscription
    "subscription_create" -> pure Invoice_BillingReason_SubscriptionCreate
    "subscription_cycle" -> pure Invoice_BillingReason_SubscriptionCycle
    "subscription_threshold" -> pure Invoice_BillingReason_SubscriptionThreshold
    "subscription_update" -> pure Invoice_BillingReason_SubscriptionUpdate
    "upcoming" -> pure Invoice_BillingReason_Upcoming
    str -> fail (show str <> " is not a known valid option for Invoice_BillingReason")

data Invoice_CollectionMethod
  = Invoice_CollectionMethod_ChargeAutomatically
  | Invoice_CollectionMethod_SendInvoice
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON Invoice_CollectionMethod where
  toJSON e = Text $ case e of
    Invoice_CollectionMethod_ChargeAutomatically -> "charge_automatically"
    Invoice_CollectionMethod_SendInvoice -> "send_invoice"

instance FromJSON Invoice_CollectionMethod where
  parseJSON = withText "Invoice_CollectionMethod" $ \case
    "charge_automatically" -> pure Invoice_CollectionMethod_ChargeAutomatically
    "send_invoice" -> pure Invoice_CollectionMethod_SendInvoice
    str -> fail (show str <> " is not a known valid option for Invoice_CollectionMethod")

data Invoice_CustomerTaxExempt
  = Invoice_CustomerTaxExempt_Exempt
  | Invoice_CustomerTaxExempt_None
  | Invoice_CustomerTaxExempt_Reverse
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON Invoice_CustomerTaxExempt where
  toJSON e = Text $ case e of
    Invoice_CustomerTaxExempt_Exempt -> "exempt"
    Invoice_CustomerTaxExempt_None -> "none"
    Invoice_CustomerTaxExempt_Reverse -> "reverse"

instance FromJSON Invoice_CustomerTaxExempt where
  parseJSON = withText "Invoice_CustomerTaxExempt" $ \case
    "exempt" -> pure Invoice_CustomerTaxExempt_Exempt
    "none" -> pure Invoice_CustomerTaxExempt_None
    "reverse" -> pure Invoice_CustomerTaxExempt_Reverse
    str -> fail (show str <> " is not a known valid option for Invoice_CustomerTaxExempt")

data Invoice_Object
  = Invoice_Object_Invoice
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON Invoice_Object where
  toJSON e = Text $ case e of
    Invoice_Object_Invoice -> "invoice"

instance FromJSON Invoice_Object where
  parseJSON = withText "Invoice_Object" $ \case
    "invoice" -> pure Invoice_Object_Invoice
    str -> fail (show str <> " is not a known valid option for Invoice_Object")

data Invoice_Status
  = Invoice_Status_Deleted
  | Invoice_Status_Draft
  | Invoice_Status_Open
  | Invoice_Status_Paid
  | Invoice_Status_Uncollectible
  | Invoice_Status_Void
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON Invoice_Status where
  toJSON e = Text $ case e of
    Invoice_Status_Deleted -> "deleted"
    Invoice_Status_Draft -> "draft"
    Invoice_Status_Open -> "open"
    Invoice_Status_Paid -> "paid"
    Invoice_Status_Uncollectible -> "uncollectible"
    Invoice_Status_Void -> "void"

instance FromJSON Invoice_Status where
  parseJSON = withText "Invoice_Status" $ \case
    "deleted" -> pure Invoice_Status_Deleted
    "draft" -> pure Invoice_Status_Draft
    "open" -> pure Invoice_Status_Open
    "paid" -> pure Invoice_Status_Paid
    "uncollectible" -> pure Invoice_Status_Uncollectible
    "void" -> pure Invoice_Status_Void
    str -> fail (show str <> " is not a known valid option for Invoice_Status")

data Invoiceitem_Object
  = Invoiceitem_Object_Invoiceitem
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON Invoiceitem_Object where
  toJSON e = Text $ case e of
    Invoiceitem_Object_Invoiceitem -> "invoiceitem"

instance FromJSON Invoiceitem_Object where
  parseJSON = withText "Invoiceitem_Object" $ \case
    "invoiceitem" -> pure Invoiceitem_Object_Invoiceitem
    str -> fail (show str <> " is not a known valid option for Invoiceitem_Object")

data InvoicesResourceInvoiceTaxId_Type
  = InvoicesResourceInvoiceTaxId_Type_AuAbn
  | InvoicesResourceInvoiceTaxId_Type_EuVat
  | InvoicesResourceInvoiceTaxId_Type_InGst
  | InvoicesResourceInvoiceTaxId_Type_NoVat
  | InvoicesResourceInvoiceTaxId_Type_NzGst
  | InvoicesResourceInvoiceTaxId_Type_Unknown
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON InvoicesResourceInvoiceTaxId_Type where
  toJSON e = Text $ case e of
    InvoicesResourceInvoiceTaxId_Type_AuAbn -> "au_abn"
    InvoicesResourceInvoiceTaxId_Type_EuVat -> "eu_vat"
    InvoicesResourceInvoiceTaxId_Type_InGst -> "in_gst"
    InvoicesResourceInvoiceTaxId_Type_NoVat -> "no_vat"
    InvoicesResourceInvoiceTaxId_Type_NzGst -> "nz_gst"
    InvoicesResourceInvoiceTaxId_Type_Unknown -> "unknown"

instance FromJSON InvoicesResourceInvoiceTaxId_Type where
  parseJSON = withText "InvoicesResourceInvoiceTaxId_Type" $ \case
    "au_abn" -> pure InvoicesResourceInvoiceTaxId_Type_AuAbn
    "eu_vat" -> pure InvoicesResourceInvoiceTaxId_Type_EuVat
    "in_gst" -> pure InvoicesResourceInvoiceTaxId_Type_InGst
    "no_vat" -> pure InvoicesResourceInvoiceTaxId_Type_NoVat
    "nz_gst" -> pure InvoicesResourceInvoiceTaxId_Type_NzGst
    "unknown" -> pure InvoicesResourceInvoiceTaxId_Type_Unknown
    str -> fail (show str <> " is not a known valid option for InvoicesResourceInvoiceTaxId_Type")

data IssuerFraudRecord_Object
  = IssuerFraudRecord_Object_IssuerFraudRecord
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON IssuerFraudRecord_Object where
  toJSON e = Text $ case e of
    IssuerFraudRecord_Object_IssuerFraudRecord -> "issuer_fraud_record"

instance FromJSON IssuerFraudRecord_Object where
  parseJSON = withText "IssuerFraudRecord_Object" $ \case
    "issuer_fraud_record" -> pure IssuerFraudRecord_Object_IssuerFraudRecord
    str -> fail (show str <> " is not a known valid option for IssuerFraudRecord_Object")

data IssuingCardAuthorizationControls_AllowedCategories
  = IssuingCardAuthorizationControls_AllowedCategories_AcRefrigerationRepair
  | IssuingCardAuthorizationControls_AllowedCategories_AccountingBookkeepingServices
  | IssuingCardAuthorizationControls_AllowedCategories_AdvertisingServices
  | IssuingCardAuthorizationControls_AllowedCategories_AgriculturalCooperative
  | IssuingCardAuthorizationControls_AllowedCategories_AirlinesAirCarriers
  | IssuingCardAuthorizationControls_AllowedCategories_AirportsFlyingFields
  | IssuingCardAuthorizationControls_AllowedCategories_AmbulanceServices
  | IssuingCardAuthorizationControls_AllowedCategories_AmusementParksCarnivals
  | IssuingCardAuthorizationControls_AllowedCategories_AntiqueReproductions
  | IssuingCardAuthorizationControls_AllowedCategories_AntiqueShops
  | IssuingCardAuthorizationControls_AllowedCategories_Aquariums
  | IssuingCardAuthorizationControls_AllowedCategories_ArchitecturalSurveyingServices
  | IssuingCardAuthorizationControls_AllowedCategories_ArtDealersAndGalleries
  | IssuingCardAuthorizationControls_AllowedCategories_ArtistsSupplyAndCraftShops
  | IssuingCardAuthorizationControls_AllowedCategories_AutoAndHomeSupplyStores
  | IssuingCardAuthorizationControls_AllowedCategories_AutoBodyRepairShops
  | IssuingCardAuthorizationControls_AllowedCategories_AutoPaintShops
  | IssuingCardAuthorizationControls_AllowedCategories_AutoServiceShops
  | IssuingCardAuthorizationControls_AllowedCategories_AutomatedCashDisburse
  | IssuingCardAuthorizationControls_AllowedCategories_AutomatedFuelDispensers
  | IssuingCardAuthorizationControls_AllowedCategories_AutomobileAssociations
  | IssuingCardAuthorizationControls_AllowedCategories_AutomotivePartsAndAccessoriesStores
  | IssuingCardAuthorizationControls_AllowedCategories_AutomotiveTireStores
  | IssuingCardAuthorizationControls_AllowedCategories_BailAndBondPayments
  | IssuingCardAuthorizationControls_AllowedCategories_Bakeries
  | IssuingCardAuthorizationControls_AllowedCategories_BandsOrchestras
  | IssuingCardAuthorizationControls_AllowedCategories_BarberAndBeautyShops
  | IssuingCardAuthorizationControls_AllowedCategories_BettingCasinoGambling
  | IssuingCardAuthorizationControls_AllowedCategories_BicycleShops
  | IssuingCardAuthorizationControls_AllowedCategories_BilliardPoolEstablishments
  | IssuingCardAuthorizationControls_AllowedCategories_BoatDealers
  | IssuingCardAuthorizationControls_AllowedCategories_BoatRentalsAndLeases
  | IssuingCardAuthorizationControls_AllowedCategories_BookStores
  | IssuingCardAuthorizationControls_AllowedCategories_BooksPeriodicalsAndNewspapers
  | IssuingCardAuthorizationControls_AllowedCategories_BowlingAlleys
  | IssuingCardAuthorizationControls_AllowedCategories_BusLines
  | IssuingCardAuthorizationControls_AllowedCategories_BusinessSecretarialSchools
  | IssuingCardAuthorizationControls_AllowedCategories_BuyingShoppingServices
  | IssuingCardAuthorizationControls_AllowedCategories_CableSatelliteAndOtherPayTelevisionAndRadio
  | IssuingCardAuthorizationControls_AllowedCategories_CameraAndPhotographicSupplyStores
  | IssuingCardAuthorizationControls_AllowedCategories_CandyNutAndConfectioneryStores
  | IssuingCardAuthorizationControls_AllowedCategories_CarAndTruckDealersNewUsed
  | IssuingCardAuthorizationControls_AllowedCategories_CarAndTruckDealersUsedOnly
  | IssuingCardAuthorizationControls_AllowedCategories_CarRentalAgencies
  | IssuingCardAuthorizationControls_AllowedCategories_CarWashes
  | IssuingCardAuthorizationControls_AllowedCategories_CarpentryServices
  | IssuingCardAuthorizationControls_AllowedCategories_CarpetUpholsteryCleaning
  | IssuingCardAuthorizationControls_AllowedCategories_Caterers
  | IssuingCardAuthorizationControls_AllowedCategories_CharitableAndSocialServiceOrganizationsFundraising
  | IssuingCardAuthorizationControls_AllowedCategories_ChemicalsAndAlliedProducts
  | IssuingCardAuthorizationControls_AllowedCategories_ChidrensAndInfantsWearStores
  | IssuingCardAuthorizationControls_AllowedCategories_ChildCareServices
  | IssuingCardAuthorizationControls_AllowedCategories_ChiropodistsPodiatrists
  | IssuingCardAuthorizationControls_AllowedCategories_Chiropractors
  | IssuingCardAuthorizationControls_AllowedCategories_CigarStoresAndStands
  | IssuingCardAuthorizationControls_AllowedCategories_CivicSocialFraternalAssociations
  | IssuingCardAuthorizationControls_AllowedCategories_CleaningAndMaintenance
  | IssuingCardAuthorizationControls_AllowedCategories_ClothingRental
  | IssuingCardAuthorizationControls_AllowedCategories_CollegesUniversities
  | IssuingCardAuthorizationControls_AllowedCategories_CommercialEquipment
  | IssuingCardAuthorizationControls_AllowedCategories_CommercialFootwear
  | IssuingCardAuthorizationControls_AllowedCategories_CommercialPhotographyArtAndGraphics
  | IssuingCardAuthorizationControls_AllowedCategories_CommuterTransportAndFerries
  | IssuingCardAuthorizationControls_AllowedCategories_ComputerNetworkServices
  | IssuingCardAuthorizationControls_AllowedCategories_ComputerProgramming
  | IssuingCardAuthorizationControls_AllowedCategories_ComputerRepair
  | IssuingCardAuthorizationControls_AllowedCategories_ComputerSoftwareStores
  | IssuingCardAuthorizationControls_AllowedCategories_ComputersPeripheralsAndSoftware
  | IssuingCardAuthorizationControls_AllowedCategories_ConcreteWorkServices
  | IssuingCardAuthorizationControls_AllowedCategories_ConstructionMaterials
  | IssuingCardAuthorizationControls_AllowedCategories_ConsultingPublicRelations
  | IssuingCardAuthorizationControls_AllowedCategories_CorrespondenceSchools
  | IssuingCardAuthorizationControls_AllowedCategories_CosmeticStores
  | IssuingCardAuthorizationControls_AllowedCategories_CounselingServices
  | IssuingCardAuthorizationControls_AllowedCategories_CountryClubs
  | IssuingCardAuthorizationControls_AllowedCategories_CourierServices
  | IssuingCardAuthorizationControls_AllowedCategories_CourtCosts
  | IssuingCardAuthorizationControls_AllowedCategories_CreditReportingAgencies
  | IssuingCardAuthorizationControls_AllowedCategories_CruiseLines
  | IssuingCardAuthorizationControls_AllowedCategories_DairyProductsStores
  | IssuingCardAuthorizationControls_AllowedCategories_DanceHallStudiosSchools
  | IssuingCardAuthorizationControls_AllowedCategories_DatingEscortServices
  | IssuingCardAuthorizationControls_AllowedCategories_DentistsOrthodontists
  | IssuingCardAuthorizationControls_AllowedCategories_DepartmentStores
  | IssuingCardAuthorizationControls_AllowedCategories_DetectiveAgencies
  | IssuingCardAuthorizationControls_AllowedCategories_DigitalGoodsApplications
  | IssuingCardAuthorizationControls_AllowedCategories_DirectMarketingCatalogMerchant
  | IssuingCardAuthorizationControls_AllowedCategories_DirectMarketingCombinationCatalogAndRetailMerchant
  | IssuingCardAuthorizationControls_AllowedCategories_DirectMarketingInboundTelemarketing
  | IssuingCardAuthorizationControls_AllowedCategories_DirectMarketingInsuranceServices
  | IssuingCardAuthorizationControls_AllowedCategories_DirectMarketingOther
  | IssuingCardAuthorizationControls_AllowedCategories_DirectMarketingOutboundTelemarketing
  | IssuingCardAuthorizationControls_AllowedCategories_DirectMarketingSubscription
  | IssuingCardAuthorizationControls_AllowedCategories_DirectMarketingTravel
  | IssuingCardAuthorizationControls_AllowedCategories_DiscountStores
  | IssuingCardAuthorizationControls_AllowedCategories_Doctors
  | IssuingCardAuthorizationControls_AllowedCategories_DoorToDoorSales
  | IssuingCardAuthorizationControls_AllowedCategories_DraperyWindowCoveringAndUpholsteryStores
  | IssuingCardAuthorizationControls_AllowedCategories_DrinkingPlaces
  | IssuingCardAuthorizationControls_AllowedCategories_DrugStoresAndPharmacies
  | IssuingCardAuthorizationControls_AllowedCategories_DrugsDrugProprietariesAndDruggistSundries
  | IssuingCardAuthorizationControls_AllowedCategories_DryCleaners
  | IssuingCardAuthorizationControls_AllowedCategories_DurableGoods
  | IssuingCardAuthorizationControls_AllowedCategories_DutyFreeStores
  | IssuingCardAuthorizationControls_AllowedCategories_EatingPlacesRestaurants
  | IssuingCardAuthorizationControls_AllowedCategories_EducationalServices
  | IssuingCardAuthorizationControls_AllowedCategories_ElectricRazorStores
  | IssuingCardAuthorizationControls_AllowedCategories_ElectricalPartsAndEquipment
  | IssuingCardAuthorizationControls_AllowedCategories_ElectricalServices
  | IssuingCardAuthorizationControls_AllowedCategories_ElectronicsRepairShops
  | IssuingCardAuthorizationControls_AllowedCategories_ElectronicsStores
  | IssuingCardAuthorizationControls_AllowedCategories_ElementarySecondarySchools
  | IssuingCardAuthorizationControls_AllowedCategories_EmploymentTempAgencies
  | IssuingCardAuthorizationControls_AllowedCategories_EquipmentRental
  | IssuingCardAuthorizationControls_AllowedCategories_ExterminatingServices
  | IssuingCardAuthorizationControls_AllowedCategories_FamilyClothingStores
  | IssuingCardAuthorizationControls_AllowedCategories_FastFoodRestaurants
  | IssuingCardAuthorizationControls_AllowedCategories_FinancialInstitutions
  | IssuingCardAuthorizationControls_AllowedCategories_FinesGovernmentAdministrativeEntities
  | IssuingCardAuthorizationControls_AllowedCategories_FireplaceFireplaceScreensAndAccessoriesStores
  | IssuingCardAuthorizationControls_AllowedCategories_FloorCoveringStores
  | IssuingCardAuthorizationControls_AllowedCategories_Florists
  | IssuingCardAuthorizationControls_AllowedCategories_FloristsSuppliesNurseryStockAndFlowers
  | IssuingCardAuthorizationControls_AllowedCategories_FreezerAndLockerMeatProvisioners
  | IssuingCardAuthorizationControls_AllowedCategories_FuelDealersNonAutomotive
  | IssuingCardAuthorizationControls_AllowedCategories_FuneralServicesCrematories
  | IssuingCardAuthorizationControls_AllowedCategories_FurnitureHomeFurnishingsAndEquipmentStoresExceptAppliances
  | IssuingCardAuthorizationControls_AllowedCategories_FurnitureRepairRefinishing
  | IssuingCardAuthorizationControls_AllowedCategories_FurriersAndFurShops
  | IssuingCardAuthorizationControls_AllowedCategories_GeneralServices
  | IssuingCardAuthorizationControls_AllowedCategories_GiftCardNoveltyAndSouvenirShops
  | IssuingCardAuthorizationControls_AllowedCategories_GlassPaintAndWallpaperStores
  | IssuingCardAuthorizationControls_AllowedCategories_GlasswareCrystalStores
  | IssuingCardAuthorizationControls_AllowedCategories_GolfCoursesPublic
  | IssuingCardAuthorizationControls_AllowedCategories_GovernmentServices
  | IssuingCardAuthorizationControls_AllowedCategories_GroceryStoresSupermarkets
  | IssuingCardAuthorizationControls_AllowedCategories_HardwareEquipmentAndSupplies
  | IssuingCardAuthorizationControls_AllowedCategories_HardwareStores
  | IssuingCardAuthorizationControls_AllowedCategories_HealthAndBeautySpas
  | IssuingCardAuthorizationControls_AllowedCategories_HearingAidsSalesAndSupplies
  | IssuingCardAuthorizationControls_AllowedCategories_HeatingPlumbingAC
  | IssuingCardAuthorizationControls_AllowedCategories_HobbyToyAndGameShops
  | IssuingCardAuthorizationControls_AllowedCategories_HomeSupplyWarehouseStores
  | IssuingCardAuthorizationControls_AllowedCategories_Hospitals
  | IssuingCardAuthorizationControls_AllowedCategories_HotelsMotelsAndResorts
  | IssuingCardAuthorizationControls_AllowedCategories_HouseholdApplianceStores
  | IssuingCardAuthorizationControls_AllowedCategories_IndustrialSupplies
  | IssuingCardAuthorizationControls_AllowedCategories_InformationRetrievalServices
  | IssuingCardAuthorizationControls_AllowedCategories_InsuranceDefault
  | IssuingCardAuthorizationControls_AllowedCategories_InsuranceUnderwritingPremiums
  | IssuingCardAuthorizationControls_AllowedCategories_IntraCompanyPurchases
  | IssuingCardAuthorizationControls_AllowedCategories_JewelryStoresWatchesClocksAndSilverwareStores
  | IssuingCardAuthorizationControls_AllowedCategories_LandscapingServices
  | IssuingCardAuthorizationControls_AllowedCategories_Laundries
  | IssuingCardAuthorizationControls_AllowedCategories_LaundryCleaningServices
  | IssuingCardAuthorizationControls_AllowedCategories_LegalServicesAttorneys
  | IssuingCardAuthorizationControls_AllowedCategories_LuggageAndLeatherGoodsStores
  | IssuingCardAuthorizationControls_AllowedCategories_LumberBuildingMaterialsStores
  | IssuingCardAuthorizationControls_AllowedCategories_ManualCashDisburse
  | IssuingCardAuthorizationControls_AllowedCategories_MarinasServiceAndSupplies
  | IssuingCardAuthorizationControls_AllowedCategories_MasonryStoneworkAndPlaster
  | IssuingCardAuthorizationControls_AllowedCategories_MassageParlors
  | IssuingCardAuthorizationControls_AllowedCategories_MedicalAndDentalLabs
  | IssuingCardAuthorizationControls_AllowedCategories_MedicalDentalOphthalmicAndHospitalEquipmentAndSupplies
  | IssuingCardAuthorizationControls_AllowedCategories_MedicalServices
  | IssuingCardAuthorizationControls_AllowedCategories_MembershipOrganizations
  | IssuingCardAuthorizationControls_AllowedCategories_MensAndBoysClothingAndAccessoriesStores
  | IssuingCardAuthorizationControls_AllowedCategories_MensWomensClothingStores
  | IssuingCardAuthorizationControls_AllowedCategories_MetalServiceCenters
  | IssuingCardAuthorizationControls_AllowedCategories_Miscellaneous
  | IssuingCardAuthorizationControls_AllowedCategories_MiscellaneousApparelAndAccessoryShops
  | IssuingCardAuthorizationControls_AllowedCategories_MiscellaneousAutoDealers
  | IssuingCardAuthorizationControls_AllowedCategories_MiscellaneousBusinessServices
  | IssuingCardAuthorizationControls_AllowedCategories_MiscellaneousFoodStores
  | IssuingCardAuthorizationControls_AllowedCategories_MiscellaneousGeneralMerchandise
  | IssuingCardAuthorizationControls_AllowedCategories_MiscellaneousGeneralServices
  | IssuingCardAuthorizationControls_AllowedCategories_MiscellaneousHomeFurnishingSpecialtyStores
  | IssuingCardAuthorizationControls_AllowedCategories_MiscellaneousPublishingAndPrinting
  | IssuingCardAuthorizationControls_AllowedCategories_MiscellaneousRecreationServices
  | IssuingCardAuthorizationControls_AllowedCategories_MiscellaneousRepairShops
  | IssuingCardAuthorizationControls_AllowedCategories_MiscellaneousSpecialtyRetail
  | IssuingCardAuthorizationControls_AllowedCategories_MobileHomeDealers
  | IssuingCardAuthorizationControls_AllowedCategories_MotionPictureTheaters
  | IssuingCardAuthorizationControls_AllowedCategories_MotorFreightCarriersAndTrucking
  | IssuingCardAuthorizationControls_AllowedCategories_MotorHomesDealers
  | IssuingCardAuthorizationControls_AllowedCategories_MotorVehicleSuppliesAndNewParts
  | IssuingCardAuthorizationControls_AllowedCategories_MotorcycleShopsAndDealers
  | IssuingCardAuthorizationControls_AllowedCategories_MotorcycleShopsDealers
  | IssuingCardAuthorizationControls_AllowedCategories_MusicStoresMusicalInstrumentsPianosAndSheetMusic
  | IssuingCardAuthorizationControls_AllowedCategories_NewsDealersAndNewsstands
  | IssuingCardAuthorizationControls_AllowedCategories_NonFiMoneyOrders
  | IssuingCardAuthorizationControls_AllowedCategories_NonFiStoredValueCardPurchaseLoad
  | IssuingCardAuthorizationControls_AllowedCategories_NondurableGoods
  | IssuingCardAuthorizationControls_AllowedCategories_NurseriesLawnAndGardenSupplyStores
  | IssuingCardAuthorizationControls_AllowedCategories_NursingPersonalCare
  | IssuingCardAuthorizationControls_AllowedCategories_OfficeAndCommercialFurniture
  | IssuingCardAuthorizationControls_AllowedCategories_OpticiansEyeglasses
  | IssuingCardAuthorizationControls_AllowedCategories_OptometristsOphthalmologist
  | IssuingCardAuthorizationControls_AllowedCategories_OrthopedicGoodsProstheticDevices
  | IssuingCardAuthorizationControls_AllowedCategories_Osteopaths
  | IssuingCardAuthorizationControls_AllowedCategories_PackageStoresBeerWineAndLiquor
  | IssuingCardAuthorizationControls_AllowedCategories_PaintsVarnishesAndSupplies
  | IssuingCardAuthorizationControls_AllowedCategories_ParkingLotsGarages
  | IssuingCardAuthorizationControls_AllowedCategories_PassengerRailways
  | IssuingCardAuthorizationControls_AllowedCategories_PawnShops
  | IssuingCardAuthorizationControls_AllowedCategories_PetShopsPetFoodAndSupplies
  | IssuingCardAuthorizationControls_AllowedCategories_PetroleumAndPetroleumProducts
  | IssuingCardAuthorizationControls_AllowedCategories_PhotoDeveloping
  | IssuingCardAuthorizationControls_AllowedCategories_PhotographicPhotocopyMicrofilmEquipmentAndSupplies
  | IssuingCardAuthorizationControls_AllowedCategories_PhotographicStudios
  | IssuingCardAuthorizationControls_AllowedCategories_PictureVideoProduction
  | IssuingCardAuthorizationControls_AllowedCategories_PieceGoodsNotionsAndOtherDryGoods
  | IssuingCardAuthorizationControls_AllowedCategories_PlumbingHeatingEquipmentAndSupplies
  | IssuingCardAuthorizationControls_AllowedCategories_PoliticalOrganizations
  | IssuingCardAuthorizationControls_AllowedCategories_PostalServicesGovernmentOnly
  | IssuingCardAuthorizationControls_AllowedCategories_PreciousStonesAndMetalsWatchesAndJewelry
  | IssuingCardAuthorizationControls_AllowedCategories_ProfessionalServices
  | IssuingCardAuthorizationControls_AllowedCategories_PublicWarehousingAndStorage
  | IssuingCardAuthorizationControls_AllowedCategories_QuickCopyReproAndBlueprint
  | IssuingCardAuthorizationControls_AllowedCategories_Railroads
  | IssuingCardAuthorizationControls_AllowedCategories_RealEstateAgentsAndManagersRentals
  | IssuingCardAuthorizationControls_AllowedCategories_RecordStores
  | IssuingCardAuthorizationControls_AllowedCategories_RecreationalVehicleRentals
  | IssuingCardAuthorizationControls_AllowedCategories_ReligiousGoodsStores
  | IssuingCardAuthorizationControls_AllowedCategories_ReligiousOrganizations
  | IssuingCardAuthorizationControls_AllowedCategories_RoofingSidingSheetMetal
  | IssuingCardAuthorizationControls_AllowedCategories_SecretarialSupportServices
  | IssuingCardAuthorizationControls_AllowedCategories_SecurityBrokersDealers
  | IssuingCardAuthorizationControls_AllowedCategories_ServiceStations
  | IssuingCardAuthorizationControls_AllowedCategories_SewingNeedleworkFabricAndPieceGoodsStores
  | IssuingCardAuthorizationControls_AllowedCategories_ShoeRepairHatCleaning
  | IssuingCardAuthorizationControls_AllowedCategories_ShoeStores
  | IssuingCardAuthorizationControls_AllowedCategories_SmallApplianceRepair
  | IssuingCardAuthorizationControls_AllowedCategories_SnowmobileDealers
  | IssuingCardAuthorizationControls_AllowedCategories_SpecialTradeServices
  | IssuingCardAuthorizationControls_AllowedCategories_SpecialtyCleaning
  | IssuingCardAuthorizationControls_AllowedCategories_SportingGoodsStores
  | IssuingCardAuthorizationControls_AllowedCategories_SportingRecreationCamps
  | IssuingCardAuthorizationControls_AllowedCategories_SportsAndRidingApparelStores
  | IssuingCardAuthorizationControls_AllowedCategories_SportsClubsFields
  | IssuingCardAuthorizationControls_AllowedCategories_StampAndCoinStores
  | IssuingCardAuthorizationControls_AllowedCategories_StationaryOfficeSuppliesPrintingAndWritingPaper
  | IssuingCardAuthorizationControls_AllowedCategories_StationeryStoresOfficeAndSchoolSupplyStores
  | IssuingCardAuthorizationControls_AllowedCategories_SwimmingPoolsSales
  | IssuingCardAuthorizationControls_AllowedCategories_TUiTravelGermany
  | IssuingCardAuthorizationControls_AllowedCategories_TailorsAlterations
  | IssuingCardAuthorizationControls_AllowedCategories_TaxPaymentsGovernmentAgencies
  | IssuingCardAuthorizationControls_AllowedCategories_TaxPreparationServices
  | IssuingCardAuthorizationControls_AllowedCategories_TaxicabsLimousines
  | IssuingCardAuthorizationControls_AllowedCategories_TelecommunicationEquipmentAndTelephoneSales
  | IssuingCardAuthorizationControls_AllowedCategories_TelecommunicationServices
  | IssuingCardAuthorizationControls_AllowedCategories_TelegraphServices
  | IssuingCardAuthorizationControls_AllowedCategories_TentAndAwningShops
  | IssuingCardAuthorizationControls_AllowedCategories_TestingLaboratories
  | IssuingCardAuthorizationControls_AllowedCategories_TheatricalTicketAgencies
  | IssuingCardAuthorizationControls_AllowedCategories_Timeshares
  | IssuingCardAuthorizationControls_AllowedCategories_TireRetreadingAndRepair
  | IssuingCardAuthorizationControls_AllowedCategories_TollsBridgeFees
  | IssuingCardAuthorizationControls_AllowedCategories_TouristAttractionsAndExhibits
  | IssuingCardAuthorizationControls_AllowedCategories_TowingServices
  | IssuingCardAuthorizationControls_AllowedCategories_TrailerParksCampgrounds
  | IssuingCardAuthorizationControls_AllowedCategories_TransportationServices
  | IssuingCardAuthorizationControls_AllowedCategories_TravelAgenciesTourOperators
  | IssuingCardAuthorizationControls_AllowedCategories_TruckStopIteration
  | IssuingCardAuthorizationControls_AllowedCategories_TruckUtilityTrailerRentals
  | IssuingCardAuthorizationControls_AllowedCategories_TypesettingPlateMakingAndRelatedServices
  | IssuingCardAuthorizationControls_AllowedCategories_TypewriterStores
  | IssuingCardAuthorizationControls_AllowedCategories_USFederalGovernmentAgenciesOrDepartments
  | IssuingCardAuthorizationControls_AllowedCategories_UniformsCommercialClothing
  | IssuingCardAuthorizationControls_AllowedCategories_UsedMerchandiseAndSecondhandStores
  | IssuingCardAuthorizationControls_AllowedCategories_Utilities
  | IssuingCardAuthorizationControls_AllowedCategories_VarietyStores
  | IssuingCardAuthorizationControls_AllowedCategories_VeterinaryServices
  | IssuingCardAuthorizationControls_AllowedCategories_VideoAmusementGameSupplies
  | IssuingCardAuthorizationControls_AllowedCategories_VideoGameArcades
  | IssuingCardAuthorizationControls_AllowedCategories_VideoTapeRentalStores
  | IssuingCardAuthorizationControls_AllowedCategories_VocationalTradeSchools
  | IssuingCardAuthorizationControls_AllowedCategories_WatchJewelryRepair
  | IssuingCardAuthorizationControls_AllowedCategories_WeldingRepair
  | IssuingCardAuthorizationControls_AllowedCategories_WholesaleClubs
  | IssuingCardAuthorizationControls_AllowedCategories_WigAndToupeeStores
  | IssuingCardAuthorizationControls_AllowedCategories_WiresMoneyOrders
  | IssuingCardAuthorizationControls_AllowedCategories_WomensAccessoryAndSpecialtyShops
  | IssuingCardAuthorizationControls_AllowedCategories_WomensReadyToWearStores
  | IssuingCardAuthorizationControls_AllowedCategories_WreckingAndSalvageYards
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON IssuingCardAuthorizationControls_AllowedCategories where
  toJSON e = Text $ case e of
    IssuingCardAuthorizationControls_AllowedCategories_AcRefrigerationRepair -> "ac_refrigeration_repair"
    IssuingCardAuthorizationControls_AllowedCategories_AccountingBookkeepingServices -> "accounting_bookkeeping_services"
    IssuingCardAuthorizationControls_AllowedCategories_AdvertisingServices -> "advertising_services"
    IssuingCardAuthorizationControls_AllowedCategories_AgriculturalCooperative -> "agricultural_cooperative"
    IssuingCardAuthorizationControls_AllowedCategories_AirlinesAirCarriers -> "airlines_air_carriers"
    IssuingCardAuthorizationControls_AllowedCategories_AirportsFlyingFields -> "airports_flying_fields"
    IssuingCardAuthorizationControls_AllowedCategories_AmbulanceServices -> "ambulance_services"
    IssuingCardAuthorizationControls_AllowedCategories_AmusementParksCarnivals -> "amusement_parks_carnivals"
    IssuingCardAuthorizationControls_AllowedCategories_AntiqueReproductions -> "antique_reproductions"
    IssuingCardAuthorizationControls_AllowedCategories_AntiqueShops -> "antique_shops"
    IssuingCardAuthorizationControls_AllowedCategories_Aquariums -> "aquariums"
    IssuingCardAuthorizationControls_AllowedCategories_ArchitecturalSurveyingServices -> "architectural_surveying_services"
    IssuingCardAuthorizationControls_AllowedCategories_ArtDealersAndGalleries -> "art_dealers_and_galleries"
    IssuingCardAuthorizationControls_AllowedCategories_ArtistsSupplyAndCraftShops -> "artists_supply_and_craft_shops"
    IssuingCardAuthorizationControls_AllowedCategories_AutoAndHomeSupplyStores -> "auto_and_home_supply_stores"
    IssuingCardAuthorizationControls_AllowedCategories_AutoBodyRepairShops -> "auto_body_repair_shops"
    IssuingCardAuthorizationControls_AllowedCategories_AutoPaintShops -> "auto_paint_shops"
    IssuingCardAuthorizationControls_AllowedCategories_AutoServiceShops -> "auto_service_shops"
    IssuingCardAuthorizationControls_AllowedCategories_AutomatedCashDisburse -> "automated_cash_disburse"
    IssuingCardAuthorizationControls_AllowedCategories_AutomatedFuelDispensers -> "automated_fuel_dispensers"
    IssuingCardAuthorizationControls_AllowedCategories_AutomobileAssociations -> "automobile_associations"
    IssuingCardAuthorizationControls_AllowedCategories_AutomotivePartsAndAccessoriesStores -> "automotive_parts_and_accessories_stores"
    IssuingCardAuthorizationControls_AllowedCategories_AutomotiveTireStores -> "automotive_tire_stores"
    IssuingCardAuthorizationControls_AllowedCategories_BailAndBondPayments -> "bail_and_bond_payments"
    IssuingCardAuthorizationControls_AllowedCategories_Bakeries -> "bakeries"
    IssuingCardAuthorizationControls_AllowedCategories_BandsOrchestras -> "bands_orchestras"
    IssuingCardAuthorizationControls_AllowedCategories_BarberAndBeautyShops -> "barber_and_beauty_shops"
    IssuingCardAuthorizationControls_AllowedCategories_BettingCasinoGambling -> "betting_casino_gambling"
    IssuingCardAuthorizationControls_AllowedCategories_BicycleShops -> "bicycle_shops"
    IssuingCardAuthorizationControls_AllowedCategories_BilliardPoolEstablishments -> "billiard_pool_establishments"
    IssuingCardAuthorizationControls_AllowedCategories_BoatDealers -> "boat_dealers"
    IssuingCardAuthorizationControls_AllowedCategories_BoatRentalsAndLeases -> "boat_rentals_and_leases"
    IssuingCardAuthorizationControls_AllowedCategories_BookStores -> "book_stores"
    IssuingCardAuthorizationControls_AllowedCategories_BooksPeriodicalsAndNewspapers -> "books_periodicals_and_newspapers"
    IssuingCardAuthorizationControls_AllowedCategories_BowlingAlleys -> "bowling_alleys"
    IssuingCardAuthorizationControls_AllowedCategories_BusLines -> "bus_lines"
    IssuingCardAuthorizationControls_AllowedCategories_BusinessSecretarialSchools -> "business_secretarial_schools"
    IssuingCardAuthorizationControls_AllowedCategories_BuyingShoppingServices -> "buying_shopping_services"
    IssuingCardAuthorizationControls_AllowedCategories_CableSatelliteAndOtherPayTelevisionAndRadio -> "cable_satellite_and_other_pay_television_and_radio"
    IssuingCardAuthorizationControls_AllowedCategories_CameraAndPhotographicSupplyStores -> "camera_and_photographic_supply_stores"
    IssuingCardAuthorizationControls_AllowedCategories_CandyNutAndConfectioneryStores -> "candy_nut_and_confectionery_stores"
    IssuingCardAuthorizationControls_AllowedCategories_CarAndTruckDealersNewUsed -> "car_and_truck_dealers_new_used"
    IssuingCardAuthorizationControls_AllowedCategories_CarAndTruckDealersUsedOnly -> "car_and_truck_dealers_used_only"
    IssuingCardAuthorizationControls_AllowedCategories_CarRentalAgencies -> "car_rental_agencies"
    IssuingCardAuthorizationControls_AllowedCategories_CarWashes -> "car_washes"
    IssuingCardAuthorizationControls_AllowedCategories_CarpentryServices -> "carpentry_services"
    IssuingCardAuthorizationControls_AllowedCategories_CarpetUpholsteryCleaning -> "carpet_upholstery_cleaning"
    IssuingCardAuthorizationControls_AllowedCategories_Caterers -> "caterers"
    IssuingCardAuthorizationControls_AllowedCategories_CharitableAndSocialServiceOrganizationsFundraising -> "charitable_and_social_service_organizations_fundraising"
    IssuingCardAuthorizationControls_AllowedCategories_ChemicalsAndAlliedProducts -> "chemicals_and_allied_products"
    IssuingCardAuthorizationControls_AllowedCategories_ChidrensAndInfantsWearStores -> "chidrens_and_infants_wear_stores"
    IssuingCardAuthorizationControls_AllowedCategories_ChildCareServices -> "child_care_services"
    IssuingCardAuthorizationControls_AllowedCategories_ChiropodistsPodiatrists -> "chiropodists_podiatrists"
    IssuingCardAuthorizationControls_AllowedCategories_Chiropractors -> "chiropractors"
    IssuingCardAuthorizationControls_AllowedCategories_CigarStoresAndStands -> "cigar_stores_and_stands"
    IssuingCardAuthorizationControls_AllowedCategories_CivicSocialFraternalAssociations -> "civic_social_fraternal_associations"
    IssuingCardAuthorizationControls_AllowedCategories_CleaningAndMaintenance -> "cleaning_and_maintenance"
    IssuingCardAuthorizationControls_AllowedCategories_ClothingRental -> "clothing_rental"
    IssuingCardAuthorizationControls_AllowedCategories_CollegesUniversities -> "colleges_universities"
    IssuingCardAuthorizationControls_AllowedCategories_CommercialEquipment -> "commercial_equipment"
    IssuingCardAuthorizationControls_AllowedCategories_CommercialFootwear -> "commercial_footwear"
    IssuingCardAuthorizationControls_AllowedCategories_CommercialPhotographyArtAndGraphics -> "commercial_photography_art_and_graphics"
    IssuingCardAuthorizationControls_AllowedCategories_CommuterTransportAndFerries -> "commuter_transport_and_ferries"
    IssuingCardAuthorizationControls_AllowedCategories_ComputerNetworkServices -> "computer_network_services"
    IssuingCardAuthorizationControls_AllowedCategories_ComputerProgramming -> "computer_programming"
    IssuingCardAuthorizationControls_AllowedCategories_ComputerRepair -> "computer_repair"
    IssuingCardAuthorizationControls_AllowedCategories_ComputerSoftwareStores -> "computer_software_stores"
    IssuingCardAuthorizationControls_AllowedCategories_ComputersPeripheralsAndSoftware -> "computers_peripherals_and_software"
    IssuingCardAuthorizationControls_AllowedCategories_ConcreteWorkServices -> "concrete_work_services"
    IssuingCardAuthorizationControls_AllowedCategories_ConstructionMaterials -> "construction_materials"
    IssuingCardAuthorizationControls_AllowedCategories_ConsultingPublicRelations -> "consulting_public_relations"
    IssuingCardAuthorizationControls_AllowedCategories_CorrespondenceSchools -> "correspondence_schools"
    IssuingCardAuthorizationControls_AllowedCategories_CosmeticStores -> "cosmetic_stores"
    IssuingCardAuthorizationControls_AllowedCategories_CounselingServices -> "counseling_services"
    IssuingCardAuthorizationControls_AllowedCategories_CountryClubs -> "country_clubs"
    IssuingCardAuthorizationControls_AllowedCategories_CourierServices -> "courier_services"
    IssuingCardAuthorizationControls_AllowedCategories_CourtCosts -> "court_costs"
    IssuingCardAuthorizationControls_AllowedCategories_CreditReportingAgencies -> "credit_reporting_agencies"
    IssuingCardAuthorizationControls_AllowedCategories_CruiseLines -> "cruise_lines"
    IssuingCardAuthorizationControls_AllowedCategories_DairyProductsStores -> "dairy_products_stores"
    IssuingCardAuthorizationControls_AllowedCategories_DanceHallStudiosSchools -> "dance_hall_studios_schools"
    IssuingCardAuthorizationControls_AllowedCategories_DatingEscortServices -> "dating_escort_services"
    IssuingCardAuthorizationControls_AllowedCategories_DentistsOrthodontists -> "dentists_orthodontists"
    IssuingCardAuthorizationControls_AllowedCategories_DepartmentStores -> "department_stores"
    IssuingCardAuthorizationControls_AllowedCategories_DetectiveAgencies -> "detective_agencies"
    IssuingCardAuthorizationControls_AllowedCategories_DigitalGoodsApplications -> "digital_goods_applications"
    IssuingCardAuthorizationControls_AllowedCategories_DirectMarketingCatalogMerchant -> "direct_marketing_catalog_merchant"
    IssuingCardAuthorizationControls_AllowedCategories_DirectMarketingCombinationCatalogAndRetailMerchant -> "direct_marketing_combination_catalog_and_retail_merchant"
    IssuingCardAuthorizationControls_AllowedCategories_DirectMarketingInboundTelemarketing -> "direct_marketing_inbound_telemarketing"
    IssuingCardAuthorizationControls_AllowedCategories_DirectMarketingInsuranceServices -> "direct_marketing_insurance_services"
    IssuingCardAuthorizationControls_AllowedCategories_DirectMarketingOther -> "direct_marketing_other"
    IssuingCardAuthorizationControls_AllowedCategories_DirectMarketingOutboundTelemarketing -> "direct_marketing_outbound_telemarketing"
    IssuingCardAuthorizationControls_AllowedCategories_DirectMarketingSubscription -> "direct_marketing_subscription"
    IssuingCardAuthorizationControls_AllowedCategories_DirectMarketingTravel -> "direct_marketing_travel"
    IssuingCardAuthorizationControls_AllowedCategories_DiscountStores -> "discount_stores"
    IssuingCardAuthorizationControls_AllowedCategories_Doctors -> "doctors"
    IssuingCardAuthorizationControls_AllowedCategories_DoorToDoorSales -> "door_to_door_sales"
    IssuingCardAuthorizationControls_AllowedCategories_DraperyWindowCoveringAndUpholsteryStores -> "drapery_window_covering_and_upholstery_stores"
    IssuingCardAuthorizationControls_AllowedCategories_DrinkingPlaces -> "drinking_places"
    IssuingCardAuthorizationControls_AllowedCategories_DrugStoresAndPharmacies -> "drug_stores_and_pharmacies"
    IssuingCardAuthorizationControls_AllowedCategories_DrugsDrugProprietariesAndDruggistSundries -> "drugs_drug_proprietaries_and_druggist_sundries"
    IssuingCardAuthorizationControls_AllowedCategories_DryCleaners -> "dry_cleaners"
    IssuingCardAuthorizationControls_AllowedCategories_DurableGoods -> "durable_goods"
    IssuingCardAuthorizationControls_AllowedCategories_DutyFreeStores -> "duty_free_stores"
    IssuingCardAuthorizationControls_AllowedCategories_EatingPlacesRestaurants -> "eating_places_restaurants"
    IssuingCardAuthorizationControls_AllowedCategories_EducationalServices -> "educational_services"
    IssuingCardAuthorizationControls_AllowedCategories_ElectricRazorStores -> "electric_razor_stores"
    IssuingCardAuthorizationControls_AllowedCategories_ElectricalPartsAndEquipment -> "electrical_parts_and_equipment"
    IssuingCardAuthorizationControls_AllowedCategories_ElectricalServices -> "electrical_services"
    IssuingCardAuthorizationControls_AllowedCategories_ElectronicsRepairShops -> "electronics_repair_shops"
    IssuingCardAuthorizationControls_AllowedCategories_ElectronicsStores -> "electronics_stores"
    IssuingCardAuthorizationControls_AllowedCategories_ElementarySecondarySchools -> "elementary_secondary_schools"
    IssuingCardAuthorizationControls_AllowedCategories_EmploymentTempAgencies -> "employment_temp_agencies"
    IssuingCardAuthorizationControls_AllowedCategories_EquipmentRental -> "equipment_rental"
    IssuingCardAuthorizationControls_AllowedCategories_ExterminatingServices -> "exterminating_services"
    IssuingCardAuthorizationControls_AllowedCategories_FamilyClothingStores -> "family_clothing_stores"
    IssuingCardAuthorizationControls_AllowedCategories_FastFoodRestaurants -> "fast_food_restaurants"
    IssuingCardAuthorizationControls_AllowedCategories_FinancialInstitutions -> "financial_institutions"
    IssuingCardAuthorizationControls_AllowedCategories_FinesGovernmentAdministrativeEntities -> "fines_government_administrative_entities"
    IssuingCardAuthorizationControls_AllowedCategories_FireplaceFireplaceScreensAndAccessoriesStores -> "fireplace_fireplace_screens_and_accessories_stores"
    IssuingCardAuthorizationControls_AllowedCategories_FloorCoveringStores -> "floor_covering_stores"
    IssuingCardAuthorizationControls_AllowedCategories_Florists -> "florists"
    IssuingCardAuthorizationControls_AllowedCategories_FloristsSuppliesNurseryStockAndFlowers -> "florists_supplies_nursery_stock_and_flowers"
    IssuingCardAuthorizationControls_AllowedCategories_FreezerAndLockerMeatProvisioners -> "freezer_and_locker_meat_provisioners"
    IssuingCardAuthorizationControls_AllowedCategories_FuelDealersNonAutomotive -> "fuel_dealers_non_automotive"
    IssuingCardAuthorizationControls_AllowedCategories_FuneralServicesCrematories -> "funeral_services_crematories"
    IssuingCardAuthorizationControls_AllowedCategories_FurnitureHomeFurnishingsAndEquipmentStoresExceptAppliances -> "furniture_home_furnishings_and_equipment_stores_except_appliances"
    IssuingCardAuthorizationControls_AllowedCategories_FurnitureRepairRefinishing -> "furniture_repair_refinishing"
    IssuingCardAuthorizationControls_AllowedCategories_FurriersAndFurShops -> "furriers_and_fur_shops"
    IssuingCardAuthorizationControls_AllowedCategories_GeneralServices -> "general_services"
    IssuingCardAuthorizationControls_AllowedCategories_GiftCardNoveltyAndSouvenirShops -> "gift_card_novelty_and_souvenir_shops"
    IssuingCardAuthorizationControls_AllowedCategories_GlassPaintAndWallpaperStores -> "glass_paint_and_wallpaper_stores"
    IssuingCardAuthorizationControls_AllowedCategories_GlasswareCrystalStores -> "glassware_crystal_stores"
    IssuingCardAuthorizationControls_AllowedCategories_GolfCoursesPublic -> "golf_courses_public"
    IssuingCardAuthorizationControls_AllowedCategories_GovernmentServices -> "government_services"
    IssuingCardAuthorizationControls_AllowedCategories_GroceryStoresSupermarkets -> "grocery_stores_supermarkets"
    IssuingCardAuthorizationControls_AllowedCategories_HardwareEquipmentAndSupplies -> "hardware_equipment_and_supplies"
    IssuingCardAuthorizationControls_AllowedCategories_HardwareStores -> "hardware_stores"
    IssuingCardAuthorizationControls_AllowedCategories_HealthAndBeautySpas -> "health_and_beauty_spas"
    IssuingCardAuthorizationControls_AllowedCategories_HearingAidsSalesAndSupplies -> "hearing_aids_sales_and_supplies"
    IssuingCardAuthorizationControls_AllowedCategories_HeatingPlumbingAC -> "heating_plumbing_a_c"
    IssuingCardAuthorizationControls_AllowedCategories_HobbyToyAndGameShops -> "hobby_toy_and_game_shops"
    IssuingCardAuthorizationControls_AllowedCategories_HomeSupplyWarehouseStores -> "home_supply_warehouse_stores"
    IssuingCardAuthorizationControls_AllowedCategories_Hospitals -> "hospitals"
    IssuingCardAuthorizationControls_AllowedCategories_HotelsMotelsAndResorts -> "hotels_motels_and_resorts"
    IssuingCardAuthorizationControls_AllowedCategories_HouseholdApplianceStores -> "household_appliance_stores"
    IssuingCardAuthorizationControls_AllowedCategories_IndustrialSupplies -> "industrial_supplies"
    IssuingCardAuthorizationControls_AllowedCategories_InformationRetrievalServices -> "information_retrieval_services"
    IssuingCardAuthorizationControls_AllowedCategories_InsuranceDefault -> "insurance_default"
    IssuingCardAuthorizationControls_AllowedCategories_InsuranceUnderwritingPremiums -> "insurance_underwriting_premiums"
    IssuingCardAuthorizationControls_AllowedCategories_IntraCompanyPurchases -> "intra_company_purchases"
    IssuingCardAuthorizationControls_AllowedCategories_JewelryStoresWatchesClocksAndSilverwareStores -> "jewelry_stores_watches_clocks_and_silverware_stores"
    IssuingCardAuthorizationControls_AllowedCategories_LandscapingServices -> "landscaping_services"
    IssuingCardAuthorizationControls_AllowedCategories_Laundries -> "laundries"
    IssuingCardAuthorizationControls_AllowedCategories_LaundryCleaningServices -> "laundry_cleaning_services"
    IssuingCardAuthorizationControls_AllowedCategories_LegalServicesAttorneys -> "legal_services_attorneys"
    IssuingCardAuthorizationControls_AllowedCategories_LuggageAndLeatherGoodsStores -> "luggage_and_leather_goods_stores"
    IssuingCardAuthorizationControls_AllowedCategories_LumberBuildingMaterialsStores -> "lumber_building_materials_stores"
    IssuingCardAuthorizationControls_AllowedCategories_ManualCashDisburse -> "manual_cash_disburse"
    IssuingCardAuthorizationControls_AllowedCategories_MarinasServiceAndSupplies -> "marinas_service_and_supplies"
    IssuingCardAuthorizationControls_AllowedCategories_MasonryStoneworkAndPlaster -> "masonry_stonework_and_plaster"
    IssuingCardAuthorizationControls_AllowedCategories_MassageParlors -> "massage_parlors"
    IssuingCardAuthorizationControls_AllowedCategories_MedicalAndDentalLabs -> "medical_and_dental_labs"
    IssuingCardAuthorizationControls_AllowedCategories_MedicalDentalOphthalmicAndHospitalEquipmentAndSupplies -> "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
    IssuingCardAuthorizationControls_AllowedCategories_MedicalServices -> "medical_services"
    IssuingCardAuthorizationControls_AllowedCategories_MembershipOrganizations -> "membership_organizations"
    IssuingCardAuthorizationControls_AllowedCategories_MensAndBoysClothingAndAccessoriesStores -> "mens_and_boys_clothing_and_accessories_stores"
    IssuingCardAuthorizationControls_AllowedCategories_MensWomensClothingStores -> "mens_womens_clothing_stores"
    IssuingCardAuthorizationControls_AllowedCategories_MetalServiceCenters -> "metal_service_centers"
    IssuingCardAuthorizationControls_AllowedCategories_Miscellaneous -> "miscellaneous"
    IssuingCardAuthorizationControls_AllowedCategories_MiscellaneousApparelAndAccessoryShops -> "miscellaneous_apparel_and_accessory_shops"
    IssuingCardAuthorizationControls_AllowedCategories_MiscellaneousAutoDealers -> "miscellaneous_auto_dealers"
    IssuingCardAuthorizationControls_AllowedCategories_MiscellaneousBusinessServices -> "miscellaneous_business_services"
    IssuingCardAuthorizationControls_AllowedCategories_MiscellaneousFoodStores -> "miscellaneous_food_stores"
    IssuingCardAuthorizationControls_AllowedCategories_MiscellaneousGeneralMerchandise -> "miscellaneous_general_merchandise"
    IssuingCardAuthorizationControls_AllowedCategories_MiscellaneousGeneralServices -> "miscellaneous_general_services"
    IssuingCardAuthorizationControls_AllowedCategories_MiscellaneousHomeFurnishingSpecialtyStores -> "miscellaneous_home_furnishing_specialty_stores"
    IssuingCardAuthorizationControls_AllowedCategories_MiscellaneousPublishingAndPrinting -> "miscellaneous_publishing_and_printing"
    IssuingCardAuthorizationControls_AllowedCategories_MiscellaneousRecreationServices -> "miscellaneous_recreation_services"
    IssuingCardAuthorizationControls_AllowedCategories_MiscellaneousRepairShops -> "miscellaneous_repair_shops"
    IssuingCardAuthorizationControls_AllowedCategories_MiscellaneousSpecialtyRetail -> "miscellaneous_specialty_retail"
    IssuingCardAuthorizationControls_AllowedCategories_MobileHomeDealers -> "mobile_home_dealers"
    IssuingCardAuthorizationControls_AllowedCategories_MotionPictureTheaters -> "motion_picture_theaters"
    IssuingCardAuthorizationControls_AllowedCategories_MotorFreightCarriersAndTrucking -> "motor_freight_carriers_and_trucking"
    IssuingCardAuthorizationControls_AllowedCategories_MotorHomesDealers -> "motor_homes_dealers"
    IssuingCardAuthorizationControls_AllowedCategories_MotorVehicleSuppliesAndNewParts -> "motor_vehicle_supplies_and_new_parts"
    IssuingCardAuthorizationControls_AllowedCategories_MotorcycleShopsAndDealers -> "motorcycle_shops_and_dealers"
    IssuingCardAuthorizationControls_AllowedCategories_MotorcycleShopsDealers -> "motorcycle_shops_dealers"
    IssuingCardAuthorizationControls_AllowedCategories_MusicStoresMusicalInstrumentsPianosAndSheetMusic -> "music_stores_musical_instruments_pianos_and_sheet_music"
    IssuingCardAuthorizationControls_AllowedCategories_NewsDealersAndNewsstands -> "news_dealers_and_newsstands"
    IssuingCardAuthorizationControls_AllowedCategories_NonFiMoneyOrders -> "non_fi_money_orders"
    IssuingCardAuthorizationControls_AllowedCategories_NonFiStoredValueCardPurchaseLoad -> "non_fi_stored_value_card_purchase_load"
    IssuingCardAuthorizationControls_AllowedCategories_NondurableGoods -> "nondurable_goods"
    IssuingCardAuthorizationControls_AllowedCategories_NurseriesLawnAndGardenSupplyStores -> "nurseries_lawn_and_garden_supply_stores"
    IssuingCardAuthorizationControls_AllowedCategories_NursingPersonalCare -> "nursing_personal_care"
    IssuingCardAuthorizationControls_AllowedCategories_OfficeAndCommercialFurniture -> "office_and_commercial_furniture"
    IssuingCardAuthorizationControls_AllowedCategories_OpticiansEyeglasses -> "opticians_eyeglasses"
    IssuingCardAuthorizationControls_AllowedCategories_OptometristsOphthalmologist -> "optometrists_ophthalmologist"
    IssuingCardAuthorizationControls_AllowedCategories_OrthopedicGoodsProstheticDevices -> "orthopedic_goods_prosthetic_devices"
    IssuingCardAuthorizationControls_AllowedCategories_Osteopaths -> "osteopaths"
    IssuingCardAuthorizationControls_AllowedCategories_PackageStoresBeerWineAndLiquor -> "package_stores_beer_wine_and_liquor"
    IssuingCardAuthorizationControls_AllowedCategories_PaintsVarnishesAndSupplies -> "paints_varnishes_and_supplies"
    IssuingCardAuthorizationControls_AllowedCategories_ParkingLotsGarages -> "parking_lots_garages"
    IssuingCardAuthorizationControls_AllowedCategories_PassengerRailways -> "passenger_railways"
    IssuingCardAuthorizationControls_AllowedCategories_PawnShops -> "pawn_shops"
    IssuingCardAuthorizationControls_AllowedCategories_PetShopsPetFoodAndSupplies -> "pet_shops_pet_food_and_supplies"
    IssuingCardAuthorizationControls_AllowedCategories_PetroleumAndPetroleumProducts -> "petroleum_and_petroleum_products"
    IssuingCardAuthorizationControls_AllowedCategories_PhotoDeveloping -> "photo_developing"
    IssuingCardAuthorizationControls_AllowedCategories_PhotographicPhotocopyMicrofilmEquipmentAndSupplies -> "photographic_photocopy_microfilm_equipment_and_supplies"
    IssuingCardAuthorizationControls_AllowedCategories_PhotographicStudios -> "photographic_studios"
    IssuingCardAuthorizationControls_AllowedCategories_PictureVideoProduction -> "picture_video_production"
    IssuingCardAuthorizationControls_AllowedCategories_PieceGoodsNotionsAndOtherDryGoods -> "piece_goods_notions_and_other_dry_goods"
    IssuingCardAuthorizationControls_AllowedCategories_PlumbingHeatingEquipmentAndSupplies -> "plumbing_heating_equipment_and_supplies"
    IssuingCardAuthorizationControls_AllowedCategories_PoliticalOrganizations -> "political_organizations"
    IssuingCardAuthorizationControls_AllowedCategories_PostalServicesGovernmentOnly -> "postal_services_government_only"
    IssuingCardAuthorizationControls_AllowedCategories_PreciousStonesAndMetalsWatchesAndJewelry -> "precious_stones_and_metals_watches_and_jewelry"
    IssuingCardAuthorizationControls_AllowedCategories_ProfessionalServices -> "professional_services"
    IssuingCardAuthorizationControls_AllowedCategories_PublicWarehousingAndStorage -> "public_warehousing_and_storage"
    IssuingCardAuthorizationControls_AllowedCategories_QuickCopyReproAndBlueprint -> "quick_copy_repro_and_blueprint"
    IssuingCardAuthorizationControls_AllowedCategories_Railroads -> "railroads"
    IssuingCardAuthorizationControls_AllowedCategories_RealEstateAgentsAndManagersRentals -> "real_estate_agents_and_managers_rentals"
    IssuingCardAuthorizationControls_AllowedCategories_RecordStores -> "record_stores"
    IssuingCardAuthorizationControls_AllowedCategories_RecreationalVehicleRentals -> "recreational_vehicle_rentals"
    IssuingCardAuthorizationControls_AllowedCategories_ReligiousGoodsStores -> "religious_goods_stores"
    IssuingCardAuthorizationControls_AllowedCategories_ReligiousOrganizations -> "religious_organizations"
    IssuingCardAuthorizationControls_AllowedCategories_RoofingSidingSheetMetal -> "roofing_siding_sheet_metal"
    IssuingCardAuthorizationControls_AllowedCategories_SecretarialSupportServices -> "secretarial_support_services"
    IssuingCardAuthorizationControls_AllowedCategories_SecurityBrokersDealers -> "security_brokers_dealers"
    IssuingCardAuthorizationControls_AllowedCategories_ServiceStations -> "service_stations"
    IssuingCardAuthorizationControls_AllowedCategories_SewingNeedleworkFabricAndPieceGoodsStores -> "sewing_needlework_fabric_and_piece_goods_stores"
    IssuingCardAuthorizationControls_AllowedCategories_ShoeRepairHatCleaning -> "shoe_repair_hat_cleaning"
    IssuingCardAuthorizationControls_AllowedCategories_ShoeStores -> "shoe_stores"
    IssuingCardAuthorizationControls_AllowedCategories_SmallApplianceRepair -> "small_appliance_repair"
    IssuingCardAuthorizationControls_AllowedCategories_SnowmobileDealers -> "snowmobile_dealers"
    IssuingCardAuthorizationControls_AllowedCategories_SpecialTradeServices -> "special_trade_services"
    IssuingCardAuthorizationControls_AllowedCategories_SpecialtyCleaning -> "specialty_cleaning"
    IssuingCardAuthorizationControls_AllowedCategories_SportingGoodsStores -> "sporting_goods_stores"
    IssuingCardAuthorizationControls_AllowedCategories_SportingRecreationCamps -> "sporting_recreation_camps"
    IssuingCardAuthorizationControls_AllowedCategories_SportsAndRidingApparelStores -> "sports_and_riding_apparel_stores"
    IssuingCardAuthorizationControls_AllowedCategories_SportsClubsFields -> "sports_clubs_fields"
    IssuingCardAuthorizationControls_AllowedCategories_StampAndCoinStores -> "stamp_and_coin_stores"
    IssuingCardAuthorizationControls_AllowedCategories_StationaryOfficeSuppliesPrintingAndWritingPaper -> "stationary_office_supplies_printing_and_writing_paper"
    IssuingCardAuthorizationControls_AllowedCategories_StationeryStoresOfficeAndSchoolSupplyStores -> "stationery_stores_office_and_school_supply_stores"
    IssuingCardAuthorizationControls_AllowedCategories_SwimmingPoolsSales -> "swimming_pools_sales"
    IssuingCardAuthorizationControls_AllowedCategories_TUiTravelGermany -> "t_ui_travel_germany"
    IssuingCardAuthorizationControls_AllowedCategories_TailorsAlterations -> "tailors_alterations"
    IssuingCardAuthorizationControls_AllowedCategories_TaxPaymentsGovernmentAgencies -> "tax_payments_government_agencies"
    IssuingCardAuthorizationControls_AllowedCategories_TaxPreparationServices -> "tax_preparation_services"
    IssuingCardAuthorizationControls_AllowedCategories_TaxicabsLimousines -> "taxicabs_limousines"
    IssuingCardAuthorizationControls_AllowedCategories_TelecommunicationEquipmentAndTelephoneSales -> "telecommunication_equipment_and_telephone_sales"
    IssuingCardAuthorizationControls_AllowedCategories_TelecommunicationServices -> "telecommunication_services"
    IssuingCardAuthorizationControls_AllowedCategories_TelegraphServices -> "telegraph_services"
    IssuingCardAuthorizationControls_AllowedCategories_TentAndAwningShops -> "tent_and_awning_shops"
    IssuingCardAuthorizationControls_AllowedCategories_TestingLaboratories -> "testing_laboratories"
    IssuingCardAuthorizationControls_AllowedCategories_TheatricalTicketAgencies -> "theatrical_ticket_agencies"
    IssuingCardAuthorizationControls_AllowedCategories_Timeshares -> "timeshares"
    IssuingCardAuthorizationControls_AllowedCategories_TireRetreadingAndRepair -> "tire_retreading_and_repair"
    IssuingCardAuthorizationControls_AllowedCategories_TollsBridgeFees -> "tolls_bridge_fees"
    IssuingCardAuthorizationControls_AllowedCategories_TouristAttractionsAndExhibits -> "tourist_attractions_and_exhibits"
    IssuingCardAuthorizationControls_AllowedCategories_TowingServices -> "towing_services"
    IssuingCardAuthorizationControls_AllowedCategories_TrailerParksCampgrounds -> "trailer_parks_campgrounds"
    IssuingCardAuthorizationControls_AllowedCategories_TransportationServices -> "transportation_services"
    IssuingCardAuthorizationControls_AllowedCategories_TravelAgenciesTourOperators -> "travel_agencies_tour_operators"
    IssuingCardAuthorizationControls_AllowedCategories_TruckStopIteration -> "truck_stop_iteration"
    IssuingCardAuthorizationControls_AllowedCategories_TruckUtilityTrailerRentals -> "truck_utility_trailer_rentals"
    IssuingCardAuthorizationControls_AllowedCategories_TypesettingPlateMakingAndRelatedServices -> "typesetting_plate_making_and_related_services"
    IssuingCardAuthorizationControls_AllowedCategories_TypewriterStores -> "typewriter_stores"
    IssuingCardAuthorizationControls_AllowedCategories_USFederalGovernmentAgenciesOrDepartments -> "u_s_federal_government_agencies_or_departments"
    IssuingCardAuthorizationControls_AllowedCategories_UniformsCommercialClothing -> "uniforms_commercial_clothing"
    IssuingCardAuthorizationControls_AllowedCategories_UsedMerchandiseAndSecondhandStores -> "used_merchandise_and_secondhand_stores"
    IssuingCardAuthorizationControls_AllowedCategories_Utilities -> "utilities"
    IssuingCardAuthorizationControls_AllowedCategories_VarietyStores -> "variety_stores"
    IssuingCardAuthorizationControls_AllowedCategories_VeterinaryServices -> "veterinary_services"
    IssuingCardAuthorizationControls_AllowedCategories_VideoAmusementGameSupplies -> "video_amusement_game_supplies"
    IssuingCardAuthorizationControls_AllowedCategories_VideoGameArcades -> "video_game_arcades"
    IssuingCardAuthorizationControls_AllowedCategories_VideoTapeRentalStores -> "video_tape_rental_stores"
    IssuingCardAuthorizationControls_AllowedCategories_VocationalTradeSchools -> "vocational_trade_schools"
    IssuingCardAuthorizationControls_AllowedCategories_WatchJewelryRepair -> "watch_jewelry_repair"
    IssuingCardAuthorizationControls_AllowedCategories_WeldingRepair -> "welding_repair"
    IssuingCardAuthorizationControls_AllowedCategories_WholesaleClubs -> "wholesale_clubs"
    IssuingCardAuthorizationControls_AllowedCategories_WigAndToupeeStores -> "wig_and_toupee_stores"
    IssuingCardAuthorizationControls_AllowedCategories_WiresMoneyOrders -> "wires_money_orders"
    IssuingCardAuthorizationControls_AllowedCategories_WomensAccessoryAndSpecialtyShops -> "womens_accessory_and_specialty_shops"
    IssuingCardAuthorizationControls_AllowedCategories_WomensReadyToWearStores -> "womens_ready_to_wear_stores"
    IssuingCardAuthorizationControls_AllowedCategories_WreckingAndSalvageYards -> "wrecking_and_salvage_yards"

instance FromJSON IssuingCardAuthorizationControls_AllowedCategories where
  parseJSON = withText "IssuingCardAuthorizationControls_AllowedCategories" $ \case
    "ac_refrigeration_repair" -> pure IssuingCardAuthorizationControls_AllowedCategories_AcRefrigerationRepair
    "accounting_bookkeeping_services" -> pure IssuingCardAuthorizationControls_AllowedCategories_AccountingBookkeepingServices
    "advertising_services" -> pure IssuingCardAuthorizationControls_AllowedCategories_AdvertisingServices
    "agricultural_cooperative" -> pure IssuingCardAuthorizationControls_AllowedCategories_AgriculturalCooperative
    "airlines_air_carriers" -> pure IssuingCardAuthorizationControls_AllowedCategories_AirlinesAirCarriers
    "airports_flying_fields" -> pure IssuingCardAuthorizationControls_AllowedCategories_AirportsFlyingFields
    "ambulance_services" -> pure IssuingCardAuthorizationControls_AllowedCategories_AmbulanceServices
    "amusement_parks_carnivals" -> pure IssuingCardAuthorizationControls_AllowedCategories_AmusementParksCarnivals
    "antique_reproductions" -> pure IssuingCardAuthorizationControls_AllowedCategories_AntiqueReproductions
    "antique_shops" -> pure IssuingCardAuthorizationControls_AllowedCategories_AntiqueShops
    "aquariums" -> pure IssuingCardAuthorizationControls_AllowedCategories_Aquariums
    "architectural_surveying_services" -> pure IssuingCardAuthorizationControls_AllowedCategories_ArchitecturalSurveyingServices
    "art_dealers_and_galleries" -> pure IssuingCardAuthorizationControls_AllowedCategories_ArtDealersAndGalleries
    "artists_supply_and_craft_shops" -> pure IssuingCardAuthorizationControls_AllowedCategories_ArtistsSupplyAndCraftShops
    "auto_and_home_supply_stores" -> pure IssuingCardAuthorizationControls_AllowedCategories_AutoAndHomeSupplyStores
    "auto_body_repair_shops" -> pure IssuingCardAuthorizationControls_AllowedCategories_AutoBodyRepairShops
    "auto_paint_shops" -> pure IssuingCardAuthorizationControls_AllowedCategories_AutoPaintShops
    "auto_service_shops" -> pure IssuingCardAuthorizationControls_AllowedCategories_AutoServiceShops
    "automated_cash_disburse" -> pure IssuingCardAuthorizationControls_AllowedCategories_AutomatedCashDisburse
    "automated_fuel_dispensers" -> pure IssuingCardAuthorizationControls_AllowedCategories_AutomatedFuelDispensers
    "automobile_associations" -> pure IssuingCardAuthorizationControls_AllowedCategories_AutomobileAssociations
    "automotive_parts_and_accessories_stores" -> pure IssuingCardAuthorizationControls_AllowedCategories_AutomotivePartsAndAccessoriesStores
    "automotive_tire_stores" -> pure IssuingCardAuthorizationControls_AllowedCategories_AutomotiveTireStores
    "bail_and_bond_payments" -> pure IssuingCardAuthorizationControls_AllowedCategories_BailAndBondPayments
    "bakeries" -> pure IssuingCardAuthorizationControls_AllowedCategories_Bakeries
    "bands_orchestras" -> pure IssuingCardAuthorizationControls_AllowedCategories_BandsOrchestras
    "barber_and_beauty_shops" -> pure IssuingCardAuthorizationControls_AllowedCategories_BarberAndBeautyShops
    "betting_casino_gambling" -> pure IssuingCardAuthorizationControls_AllowedCategories_BettingCasinoGambling
    "bicycle_shops" -> pure IssuingCardAuthorizationControls_AllowedCategories_BicycleShops
    "billiard_pool_establishments" -> pure IssuingCardAuthorizationControls_AllowedCategories_BilliardPoolEstablishments
    "boat_dealers" -> pure IssuingCardAuthorizationControls_AllowedCategories_BoatDealers
    "boat_rentals_and_leases" -> pure IssuingCardAuthorizationControls_AllowedCategories_BoatRentalsAndLeases
    "book_stores" -> pure IssuingCardAuthorizationControls_AllowedCategories_BookStores
    "books_periodicals_and_newspapers" -> pure IssuingCardAuthorizationControls_AllowedCategories_BooksPeriodicalsAndNewspapers
    "bowling_alleys" -> pure IssuingCardAuthorizationControls_AllowedCategories_BowlingAlleys
    "bus_lines" -> pure IssuingCardAuthorizationControls_AllowedCategories_BusLines
    "business_secretarial_schools" -> pure IssuingCardAuthorizationControls_AllowedCategories_BusinessSecretarialSchools
    "buying_shopping_services" -> pure IssuingCardAuthorizationControls_AllowedCategories_BuyingShoppingServices
    "cable_satellite_and_other_pay_television_and_radio" -> pure IssuingCardAuthorizationControls_AllowedCategories_CableSatelliteAndOtherPayTelevisionAndRadio
    "camera_and_photographic_supply_stores" -> pure IssuingCardAuthorizationControls_AllowedCategories_CameraAndPhotographicSupplyStores
    "candy_nut_and_confectionery_stores" -> pure IssuingCardAuthorizationControls_AllowedCategories_CandyNutAndConfectioneryStores
    "car_and_truck_dealers_new_used" -> pure IssuingCardAuthorizationControls_AllowedCategories_CarAndTruckDealersNewUsed
    "car_and_truck_dealers_used_only" -> pure IssuingCardAuthorizationControls_AllowedCategories_CarAndTruckDealersUsedOnly
    "car_rental_agencies" -> pure IssuingCardAuthorizationControls_AllowedCategories_CarRentalAgencies
    "car_washes" -> pure IssuingCardAuthorizationControls_AllowedCategories_CarWashes
    "carpentry_services" -> pure IssuingCardAuthorizationControls_AllowedCategories_CarpentryServices
    "carpet_upholstery_cleaning" -> pure IssuingCardAuthorizationControls_AllowedCategories_CarpetUpholsteryCleaning
    "caterers" -> pure IssuingCardAuthorizationControls_AllowedCategories_Caterers
    "charitable_and_social_service_organizations_fundraising" -> pure IssuingCardAuthorizationControls_AllowedCategories_CharitableAndSocialServiceOrganizationsFundraising
    "chemicals_and_allied_products" -> pure IssuingCardAuthorizationControls_AllowedCategories_ChemicalsAndAlliedProducts
    "chidrens_and_infants_wear_stores" -> pure IssuingCardAuthorizationControls_AllowedCategories_ChidrensAndInfantsWearStores
    "child_care_services" -> pure IssuingCardAuthorizationControls_AllowedCategories_ChildCareServices
    "chiropodists_podiatrists" -> pure IssuingCardAuthorizationControls_AllowedCategories_ChiropodistsPodiatrists
    "chiropractors" -> pure IssuingCardAuthorizationControls_AllowedCategories_Chiropractors
    "cigar_stores_and_stands" -> pure IssuingCardAuthorizationControls_AllowedCategories_CigarStoresAndStands
    "civic_social_fraternal_associations" -> pure IssuingCardAuthorizationControls_AllowedCategories_CivicSocialFraternalAssociations
    "cleaning_and_maintenance" -> pure IssuingCardAuthorizationControls_AllowedCategories_CleaningAndMaintenance
    "clothing_rental" -> pure IssuingCardAuthorizationControls_AllowedCategories_ClothingRental
    "colleges_universities" -> pure IssuingCardAuthorizationControls_AllowedCategories_CollegesUniversities
    "commercial_equipment" -> pure IssuingCardAuthorizationControls_AllowedCategories_CommercialEquipment
    "commercial_footwear" -> pure IssuingCardAuthorizationControls_AllowedCategories_CommercialFootwear
    "commercial_photography_art_and_graphics" -> pure IssuingCardAuthorizationControls_AllowedCategories_CommercialPhotographyArtAndGraphics
    "commuter_transport_and_ferries" -> pure IssuingCardAuthorizationControls_AllowedCategories_CommuterTransportAndFerries
    "computer_network_services" -> pure IssuingCardAuthorizationControls_AllowedCategories_ComputerNetworkServices
    "computer_programming" -> pure IssuingCardAuthorizationControls_AllowedCategories_ComputerProgramming
    "computer_repair" -> pure IssuingCardAuthorizationControls_AllowedCategories_ComputerRepair
    "computer_software_stores" -> pure IssuingCardAuthorizationControls_AllowedCategories_ComputerSoftwareStores
    "computers_peripherals_and_software" -> pure IssuingCardAuthorizationControls_AllowedCategories_ComputersPeripheralsAndSoftware
    "concrete_work_services" -> pure IssuingCardAuthorizationControls_AllowedCategories_ConcreteWorkServices
    "construction_materials" -> pure IssuingCardAuthorizationControls_AllowedCategories_ConstructionMaterials
    "consulting_public_relations" -> pure IssuingCardAuthorizationControls_AllowedCategories_ConsultingPublicRelations
    "correspondence_schools" -> pure IssuingCardAuthorizationControls_AllowedCategories_CorrespondenceSchools
    "cosmetic_stores" -> pure IssuingCardAuthorizationControls_AllowedCategories_CosmeticStores
    "counseling_services" -> pure IssuingCardAuthorizationControls_AllowedCategories_CounselingServices
    "country_clubs" -> pure IssuingCardAuthorizationControls_AllowedCategories_CountryClubs
    "courier_services" -> pure IssuingCardAuthorizationControls_AllowedCategories_CourierServices
    "court_costs" -> pure IssuingCardAuthorizationControls_AllowedCategories_CourtCosts
    "credit_reporting_agencies" -> pure IssuingCardAuthorizationControls_AllowedCategories_CreditReportingAgencies
    "cruise_lines" -> pure IssuingCardAuthorizationControls_AllowedCategories_CruiseLines
    "dairy_products_stores" -> pure IssuingCardAuthorizationControls_AllowedCategories_DairyProductsStores
    "dance_hall_studios_schools" -> pure IssuingCardAuthorizationControls_AllowedCategories_DanceHallStudiosSchools
    "dating_escort_services" -> pure IssuingCardAuthorizationControls_AllowedCategories_DatingEscortServices
    "dentists_orthodontists" -> pure IssuingCardAuthorizationControls_AllowedCategories_DentistsOrthodontists
    "department_stores" -> pure IssuingCardAuthorizationControls_AllowedCategories_DepartmentStores
    "detective_agencies" -> pure IssuingCardAuthorizationControls_AllowedCategories_DetectiveAgencies
    "digital_goods_applications" -> pure IssuingCardAuthorizationControls_AllowedCategories_DigitalGoodsApplications
    "direct_marketing_catalog_merchant" -> pure IssuingCardAuthorizationControls_AllowedCategories_DirectMarketingCatalogMerchant
    "direct_marketing_combination_catalog_and_retail_merchant" -> pure IssuingCardAuthorizationControls_AllowedCategories_DirectMarketingCombinationCatalogAndRetailMerchant
    "direct_marketing_inbound_telemarketing" -> pure IssuingCardAuthorizationControls_AllowedCategories_DirectMarketingInboundTelemarketing
    "direct_marketing_insurance_services" -> pure IssuingCardAuthorizationControls_AllowedCategories_DirectMarketingInsuranceServices
    "direct_marketing_other" -> pure IssuingCardAuthorizationControls_AllowedCategories_DirectMarketingOther
    "direct_marketing_outbound_telemarketing" -> pure IssuingCardAuthorizationControls_AllowedCategories_DirectMarketingOutboundTelemarketing
    "direct_marketing_subscription" -> pure IssuingCardAuthorizationControls_AllowedCategories_DirectMarketingSubscription
    "direct_marketing_travel" -> pure IssuingCardAuthorizationControls_AllowedCategories_DirectMarketingTravel
    "discount_stores" -> pure IssuingCardAuthorizationControls_AllowedCategories_DiscountStores
    "doctors" -> pure IssuingCardAuthorizationControls_AllowedCategories_Doctors
    "door_to_door_sales" -> pure IssuingCardAuthorizationControls_AllowedCategories_DoorToDoorSales
    "drapery_window_covering_and_upholstery_stores" -> pure IssuingCardAuthorizationControls_AllowedCategories_DraperyWindowCoveringAndUpholsteryStores
    "drinking_places" -> pure IssuingCardAuthorizationControls_AllowedCategories_DrinkingPlaces
    "drug_stores_and_pharmacies" -> pure IssuingCardAuthorizationControls_AllowedCategories_DrugStoresAndPharmacies
    "drugs_drug_proprietaries_and_druggist_sundries" -> pure IssuingCardAuthorizationControls_AllowedCategories_DrugsDrugProprietariesAndDruggistSundries
    "dry_cleaners" -> pure IssuingCardAuthorizationControls_AllowedCategories_DryCleaners
    "durable_goods" -> pure IssuingCardAuthorizationControls_AllowedCategories_DurableGoods
    "duty_free_stores" -> pure IssuingCardAuthorizationControls_AllowedCategories_DutyFreeStores
    "eating_places_restaurants" -> pure IssuingCardAuthorizationControls_AllowedCategories_EatingPlacesRestaurants
    "educational_services" -> pure IssuingCardAuthorizationControls_AllowedCategories_EducationalServices
    "electric_razor_stores" -> pure IssuingCardAuthorizationControls_AllowedCategories_ElectricRazorStores
    "electrical_parts_and_equipment" -> pure IssuingCardAuthorizationControls_AllowedCategories_ElectricalPartsAndEquipment
    "electrical_services" -> pure IssuingCardAuthorizationControls_AllowedCategories_ElectricalServices
    "electronics_repair_shops" -> pure IssuingCardAuthorizationControls_AllowedCategories_ElectronicsRepairShops
    "electronics_stores" -> pure IssuingCardAuthorizationControls_AllowedCategories_ElectronicsStores
    "elementary_secondary_schools" -> pure IssuingCardAuthorizationControls_AllowedCategories_ElementarySecondarySchools
    "employment_temp_agencies" -> pure IssuingCardAuthorizationControls_AllowedCategories_EmploymentTempAgencies
    "equipment_rental" -> pure IssuingCardAuthorizationControls_AllowedCategories_EquipmentRental
    "exterminating_services" -> pure IssuingCardAuthorizationControls_AllowedCategories_ExterminatingServices
    "family_clothing_stores" -> pure IssuingCardAuthorizationControls_AllowedCategories_FamilyClothingStores
    "fast_food_restaurants" -> pure IssuingCardAuthorizationControls_AllowedCategories_FastFoodRestaurants
    "financial_institutions" -> pure IssuingCardAuthorizationControls_AllowedCategories_FinancialInstitutions
    "fines_government_administrative_entities" -> pure IssuingCardAuthorizationControls_AllowedCategories_FinesGovernmentAdministrativeEntities
    "fireplace_fireplace_screens_and_accessories_stores" -> pure IssuingCardAuthorizationControls_AllowedCategories_FireplaceFireplaceScreensAndAccessoriesStores
    "floor_covering_stores" -> pure IssuingCardAuthorizationControls_AllowedCategories_FloorCoveringStores
    "florists" -> pure IssuingCardAuthorizationControls_AllowedCategories_Florists
    "florists_supplies_nursery_stock_and_flowers" -> pure IssuingCardAuthorizationControls_AllowedCategories_FloristsSuppliesNurseryStockAndFlowers
    "freezer_and_locker_meat_provisioners" -> pure IssuingCardAuthorizationControls_AllowedCategories_FreezerAndLockerMeatProvisioners
    "fuel_dealers_non_automotive" -> pure IssuingCardAuthorizationControls_AllowedCategories_FuelDealersNonAutomotive
    "funeral_services_crematories" -> pure IssuingCardAuthorizationControls_AllowedCategories_FuneralServicesCrematories
    "furniture_home_furnishings_and_equipment_stores_except_appliances" -> pure IssuingCardAuthorizationControls_AllowedCategories_FurnitureHomeFurnishingsAndEquipmentStoresExceptAppliances
    "furniture_repair_refinishing" -> pure IssuingCardAuthorizationControls_AllowedCategories_FurnitureRepairRefinishing
    "furriers_and_fur_shops" -> pure IssuingCardAuthorizationControls_AllowedCategories_FurriersAndFurShops
    "general_services" -> pure IssuingCardAuthorizationControls_AllowedCategories_GeneralServices
    "gift_card_novelty_and_souvenir_shops" -> pure IssuingCardAuthorizationControls_AllowedCategories_GiftCardNoveltyAndSouvenirShops
    "glass_paint_and_wallpaper_stores" -> pure IssuingCardAuthorizationControls_AllowedCategories_GlassPaintAndWallpaperStores
    "glassware_crystal_stores" -> pure IssuingCardAuthorizationControls_AllowedCategories_GlasswareCrystalStores
    "golf_courses_public" -> pure IssuingCardAuthorizationControls_AllowedCategories_GolfCoursesPublic
    "government_services" -> pure IssuingCardAuthorizationControls_AllowedCategories_GovernmentServices
    "grocery_stores_supermarkets" -> pure IssuingCardAuthorizationControls_AllowedCategories_GroceryStoresSupermarkets
    "hardware_equipment_and_supplies" -> pure IssuingCardAuthorizationControls_AllowedCategories_HardwareEquipmentAndSupplies
    "hardware_stores" -> pure IssuingCardAuthorizationControls_AllowedCategories_HardwareStores
    "health_and_beauty_spas" -> pure IssuingCardAuthorizationControls_AllowedCategories_HealthAndBeautySpas
    "hearing_aids_sales_and_supplies" -> pure IssuingCardAuthorizationControls_AllowedCategories_HearingAidsSalesAndSupplies
    "heating_plumbing_a_c" -> pure IssuingCardAuthorizationControls_AllowedCategories_HeatingPlumbingAC
    "hobby_toy_and_game_shops" -> pure IssuingCardAuthorizationControls_AllowedCategories_HobbyToyAndGameShops
    "home_supply_warehouse_stores" -> pure IssuingCardAuthorizationControls_AllowedCategories_HomeSupplyWarehouseStores
    "hospitals" -> pure IssuingCardAuthorizationControls_AllowedCategories_Hospitals
    "hotels_motels_and_resorts" -> pure IssuingCardAuthorizationControls_AllowedCategories_HotelsMotelsAndResorts
    "household_appliance_stores" -> pure IssuingCardAuthorizationControls_AllowedCategories_HouseholdApplianceStores
    "industrial_supplies" -> pure IssuingCardAuthorizationControls_AllowedCategories_IndustrialSupplies
    "information_retrieval_services" -> pure IssuingCardAuthorizationControls_AllowedCategories_InformationRetrievalServices
    "insurance_default" -> pure IssuingCardAuthorizationControls_AllowedCategories_InsuranceDefault
    "insurance_underwriting_premiums" -> pure IssuingCardAuthorizationControls_AllowedCategories_InsuranceUnderwritingPremiums
    "intra_company_purchases" -> pure IssuingCardAuthorizationControls_AllowedCategories_IntraCompanyPurchases
    "jewelry_stores_watches_clocks_and_silverware_stores" -> pure IssuingCardAuthorizationControls_AllowedCategories_JewelryStoresWatchesClocksAndSilverwareStores
    "landscaping_services" -> pure IssuingCardAuthorizationControls_AllowedCategories_LandscapingServices
    "laundries" -> pure IssuingCardAuthorizationControls_AllowedCategories_Laundries
    "laundry_cleaning_services" -> pure IssuingCardAuthorizationControls_AllowedCategories_LaundryCleaningServices
    "legal_services_attorneys" -> pure IssuingCardAuthorizationControls_AllowedCategories_LegalServicesAttorneys
    "luggage_and_leather_goods_stores" -> pure IssuingCardAuthorizationControls_AllowedCategories_LuggageAndLeatherGoodsStores
    "lumber_building_materials_stores" -> pure IssuingCardAuthorizationControls_AllowedCategories_LumberBuildingMaterialsStores
    "manual_cash_disburse" -> pure IssuingCardAuthorizationControls_AllowedCategories_ManualCashDisburse
    "marinas_service_and_supplies" -> pure IssuingCardAuthorizationControls_AllowedCategories_MarinasServiceAndSupplies
    "masonry_stonework_and_plaster" -> pure IssuingCardAuthorizationControls_AllowedCategories_MasonryStoneworkAndPlaster
    "massage_parlors" -> pure IssuingCardAuthorizationControls_AllowedCategories_MassageParlors
    "medical_and_dental_labs" -> pure IssuingCardAuthorizationControls_AllowedCategories_MedicalAndDentalLabs
    "medical_dental_ophthalmic_and_hospital_equipment_and_supplies" -> pure IssuingCardAuthorizationControls_AllowedCategories_MedicalDentalOphthalmicAndHospitalEquipmentAndSupplies
    "medical_services" -> pure IssuingCardAuthorizationControls_AllowedCategories_MedicalServices
    "membership_organizations" -> pure IssuingCardAuthorizationControls_AllowedCategories_MembershipOrganizations
    "mens_and_boys_clothing_and_accessories_stores" -> pure IssuingCardAuthorizationControls_AllowedCategories_MensAndBoysClothingAndAccessoriesStores
    "mens_womens_clothing_stores" -> pure IssuingCardAuthorizationControls_AllowedCategories_MensWomensClothingStores
    "metal_service_centers" -> pure IssuingCardAuthorizationControls_AllowedCategories_MetalServiceCenters
    "miscellaneous" -> pure IssuingCardAuthorizationControls_AllowedCategories_Miscellaneous
    "miscellaneous_apparel_and_accessory_shops" -> pure IssuingCardAuthorizationControls_AllowedCategories_MiscellaneousApparelAndAccessoryShops
    "miscellaneous_auto_dealers" -> pure IssuingCardAuthorizationControls_AllowedCategories_MiscellaneousAutoDealers
    "miscellaneous_business_services" -> pure IssuingCardAuthorizationControls_AllowedCategories_MiscellaneousBusinessServices
    "miscellaneous_food_stores" -> pure IssuingCardAuthorizationControls_AllowedCategories_MiscellaneousFoodStores
    "miscellaneous_general_merchandise" -> pure IssuingCardAuthorizationControls_AllowedCategories_MiscellaneousGeneralMerchandise
    "miscellaneous_general_services" -> pure IssuingCardAuthorizationControls_AllowedCategories_MiscellaneousGeneralServices
    "miscellaneous_home_furnishing_specialty_stores" -> pure IssuingCardAuthorizationControls_AllowedCategories_MiscellaneousHomeFurnishingSpecialtyStores
    "miscellaneous_publishing_and_printing" -> pure IssuingCardAuthorizationControls_AllowedCategories_MiscellaneousPublishingAndPrinting
    "miscellaneous_recreation_services" -> pure IssuingCardAuthorizationControls_AllowedCategories_MiscellaneousRecreationServices
    "miscellaneous_repair_shops" -> pure IssuingCardAuthorizationControls_AllowedCategories_MiscellaneousRepairShops
    "miscellaneous_specialty_retail" -> pure IssuingCardAuthorizationControls_AllowedCategories_MiscellaneousSpecialtyRetail
    "mobile_home_dealers" -> pure IssuingCardAuthorizationControls_AllowedCategories_MobileHomeDealers
    "motion_picture_theaters" -> pure IssuingCardAuthorizationControls_AllowedCategories_MotionPictureTheaters
    "motor_freight_carriers_and_trucking" -> pure IssuingCardAuthorizationControls_AllowedCategories_MotorFreightCarriersAndTrucking
    "motor_homes_dealers" -> pure IssuingCardAuthorizationControls_AllowedCategories_MotorHomesDealers
    "motor_vehicle_supplies_and_new_parts" -> pure IssuingCardAuthorizationControls_AllowedCategories_MotorVehicleSuppliesAndNewParts
    "motorcycle_shops_and_dealers" -> pure IssuingCardAuthorizationControls_AllowedCategories_MotorcycleShopsAndDealers
    "motorcycle_shops_dealers" -> pure IssuingCardAuthorizationControls_AllowedCategories_MotorcycleShopsDealers
    "music_stores_musical_instruments_pianos_and_sheet_music" -> pure IssuingCardAuthorizationControls_AllowedCategories_MusicStoresMusicalInstrumentsPianosAndSheetMusic
    "news_dealers_and_newsstands" -> pure IssuingCardAuthorizationControls_AllowedCategories_NewsDealersAndNewsstands
    "non_fi_money_orders" -> pure IssuingCardAuthorizationControls_AllowedCategories_NonFiMoneyOrders
    "non_fi_stored_value_card_purchase_load" -> pure IssuingCardAuthorizationControls_AllowedCategories_NonFiStoredValueCardPurchaseLoad
    "nondurable_goods" -> pure IssuingCardAuthorizationControls_AllowedCategories_NondurableGoods
    "nurseries_lawn_and_garden_supply_stores" -> pure IssuingCardAuthorizationControls_AllowedCategories_NurseriesLawnAndGardenSupplyStores
    "nursing_personal_care" -> pure IssuingCardAuthorizationControls_AllowedCategories_NursingPersonalCare
    "office_and_commercial_furniture" -> pure IssuingCardAuthorizationControls_AllowedCategories_OfficeAndCommercialFurniture
    "opticians_eyeglasses" -> pure IssuingCardAuthorizationControls_AllowedCategories_OpticiansEyeglasses
    "optometrists_ophthalmologist" -> pure IssuingCardAuthorizationControls_AllowedCategories_OptometristsOphthalmologist
    "orthopedic_goods_prosthetic_devices" -> pure IssuingCardAuthorizationControls_AllowedCategories_OrthopedicGoodsProstheticDevices
    "osteopaths" -> pure IssuingCardAuthorizationControls_AllowedCategories_Osteopaths
    "package_stores_beer_wine_and_liquor" -> pure IssuingCardAuthorizationControls_AllowedCategories_PackageStoresBeerWineAndLiquor
    "paints_varnishes_and_supplies" -> pure IssuingCardAuthorizationControls_AllowedCategories_PaintsVarnishesAndSupplies
    "parking_lots_garages" -> pure IssuingCardAuthorizationControls_AllowedCategories_ParkingLotsGarages
    "passenger_railways" -> pure IssuingCardAuthorizationControls_AllowedCategories_PassengerRailways
    "pawn_shops" -> pure IssuingCardAuthorizationControls_AllowedCategories_PawnShops
    "pet_shops_pet_food_and_supplies" -> pure IssuingCardAuthorizationControls_AllowedCategories_PetShopsPetFoodAndSupplies
    "petroleum_and_petroleum_products" -> pure IssuingCardAuthorizationControls_AllowedCategories_PetroleumAndPetroleumProducts
    "photo_developing" -> pure IssuingCardAuthorizationControls_AllowedCategories_PhotoDeveloping
    "photographic_photocopy_microfilm_equipment_and_supplies" -> pure IssuingCardAuthorizationControls_AllowedCategories_PhotographicPhotocopyMicrofilmEquipmentAndSupplies
    "photographic_studios" -> pure IssuingCardAuthorizationControls_AllowedCategories_PhotographicStudios
    "picture_video_production" -> pure IssuingCardAuthorizationControls_AllowedCategories_PictureVideoProduction
    "piece_goods_notions_and_other_dry_goods" -> pure IssuingCardAuthorizationControls_AllowedCategories_PieceGoodsNotionsAndOtherDryGoods
    "plumbing_heating_equipment_and_supplies" -> pure IssuingCardAuthorizationControls_AllowedCategories_PlumbingHeatingEquipmentAndSupplies
    "political_organizations" -> pure IssuingCardAuthorizationControls_AllowedCategories_PoliticalOrganizations
    "postal_services_government_only" -> pure IssuingCardAuthorizationControls_AllowedCategories_PostalServicesGovernmentOnly
    "precious_stones_and_metals_watches_and_jewelry" -> pure IssuingCardAuthorizationControls_AllowedCategories_PreciousStonesAndMetalsWatchesAndJewelry
    "professional_services" -> pure IssuingCardAuthorizationControls_AllowedCategories_ProfessionalServices
    "public_warehousing_and_storage" -> pure IssuingCardAuthorizationControls_AllowedCategories_PublicWarehousingAndStorage
    "quick_copy_repro_and_blueprint" -> pure IssuingCardAuthorizationControls_AllowedCategories_QuickCopyReproAndBlueprint
    "railroads" -> pure IssuingCardAuthorizationControls_AllowedCategories_Railroads
    "real_estate_agents_and_managers_rentals" -> pure IssuingCardAuthorizationControls_AllowedCategories_RealEstateAgentsAndManagersRentals
    "record_stores" -> pure IssuingCardAuthorizationControls_AllowedCategories_RecordStores
    "recreational_vehicle_rentals" -> pure IssuingCardAuthorizationControls_AllowedCategories_RecreationalVehicleRentals
    "religious_goods_stores" -> pure IssuingCardAuthorizationControls_AllowedCategories_ReligiousGoodsStores
    "religious_organizations" -> pure IssuingCardAuthorizationControls_AllowedCategories_ReligiousOrganizations
    "roofing_siding_sheet_metal" -> pure IssuingCardAuthorizationControls_AllowedCategories_RoofingSidingSheetMetal
    "secretarial_support_services" -> pure IssuingCardAuthorizationControls_AllowedCategories_SecretarialSupportServices
    "security_brokers_dealers" -> pure IssuingCardAuthorizationControls_AllowedCategories_SecurityBrokersDealers
    "service_stations" -> pure IssuingCardAuthorizationControls_AllowedCategories_ServiceStations
    "sewing_needlework_fabric_and_piece_goods_stores" -> pure IssuingCardAuthorizationControls_AllowedCategories_SewingNeedleworkFabricAndPieceGoodsStores
    "shoe_repair_hat_cleaning" -> pure IssuingCardAuthorizationControls_AllowedCategories_ShoeRepairHatCleaning
    "shoe_stores" -> pure IssuingCardAuthorizationControls_AllowedCategories_ShoeStores
    "small_appliance_repair" -> pure IssuingCardAuthorizationControls_AllowedCategories_SmallApplianceRepair
    "snowmobile_dealers" -> pure IssuingCardAuthorizationControls_AllowedCategories_SnowmobileDealers
    "special_trade_services" -> pure IssuingCardAuthorizationControls_AllowedCategories_SpecialTradeServices
    "specialty_cleaning" -> pure IssuingCardAuthorizationControls_AllowedCategories_SpecialtyCleaning
    "sporting_goods_stores" -> pure IssuingCardAuthorizationControls_AllowedCategories_SportingGoodsStores
    "sporting_recreation_camps" -> pure IssuingCardAuthorizationControls_AllowedCategories_SportingRecreationCamps
    "sports_and_riding_apparel_stores" -> pure IssuingCardAuthorizationControls_AllowedCategories_SportsAndRidingApparelStores
    "sports_clubs_fields" -> pure IssuingCardAuthorizationControls_AllowedCategories_SportsClubsFields
    "stamp_and_coin_stores" -> pure IssuingCardAuthorizationControls_AllowedCategories_StampAndCoinStores
    "stationary_office_supplies_printing_and_writing_paper" -> pure IssuingCardAuthorizationControls_AllowedCategories_StationaryOfficeSuppliesPrintingAndWritingPaper
    "stationery_stores_office_and_school_supply_stores" -> pure IssuingCardAuthorizationControls_AllowedCategories_StationeryStoresOfficeAndSchoolSupplyStores
    "swimming_pools_sales" -> pure IssuingCardAuthorizationControls_AllowedCategories_SwimmingPoolsSales
    "t_ui_travel_germany" -> pure IssuingCardAuthorizationControls_AllowedCategories_TUiTravelGermany
    "tailors_alterations" -> pure IssuingCardAuthorizationControls_AllowedCategories_TailorsAlterations
    "tax_payments_government_agencies" -> pure IssuingCardAuthorizationControls_AllowedCategories_TaxPaymentsGovernmentAgencies
    "tax_preparation_services" -> pure IssuingCardAuthorizationControls_AllowedCategories_TaxPreparationServices
    "taxicabs_limousines" -> pure IssuingCardAuthorizationControls_AllowedCategories_TaxicabsLimousines
    "telecommunication_equipment_and_telephone_sales" -> pure IssuingCardAuthorizationControls_AllowedCategories_TelecommunicationEquipmentAndTelephoneSales
    "telecommunication_services" -> pure IssuingCardAuthorizationControls_AllowedCategories_TelecommunicationServices
    "telegraph_services" -> pure IssuingCardAuthorizationControls_AllowedCategories_TelegraphServices
    "tent_and_awning_shops" -> pure IssuingCardAuthorizationControls_AllowedCategories_TentAndAwningShops
    "testing_laboratories" -> pure IssuingCardAuthorizationControls_AllowedCategories_TestingLaboratories
    "theatrical_ticket_agencies" -> pure IssuingCardAuthorizationControls_AllowedCategories_TheatricalTicketAgencies
    "timeshares" -> pure IssuingCardAuthorizationControls_AllowedCategories_Timeshares
    "tire_retreading_and_repair" -> pure IssuingCardAuthorizationControls_AllowedCategories_TireRetreadingAndRepair
    "tolls_bridge_fees" -> pure IssuingCardAuthorizationControls_AllowedCategories_TollsBridgeFees
    "tourist_attractions_and_exhibits" -> pure IssuingCardAuthorizationControls_AllowedCategories_TouristAttractionsAndExhibits
    "towing_services" -> pure IssuingCardAuthorizationControls_AllowedCategories_TowingServices
    "trailer_parks_campgrounds" -> pure IssuingCardAuthorizationControls_AllowedCategories_TrailerParksCampgrounds
    "transportation_services" -> pure IssuingCardAuthorizationControls_AllowedCategories_TransportationServices
    "travel_agencies_tour_operators" -> pure IssuingCardAuthorizationControls_AllowedCategories_TravelAgenciesTourOperators
    "truck_stop_iteration" -> pure IssuingCardAuthorizationControls_AllowedCategories_TruckStopIteration
    "truck_utility_trailer_rentals" -> pure IssuingCardAuthorizationControls_AllowedCategories_TruckUtilityTrailerRentals
    "typesetting_plate_making_and_related_services" -> pure IssuingCardAuthorizationControls_AllowedCategories_TypesettingPlateMakingAndRelatedServices
    "typewriter_stores" -> pure IssuingCardAuthorizationControls_AllowedCategories_TypewriterStores
    "u_s_federal_government_agencies_or_departments" -> pure IssuingCardAuthorizationControls_AllowedCategories_USFederalGovernmentAgenciesOrDepartments
    "uniforms_commercial_clothing" -> pure IssuingCardAuthorizationControls_AllowedCategories_UniformsCommercialClothing
    "used_merchandise_and_secondhand_stores" -> pure IssuingCardAuthorizationControls_AllowedCategories_UsedMerchandiseAndSecondhandStores
    "utilities" -> pure IssuingCardAuthorizationControls_AllowedCategories_Utilities
    "variety_stores" -> pure IssuingCardAuthorizationControls_AllowedCategories_VarietyStores
    "veterinary_services" -> pure IssuingCardAuthorizationControls_AllowedCategories_VeterinaryServices
    "video_amusement_game_supplies" -> pure IssuingCardAuthorizationControls_AllowedCategories_VideoAmusementGameSupplies
    "video_game_arcades" -> pure IssuingCardAuthorizationControls_AllowedCategories_VideoGameArcades
    "video_tape_rental_stores" -> pure IssuingCardAuthorizationControls_AllowedCategories_VideoTapeRentalStores
    "vocational_trade_schools" -> pure IssuingCardAuthorizationControls_AllowedCategories_VocationalTradeSchools
    "watch_jewelry_repair" -> pure IssuingCardAuthorizationControls_AllowedCategories_WatchJewelryRepair
    "welding_repair" -> pure IssuingCardAuthorizationControls_AllowedCategories_WeldingRepair
    "wholesale_clubs" -> pure IssuingCardAuthorizationControls_AllowedCategories_WholesaleClubs
    "wig_and_toupee_stores" -> pure IssuingCardAuthorizationControls_AllowedCategories_WigAndToupeeStores
    "wires_money_orders" -> pure IssuingCardAuthorizationControls_AllowedCategories_WiresMoneyOrders
    "womens_accessory_and_specialty_shops" -> pure IssuingCardAuthorizationControls_AllowedCategories_WomensAccessoryAndSpecialtyShops
    "womens_ready_to_wear_stores" -> pure IssuingCardAuthorizationControls_AllowedCategories_WomensReadyToWearStores
    "wrecking_and_salvage_yards" -> pure IssuingCardAuthorizationControls_AllowedCategories_WreckingAndSalvageYards
    str -> fail (show str <> " is not a known valid option for IssuingCardAuthorizationControls_AllowedCategories")

data IssuingCardAuthorizationControls_BlockedCategories
  = IssuingCardAuthorizationControls_BlockedCategories_AcRefrigerationRepair
  | IssuingCardAuthorizationControls_BlockedCategories_AccountingBookkeepingServices
  | IssuingCardAuthorizationControls_BlockedCategories_AdvertisingServices
  | IssuingCardAuthorizationControls_BlockedCategories_AgriculturalCooperative
  | IssuingCardAuthorizationControls_BlockedCategories_AirlinesAirCarriers
  | IssuingCardAuthorizationControls_BlockedCategories_AirportsFlyingFields
  | IssuingCardAuthorizationControls_BlockedCategories_AmbulanceServices
  | IssuingCardAuthorizationControls_BlockedCategories_AmusementParksCarnivals
  | IssuingCardAuthorizationControls_BlockedCategories_AntiqueReproductions
  | IssuingCardAuthorizationControls_BlockedCategories_AntiqueShops
  | IssuingCardAuthorizationControls_BlockedCategories_Aquariums
  | IssuingCardAuthorizationControls_BlockedCategories_ArchitecturalSurveyingServices
  | IssuingCardAuthorizationControls_BlockedCategories_ArtDealersAndGalleries
  | IssuingCardAuthorizationControls_BlockedCategories_ArtistsSupplyAndCraftShops
  | IssuingCardAuthorizationControls_BlockedCategories_AutoAndHomeSupplyStores
  | IssuingCardAuthorizationControls_BlockedCategories_AutoBodyRepairShops
  | IssuingCardAuthorizationControls_BlockedCategories_AutoPaintShops
  | IssuingCardAuthorizationControls_BlockedCategories_AutoServiceShops
  | IssuingCardAuthorizationControls_BlockedCategories_AutomatedCashDisburse
  | IssuingCardAuthorizationControls_BlockedCategories_AutomatedFuelDispensers
  | IssuingCardAuthorizationControls_BlockedCategories_AutomobileAssociations
  | IssuingCardAuthorizationControls_BlockedCategories_AutomotivePartsAndAccessoriesStores
  | IssuingCardAuthorizationControls_BlockedCategories_AutomotiveTireStores
  | IssuingCardAuthorizationControls_BlockedCategories_BailAndBondPayments
  | IssuingCardAuthorizationControls_BlockedCategories_Bakeries
  | IssuingCardAuthorizationControls_BlockedCategories_BandsOrchestras
  | IssuingCardAuthorizationControls_BlockedCategories_BarberAndBeautyShops
  | IssuingCardAuthorizationControls_BlockedCategories_BettingCasinoGambling
  | IssuingCardAuthorizationControls_BlockedCategories_BicycleShops
  | IssuingCardAuthorizationControls_BlockedCategories_BilliardPoolEstablishments
  | IssuingCardAuthorizationControls_BlockedCategories_BoatDealers
  | IssuingCardAuthorizationControls_BlockedCategories_BoatRentalsAndLeases
  | IssuingCardAuthorizationControls_BlockedCategories_BookStores
  | IssuingCardAuthorizationControls_BlockedCategories_BooksPeriodicalsAndNewspapers
  | IssuingCardAuthorizationControls_BlockedCategories_BowlingAlleys
  | IssuingCardAuthorizationControls_BlockedCategories_BusLines
  | IssuingCardAuthorizationControls_BlockedCategories_BusinessSecretarialSchools
  | IssuingCardAuthorizationControls_BlockedCategories_BuyingShoppingServices
  | IssuingCardAuthorizationControls_BlockedCategories_CableSatelliteAndOtherPayTelevisionAndRadio
  | IssuingCardAuthorizationControls_BlockedCategories_CameraAndPhotographicSupplyStores
  | IssuingCardAuthorizationControls_BlockedCategories_CandyNutAndConfectioneryStores
  | IssuingCardAuthorizationControls_BlockedCategories_CarAndTruckDealersNewUsed
  | IssuingCardAuthorizationControls_BlockedCategories_CarAndTruckDealersUsedOnly
  | IssuingCardAuthorizationControls_BlockedCategories_CarRentalAgencies
  | IssuingCardAuthorizationControls_BlockedCategories_CarWashes
  | IssuingCardAuthorizationControls_BlockedCategories_CarpentryServices
  | IssuingCardAuthorizationControls_BlockedCategories_CarpetUpholsteryCleaning
  | IssuingCardAuthorizationControls_BlockedCategories_Caterers
  | IssuingCardAuthorizationControls_BlockedCategories_CharitableAndSocialServiceOrganizationsFundraising
  | IssuingCardAuthorizationControls_BlockedCategories_ChemicalsAndAlliedProducts
  | IssuingCardAuthorizationControls_BlockedCategories_ChidrensAndInfantsWearStores
  | IssuingCardAuthorizationControls_BlockedCategories_ChildCareServices
  | IssuingCardAuthorizationControls_BlockedCategories_ChiropodistsPodiatrists
  | IssuingCardAuthorizationControls_BlockedCategories_Chiropractors
  | IssuingCardAuthorizationControls_BlockedCategories_CigarStoresAndStands
  | IssuingCardAuthorizationControls_BlockedCategories_CivicSocialFraternalAssociations
  | IssuingCardAuthorizationControls_BlockedCategories_CleaningAndMaintenance
  | IssuingCardAuthorizationControls_BlockedCategories_ClothingRental
  | IssuingCardAuthorizationControls_BlockedCategories_CollegesUniversities
  | IssuingCardAuthorizationControls_BlockedCategories_CommercialEquipment
  | IssuingCardAuthorizationControls_BlockedCategories_CommercialFootwear
  | IssuingCardAuthorizationControls_BlockedCategories_CommercialPhotographyArtAndGraphics
  | IssuingCardAuthorizationControls_BlockedCategories_CommuterTransportAndFerries
  | IssuingCardAuthorizationControls_BlockedCategories_ComputerNetworkServices
  | IssuingCardAuthorizationControls_BlockedCategories_ComputerProgramming
  | IssuingCardAuthorizationControls_BlockedCategories_ComputerRepair
  | IssuingCardAuthorizationControls_BlockedCategories_ComputerSoftwareStores
  | IssuingCardAuthorizationControls_BlockedCategories_ComputersPeripheralsAndSoftware
  | IssuingCardAuthorizationControls_BlockedCategories_ConcreteWorkServices
  | IssuingCardAuthorizationControls_BlockedCategories_ConstructionMaterials
  | IssuingCardAuthorizationControls_BlockedCategories_ConsultingPublicRelations
  | IssuingCardAuthorizationControls_BlockedCategories_CorrespondenceSchools
  | IssuingCardAuthorizationControls_BlockedCategories_CosmeticStores
  | IssuingCardAuthorizationControls_BlockedCategories_CounselingServices
  | IssuingCardAuthorizationControls_BlockedCategories_CountryClubs
  | IssuingCardAuthorizationControls_BlockedCategories_CourierServices
  | IssuingCardAuthorizationControls_BlockedCategories_CourtCosts
  | IssuingCardAuthorizationControls_BlockedCategories_CreditReportingAgencies
  | IssuingCardAuthorizationControls_BlockedCategories_CruiseLines
  | IssuingCardAuthorizationControls_BlockedCategories_DairyProductsStores
  | IssuingCardAuthorizationControls_BlockedCategories_DanceHallStudiosSchools
  | IssuingCardAuthorizationControls_BlockedCategories_DatingEscortServices
  | IssuingCardAuthorizationControls_BlockedCategories_DentistsOrthodontists
  | IssuingCardAuthorizationControls_BlockedCategories_DepartmentStores
  | IssuingCardAuthorizationControls_BlockedCategories_DetectiveAgencies
  | IssuingCardAuthorizationControls_BlockedCategories_DigitalGoodsApplications
  | IssuingCardAuthorizationControls_BlockedCategories_DirectMarketingCatalogMerchant
  | IssuingCardAuthorizationControls_BlockedCategories_DirectMarketingCombinationCatalogAndRetailMerchant
  | IssuingCardAuthorizationControls_BlockedCategories_DirectMarketingInboundTelemarketing
  | IssuingCardAuthorizationControls_BlockedCategories_DirectMarketingInsuranceServices
  | IssuingCardAuthorizationControls_BlockedCategories_DirectMarketingOther
  | IssuingCardAuthorizationControls_BlockedCategories_DirectMarketingOutboundTelemarketing
  | IssuingCardAuthorizationControls_BlockedCategories_DirectMarketingSubscription
  | IssuingCardAuthorizationControls_BlockedCategories_DirectMarketingTravel
  | IssuingCardAuthorizationControls_BlockedCategories_DiscountStores
  | IssuingCardAuthorizationControls_BlockedCategories_Doctors
  | IssuingCardAuthorizationControls_BlockedCategories_DoorToDoorSales
  | IssuingCardAuthorizationControls_BlockedCategories_DraperyWindowCoveringAndUpholsteryStores
  | IssuingCardAuthorizationControls_BlockedCategories_DrinkingPlaces
  | IssuingCardAuthorizationControls_BlockedCategories_DrugStoresAndPharmacies
  | IssuingCardAuthorizationControls_BlockedCategories_DrugsDrugProprietariesAndDruggistSundries
  | IssuingCardAuthorizationControls_BlockedCategories_DryCleaners
  | IssuingCardAuthorizationControls_BlockedCategories_DurableGoods
  | IssuingCardAuthorizationControls_BlockedCategories_DutyFreeStores
  | IssuingCardAuthorizationControls_BlockedCategories_EatingPlacesRestaurants
  | IssuingCardAuthorizationControls_BlockedCategories_EducationalServices
  | IssuingCardAuthorizationControls_BlockedCategories_ElectricRazorStores
  | IssuingCardAuthorizationControls_BlockedCategories_ElectricalPartsAndEquipment
  | IssuingCardAuthorizationControls_BlockedCategories_ElectricalServices
  | IssuingCardAuthorizationControls_BlockedCategories_ElectronicsRepairShops
  | IssuingCardAuthorizationControls_BlockedCategories_ElectronicsStores
  | IssuingCardAuthorizationControls_BlockedCategories_ElementarySecondarySchools
  | IssuingCardAuthorizationControls_BlockedCategories_EmploymentTempAgencies
  | IssuingCardAuthorizationControls_BlockedCategories_EquipmentRental
  | IssuingCardAuthorizationControls_BlockedCategories_ExterminatingServices
  | IssuingCardAuthorizationControls_BlockedCategories_FamilyClothingStores
  | IssuingCardAuthorizationControls_BlockedCategories_FastFoodRestaurants
  | IssuingCardAuthorizationControls_BlockedCategories_FinancialInstitutions
  | IssuingCardAuthorizationControls_BlockedCategories_FinesGovernmentAdministrativeEntities
  | IssuingCardAuthorizationControls_BlockedCategories_FireplaceFireplaceScreensAndAccessoriesStores
  | IssuingCardAuthorizationControls_BlockedCategories_FloorCoveringStores
  | IssuingCardAuthorizationControls_BlockedCategories_Florists
  | IssuingCardAuthorizationControls_BlockedCategories_FloristsSuppliesNurseryStockAndFlowers
  | IssuingCardAuthorizationControls_BlockedCategories_FreezerAndLockerMeatProvisioners
  | IssuingCardAuthorizationControls_BlockedCategories_FuelDealersNonAutomotive
  | IssuingCardAuthorizationControls_BlockedCategories_FuneralServicesCrematories
  | IssuingCardAuthorizationControls_BlockedCategories_FurnitureHomeFurnishingsAndEquipmentStoresExceptAppliances
  | IssuingCardAuthorizationControls_BlockedCategories_FurnitureRepairRefinishing
  | IssuingCardAuthorizationControls_BlockedCategories_FurriersAndFurShops
  | IssuingCardAuthorizationControls_BlockedCategories_GeneralServices
  | IssuingCardAuthorizationControls_BlockedCategories_GiftCardNoveltyAndSouvenirShops
  | IssuingCardAuthorizationControls_BlockedCategories_GlassPaintAndWallpaperStores
  | IssuingCardAuthorizationControls_BlockedCategories_GlasswareCrystalStores
  | IssuingCardAuthorizationControls_BlockedCategories_GolfCoursesPublic
  | IssuingCardAuthorizationControls_BlockedCategories_GovernmentServices
  | IssuingCardAuthorizationControls_BlockedCategories_GroceryStoresSupermarkets
  | IssuingCardAuthorizationControls_BlockedCategories_HardwareEquipmentAndSupplies
  | IssuingCardAuthorizationControls_BlockedCategories_HardwareStores
  | IssuingCardAuthorizationControls_BlockedCategories_HealthAndBeautySpas
  | IssuingCardAuthorizationControls_BlockedCategories_HearingAidsSalesAndSupplies
  | IssuingCardAuthorizationControls_BlockedCategories_HeatingPlumbingAC
  | IssuingCardAuthorizationControls_BlockedCategories_HobbyToyAndGameShops
  | IssuingCardAuthorizationControls_BlockedCategories_HomeSupplyWarehouseStores
  | IssuingCardAuthorizationControls_BlockedCategories_Hospitals
  | IssuingCardAuthorizationControls_BlockedCategories_HotelsMotelsAndResorts
  | IssuingCardAuthorizationControls_BlockedCategories_HouseholdApplianceStores
  | IssuingCardAuthorizationControls_BlockedCategories_IndustrialSupplies
  | IssuingCardAuthorizationControls_BlockedCategories_InformationRetrievalServices
  | IssuingCardAuthorizationControls_BlockedCategories_InsuranceDefault
  | IssuingCardAuthorizationControls_BlockedCategories_InsuranceUnderwritingPremiums
  | IssuingCardAuthorizationControls_BlockedCategories_IntraCompanyPurchases
  | IssuingCardAuthorizationControls_BlockedCategories_JewelryStoresWatchesClocksAndSilverwareStores
  | IssuingCardAuthorizationControls_BlockedCategories_LandscapingServices
  | IssuingCardAuthorizationControls_BlockedCategories_Laundries
  | IssuingCardAuthorizationControls_BlockedCategories_LaundryCleaningServices
  | IssuingCardAuthorizationControls_BlockedCategories_LegalServicesAttorneys
  | IssuingCardAuthorizationControls_BlockedCategories_LuggageAndLeatherGoodsStores
  | IssuingCardAuthorizationControls_BlockedCategories_LumberBuildingMaterialsStores
  | IssuingCardAuthorizationControls_BlockedCategories_ManualCashDisburse
  | IssuingCardAuthorizationControls_BlockedCategories_MarinasServiceAndSupplies
  | IssuingCardAuthorizationControls_BlockedCategories_MasonryStoneworkAndPlaster
  | IssuingCardAuthorizationControls_BlockedCategories_MassageParlors
  | IssuingCardAuthorizationControls_BlockedCategories_MedicalAndDentalLabs
  | IssuingCardAuthorizationControls_BlockedCategories_MedicalDentalOphthalmicAndHospitalEquipmentAndSupplies
  | IssuingCardAuthorizationControls_BlockedCategories_MedicalServices
  | IssuingCardAuthorizationControls_BlockedCategories_MembershipOrganizations
  | IssuingCardAuthorizationControls_BlockedCategories_MensAndBoysClothingAndAccessoriesStores
  | IssuingCardAuthorizationControls_BlockedCategories_MensWomensClothingStores
  | IssuingCardAuthorizationControls_BlockedCategories_MetalServiceCenters
  | IssuingCardAuthorizationControls_BlockedCategories_Miscellaneous
  | IssuingCardAuthorizationControls_BlockedCategories_MiscellaneousApparelAndAccessoryShops
  | IssuingCardAuthorizationControls_BlockedCategories_MiscellaneousAutoDealers
  | IssuingCardAuthorizationControls_BlockedCategories_MiscellaneousBusinessServices
  | IssuingCardAuthorizationControls_BlockedCategories_MiscellaneousFoodStores
  | IssuingCardAuthorizationControls_BlockedCategories_MiscellaneousGeneralMerchandise
  | IssuingCardAuthorizationControls_BlockedCategories_MiscellaneousGeneralServices
  | IssuingCardAuthorizationControls_BlockedCategories_MiscellaneousHomeFurnishingSpecialtyStores
  | IssuingCardAuthorizationControls_BlockedCategories_MiscellaneousPublishingAndPrinting
  | IssuingCardAuthorizationControls_BlockedCategories_MiscellaneousRecreationServices
  | IssuingCardAuthorizationControls_BlockedCategories_MiscellaneousRepairShops
  | IssuingCardAuthorizationControls_BlockedCategories_MiscellaneousSpecialtyRetail
  | IssuingCardAuthorizationControls_BlockedCategories_MobileHomeDealers
  | IssuingCardAuthorizationControls_BlockedCategories_MotionPictureTheaters
  | IssuingCardAuthorizationControls_BlockedCategories_MotorFreightCarriersAndTrucking
  | IssuingCardAuthorizationControls_BlockedCategories_MotorHomesDealers
  | IssuingCardAuthorizationControls_BlockedCategories_MotorVehicleSuppliesAndNewParts
  | IssuingCardAuthorizationControls_BlockedCategories_MotorcycleShopsAndDealers
  | IssuingCardAuthorizationControls_BlockedCategories_MotorcycleShopsDealers
  | IssuingCardAuthorizationControls_BlockedCategories_MusicStoresMusicalInstrumentsPianosAndSheetMusic
  | IssuingCardAuthorizationControls_BlockedCategories_NewsDealersAndNewsstands
  | IssuingCardAuthorizationControls_BlockedCategories_NonFiMoneyOrders
  | IssuingCardAuthorizationControls_BlockedCategories_NonFiStoredValueCardPurchaseLoad
  | IssuingCardAuthorizationControls_BlockedCategories_NondurableGoods
  | IssuingCardAuthorizationControls_BlockedCategories_NurseriesLawnAndGardenSupplyStores
  | IssuingCardAuthorizationControls_BlockedCategories_NursingPersonalCare
  | IssuingCardAuthorizationControls_BlockedCategories_OfficeAndCommercialFurniture
  | IssuingCardAuthorizationControls_BlockedCategories_OpticiansEyeglasses
  | IssuingCardAuthorizationControls_BlockedCategories_OptometristsOphthalmologist
  | IssuingCardAuthorizationControls_BlockedCategories_OrthopedicGoodsProstheticDevices
  | IssuingCardAuthorizationControls_BlockedCategories_Osteopaths
  | IssuingCardAuthorizationControls_BlockedCategories_PackageStoresBeerWineAndLiquor
  | IssuingCardAuthorizationControls_BlockedCategories_PaintsVarnishesAndSupplies
  | IssuingCardAuthorizationControls_BlockedCategories_ParkingLotsGarages
  | IssuingCardAuthorizationControls_BlockedCategories_PassengerRailways
  | IssuingCardAuthorizationControls_BlockedCategories_PawnShops
  | IssuingCardAuthorizationControls_BlockedCategories_PetShopsPetFoodAndSupplies
  | IssuingCardAuthorizationControls_BlockedCategories_PetroleumAndPetroleumProducts
  | IssuingCardAuthorizationControls_BlockedCategories_PhotoDeveloping
  | IssuingCardAuthorizationControls_BlockedCategories_PhotographicPhotocopyMicrofilmEquipmentAndSupplies
  | IssuingCardAuthorizationControls_BlockedCategories_PhotographicStudios
  | IssuingCardAuthorizationControls_BlockedCategories_PictureVideoProduction
  | IssuingCardAuthorizationControls_BlockedCategories_PieceGoodsNotionsAndOtherDryGoods
  | IssuingCardAuthorizationControls_BlockedCategories_PlumbingHeatingEquipmentAndSupplies
  | IssuingCardAuthorizationControls_BlockedCategories_PoliticalOrganizations
  | IssuingCardAuthorizationControls_BlockedCategories_PostalServicesGovernmentOnly
  | IssuingCardAuthorizationControls_BlockedCategories_PreciousStonesAndMetalsWatchesAndJewelry
  | IssuingCardAuthorizationControls_BlockedCategories_ProfessionalServices
  | IssuingCardAuthorizationControls_BlockedCategories_PublicWarehousingAndStorage
  | IssuingCardAuthorizationControls_BlockedCategories_QuickCopyReproAndBlueprint
  | IssuingCardAuthorizationControls_BlockedCategories_Railroads
  | IssuingCardAuthorizationControls_BlockedCategories_RealEstateAgentsAndManagersRentals
  | IssuingCardAuthorizationControls_BlockedCategories_RecordStores
  | IssuingCardAuthorizationControls_BlockedCategories_RecreationalVehicleRentals
  | IssuingCardAuthorizationControls_BlockedCategories_ReligiousGoodsStores
  | IssuingCardAuthorizationControls_BlockedCategories_ReligiousOrganizations
  | IssuingCardAuthorizationControls_BlockedCategories_RoofingSidingSheetMetal
  | IssuingCardAuthorizationControls_BlockedCategories_SecretarialSupportServices
  | IssuingCardAuthorizationControls_BlockedCategories_SecurityBrokersDealers
  | IssuingCardAuthorizationControls_BlockedCategories_ServiceStations
  | IssuingCardAuthorizationControls_BlockedCategories_SewingNeedleworkFabricAndPieceGoodsStores
  | IssuingCardAuthorizationControls_BlockedCategories_ShoeRepairHatCleaning
  | IssuingCardAuthorizationControls_BlockedCategories_ShoeStores
  | IssuingCardAuthorizationControls_BlockedCategories_SmallApplianceRepair
  | IssuingCardAuthorizationControls_BlockedCategories_SnowmobileDealers
  | IssuingCardAuthorizationControls_BlockedCategories_SpecialTradeServices
  | IssuingCardAuthorizationControls_BlockedCategories_SpecialtyCleaning
  | IssuingCardAuthorizationControls_BlockedCategories_SportingGoodsStores
  | IssuingCardAuthorizationControls_BlockedCategories_SportingRecreationCamps
  | IssuingCardAuthorizationControls_BlockedCategories_SportsAndRidingApparelStores
  | IssuingCardAuthorizationControls_BlockedCategories_SportsClubsFields
  | IssuingCardAuthorizationControls_BlockedCategories_StampAndCoinStores
  | IssuingCardAuthorizationControls_BlockedCategories_StationaryOfficeSuppliesPrintingAndWritingPaper
  | IssuingCardAuthorizationControls_BlockedCategories_StationeryStoresOfficeAndSchoolSupplyStores
  | IssuingCardAuthorizationControls_BlockedCategories_SwimmingPoolsSales
  | IssuingCardAuthorizationControls_BlockedCategories_TUiTravelGermany
  | IssuingCardAuthorizationControls_BlockedCategories_TailorsAlterations
  | IssuingCardAuthorizationControls_BlockedCategories_TaxPaymentsGovernmentAgencies
  | IssuingCardAuthorizationControls_BlockedCategories_TaxPreparationServices
  | IssuingCardAuthorizationControls_BlockedCategories_TaxicabsLimousines
  | IssuingCardAuthorizationControls_BlockedCategories_TelecommunicationEquipmentAndTelephoneSales
  | IssuingCardAuthorizationControls_BlockedCategories_TelecommunicationServices
  | IssuingCardAuthorizationControls_BlockedCategories_TelegraphServices
  | IssuingCardAuthorizationControls_BlockedCategories_TentAndAwningShops
  | IssuingCardAuthorizationControls_BlockedCategories_TestingLaboratories
  | IssuingCardAuthorizationControls_BlockedCategories_TheatricalTicketAgencies
  | IssuingCardAuthorizationControls_BlockedCategories_Timeshares
  | IssuingCardAuthorizationControls_BlockedCategories_TireRetreadingAndRepair
  | IssuingCardAuthorizationControls_BlockedCategories_TollsBridgeFees
  | IssuingCardAuthorizationControls_BlockedCategories_TouristAttractionsAndExhibits
  | IssuingCardAuthorizationControls_BlockedCategories_TowingServices
  | IssuingCardAuthorizationControls_BlockedCategories_TrailerParksCampgrounds
  | IssuingCardAuthorizationControls_BlockedCategories_TransportationServices
  | IssuingCardAuthorizationControls_BlockedCategories_TravelAgenciesTourOperators
  | IssuingCardAuthorizationControls_BlockedCategories_TruckStopIteration
  | IssuingCardAuthorizationControls_BlockedCategories_TruckUtilityTrailerRentals
  | IssuingCardAuthorizationControls_BlockedCategories_TypesettingPlateMakingAndRelatedServices
  | IssuingCardAuthorizationControls_BlockedCategories_TypewriterStores
  | IssuingCardAuthorizationControls_BlockedCategories_USFederalGovernmentAgenciesOrDepartments
  | IssuingCardAuthorizationControls_BlockedCategories_UniformsCommercialClothing
  | IssuingCardAuthorizationControls_BlockedCategories_UsedMerchandiseAndSecondhandStores
  | IssuingCardAuthorizationControls_BlockedCategories_Utilities
  | IssuingCardAuthorizationControls_BlockedCategories_VarietyStores
  | IssuingCardAuthorizationControls_BlockedCategories_VeterinaryServices
  | IssuingCardAuthorizationControls_BlockedCategories_VideoAmusementGameSupplies
  | IssuingCardAuthorizationControls_BlockedCategories_VideoGameArcades
  | IssuingCardAuthorizationControls_BlockedCategories_VideoTapeRentalStores
  | IssuingCardAuthorizationControls_BlockedCategories_VocationalTradeSchools
  | IssuingCardAuthorizationControls_BlockedCategories_WatchJewelryRepair
  | IssuingCardAuthorizationControls_BlockedCategories_WeldingRepair
  | IssuingCardAuthorizationControls_BlockedCategories_WholesaleClubs
  | IssuingCardAuthorizationControls_BlockedCategories_WigAndToupeeStores
  | IssuingCardAuthorizationControls_BlockedCategories_WiresMoneyOrders
  | IssuingCardAuthorizationControls_BlockedCategories_WomensAccessoryAndSpecialtyShops
  | IssuingCardAuthorizationControls_BlockedCategories_WomensReadyToWearStores
  | IssuingCardAuthorizationControls_BlockedCategories_WreckingAndSalvageYards
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON IssuingCardAuthorizationControls_BlockedCategories where
  toJSON e = Text $ case e of
    IssuingCardAuthorizationControls_BlockedCategories_AcRefrigerationRepair -> "ac_refrigeration_repair"
    IssuingCardAuthorizationControls_BlockedCategories_AccountingBookkeepingServices -> "accounting_bookkeeping_services"
    IssuingCardAuthorizationControls_BlockedCategories_AdvertisingServices -> "advertising_services"
    IssuingCardAuthorizationControls_BlockedCategories_AgriculturalCooperative -> "agricultural_cooperative"
    IssuingCardAuthorizationControls_BlockedCategories_AirlinesAirCarriers -> "airlines_air_carriers"
    IssuingCardAuthorizationControls_BlockedCategories_AirportsFlyingFields -> "airports_flying_fields"
    IssuingCardAuthorizationControls_BlockedCategories_AmbulanceServices -> "ambulance_services"
    IssuingCardAuthorizationControls_BlockedCategories_AmusementParksCarnivals -> "amusement_parks_carnivals"
    IssuingCardAuthorizationControls_BlockedCategories_AntiqueReproductions -> "antique_reproductions"
    IssuingCardAuthorizationControls_BlockedCategories_AntiqueShops -> "antique_shops"
    IssuingCardAuthorizationControls_BlockedCategories_Aquariums -> "aquariums"
    IssuingCardAuthorizationControls_BlockedCategories_ArchitecturalSurveyingServices -> "architectural_surveying_services"
    IssuingCardAuthorizationControls_BlockedCategories_ArtDealersAndGalleries -> "art_dealers_and_galleries"
    IssuingCardAuthorizationControls_BlockedCategories_ArtistsSupplyAndCraftShops -> "artists_supply_and_craft_shops"
    IssuingCardAuthorizationControls_BlockedCategories_AutoAndHomeSupplyStores -> "auto_and_home_supply_stores"
    IssuingCardAuthorizationControls_BlockedCategories_AutoBodyRepairShops -> "auto_body_repair_shops"
    IssuingCardAuthorizationControls_BlockedCategories_AutoPaintShops -> "auto_paint_shops"
    IssuingCardAuthorizationControls_BlockedCategories_AutoServiceShops -> "auto_service_shops"
    IssuingCardAuthorizationControls_BlockedCategories_AutomatedCashDisburse -> "automated_cash_disburse"
    IssuingCardAuthorizationControls_BlockedCategories_AutomatedFuelDispensers -> "automated_fuel_dispensers"
    IssuingCardAuthorizationControls_BlockedCategories_AutomobileAssociations -> "automobile_associations"
    IssuingCardAuthorizationControls_BlockedCategories_AutomotivePartsAndAccessoriesStores -> "automotive_parts_and_accessories_stores"
    IssuingCardAuthorizationControls_BlockedCategories_AutomotiveTireStores -> "automotive_tire_stores"
    IssuingCardAuthorizationControls_BlockedCategories_BailAndBondPayments -> "bail_and_bond_payments"
    IssuingCardAuthorizationControls_BlockedCategories_Bakeries -> "bakeries"
    IssuingCardAuthorizationControls_BlockedCategories_BandsOrchestras -> "bands_orchestras"
    IssuingCardAuthorizationControls_BlockedCategories_BarberAndBeautyShops -> "barber_and_beauty_shops"
    IssuingCardAuthorizationControls_BlockedCategories_BettingCasinoGambling -> "betting_casino_gambling"
    IssuingCardAuthorizationControls_BlockedCategories_BicycleShops -> "bicycle_shops"
    IssuingCardAuthorizationControls_BlockedCategories_BilliardPoolEstablishments -> "billiard_pool_establishments"
    IssuingCardAuthorizationControls_BlockedCategories_BoatDealers -> "boat_dealers"
    IssuingCardAuthorizationControls_BlockedCategories_BoatRentalsAndLeases -> "boat_rentals_and_leases"
    IssuingCardAuthorizationControls_BlockedCategories_BookStores -> "book_stores"
    IssuingCardAuthorizationControls_BlockedCategories_BooksPeriodicalsAndNewspapers -> "books_periodicals_and_newspapers"
    IssuingCardAuthorizationControls_BlockedCategories_BowlingAlleys -> "bowling_alleys"
    IssuingCardAuthorizationControls_BlockedCategories_BusLines -> "bus_lines"
    IssuingCardAuthorizationControls_BlockedCategories_BusinessSecretarialSchools -> "business_secretarial_schools"
    IssuingCardAuthorizationControls_BlockedCategories_BuyingShoppingServices -> "buying_shopping_services"
    IssuingCardAuthorizationControls_BlockedCategories_CableSatelliteAndOtherPayTelevisionAndRadio -> "cable_satellite_and_other_pay_television_and_radio"
    IssuingCardAuthorizationControls_BlockedCategories_CameraAndPhotographicSupplyStores -> "camera_and_photographic_supply_stores"
    IssuingCardAuthorizationControls_BlockedCategories_CandyNutAndConfectioneryStores -> "candy_nut_and_confectionery_stores"
    IssuingCardAuthorizationControls_BlockedCategories_CarAndTruckDealersNewUsed -> "car_and_truck_dealers_new_used"
    IssuingCardAuthorizationControls_BlockedCategories_CarAndTruckDealersUsedOnly -> "car_and_truck_dealers_used_only"
    IssuingCardAuthorizationControls_BlockedCategories_CarRentalAgencies -> "car_rental_agencies"
    IssuingCardAuthorizationControls_BlockedCategories_CarWashes -> "car_washes"
    IssuingCardAuthorizationControls_BlockedCategories_CarpentryServices -> "carpentry_services"
    IssuingCardAuthorizationControls_BlockedCategories_CarpetUpholsteryCleaning -> "carpet_upholstery_cleaning"
    IssuingCardAuthorizationControls_BlockedCategories_Caterers -> "caterers"
    IssuingCardAuthorizationControls_BlockedCategories_CharitableAndSocialServiceOrganizationsFundraising -> "charitable_and_social_service_organizations_fundraising"
    IssuingCardAuthorizationControls_BlockedCategories_ChemicalsAndAlliedProducts -> "chemicals_and_allied_products"
    IssuingCardAuthorizationControls_BlockedCategories_ChidrensAndInfantsWearStores -> "chidrens_and_infants_wear_stores"
    IssuingCardAuthorizationControls_BlockedCategories_ChildCareServices -> "child_care_services"
    IssuingCardAuthorizationControls_BlockedCategories_ChiropodistsPodiatrists -> "chiropodists_podiatrists"
    IssuingCardAuthorizationControls_BlockedCategories_Chiropractors -> "chiropractors"
    IssuingCardAuthorizationControls_BlockedCategories_CigarStoresAndStands -> "cigar_stores_and_stands"
    IssuingCardAuthorizationControls_BlockedCategories_CivicSocialFraternalAssociations -> "civic_social_fraternal_associations"
    IssuingCardAuthorizationControls_BlockedCategories_CleaningAndMaintenance -> "cleaning_and_maintenance"
    IssuingCardAuthorizationControls_BlockedCategories_ClothingRental -> "clothing_rental"
    IssuingCardAuthorizationControls_BlockedCategories_CollegesUniversities -> "colleges_universities"
    IssuingCardAuthorizationControls_BlockedCategories_CommercialEquipment -> "commercial_equipment"
    IssuingCardAuthorizationControls_BlockedCategories_CommercialFootwear -> "commercial_footwear"
    IssuingCardAuthorizationControls_BlockedCategories_CommercialPhotographyArtAndGraphics -> "commercial_photography_art_and_graphics"
    IssuingCardAuthorizationControls_BlockedCategories_CommuterTransportAndFerries -> "commuter_transport_and_ferries"
    IssuingCardAuthorizationControls_BlockedCategories_ComputerNetworkServices -> "computer_network_services"
    IssuingCardAuthorizationControls_BlockedCategories_ComputerProgramming -> "computer_programming"
    IssuingCardAuthorizationControls_BlockedCategories_ComputerRepair -> "computer_repair"
    IssuingCardAuthorizationControls_BlockedCategories_ComputerSoftwareStores -> "computer_software_stores"
    IssuingCardAuthorizationControls_BlockedCategories_ComputersPeripheralsAndSoftware -> "computers_peripherals_and_software"
    IssuingCardAuthorizationControls_BlockedCategories_ConcreteWorkServices -> "concrete_work_services"
    IssuingCardAuthorizationControls_BlockedCategories_ConstructionMaterials -> "construction_materials"
    IssuingCardAuthorizationControls_BlockedCategories_ConsultingPublicRelations -> "consulting_public_relations"
    IssuingCardAuthorizationControls_BlockedCategories_CorrespondenceSchools -> "correspondence_schools"
    IssuingCardAuthorizationControls_BlockedCategories_CosmeticStores -> "cosmetic_stores"
    IssuingCardAuthorizationControls_BlockedCategories_CounselingServices -> "counseling_services"
    IssuingCardAuthorizationControls_BlockedCategories_CountryClubs -> "country_clubs"
    IssuingCardAuthorizationControls_BlockedCategories_CourierServices -> "courier_services"
    IssuingCardAuthorizationControls_BlockedCategories_CourtCosts -> "court_costs"
    IssuingCardAuthorizationControls_BlockedCategories_CreditReportingAgencies -> "credit_reporting_agencies"
    IssuingCardAuthorizationControls_BlockedCategories_CruiseLines -> "cruise_lines"
    IssuingCardAuthorizationControls_BlockedCategories_DairyProductsStores -> "dairy_products_stores"
    IssuingCardAuthorizationControls_BlockedCategories_DanceHallStudiosSchools -> "dance_hall_studios_schools"
    IssuingCardAuthorizationControls_BlockedCategories_DatingEscortServices -> "dating_escort_services"
    IssuingCardAuthorizationControls_BlockedCategories_DentistsOrthodontists -> "dentists_orthodontists"
    IssuingCardAuthorizationControls_BlockedCategories_DepartmentStores -> "department_stores"
    IssuingCardAuthorizationControls_BlockedCategories_DetectiveAgencies -> "detective_agencies"
    IssuingCardAuthorizationControls_BlockedCategories_DigitalGoodsApplications -> "digital_goods_applications"
    IssuingCardAuthorizationControls_BlockedCategories_DirectMarketingCatalogMerchant -> "direct_marketing_catalog_merchant"
    IssuingCardAuthorizationControls_BlockedCategories_DirectMarketingCombinationCatalogAndRetailMerchant -> "direct_marketing_combination_catalog_and_retail_merchant"
    IssuingCardAuthorizationControls_BlockedCategories_DirectMarketingInboundTelemarketing -> "direct_marketing_inbound_telemarketing"
    IssuingCardAuthorizationControls_BlockedCategories_DirectMarketingInsuranceServices -> "direct_marketing_insurance_services"
    IssuingCardAuthorizationControls_BlockedCategories_DirectMarketingOther -> "direct_marketing_other"
    IssuingCardAuthorizationControls_BlockedCategories_DirectMarketingOutboundTelemarketing -> "direct_marketing_outbound_telemarketing"
    IssuingCardAuthorizationControls_BlockedCategories_DirectMarketingSubscription -> "direct_marketing_subscription"
    IssuingCardAuthorizationControls_BlockedCategories_DirectMarketingTravel -> "direct_marketing_travel"
    IssuingCardAuthorizationControls_BlockedCategories_DiscountStores -> "discount_stores"
    IssuingCardAuthorizationControls_BlockedCategories_Doctors -> "doctors"
    IssuingCardAuthorizationControls_BlockedCategories_DoorToDoorSales -> "door_to_door_sales"
    IssuingCardAuthorizationControls_BlockedCategories_DraperyWindowCoveringAndUpholsteryStores -> "drapery_window_covering_and_upholstery_stores"
    IssuingCardAuthorizationControls_BlockedCategories_DrinkingPlaces -> "drinking_places"
    IssuingCardAuthorizationControls_BlockedCategories_DrugStoresAndPharmacies -> "drug_stores_and_pharmacies"
    IssuingCardAuthorizationControls_BlockedCategories_DrugsDrugProprietariesAndDruggistSundries -> "drugs_drug_proprietaries_and_druggist_sundries"
    IssuingCardAuthorizationControls_BlockedCategories_DryCleaners -> "dry_cleaners"
    IssuingCardAuthorizationControls_BlockedCategories_DurableGoods -> "durable_goods"
    IssuingCardAuthorizationControls_BlockedCategories_DutyFreeStores -> "duty_free_stores"
    IssuingCardAuthorizationControls_BlockedCategories_EatingPlacesRestaurants -> "eating_places_restaurants"
    IssuingCardAuthorizationControls_BlockedCategories_EducationalServices -> "educational_services"
    IssuingCardAuthorizationControls_BlockedCategories_ElectricRazorStores -> "electric_razor_stores"
    IssuingCardAuthorizationControls_BlockedCategories_ElectricalPartsAndEquipment -> "electrical_parts_and_equipment"
    IssuingCardAuthorizationControls_BlockedCategories_ElectricalServices -> "electrical_services"
    IssuingCardAuthorizationControls_BlockedCategories_ElectronicsRepairShops -> "electronics_repair_shops"
    IssuingCardAuthorizationControls_BlockedCategories_ElectronicsStores -> "electronics_stores"
    IssuingCardAuthorizationControls_BlockedCategories_ElementarySecondarySchools -> "elementary_secondary_schools"
    IssuingCardAuthorizationControls_BlockedCategories_EmploymentTempAgencies -> "employment_temp_agencies"
    IssuingCardAuthorizationControls_BlockedCategories_EquipmentRental -> "equipment_rental"
    IssuingCardAuthorizationControls_BlockedCategories_ExterminatingServices -> "exterminating_services"
    IssuingCardAuthorizationControls_BlockedCategories_FamilyClothingStores -> "family_clothing_stores"
    IssuingCardAuthorizationControls_BlockedCategories_FastFoodRestaurants -> "fast_food_restaurants"
    IssuingCardAuthorizationControls_BlockedCategories_FinancialInstitutions -> "financial_institutions"
    IssuingCardAuthorizationControls_BlockedCategories_FinesGovernmentAdministrativeEntities -> "fines_government_administrative_entities"
    IssuingCardAuthorizationControls_BlockedCategories_FireplaceFireplaceScreensAndAccessoriesStores -> "fireplace_fireplace_screens_and_accessories_stores"
    IssuingCardAuthorizationControls_BlockedCategories_FloorCoveringStores -> "floor_covering_stores"
    IssuingCardAuthorizationControls_BlockedCategories_Florists -> "florists"
    IssuingCardAuthorizationControls_BlockedCategories_FloristsSuppliesNurseryStockAndFlowers -> "florists_supplies_nursery_stock_and_flowers"
    IssuingCardAuthorizationControls_BlockedCategories_FreezerAndLockerMeatProvisioners -> "freezer_and_locker_meat_provisioners"
    IssuingCardAuthorizationControls_BlockedCategories_FuelDealersNonAutomotive -> "fuel_dealers_non_automotive"
    IssuingCardAuthorizationControls_BlockedCategories_FuneralServicesCrematories -> "funeral_services_crematories"
    IssuingCardAuthorizationControls_BlockedCategories_FurnitureHomeFurnishingsAndEquipmentStoresExceptAppliances -> "furniture_home_furnishings_and_equipment_stores_except_appliances"
    IssuingCardAuthorizationControls_BlockedCategories_FurnitureRepairRefinishing -> "furniture_repair_refinishing"
    IssuingCardAuthorizationControls_BlockedCategories_FurriersAndFurShops -> "furriers_and_fur_shops"
    IssuingCardAuthorizationControls_BlockedCategories_GeneralServices -> "general_services"
    IssuingCardAuthorizationControls_BlockedCategories_GiftCardNoveltyAndSouvenirShops -> "gift_card_novelty_and_souvenir_shops"
    IssuingCardAuthorizationControls_BlockedCategories_GlassPaintAndWallpaperStores -> "glass_paint_and_wallpaper_stores"
    IssuingCardAuthorizationControls_BlockedCategories_GlasswareCrystalStores -> "glassware_crystal_stores"
    IssuingCardAuthorizationControls_BlockedCategories_GolfCoursesPublic -> "golf_courses_public"
    IssuingCardAuthorizationControls_BlockedCategories_GovernmentServices -> "government_services"
    IssuingCardAuthorizationControls_BlockedCategories_GroceryStoresSupermarkets -> "grocery_stores_supermarkets"
    IssuingCardAuthorizationControls_BlockedCategories_HardwareEquipmentAndSupplies -> "hardware_equipment_and_supplies"
    IssuingCardAuthorizationControls_BlockedCategories_HardwareStores -> "hardware_stores"
    IssuingCardAuthorizationControls_BlockedCategories_HealthAndBeautySpas -> "health_and_beauty_spas"
    IssuingCardAuthorizationControls_BlockedCategories_HearingAidsSalesAndSupplies -> "hearing_aids_sales_and_supplies"
    IssuingCardAuthorizationControls_BlockedCategories_HeatingPlumbingAC -> "heating_plumbing_a_c"
    IssuingCardAuthorizationControls_BlockedCategories_HobbyToyAndGameShops -> "hobby_toy_and_game_shops"
    IssuingCardAuthorizationControls_BlockedCategories_HomeSupplyWarehouseStores -> "home_supply_warehouse_stores"
    IssuingCardAuthorizationControls_BlockedCategories_Hospitals -> "hospitals"
    IssuingCardAuthorizationControls_BlockedCategories_HotelsMotelsAndResorts -> "hotels_motels_and_resorts"
    IssuingCardAuthorizationControls_BlockedCategories_HouseholdApplianceStores -> "household_appliance_stores"
    IssuingCardAuthorizationControls_BlockedCategories_IndustrialSupplies -> "industrial_supplies"
    IssuingCardAuthorizationControls_BlockedCategories_InformationRetrievalServices -> "information_retrieval_services"
    IssuingCardAuthorizationControls_BlockedCategories_InsuranceDefault -> "insurance_default"
    IssuingCardAuthorizationControls_BlockedCategories_InsuranceUnderwritingPremiums -> "insurance_underwriting_premiums"
    IssuingCardAuthorizationControls_BlockedCategories_IntraCompanyPurchases -> "intra_company_purchases"
    IssuingCardAuthorizationControls_BlockedCategories_JewelryStoresWatchesClocksAndSilverwareStores -> "jewelry_stores_watches_clocks_and_silverware_stores"
    IssuingCardAuthorizationControls_BlockedCategories_LandscapingServices -> "landscaping_services"
    IssuingCardAuthorizationControls_BlockedCategories_Laundries -> "laundries"
    IssuingCardAuthorizationControls_BlockedCategories_LaundryCleaningServices -> "laundry_cleaning_services"
    IssuingCardAuthorizationControls_BlockedCategories_LegalServicesAttorneys -> "legal_services_attorneys"
    IssuingCardAuthorizationControls_BlockedCategories_LuggageAndLeatherGoodsStores -> "luggage_and_leather_goods_stores"
    IssuingCardAuthorizationControls_BlockedCategories_LumberBuildingMaterialsStores -> "lumber_building_materials_stores"
    IssuingCardAuthorizationControls_BlockedCategories_ManualCashDisburse -> "manual_cash_disburse"
    IssuingCardAuthorizationControls_BlockedCategories_MarinasServiceAndSupplies -> "marinas_service_and_supplies"
    IssuingCardAuthorizationControls_BlockedCategories_MasonryStoneworkAndPlaster -> "masonry_stonework_and_plaster"
    IssuingCardAuthorizationControls_BlockedCategories_MassageParlors -> "massage_parlors"
    IssuingCardAuthorizationControls_BlockedCategories_MedicalAndDentalLabs -> "medical_and_dental_labs"
    IssuingCardAuthorizationControls_BlockedCategories_MedicalDentalOphthalmicAndHospitalEquipmentAndSupplies -> "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
    IssuingCardAuthorizationControls_BlockedCategories_MedicalServices -> "medical_services"
    IssuingCardAuthorizationControls_BlockedCategories_MembershipOrganizations -> "membership_organizations"
    IssuingCardAuthorizationControls_BlockedCategories_MensAndBoysClothingAndAccessoriesStores -> "mens_and_boys_clothing_and_accessories_stores"
    IssuingCardAuthorizationControls_BlockedCategories_MensWomensClothingStores -> "mens_womens_clothing_stores"
    IssuingCardAuthorizationControls_BlockedCategories_MetalServiceCenters -> "metal_service_centers"
    IssuingCardAuthorizationControls_BlockedCategories_Miscellaneous -> "miscellaneous"
    IssuingCardAuthorizationControls_BlockedCategories_MiscellaneousApparelAndAccessoryShops -> "miscellaneous_apparel_and_accessory_shops"
    IssuingCardAuthorizationControls_BlockedCategories_MiscellaneousAutoDealers -> "miscellaneous_auto_dealers"
    IssuingCardAuthorizationControls_BlockedCategories_MiscellaneousBusinessServices -> "miscellaneous_business_services"
    IssuingCardAuthorizationControls_BlockedCategories_MiscellaneousFoodStores -> "miscellaneous_food_stores"
    IssuingCardAuthorizationControls_BlockedCategories_MiscellaneousGeneralMerchandise -> "miscellaneous_general_merchandise"
    IssuingCardAuthorizationControls_BlockedCategories_MiscellaneousGeneralServices -> "miscellaneous_general_services"
    IssuingCardAuthorizationControls_BlockedCategories_MiscellaneousHomeFurnishingSpecialtyStores -> "miscellaneous_home_furnishing_specialty_stores"
    IssuingCardAuthorizationControls_BlockedCategories_MiscellaneousPublishingAndPrinting -> "miscellaneous_publishing_and_printing"
    IssuingCardAuthorizationControls_BlockedCategories_MiscellaneousRecreationServices -> "miscellaneous_recreation_services"
    IssuingCardAuthorizationControls_BlockedCategories_MiscellaneousRepairShops -> "miscellaneous_repair_shops"
    IssuingCardAuthorizationControls_BlockedCategories_MiscellaneousSpecialtyRetail -> "miscellaneous_specialty_retail"
    IssuingCardAuthorizationControls_BlockedCategories_MobileHomeDealers -> "mobile_home_dealers"
    IssuingCardAuthorizationControls_BlockedCategories_MotionPictureTheaters -> "motion_picture_theaters"
    IssuingCardAuthorizationControls_BlockedCategories_MotorFreightCarriersAndTrucking -> "motor_freight_carriers_and_trucking"
    IssuingCardAuthorizationControls_BlockedCategories_MotorHomesDealers -> "motor_homes_dealers"
    IssuingCardAuthorizationControls_BlockedCategories_MotorVehicleSuppliesAndNewParts -> "motor_vehicle_supplies_and_new_parts"
    IssuingCardAuthorizationControls_BlockedCategories_MotorcycleShopsAndDealers -> "motorcycle_shops_and_dealers"
    IssuingCardAuthorizationControls_BlockedCategories_MotorcycleShopsDealers -> "motorcycle_shops_dealers"
    IssuingCardAuthorizationControls_BlockedCategories_MusicStoresMusicalInstrumentsPianosAndSheetMusic -> "music_stores_musical_instruments_pianos_and_sheet_music"
    IssuingCardAuthorizationControls_BlockedCategories_NewsDealersAndNewsstands -> "news_dealers_and_newsstands"
    IssuingCardAuthorizationControls_BlockedCategories_NonFiMoneyOrders -> "non_fi_money_orders"
    IssuingCardAuthorizationControls_BlockedCategories_NonFiStoredValueCardPurchaseLoad -> "non_fi_stored_value_card_purchase_load"
    IssuingCardAuthorizationControls_BlockedCategories_NondurableGoods -> "nondurable_goods"
    IssuingCardAuthorizationControls_BlockedCategories_NurseriesLawnAndGardenSupplyStores -> "nurseries_lawn_and_garden_supply_stores"
    IssuingCardAuthorizationControls_BlockedCategories_NursingPersonalCare -> "nursing_personal_care"
    IssuingCardAuthorizationControls_BlockedCategories_OfficeAndCommercialFurniture -> "office_and_commercial_furniture"
    IssuingCardAuthorizationControls_BlockedCategories_OpticiansEyeglasses -> "opticians_eyeglasses"
    IssuingCardAuthorizationControls_BlockedCategories_OptometristsOphthalmologist -> "optometrists_ophthalmologist"
    IssuingCardAuthorizationControls_BlockedCategories_OrthopedicGoodsProstheticDevices -> "orthopedic_goods_prosthetic_devices"
    IssuingCardAuthorizationControls_BlockedCategories_Osteopaths -> "osteopaths"
    IssuingCardAuthorizationControls_BlockedCategories_PackageStoresBeerWineAndLiquor -> "package_stores_beer_wine_and_liquor"
    IssuingCardAuthorizationControls_BlockedCategories_PaintsVarnishesAndSupplies -> "paints_varnishes_and_supplies"
    IssuingCardAuthorizationControls_BlockedCategories_ParkingLotsGarages -> "parking_lots_garages"
    IssuingCardAuthorizationControls_BlockedCategories_PassengerRailways -> "passenger_railways"
    IssuingCardAuthorizationControls_BlockedCategories_PawnShops -> "pawn_shops"
    IssuingCardAuthorizationControls_BlockedCategories_PetShopsPetFoodAndSupplies -> "pet_shops_pet_food_and_supplies"
    IssuingCardAuthorizationControls_BlockedCategories_PetroleumAndPetroleumProducts -> "petroleum_and_petroleum_products"
    IssuingCardAuthorizationControls_BlockedCategories_PhotoDeveloping -> "photo_developing"
    IssuingCardAuthorizationControls_BlockedCategories_PhotographicPhotocopyMicrofilmEquipmentAndSupplies -> "photographic_photocopy_microfilm_equipment_and_supplies"
    IssuingCardAuthorizationControls_BlockedCategories_PhotographicStudios -> "photographic_studios"
    IssuingCardAuthorizationControls_BlockedCategories_PictureVideoProduction -> "picture_video_production"
    IssuingCardAuthorizationControls_BlockedCategories_PieceGoodsNotionsAndOtherDryGoods -> "piece_goods_notions_and_other_dry_goods"
    IssuingCardAuthorizationControls_BlockedCategories_PlumbingHeatingEquipmentAndSupplies -> "plumbing_heating_equipment_and_supplies"
    IssuingCardAuthorizationControls_BlockedCategories_PoliticalOrganizations -> "political_organizations"
    IssuingCardAuthorizationControls_BlockedCategories_PostalServicesGovernmentOnly -> "postal_services_government_only"
    IssuingCardAuthorizationControls_BlockedCategories_PreciousStonesAndMetalsWatchesAndJewelry -> "precious_stones_and_metals_watches_and_jewelry"
    IssuingCardAuthorizationControls_BlockedCategories_ProfessionalServices -> "professional_services"
    IssuingCardAuthorizationControls_BlockedCategories_PublicWarehousingAndStorage -> "public_warehousing_and_storage"
    IssuingCardAuthorizationControls_BlockedCategories_QuickCopyReproAndBlueprint -> "quick_copy_repro_and_blueprint"
    IssuingCardAuthorizationControls_BlockedCategories_Railroads -> "railroads"
    IssuingCardAuthorizationControls_BlockedCategories_RealEstateAgentsAndManagersRentals -> "real_estate_agents_and_managers_rentals"
    IssuingCardAuthorizationControls_BlockedCategories_RecordStores -> "record_stores"
    IssuingCardAuthorizationControls_BlockedCategories_RecreationalVehicleRentals -> "recreational_vehicle_rentals"
    IssuingCardAuthorizationControls_BlockedCategories_ReligiousGoodsStores -> "religious_goods_stores"
    IssuingCardAuthorizationControls_BlockedCategories_ReligiousOrganizations -> "religious_organizations"
    IssuingCardAuthorizationControls_BlockedCategories_RoofingSidingSheetMetal -> "roofing_siding_sheet_metal"
    IssuingCardAuthorizationControls_BlockedCategories_SecretarialSupportServices -> "secretarial_support_services"
    IssuingCardAuthorizationControls_BlockedCategories_SecurityBrokersDealers -> "security_brokers_dealers"
    IssuingCardAuthorizationControls_BlockedCategories_ServiceStations -> "service_stations"
    IssuingCardAuthorizationControls_BlockedCategories_SewingNeedleworkFabricAndPieceGoodsStores -> "sewing_needlework_fabric_and_piece_goods_stores"
    IssuingCardAuthorizationControls_BlockedCategories_ShoeRepairHatCleaning -> "shoe_repair_hat_cleaning"
    IssuingCardAuthorizationControls_BlockedCategories_ShoeStores -> "shoe_stores"
    IssuingCardAuthorizationControls_BlockedCategories_SmallApplianceRepair -> "small_appliance_repair"
    IssuingCardAuthorizationControls_BlockedCategories_SnowmobileDealers -> "snowmobile_dealers"
    IssuingCardAuthorizationControls_BlockedCategories_SpecialTradeServices -> "special_trade_services"
    IssuingCardAuthorizationControls_BlockedCategories_SpecialtyCleaning -> "specialty_cleaning"
    IssuingCardAuthorizationControls_BlockedCategories_SportingGoodsStores -> "sporting_goods_stores"
    IssuingCardAuthorizationControls_BlockedCategories_SportingRecreationCamps -> "sporting_recreation_camps"
    IssuingCardAuthorizationControls_BlockedCategories_SportsAndRidingApparelStores -> "sports_and_riding_apparel_stores"
    IssuingCardAuthorizationControls_BlockedCategories_SportsClubsFields -> "sports_clubs_fields"
    IssuingCardAuthorizationControls_BlockedCategories_StampAndCoinStores -> "stamp_and_coin_stores"
    IssuingCardAuthorizationControls_BlockedCategories_StationaryOfficeSuppliesPrintingAndWritingPaper -> "stationary_office_supplies_printing_and_writing_paper"
    IssuingCardAuthorizationControls_BlockedCategories_StationeryStoresOfficeAndSchoolSupplyStores -> "stationery_stores_office_and_school_supply_stores"
    IssuingCardAuthorizationControls_BlockedCategories_SwimmingPoolsSales -> "swimming_pools_sales"
    IssuingCardAuthorizationControls_BlockedCategories_TUiTravelGermany -> "t_ui_travel_germany"
    IssuingCardAuthorizationControls_BlockedCategories_TailorsAlterations -> "tailors_alterations"
    IssuingCardAuthorizationControls_BlockedCategories_TaxPaymentsGovernmentAgencies -> "tax_payments_government_agencies"
    IssuingCardAuthorizationControls_BlockedCategories_TaxPreparationServices -> "tax_preparation_services"
    IssuingCardAuthorizationControls_BlockedCategories_TaxicabsLimousines -> "taxicabs_limousines"
    IssuingCardAuthorizationControls_BlockedCategories_TelecommunicationEquipmentAndTelephoneSales -> "telecommunication_equipment_and_telephone_sales"
    IssuingCardAuthorizationControls_BlockedCategories_TelecommunicationServices -> "telecommunication_services"
    IssuingCardAuthorizationControls_BlockedCategories_TelegraphServices -> "telegraph_services"
    IssuingCardAuthorizationControls_BlockedCategories_TentAndAwningShops -> "tent_and_awning_shops"
    IssuingCardAuthorizationControls_BlockedCategories_TestingLaboratories -> "testing_laboratories"
    IssuingCardAuthorizationControls_BlockedCategories_TheatricalTicketAgencies -> "theatrical_ticket_agencies"
    IssuingCardAuthorizationControls_BlockedCategories_Timeshares -> "timeshares"
    IssuingCardAuthorizationControls_BlockedCategories_TireRetreadingAndRepair -> "tire_retreading_and_repair"
    IssuingCardAuthorizationControls_BlockedCategories_TollsBridgeFees -> "tolls_bridge_fees"
    IssuingCardAuthorizationControls_BlockedCategories_TouristAttractionsAndExhibits -> "tourist_attractions_and_exhibits"
    IssuingCardAuthorizationControls_BlockedCategories_TowingServices -> "towing_services"
    IssuingCardAuthorizationControls_BlockedCategories_TrailerParksCampgrounds -> "trailer_parks_campgrounds"
    IssuingCardAuthorizationControls_BlockedCategories_TransportationServices -> "transportation_services"
    IssuingCardAuthorizationControls_BlockedCategories_TravelAgenciesTourOperators -> "travel_agencies_tour_operators"
    IssuingCardAuthorizationControls_BlockedCategories_TruckStopIteration -> "truck_stop_iteration"
    IssuingCardAuthorizationControls_BlockedCategories_TruckUtilityTrailerRentals -> "truck_utility_trailer_rentals"
    IssuingCardAuthorizationControls_BlockedCategories_TypesettingPlateMakingAndRelatedServices -> "typesetting_plate_making_and_related_services"
    IssuingCardAuthorizationControls_BlockedCategories_TypewriterStores -> "typewriter_stores"
    IssuingCardAuthorizationControls_BlockedCategories_USFederalGovernmentAgenciesOrDepartments -> "u_s_federal_government_agencies_or_departments"
    IssuingCardAuthorizationControls_BlockedCategories_UniformsCommercialClothing -> "uniforms_commercial_clothing"
    IssuingCardAuthorizationControls_BlockedCategories_UsedMerchandiseAndSecondhandStores -> "used_merchandise_and_secondhand_stores"
    IssuingCardAuthorizationControls_BlockedCategories_Utilities -> "utilities"
    IssuingCardAuthorizationControls_BlockedCategories_VarietyStores -> "variety_stores"
    IssuingCardAuthorizationControls_BlockedCategories_VeterinaryServices -> "veterinary_services"
    IssuingCardAuthorizationControls_BlockedCategories_VideoAmusementGameSupplies -> "video_amusement_game_supplies"
    IssuingCardAuthorizationControls_BlockedCategories_VideoGameArcades -> "video_game_arcades"
    IssuingCardAuthorizationControls_BlockedCategories_VideoTapeRentalStores -> "video_tape_rental_stores"
    IssuingCardAuthorizationControls_BlockedCategories_VocationalTradeSchools -> "vocational_trade_schools"
    IssuingCardAuthorizationControls_BlockedCategories_WatchJewelryRepair -> "watch_jewelry_repair"
    IssuingCardAuthorizationControls_BlockedCategories_WeldingRepair -> "welding_repair"
    IssuingCardAuthorizationControls_BlockedCategories_WholesaleClubs -> "wholesale_clubs"
    IssuingCardAuthorizationControls_BlockedCategories_WigAndToupeeStores -> "wig_and_toupee_stores"
    IssuingCardAuthorizationControls_BlockedCategories_WiresMoneyOrders -> "wires_money_orders"
    IssuingCardAuthorizationControls_BlockedCategories_WomensAccessoryAndSpecialtyShops -> "womens_accessory_and_specialty_shops"
    IssuingCardAuthorizationControls_BlockedCategories_WomensReadyToWearStores -> "womens_ready_to_wear_stores"
    IssuingCardAuthorizationControls_BlockedCategories_WreckingAndSalvageYards -> "wrecking_and_salvage_yards"

instance FromJSON IssuingCardAuthorizationControls_BlockedCategories where
  parseJSON = withText "IssuingCardAuthorizationControls_BlockedCategories" $ \case
    "ac_refrigeration_repair" -> pure IssuingCardAuthorizationControls_BlockedCategories_AcRefrigerationRepair
    "accounting_bookkeeping_services" -> pure IssuingCardAuthorizationControls_BlockedCategories_AccountingBookkeepingServices
    "advertising_services" -> pure IssuingCardAuthorizationControls_BlockedCategories_AdvertisingServices
    "agricultural_cooperative" -> pure IssuingCardAuthorizationControls_BlockedCategories_AgriculturalCooperative
    "airlines_air_carriers" -> pure IssuingCardAuthorizationControls_BlockedCategories_AirlinesAirCarriers
    "airports_flying_fields" -> pure IssuingCardAuthorizationControls_BlockedCategories_AirportsFlyingFields
    "ambulance_services" -> pure IssuingCardAuthorizationControls_BlockedCategories_AmbulanceServices
    "amusement_parks_carnivals" -> pure IssuingCardAuthorizationControls_BlockedCategories_AmusementParksCarnivals
    "antique_reproductions" -> pure IssuingCardAuthorizationControls_BlockedCategories_AntiqueReproductions
    "antique_shops" -> pure IssuingCardAuthorizationControls_BlockedCategories_AntiqueShops
    "aquariums" -> pure IssuingCardAuthorizationControls_BlockedCategories_Aquariums
    "architectural_surveying_services" -> pure IssuingCardAuthorizationControls_BlockedCategories_ArchitecturalSurveyingServices
    "art_dealers_and_galleries" -> pure IssuingCardAuthorizationControls_BlockedCategories_ArtDealersAndGalleries
    "artists_supply_and_craft_shops" -> pure IssuingCardAuthorizationControls_BlockedCategories_ArtistsSupplyAndCraftShops
    "auto_and_home_supply_stores" -> pure IssuingCardAuthorizationControls_BlockedCategories_AutoAndHomeSupplyStores
    "auto_body_repair_shops" -> pure IssuingCardAuthorizationControls_BlockedCategories_AutoBodyRepairShops
    "auto_paint_shops" -> pure IssuingCardAuthorizationControls_BlockedCategories_AutoPaintShops
    "auto_service_shops" -> pure IssuingCardAuthorizationControls_BlockedCategories_AutoServiceShops
    "automated_cash_disburse" -> pure IssuingCardAuthorizationControls_BlockedCategories_AutomatedCashDisburse
    "automated_fuel_dispensers" -> pure IssuingCardAuthorizationControls_BlockedCategories_AutomatedFuelDispensers
    "automobile_associations" -> pure IssuingCardAuthorizationControls_BlockedCategories_AutomobileAssociations
    "automotive_parts_and_accessories_stores" -> pure IssuingCardAuthorizationControls_BlockedCategories_AutomotivePartsAndAccessoriesStores
    "automotive_tire_stores" -> pure IssuingCardAuthorizationControls_BlockedCategories_AutomotiveTireStores
    "bail_and_bond_payments" -> pure IssuingCardAuthorizationControls_BlockedCategories_BailAndBondPayments
    "bakeries" -> pure IssuingCardAuthorizationControls_BlockedCategories_Bakeries
    "bands_orchestras" -> pure IssuingCardAuthorizationControls_BlockedCategories_BandsOrchestras
    "barber_and_beauty_shops" -> pure IssuingCardAuthorizationControls_BlockedCategories_BarberAndBeautyShops
    "betting_casino_gambling" -> pure IssuingCardAuthorizationControls_BlockedCategories_BettingCasinoGambling
    "bicycle_shops" -> pure IssuingCardAuthorizationControls_BlockedCategories_BicycleShops
    "billiard_pool_establishments" -> pure IssuingCardAuthorizationControls_BlockedCategories_BilliardPoolEstablishments
    "boat_dealers" -> pure IssuingCardAuthorizationControls_BlockedCategories_BoatDealers
    "boat_rentals_and_leases" -> pure IssuingCardAuthorizationControls_BlockedCategories_BoatRentalsAndLeases
    "book_stores" -> pure IssuingCardAuthorizationControls_BlockedCategories_BookStores
    "books_periodicals_and_newspapers" -> pure IssuingCardAuthorizationControls_BlockedCategories_BooksPeriodicalsAndNewspapers
    "bowling_alleys" -> pure IssuingCardAuthorizationControls_BlockedCategories_BowlingAlleys
    "bus_lines" -> pure IssuingCardAuthorizationControls_BlockedCategories_BusLines
    "business_secretarial_schools" -> pure IssuingCardAuthorizationControls_BlockedCategories_BusinessSecretarialSchools
    "buying_shopping_services" -> pure IssuingCardAuthorizationControls_BlockedCategories_BuyingShoppingServices
    "cable_satellite_and_other_pay_television_and_radio" -> pure IssuingCardAuthorizationControls_BlockedCategories_CableSatelliteAndOtherPayTelevisionAndRadio
    "camera_and_photographic_supply_stores" -> pure IssuingCardAuthorizationControls_BlockedCategories_CameraAndPhotographicSupplyStores
    "candy_nut_and_confectionery_stores" -> pure IssuingCardAuthorizationControls_BlockedCategories_CandyNutAndConfectioneryStores
    "car_and_truck_dealers_new_used" -> pure IssuingCardAuthorizationControls_BlockedCategories_CarAndTruckDealersNewUsed
    "car_and_truck_dealers_used_only" -> pure IssuingCardAuthorizationControls_BlockedCategories_CarAndTruckDealersUsedOnly
    "car_rental_agencies" -> pure IssuingCardAuthorizationControls_BlockedCategories_CarRentalAgencies
    "car_washes" -> pure IssuingCardAuthorizationControls_BlockedCategories_CarWashes
    "carpentry_services" -> pure IssuingCardAuthorizationControls_BlockedCategories_CarpentryServices
    "carpet_upholstery_cleaning" -> pure IssuingCardAuthorizationControls_BlockedCategories_CarpetUpholsteryCleaning
    "caterers" -> pure IssuingCardAuthorizationControls_BlockedCategories_Caterers
    "charitable_and_social_service_organizations_fundraising" -> pure IssuingCardAuthorizationControls_BlockedCategories_CharitableAndSocialServiceOrganizationsFundraising
    "chemicals_and_allied_products" -> pure IssuingCardAuthorizationControls_BlockedCategories_ChemicalsAndAlliedProducts
    "chidrens_and_infants_wear_stores" -> pure IssuingCardAuthorizationControls_BlockedCategories_ChidrensAndInfantsWearStores
    "child_care_services" -> pure IssuingCardAuthorizationControls_BlockedCategories_ChildCareServices
    "chiropodists_podiatrists" -> pure IssuingCardAuthorizationControls_BlockedCategories_ChiropodistsPodiatrists
    "chiropractors" -> pure IssuingCardAuthorizationControls_BlockedCategories_Chiropractors
    "cigar_stores_and_stands" -> pure IssuingCardAuthorizationControls_BlockedCategories_CigarStoresAndStands
    "civic_social_fraternal_associations" -> pure IssuingCardAuthorizationControls_BlockedCategories_CivicSocialFraternalAssociations
    "cleaning_and_maintenance" -> pure IssuingCardAuthorizationControls_BlockedCategories_CleaningAndMaintenance
    "clothing_rental" -> pure IssuingCardAuthorizationControls_BlockedCategories_ClothingRental
    "colleges_universities" -> pure IssuingCardAuthorizationControls_BlockedCategories_CollegesUniversities
    "commercial_equipment" -> pure IssuingCardAuthorizationControls_BlockedCategories_CommercialEquipment
    "commercial_footwear" -> pure IssuingCardAuthorizationControls_BlockedCategories_CommercialFootwear
    "commercial_photography_art_and_graphics" -> pure IssuingCardAuthorizationControls_BlockedCategories_CommercialPhotographyArtAndGraphics
    "commuter_transport_and_ferries" -> pure IssuingCardAuthorizationControls_BlockedCategories_CommuterTransportAndFerries
    "computer_network_services" -> pure IssuingCardAuthorizationControls_BlockedCategories_ComputerNetworkServices
    "computer_programming" -> pure IssuingCardAuthorizationControls_BlockedCategories_ComputerProgramming
    "computer_repair" -> pure IssuingCardAuthorizationControls_BlockedCategories_ComputerRepair
    "computer_software_stores" -> pure IssuingCardAuthorizationControls_BlockedCategories_ComputerSoftwareStores
    "computers_peripherals_and_software" -> pure IssuingCardAuthorizationControls_BlockedCategories_ComputersPeripheralsAndSoftware
    "concrete_work_services" -> pure IssuingCardAuthorizationControls_BlockedCategories_ConcreteWorkServices
    "construction_materials" -> pure IssuingCardAuthorizationControls_BlockedCategories_ConstructionMaterials
    "consulting_public_relations" -> pure IssuingCardAuthorizationControls_BlockedCategories_ConsultingPublicRelations
    "correspondence_schools" -> pure IssuingCardAuthorizationControls_BlockedCategories_CorrespondenceSchools
    "cosmetic_stores" -> pure IssuingCardAuthorizationControls_BlockedCategories_CosmeticStores
    "counseling_services" -> pure IssuingCardAuthorizationControls_BlockedCategories_CounselingServices
    "country_clubs" -> pure IssuingCardAuthorizationControls_BlockedCategories_CountryClubs
    "courier_services" -> pure IssuingCardAuthorizationControls_BlockedCategories_CourierServices
    "court_costs" -> pure IssuingCardAuthorizationControls_BlockedCategories_CourtCosts
    "credit_reporting_agencies" -> pure IssuingCardAuthorizationControls_BlockedCategories_CreditReportingAgencies
    "cruise_lines" -> pure IssuingCardAuthorizationControls_BlockedCategories_CruiseLines
    "dairy_products_stores" -> pure IssuingCardAuthorizationControls_BlockedCategories_DairyProductsStores
    "dance_hall_studios_schools" -> pure IssuingCardAuthorizationControls_BlockedCategories_DanceHallStudiosSchools
    "dating_escort_services" -> pure IssuingCardAuthorizationControls_BlockedCategories_DatingEscortServices
    "dentists_orthodontists" -> pure IssuingCardAuthorizationControls_BlockedCategories_DentistsOrthodontists
    "department_stores" -> pure IssuingCardAuthorizationControls_BlockedCategories_DepartmentStores
    "detective_agencies" -> pure IssuingCardAuthorizationControls_BlockedCategories_DetectiveAgencies
    "digital_goods_applications" -> pure IssuingCardAuthorizationControls_BlockedCategories_DigitalGoodsApplications
    "direct_marketing_catalog_merchant" -> pure IssuingCardAuthorizationControls_BlockedCategories_DirectMarketingCatalogMerchant
    "direct_marketing_combination_catalog_and_retail_merchant" -> pure IssuingCardAuthorizationControls_BlockedCategories_DirectMarketingCombinationCatalogAndRetailMerchant
    "direct_marketing_inbound_telemarketing" -> pure IssuingCardAuthorizationControls_BlockedCategories_DirectMarketingInboundTelemarketing
    "direct_marketing_insurance_services" -> pure IssuingCardAuthorizationControls_BlockedCategories_DirectMarketingInsuranceServices
    "direct_marketing_other" -> pure IssuingCardAuthorizationControls_BlockedCategories_DirectMarketingOther
    "direct_marketing_outbound_telemarketing" -> pure IssuingCardAuthorizationControls_BlockedCategories_DirectMarketingOutboundTelemarketing
    "direct_marketing_subscription" -> pure IssuingCardAuthorizationControls_BlockedCategories_DirectMarketingSubscription
    "direct_marketing_travel" -> pure IssuingCardAuthorizationControls_BlockedCategories_DirectMarketingTravel
    "discount_stores" -> pure IssuingCardAuthorizationControls_BlockedCategories_DiscountStores
    "doctors" -> pure IssuingCardAuthorizationControls_BlockedCategories_Doctors
    "door_to_door_sales" -> pure IssuingCardAuthorizationControls_BlockedCategories_DoorToDoorSales
    "drapery_window_covering_and_upholstery_stores" -> pure IssuingCardAuthorizationControls_BlockedCategories_DraperyWindowCoveringAndUpholsteryStores
    "drinking_places" -> pure IssuingCardAuthorizationControls_BlockedCategories_DrinkingPlaces
    "drug_stores_and_pharmacies" -> pure IssuingCardAuthorizationControls_BlockedCategories_DrugStoresAndPharmacies
    "drugs_drug_proprietaries_and_druggist_sundries" -> pure IssuingCardAuthorizationControls_BlockedCategories_DrugsDrugProprietariesAndDruggistSundries
    "dry_cleaners" -> pure IssuingCardAuthorizationControls_BlockedCategories_DryCleaners
    "durable_goods" -> pure IssuingCardAuthorizationControls_BlockedCategories_DurableGoods
    "duty_free_stores" -> pure IssuingCardAuthorizationControls_BlockedCategories_DutyFreeStores
    "eating_places_restaurants" -> pure IssuingCardAuthorizationControls_BlockedCategories_EatingPlacesRestaurants
    "educational_services" -> pure IssuingCardAuthorizationControls_BlockedCategories_EducationalServices
    "electric_razor_stores" -> pure IssuingCardAuthorizationControls_BlockedCategories_ElectricRazorStores
    "electrical_parts_and_equipment" -> pure IssuingCardAuthorizationControls_BlockedCategories_ElectricalPartsAndEquipment
    "electrical_services" -> pure IssuingCardAuthorizationControls_BlockedCategories_ElectricalServices
    "electronics_repair_shops" -> pure IssuingCardAuthorizationControls_BlockedCategories_ElectronicsRepairShops
    "electronics_stores" -> pure IssuingCardAuthorizationControls_BlockedCategories_ElectronicsStores
    "elementary_secondary_schools" -> pure IssuingCardAuthorizationControls_BlockedCategories_ElementarySecondarySchools
    "employment_temp_agencies" -> pure IssuingCardAuthorizationControls_BlockedCategories_EmploymentTempAgencies
    "equipment_rental" -> pure IssuingCardAuthorizationControls_BlockedCategories_EquipmentRental
    "exterminating_services" -> pure IssuingCardAuthorizationControls_BlockedCategories_ExterminatingServices
    "family_clothing_stores" -> pure IssuingCardAuthorizationControls_BlockedCategories_FamilyClothingStores
    "fast_food_restaurants" -> pure IssuingCardAuthorizationControls_BlockedCategories_FastFoodRestaurants
    "financial_institutions" -> pure IssuingCardAuthorizationControls_BlockedCategories_FinancialInstitutions
    "fines_government_administrative_entities" -> pure IssuingCardAuthorizationControls_BlockedCategories_FinesGovernmentAdministrativeEntities
    "fireplace_fireplace_screens_and_accessories_stores" -> pure IssuingCardAuthorizationControls_BlockedCategories_FireplaceFireplaceScreensAndAccessoriesStores
    "floor_covering_stores" -> pure IssuingCardAuthorizationControls_BlockedCategories_FloorCoveringStores
    "florists" -> pure IssuingCardAuthorizationControls_BlockedCategories_Florists
    "florists_supplies_nursery_stock_and_flowers" -> pure IssuingCardAuthorizationControls_BlockedCategories_FloristsSuppliesNurseryStockAndFlowers
    "freezer_and_locker_meat_provisioners" -> pure IssuingCardAuthorizationControls_BlockedCategories_FreezerAndLockerMeatProvisioners
    "fuel_dealers_non_automotive" -> pure IssuingCardAuthorizationControls_BlockedCategories_FuelDealersNonAutomotive
    "funeral_services_crematories" -> pure IssuingCardAuthorizationControls_BlockedCategories_FuneralServicesCrematories
    "furniture_home_furnishings_and_equipment_stores_except_appliances" -> pure IssuingCardAuthorizationControls_BlockedCategories_FurnitureHomeFurnishingsAndEquipmentStoresExceptAppliances
    "furniture_repair_refinishing" -> pure IssuingCardAuthorizationControls_BlockedCategories_FurnitureRepairRefinishing
    "furriers_and_fur_shops" -> pure IssuingCardAuthorizationControls_BlockedCategories_FurriersAndFurShops
    "general_services" -> pure IssuingCardAuthorizationControls_BlockedCategories_GeneralServices
    "gift_card_novelty_and_souvenir_shops" -> pure IssuingCardAuthorizationControls_BlockedCategories_GiftCardNoveltyAndSouvenirShops
    "glass_paint_and_wallpaper_stores" -> pure IssuingCardAuthorizationControls_BlockedCategories_GlassPaintAndWallpaperStores
    "glassware_crystal_stores" -> pure IssuingCardAuthorizationControls_BlockedCategories_GlasswareCrystalStores
    "golf_courses_public" -> pure IssuingCardAuthorizationControls_BlockedCategories_GolfCoursesPublic
    "government_services" -> pure IssuingCardAuthorizationControls_BlockedCategories_GovernmentServices
    "grocery_stores_supermarkets" -> pure IssuingCardAuthorizationControls_BlockedCategories_GroceryStoresSupermarkets
    "hardware_equipment_and_supplies" -> pure IssuingCardAuthorizationControls_BlockedCategories_HardwareEquipmentAndSupplies
    "hardware_stores" -> pure IssuingCardAuthorizationControls_BlockedCategories_HardwareStores
    "health_and_beauty_spas" -> pure IssuingCardAuthorizationControls_BlockedCategories_HealthAndBeautySpas
    "hearing_aids_sales_and_supplies" -> pure IssuingCardAuthorizationControls_BlockedCategories_HearingAidsSalesAndSupplies
    "heating_plumbing_a_c" -> pure IssuingCardAuthorizationControls_BlockedCategories_HeatingPlumbingAC
    "hobby_toy_and_game_shops" -> pure IssuingCardAuthorizationControls_BlockedCategories_HobbyToyAndGameShops
    "home_supply_warehouse_stores" -> pure IssuingCardAuthorizationControls_BlockedCategories_HomeSupplyWarehouseStores
    "hospitals" -> pure IssuingCardAuthorizationControls_BlockedCategories_Hospitals
    "hotels_motels_and_resorts" -> pure IssuingCardAuthorizationControls_BlockedCategories_HotelsMotelsAndResorts
    "household_appliance_stores" -> pure IssuingCardAuthorizationControls_BlockedCategories_HouseholdApplianceStores
    "industrial_supplies" -> pure IssuingCardAuthorizationControls_BlockedCategories_IndustrialSupplies
    "information_retrieval_services" -> pure IssuingCardAuthorizationControls_BlockedCategories_InformationRetrievalServices
    "insurance_default" -> pure IssuingCardAuthorizationControls_BlockedCategories_InsuranceDefault
    "insurance_underwriting_premiums" -> pure IssuingCardAuthorizationControls_BlockedCategories_InsuranceUnderwritingPremiums
    "intra_company_purchases" -> pure IssuingCardAuthorizationControls_BlockedCategories_IntraCompanyPurchases
    "jewelry_stores_watches_clocks_and_silverware_stores" -> pure IssuingCardAuthorizationControls_BlockedCategories_JewelryStoresWatchesClocksAndSilverwareStores
    "landscaping_services" -> pure IssuingCardAuthorizationControls_BlockedCategories_LandscapingServices
    "laundries" -> pure IssuingCardAuthorizationControls_BlockedCategories_Laundries
    "laundry_cleaning_services" -> pure IssuingCardAuthorizationControls_BlockedCategories_LaundryCleaningServices
    "legal_services_attorneys" -> pure IssuingCardAuthorizationControls_BlockedCategories_LegalServicesAttorneys
    "luggage_and_leather_goods_stores" -> pure IssuingCardAuthorizationControls_BlockedCategories_LuggageAndLeatherGoodsStores
    "lumber_building_materials_stores" -> pure IssuingCardAuthorizationControls_BlockedCategories_LumberBuildingMaterialsStores
    "manual_cash_disburse" -> pure IssuingCardAuthorizationControls_BlockedCategories_ManualCashDisburse
    "marinas_service_and_supplies" -> pure IssuingCardAuthorizationControls_BlockedCategories_MarinasServiceAndSupplies
    "masonry_stonework_and_plaster" -> pure IssuingCardAuthorizationControls_BlockedCategories_MasonryStoneworkAndPlaster
    "massage_parlors" -> pure IssuingCardAuthorizationControls_BlockedCategories_MassageParlors
    "medical_and_dental_labs" -> pure IssuingCardAuthorizationControls_BlockedCategories_MedicalAndDentalLabs
    "medical_dental_ophthalmic_and_hospital_equipment_and_supplies" -> pure IssuingCardAuthorizationControls_BlockedCategories_MedicalDentalOphthalmicAndHospitalEquipmentAndSupplies
    "medical_services" -> pure IssuingCardAuthorizationControls_BlockedCategories_MedicalServices
    "membership_organizations" -> pure IssuingCardAuthorizationControls_BlockedCategories_MembershipOrganizations
    "mens_and_boys_clothing_and_accessories_stores" -> pure IssuingCardAuthorizationControls_BlockedCategories_MensAndBoysClothingAndAccessoriesStores
    "mens_womens_clothing_stores" -> pure IssuingCardAuthorizationControls_BlockedCategories_MensWomensClothingStores
    "metal_service_centers" -> pure IssuingCardAuthorizationControls_BlockedCategories_MetalServiceCenters
    "miscellaneous" -> pure IssuingCardAuthorizationControls_BlockedCategories_Miscellaneous
    "miscellaneous_apparel_and_accessory_shops" -> pure IssuingCardAuthorizationControls_BlockedCategories_MiscellaneousApparelAndAccessoryShops
    "miscellaneous_auto_dealers" -> pure IssuingCardAuthorizationControls_BlockedCategories_MiscellaneousAutoDealers
    "miscellaneous_business_services" -> pure IssuingCardAuthorizationControls_BlockedCategories_MiscellaneousBusinessServices
    "miscellaneous_food_stores" -> pure IssuingCardAuthorizationControls_BlockedCategories_MiscellaneousFoodStores
    "miscellaneous_general_merchandise" -> pure IssuingCardAuthorizationControls_BlockedCategories_MiscellaneousGeneralMerchandise
    "miscellaneous_general_services" -> pure IssuingCardAuthorizationControls_BlockedCategories_MiscellaneousGeneralServices
    "miscellaneous_home_furnishing_specialty_stores" -> pure IssuingCardAuthorizationControls_BlockedCategories_MiscellaneousHomeFurnishingSpecialtyStores
    "miscellaneous_publishing_and_printing" -> pure IssuingCardAuthorizationControls_BlockedCategories_MiscellaneousPublishingAndPrinting
    "miscellaneous_recreation_services" -> pure IssuingCardAuthorizationControls_BlockedCategories_MiscellaneousRecreationServices
    "miscellaneous_repair_shops" -> pure IssuingCardAuthorizationControls_BlockedCategories_MiscellaneousRepairShops
    "miscellaneous_specialty_retail" -> pure IssuingCardAuthorizationControls_BlockedCategories_MiscellaneousSpecialtyRetail
    "mobile_home_dealers" -> pure IssuingCardAuthorizationControls_BlockedCategories_MobileHomeDealers
    "motion_picture_theaters" -> pure IssuingCardAuthorizationControls_BlockedCategories_MotionPictureTheaters
    "motor_freight_carriers_and_trucking" -> pure IssuingCardAuthorizationControls_BlockedCategories_MotorFreightCarriersAndTrucking
    "motor_homes_dealers" -> pure IssuingCardAuthorizationControls_BlockedCategories_MotorHomesDealers
    "motor_vehicle_supplies_and_new_parts" -> pure IssuingCardAuthorizationControls_BlockedCategories_MotorVehicleSuppliesAndNewParts
    "motorcycle_shops_and_dealers" -> pure IssuingCardAuthorizationControls_BlockedCategories_MotorcycleShopsAndDealers
    "motorcycle_shops_dealers" -> pure IssuingCardAuthorizationControls_BlockedCategories_MotorcycleShopsDealers
    "music_stores_musical_instruments_pianos_and_sheet_music" -> pure IssuingCardAuthorizationControls_BlockedCategories_MusicStoresMusicalInstrumentsPianosAndSheetMusic
    "news_dealers_and_newsstands" -> pure IssuingCardAuthorizationControls_BlockedCategories_NewsDealersAndNewsstands
    "non_fi_money_orders" -> pure IssuingCardAuthorizationControls_BlockedCategories_NonFiMoneyOrders
    "non_fi_stored_value_card_purchase_load" -> pure IssuingCardAuthorizationControls_BlockedCategories_NonFiStoredValueCardPurchaseLoad
    "nondurable_goods" -> pure IssuingCardAuthorizationControls_BlockedCategories_NondurableGoods
    "nurseries_lawn_and_garden_supply_stores" -> pure IssuingCardAuthorizationControls_BlockedCategories_NurseriesLawnAndGardenSupplyStores
    "nursing_personal_care" -> pure IssuingCardAuthorizationControls_BlockedCategories_NursingPersonalCare
    "office_and_commercial_furniture" -> pure IssuingCardAuthorizationControls_BlockedCategories_OfficeAndCommercialFurniture
    "opticians_eyeglasses" -> pure IssuingCardAuthorizationControls_BlockedCategories_OpticiansEyeglasses
    "optometrists_ophthalmologist" -> pure IssuingCardAuthorizationControls_BlockedCategories_OptometristsOphthalmologist
    "orthopedic_goods_prosthetic_devices" -> pure IssuingCardAuthorizationControls_BlockedCategories_OrthopedicGoodsProstheticDevices
    "osteopaths" -> pure IssuingCardAuthorizationControls_BlockedCategories_Osteopaths
    "package_stores_beer_wine_and_liquor" -> pure IssuingCardAuthorizationControls_BlockedCategories_PackageStoresBeerWineAndLiquor
    "paints_varnishes_and_supplies" -> pure IssuingCardAuthorizationControls_BlockedCategories_PaintsVarnishesAndSupplies
    "parking_lots_garages" -> pure IssuingCardAuthorizationControls_BlockedCategories_ParkingLotsGarages
    "passenger_railways" -> pure IssuingCardAuthorizationControls_BlockedCategories_PassengerRailways
    "pawn_shops" -> pure IssuingCardAuthorizationControls_BlockedCategories_PawnShops
    "pet_shops_pet_food_and_supplies" -> pure IssuingCardAuthorizationControls_BlockedCategories_PetShopsPetFoodAndSupplies
    "petroleum_and_petroleum_products" -> pure IssuingCardAuthorizationControls_BlockedCategories_PetroleumAndPetroleumProducts
    "photo_developing" -> pure IssuingCardAuthorizationControls_BlockedCategories_PhotoDeveloping
    "photographic_photocopy_microfilm_equipment_and_supplies" -> pure IssuingCardAuthorizationControls_BlockedCategories_PhotographicPhotocopyMicrofilmEquipmentAndSupplies
    "photographic_studios" -> pure IssuingCardAuthorizationControls_BlockedCategories_PhotographicStudios
    "picture_video_production" -> pure IssuingCardAuthorizationControls_BlockedCategories_PictureVideoProduction
    "piece_goods_notions_and_other_dry_goods" -> pure IssuingCardAuthorizationControls_BlockedCategories_PieceGoodsNotionsAndOtherDryGoods
    "plumbing_heating_equipment_and_supplies" -> pure IssuingCardAuthorizationControls_BlockedCategories_PlumbingHeatingEquipmentAndSupplies
    "political_organizations" -> pure IssuingCardAuthorizationControls_BlockedCategories_PoliticalOrganizations
    "postal_services_government_only" -> pure IssuingCardAuthorizationControls_BlockedCategories_PostalServicesGovernmentOnly
    "precious_stones_and_metals_watches_and_jewelry" -> pure IssuingCardAuthorizationControls_BlockedCategories_PreciousStonesAndMetalsWatchesAndJewelry
    "professional_services" -> pure IssuingCardAuthorizationControls_BlockedCategories_ProfessionalServices
    "public_warehousing_and_storage" -> pure IssuingCardAuthorizationControls_BlockedCategories_PublicWarehousingAndStorage
    "quick_copy_repro_and_blueprint" -> pure IssuingCardAuthorizationControls_BlockedCategories_QuickCopyReproAndBlueprint
    "railroads" -> pure IssuingCardAuthorizationControls_BlockedCategories_Railroads
    "real_estate_agents_and_managers_rentals" -> pure IssuingCardAuthorizationControls_BlockedCategories_RealEstateAgentsAndManagersRentals
    "record_stores" -> pure IssuingCardAuthorizationControls_BlockedCategories_RecordStores
    "recreational_vehicle_rentals" -> pure IssuingCardAuthorizationControls_BlockedCategories_RecreationalVehicleRentals
    "religious_goods_stores" -> pure IssuingCardAuthorizationControls_BlockedCategories_ReligiousGoodsStores
    "religious_organizations" -> pure IssuingCardAuthorizationControls_BlockedCategories_ReligiousOrganizations
    "roofing_siding_sheet_metal" -> pure IssuingCardAuthorizationControls_BlockedCategories_RoofingSidingSheetMetal
    "secretarial_support_services" -> pure IssuingCardAuthorizationControls_BlockedCategories_SecretarialSupportServices
    "security_brokers_dealers" -> pure IssuingCardAuthorizationControls_BlockedCategories_SecurityBrokersDealers
    "service_stations" -> pure IssuingCardAuthorizationControls_BlockedCategories_ServiceStations
    "sewing_needlework_fabric_and_piece_goods_stores" -> pure IssuingCardAuthorizationControls_BlockedCategories_SewingNeedleworkFabricAndPieceGoodsStores
    "shoe_repair_hat_cleaning" -> pure IssuingCardAuthorizationControls_BlockedCategories_ShoeRepairHatCleaning
    "shoe_stores" -> pure IssuingCardAuthorizationControls_BlockedCategories_ShoeStores
    "small_appliance_repair" -> pure IssuingCardAuthorizationControls_BlockedCategories_SmallApplianceRepair
    "snowmobile_dealers" -> pure IssuingCardAuthorizationControls_BlockedCategories_SnowmobileDealers
    "special_trade_services" -> pure IssuingCardAuthorizationControls_BlockedCategories_SpecialTradeServices
    "specialty_cleaning" -> pure IssuingCardAuthorizationControls_BlockedCategories_SpecialtyCleaning
    "sporting_goods_stores" -> pure IssuingCardAuthorizationControls_BlockedCategories_SportingGoodsStores
    "sporting_recreation_camps" -> pure IssuingCardAuthorizationControls_BlockedCategories_SportingRecreationCamps
    "sports_and_riding_apparel_stores" -> pure IssuingCardAuthorizationControls_BlockedCategories_SportsAndRidingApparelStores
    "sports_clubs_fields" -> pure IssuingCardAuthorizationControls_BlockedCategories_SportsClubsFields
    "stamp_and_coin_stores" -> pure IssuingCardAuthorizationControls_BlockedCategories_StampAndCoinStores
    "stationary_office_supplies_printing_and_writing_paper" -> pure IssuingCardAuthorizationControls_BlockedCategories_StationaryOfficeSuppliesPrintingAndWritingPaper
    "stationery_stores_office_and_school_supply_stores" -> pure IssuingCardAuthorizationControls_BlockedCategories_StationeryStoresOfficeAndSchoolSupplyStores
    "swimming_pools_sales" -> pure IssuingCardAuthorizationControls_BlockedCategories_SwimmingPoolsSales
    "t_ui_travel_germany" -> pure IssuingCardAuthorizationControls_BlockedCategories_TUiTravelGermany
    "tailors_alterations" -> pure IssuingCardAuthorizationControls_BlockedCategories_TailorsAlterations
    "tax_payments_government_agencies" -> pure IssuingCardAuthorizationControls_BlockedCategories_TaxPaymentsGovernmentAgencies
    "tax_preparation_services" -> pure IssuingCardAuthorizationControls_BlockedCategories_TaxPreparationServices
    "taxicabs_limousines" -> pure IssuingCardAuthorizationControls_BlockedCategories_TaxicabsLimousines
    "telecommunication_equipment_and_telephone_sales" -> pure IssuingCardAuthorizationControls_BlockedCategories_TelecommunicationEquipmentAndTelephoneSales
    "telecommunication_services" -> pure IssuingCardAuthorizationControls_BlockedCategories_TelecommunicationServices
    "telegraph_services" -> pure IssuingCardAuthorizationControls_BlockedCategories_TelegraphServices
    "tent_and_awning_shops" -> pure IssuingCardAuthorizationControls_BlockedCategories_TentAndAwningShops
    "testing_laboratories" -> pure IssuingCardAuthorizationControls_BlockedCategories_TestingLaboratories
    "theatrical_ticket_agencies" -> pure IssuingCardAuthorizationControls_BlockedCategories_TheatricalTicketAgencies
    "timeshares" -> pure IssuingCardAuthorizationControls_BlockedCategories_Timeshares
    "tire_retreading_and_repair" -> pure IssuingCardAuthorizationControls_BlockedCategories_TireRetreadingAndRepair
    "tolls_bridge_fees" -> pure IssuingCardAuthorizationControls_BlockedCategories_TollsBridgeFees
    "tourist_attractions_and_exhibits" -> pure IssuingCardAuthorizationControls_BlockedCategories_TouristAttractionsAndExhibits
    "towing_services" -> pure IssuingCardAuthorizationControls_BlockedCategories_TowingServices
    "trailer_parks_campgrounds" -> pure IssuingCardAuthorizationControls_BlockedCategories_TrailerParksCampgrounds
    "transportation_services" -> pure IssuingCardAuthorizationControls_BlockedCategories_TransportationServices
    "travel_agencies_tour_operators" -> pure IssuingCardAuthorizationControls_BlockedCategories_TravelAgenciesTourOperators
    "truck_stop_iteration" -> pure IssuingCardAuthorizationControls_BlockedCategories_TruckStopIteration
    "truck_utility_trailer_rentals" -> pure IssuingCardAuthorizationControls_BlockedCategories_TruckUtilityTrailerRentals
    "typesetting_plate_making_and_related_services" -> pure IssuingCardAuthorizationControls_BlockedCategories_TypesettingPlateMakingAndRelatedServices
    "typewriter_stores" -> pure IssuingCardAuthorizationControls_BlockedCategories_TypewriterStores
    "u_s_federal_government_agencies_or_departments" -> pure IssuingCardAuthorizationControls_BlockedCategories_USFederalGovernmentAgenciesOrDepartments
    "uniforms_commercial_clothing" -> pure IssuingCardAuthorizationControls_BlockedCategories_UniformsCommercialClothing
    "used_merchandise_and_secondhand_stores" -> pure IssuingCardAuthorizationControls_BlockedCategories_UsedMerchandiseAndSecondhandStores
    "utilities" -> pure IssuingCardAuthorizationControls_BlockedCategories_Utilities
    "variety_stores" -> pure IssuingCardAuthorizationControls_BlockedCategories_VarietyStores
    "veterinary_services" -> pure IssuingCardAuthorizationControls_BlockedCategories_VeterinaryServices
    "video_amusement_game_supplies" -> pure IssuingCardAuthorizationControls_BlockedCategories_VideoAmusementGameSupplies
    "video_game_arcades" -> pure IssuingCardAuthorizationControls_BlockedCategories_VideoGameArcades
    "video_tape_rental_stores" -> pure IssuingCardAuthorizationControls_BlockedCategories_VideoTapeRentalStores
    "vocational_trade_schools" -> pure IssuingCardAuthorizationControls_BlockedCategories_VocationalTradeSchools
    "watch_jewelry_repair" -> pure IssuingCardAuthorizationControls_BlockedCategories_WatchJewelryRepair
    "welding_repair" -> pure IssuingCardAuthorizationControls_BlockedCategories_WeldingRepair
    "wholesale_clubs" -> pure IssuingCardAuthorizationControls_BlockedCategories_WholesaleClubs
    "wig_and_toupee_stores" -> pure IssuingCardAuthorizationControls_BlockedCategories_WigAndToupeeStores
    "wires_money_orders" -> pure IssuingCardAuthorizationControls_BlockedCategories_WiresMoneyOrders
    "womens_accessory_and_specialty_shops" -> pure IssuingCardAuthorizationControls_BlockedCategories_WomensAccessoryAndSpecialtyShops
    "womens_ready_to_wear_stores" -> pure IssuingCardAuthorizationControls_BlockedCategories_WomensReadyToWearStores
    "wrecking_and_salvage_yards" -> pure IssuingCardAuthorizationControls_BlockedCategories_WreckingAndSalvageYards
    str -> fail (show str <> " is not a known valid option for IssuingCardAuthorizationControls_BlockedCategories")

data IssuingCardSpendingLimit_Categories
  = IssuingCardSpendingLimit_Categories_AcRefrigerationRepair
  | IssuingCardSpendingLimit_Categories_AccountingBookkeepingServices
  | IssuingCardSpendingLimit_Categories_AdvertisingServices
  | IssuingCardSpendingLimit_Categories_AgriculturalCooperative
  | IssuingCardSpendingLimit_Categories_AirlinesAirCarriers
  | IssuingCardSpendingLimit_Categories_AirportsFlyingFields
  | IssuingCardSpendingLimit_Categories_AmbulanceServices
  | IssuingCardSpendingLimit_Categories_AmusementParksCarnivals
  | IssuingCardSpendingLimit_Categories_AntiqueReproductions
  | IssuingCardSpendingLimit_Categories_AntiqueShops
  | IssuingCardSpendingLimit_Categories_Aquariums
  | IssuingCardSpendingLimit_Categories_ArchitecturalSurveyingServices
  | IssuingCardSpendingLimit_Categories_ArtDealersAndGalleries
  | IssuingCardSpendingLimit_Categories_ArtistsSupplyAndCraftShops
  | IssuingCardSpendingLimit_Categories_AutoAndHomeSupplyStores
  | IssuingCardSpendingLimit_Categories_AutoBodyRepairShops
  | IssuingCardSpendingLimit_Categories_AutoPaintShops
  | IssuingCardSpendingLimit_Categories_AutoServiceShops
  | IssuingCardSpendingLimit_Categories_AutomatedCashDisburse
  | IssuingCardSpendingLimit_Categories_AutomatedFuelDispensers
  | IssuingCardSpendingLimit_Categories_AutomobileAssociations
  | IssuingCardSpendingLimit_Categories_AutomotivePartsAndAccessoriesStores
  | IssuingCardSpendingLimit_Categories_AutomotiveTireStores
  | IssuingCardSpendingLimit_Categories_BailAndBondPayments
  | IssuingCardSpendingLimit_Categories_Bakeries
  | IssuingCardSpendingLimit_Categories_BandsOrchestras
  | IssuingCardSpendingLimit_Categories_BarberAndBeautyShops
  | IssuingCardSpendingLimit_Categories_BettingCasinoGambling
  | IssuingCardSpendingLimit_Categories_BicycleShops
  | IssuingCardSpendingLimit_Categories_BilliardPoolEstablishments
  | IssuingCardSpendingLimit_Categories_BoatDealers
  | IssuingCardSpendingLimit_Categories_BoatRentalsAndLeases
  | IssuingCardSpendingLimit_Categories_BookStores
  | IssuingCardSpendingLimit_Categories_BooksPeriodicalsAndNewspapers
  | IssuingCardSpendingLimit_Categories_BowlingAlleys
  | IssuingCardSpendingLimit_Categories_BusLines
  | IssuingCardSpendingLimit_Categories_BusinessSecretarialSchools
  | IssuingCardSpendingLimit_Categories_BuyingShoppingServices
  | IssuingCardSpendingLimit_Categories_CableSatelliteAndOtherPayTelevisionAndRadio
  | IssuingCardSpendingLimit_Categories_CameraAndPhotographicSupplyStores
  | IssuingCardSpendingLimit_Categories_CandyNutAndConfectioneryStores
  | IssuingCardSpendingLimit_Categories_CarAndTruckDealersNewUsed
  | IssuingCardSpendingLimit_Categories_CarAndTruckDealersUsedOnly
  | IssuingCardSpendingLimit_Categories_CarRentalAgencies
  | IssuingCardSpendingLimit_Categories_CarWashes
  | IssuingCardSpendingLimit_Categories_CarpentryServices
  | IssuingCardSpendingLimit_Categories_CarpetUpholsteryCleaning
  | IssuingCardSpendingLimit_Categories_Caterers
  | IssuingCardSpendingLimit_Categories_CharitableAndSocialServiceOrganizationsFundraising
  | IssuingCardSpendingLimit_Categories_ChemicalsAndAlliedProducts
  | IssuingCardSpendingLimit_Categories_ChidrensAndInfantsWearStores
  | IssuingCardSpendingLimit_Categories_ChildCareServices
  | IssuingCardSpendingLimit_Categories_ChiropodistsPodiatrists
  | IssuingCardSpendingLimit_Categories_Chiropractors
  | IssuingCardSpendingLimit_Categories_CigarStoresAndStands
  | IssuingCardSpendingLimit_Categories_CivicSocialFraternalAssociations
  | IssuingCardSpendingLimit_Categories_CleaningAndMaintenance
  | IssuingCardSpendingLimit_Categories_ClothingRental
  | IssuingCardSpendingLimit_Categories_CollegesUniversities
  | IssuingCardSpendingLimit_Categories_CommercialEquipment
  | IssuingCardSpendingLimit_Categories_CommercialFootwear
  | IssuingCardSpendingLimit_Categories_CommercialPhotographyArtAndGraphics
  | IssuingCardSpendingLimit_Categories_CommuterTransportAndFerries
  | IssuingCardSpendingLimit_Categories_ComputerNetworkServices
  | IssuingCardSpendingLimit_Categories_ComputerProgramming
  | IssuingCardSpendingLimit_Categories_ComputerRepair
  | IssuingCardSpendingLimit_Categories_ComputerSoftwareStores
  | IssuingCardSpendingLimit_Categories_ComputersPeripheralsAndSoftware
  | IssuingCardSpendingLimit_Categories_ConcreteWorkServices
  | IssuingCardSpendingLimit_Categories_ConstructionMaterials
  | IssuingCardSpendingLimit_Categories_ConsultingPublicRelations
  | IssuingCardSpendingLimit_Categories_CorrespondenceSchools
  | IssuingCardSpendingLimit_Categories_CosmeticStores
  | IssuingCardSpendingLimit_Categories_CounselingServices
  | IssuingCardSpendingLimit_Categories_CountryClubs
  | IssuingCardSpendingLimit_Categories_CourierServices
  | IssuingCardSpendingLimit_Categories_CourtCosts
  | IssuingCardSpendingLimit_Categories_CreditReportingAgencies
  | IssuingCardSpendingLimit_Categories_CruiseLines
  | IssuingCardSpendingLimit_Categories_DairyProductsStores
  | IssuingCardSpendingLimit_Categories_DanceHallStudiosSchools
  | IssuingCardSpendingLimit_Categories_DatingEscortServices
  | IssuingCardSpendingLimit_Categories_DentistsOrthodontists
  | IssuingCardSpendingLimit_Categories_DepartmentStores
  | IssuingCardSpendingLimit_Categories_DetectiveAgencies
  | IssuingCardSpendingLimit_Categories_DigitalGoodsApplications
  | IssuingCardSpendingLimit_Categories_DirectMarketingCatalogMerchant
  | IssuingCardSpendingLimit_Categories_DirectMarketingCombinationCatalogAndRetailMerchant
  | IssuingCardSpendingLimit_Categories_DirectMarketingInboundTelemarketing
  | IssuingCardSpendingLimit_Categories_DirectMarketingInsuranceServices
  | IssuingCardSpendingLimit_Categories_DirectMarketingOther
  | IssuingCardSpendingLimit_Categories_DirectMarketingOutboundTelemarketing
  | IssuingCardSpendingLimit_Categories_DirectMarketingSubscription
  | IssuingCardSpendingLimit_Categories_DirectMarketingTravel
  | IssuingCardSpendingLimit_Categories_DiscountStores
  | IssuingCardSpendingLimit_Categories_Doctors
  | IssuingCardSpendingLimit_Categories_DoorToDoorSales
  | IssuingCardSpendingLimit_Categories_DraperyWindowCoveringAndUpholsteryStores
  | IssuingCardSpendingLimit_Categories_DrinkingPlaces
  | IssuingCardSpendingLimit_Categories_DrugStoresAndPharmacies
  | IssuingCardSpendingLimit_Categories_DrugsDrugProprietariesAndDruggistSundries
  | IssuingCardSpendingLimit_Categories_DryCleaners
  | IssuingCardSpendingLimit_Categories_DurableGoods
  | IssuingCardSpendingLimit_Categories_DutyFreeStores
  | IssuingCardSpendingLimit_Categories_EatingPlacesRestaurants
  | IssuingCardSpendingLimit_Categories_EducationalServices
  | IssuingCardSpendingLimit_Categories_ElectricRazorStores
  | IssuingCardSpendingLimit_Categories_ElectricalPartsAndEquipment
  | IssuingCardSpendingLimit_Categories_ElectricalServices
  | IssuingCardSpendingLimit_Categories_ElectronicsRepairShops
  | IssuingCardSpendingLimit_Categories_ElectronicsStores
  | IssuingCardSpendingLimit_Categories_ElementarySecondarySchools
  | IssuingCardSpendingLimit_Categories_EmploymentTempAgencies
  | IssuingCardSpendingLimit_Categories_EquipmentRental
  | IssuingCardSpendingLimit_Categories_ExterminatingServices
  | IssuingCardSpendingLimit_Categories_FamilyClothingStores
  | IssuingCardSpendingLimit_Categories_FastFoodRestaurants
  | IssuingCardSpendingLimit_Categories_FinancialInstitutions
  | IssuingCardSpendingLimit_Categories_FinesGovernmentAdministrativeEntities
  | IssuingCardSpendingLimit_Categories_FireplaceFireplaceScreensAndAccessoriesStores
  | IssuingCardSpendingLimit_Categories_FloorCoveringStores
  | IssuingCardSpendingLimit_Categories_Florists
  | IssuingCardSpendingLimit_Categories_FloristsSuppliesNurseryStockAndFlowers
  | IssuingCardSpendingLimit_Categories_FreezerAndLockerMeatProvisioners
  | IssuingCardSpendingLimit_Categories_FuelDealersNonAutomotive
  | IssuingCardSpendingLimit_Categories_FuneralServicesCrematories
  | IssuingCardSpendingLimit_Categories_FurnitureHomeFurnishingsAndEquipmentStoresExceptAppliances
  | IssuingCardSpendingLimit_Categories_FurnitureRepairRefinishing
  | IssuingCardSpendingLimit_Categories_FurriersAndFurShops
  | IssuingCardSpendingLimit_Categories_GeneralServices
  | IssuingCardSpendingLimit_Categories_GiftCardNoveltyAndSouvenirShops
  | IssuingCardSpendingLimit_Categories_GlassPaintAndWallpaperStores
  | IssuingCardSpendingLimit_Categories_GlasswareCrystalStores
  | IssuingCardSpendingLimit_Categories_GolfCoursesPublic
  | IssuingCardSpendingLimit_Categories_GovernmentServices
  | IssuingCardSpendingLimit_Categories_GroceryStoresSupermarkets
  | IssuingCardSpendingLimit_Categories_HardwareEquipmentAndSupplies
  | IssuingCardSpendingLimit_Categories_HardwareStores
  | IssuingCardSpendingLimit_Categories_HealthAndBeautySpas
  | IssuingCardSpendingLimit_Categories_HearingAidsSalesAndSupplies
  | IssuingCardSpendingLimit_Categories_HeatingPlumbingAC
  | IssuingCardSpendingLimit_Categories_HobbyToyAndGameShops
  | IssuingCardSpendingLimit_Categories_HomeSupplyWarehouseStores
  | IssuingCardSpendingLimit_Categories_Hospitals
  | IssuingCardSpendingLimit_Categories_HotelsMotelsAndResorts
  | IssuingCardSpendingLimit_Categories_HouseholdApplianceStores
  | IssuingCardSpendingLimit_Categories_IndustrialSupplies
  | IssuingCardSpendingLimit_Categories_InformationRetrievalServices
  | IssuingCardSpendingLimit_Categories_InsuranceDefault
  | IssuingCardSpendingLimit_Categories_InsuranceUnderwritingPremiums
  | IssuingCardSpendingLimit_Categories_IntraCompanyPurchases
  | IssuingCardSpendingLimit_Categories_JewelryStoresWatchesClocksAndSilverwareStores
  | IssuingCardSpendingLimit_Categories_LandscapingServices
  | IssuingCardSpendingLimit_Categories_Laundries
  | IssuingCardSpendingLimit_Categories_LaundryCleaningServices
  | IssuingCardSpendingLimit_Categories_LegalServicesAttorneys
  | IssuingCardSpendingLimit_Categories_LuggageAndLeatherGoodsStores
  | IssuingCardSpendingLimit_Categories_LumberBuildingMaterialsStores
  | IssuingCardSpendingLimit_Categories_ManualCashDisburse
  | IssuingCardSpendingLimit_Categories_MarinasServiceAndSupplies
  | IssuingCardSpendingLimit_Categories_MasonryStoneworkAndPlaster
  | IssuingCardSpendingLimit_Categories_MassageParlors
  | IssuingCardSpendingLimit_Categories_MedicalAndDentalLabs
  | IssuingCardSpendingLimit_Categories_MedicalDentalOphthalmicAndHospitalEquipmentAndSupplies
  | IssuingCardSpendingLimit_Categories_MedicalServices
  | IssuingCardSpendingLimit_Categories_MembershipOrganizations
  | IssuingCardSpendingLimit_Categories_MensAndBoysClothingAndAccessoriesStores
  | IssuingCardSpendingLimit_Categories_MensWomensClothingStores
  | IssuingCardSpendingLimit_Categories_MetalServiceCenters
  | IssuingCardSpendingLimit_Categories_Miscellaneous
  | IssuingCardSpendingLimit_Categories_MiscellaneousApparelAndAccessoryShops
  | IssuingCardSpendingLimit_Categories_MiscellaneousAutoDealers
  | IssuingCardSpendingLimit_Categories_MiscellaneousBusinessServices
  | IssuingCardSpendingLimit_Categories_MiscellaneousFoodStores
  | IssuingCardSpendingLimit_Categories_MiscellaneousGeneralMerchandise
  | IssuingCardSpendingLimit_Categories_MiscellaneousGeneralServices
  | IssuingCardSpendingLimit_Categories_MiscellaneousHomeFurnishingSpecialtyStores
  | IssuingCardSpendingLimit_Categories_MiscellaneousPublishingAndPrinting
  | IssuingCardSpendingLimit_Categories_MiscellaneousRecreationServices
  | IssuingCardSpendingLimit_Categories_MiscellaneousRepairShops
  | IssuingCardSpendingLimit_Categories_MiscellaneousSpecialtyRetail
  | IssuingCardSpendingLimit_Categories_MobileHomeDealers
  | IssuingCardSpendingLimit_Categories_MotionPictureTheaters
  | IssuingCardSpendingLimit_Categories_MotorFreightCarriersAndTrucking
  | IssuingCardSpendingLimit_Categories_MotorHomesDealers
  | IssuingCardSpendingLimit_Categories_MotorVehicleSuppliesAndNewParts
  | IssuingCardSpendingLimit_Categories_MotorcycleShopsAndDealers
  | IssuingCardSpendingLimit_Categories_MotorcycleShopsDealers
  | IssuingCardSpendingLimit_Categories_MusicStoresMusicalInstrumentsPianosAndSheetMusic
  | IssuingCardSpendingLimit_Categories_NewsDealersAndNewsstands
  | IssuingCardSpendingLimit_Categories_NonFiMoneyOrders
  | IssuingCardSpendingLimit_Categories_NonFiStoredValueCardPurchaseLoad
  | IssuingCardSpendingLimit_Categories_NondurableGoods
  | IssuingCardSpendingLimit_Categories_NurseriesLawnAndGardenSupplyStores
  | IssuingCardSpendingLimit_Categories_NursingPersonalCare
  | IssuingCardSpendingLimit_Categories_OfficeAndCommercialFurniture
  | IssuingCardSpendingLimit_Categories_OpticiansEyeglasses
  | IssuingCardSpendingLimit_Categories_OptometristsOphthalmologist
  | IssuingCardSpendingLimit_Categories_OrthopedicGoodsProstheticDevices
  | IssuingCardSpendingLimit_Categories_Osteopaths
  | IssuingCardSpendingLimit_Categories_PackageStoresBeerWineAndLiquor
  | IssuingCardSpendingLimit_Categories_PaintsVarnishesAndSupplies
  | IssuingCardSpendingLimit_Categories_ParkingLotsGarages
  | IssuingCardSpendingLimit_Categories_PassengerRailways
  | IssuingCardSpendingLimit_Categories_PawnShops
  | IssuingCardSpendingLimit_Categories_PetShopsPetFoodAndSupplies
  | IssuingCardSpendingLimit_Categories_PetroleumAndPetroleumProducts
  | IssuingCardSpendingLimit_Categories_PhotoDeveloping
  | IssuingCardSpendingLimit_Categories_PhotographicPhotocopyMicrofilmEquipmentAndSupplies
  | IssuingCardSpendingLimit_Categories_PhotographicStudios
  | IssuingCardSpendingLimit_Categories_PictureVideoProduction
  | IssuingCardSpendingLimit_Categories_PieceGoodsNotionsAndOtherDryGoods
  | IssuingCardSpendingLimit_Categories_PlumbingHeatingEquipmentAndSupplies
  | IssuingCardSpendingLimit_Categories_PoliticalOrganizations
  | IssuingCardSpendingLimit_Categories_PostalServicesGovernmentOnly
  | IssuingCardSpendingLimit_Categories_PreciousStonesAndMetalsWatchesAndJewelry
  | IssuingCardSpendingLimit_Categories_ProfessionalServices
  | IssuingCardSpendingLimit_Categories_PublicWarehousingAndStorage
  | IssuingCardSpendingLimit_Categories_QuickCopyReproAndBlueprint
  | IssuingCardSpendingLimit_Categories_Railroads
  | IssuingCardSpendingLimit_Categories_RealEstateAgentsAndManagersRentals
  | IssuingCardSpendingLimit_Categories_RecordStores
  | IssuingCardSpendingLimit_Categories_RecreationalVehicleRentals
  | IssuingCardSpendingLimit_Categories_ReligiousGoodsStores
  | IssuingCardSpendingLimit_Categories_ReligiousOrganizations
  | IssuingCardSpendingLimit_Categories_RoofingSidingSheetMetal
  | IssuingCardSpendingLimit_Categories_SecretarialSupportServices
  | IssuingCardSpendingLimit_Categories_SecurityBrokersDealers
  | IssuingCardSpendingLimit_Categories_ServiceStations
  | IssuingCardSpendingLimit_Categories_SewingNeedleworkFabricAndPieceGoodsStores
  | IssuingCardSpendingLimit_Categories_ShoeRepairHatCleaning
  | IssuingCardSpendingLimit_Categories_ShoeStores
  | IssuingCardSpendingLimit_Categories_SmallApplianceRepair
  | IssuingCardSpendingLimit_Categories_SnowmobileDealers
  | IssuingCardSpendingLimit_Categories_SpecialTradeServices
  | IssuingCardSpendingLimit_Categories_SpecialtyCleaning
  | IssuingCardSpendingLimit_Categories_SportingGoodsStores
  | IssuingCardSpendingLimit_Categories_SportingRecreationCamps
  | IssuingCardSpendingLimit_Categories_SportsAndRidingApparelStores
  | IssuingCardSpendingLimit_Categories_SportsClubsFields
  | IssuingCardSpendingLimit_Categories_StampAndCoinStores
  | IssuingCardSpendingLimit_Categories_StationaryOfficeSuppliesPrintingAndWritingPaper
  | IssuingCardSpendingLimit_Categories_StationeryStoresOfficeAndSchoolSupplyStores
  | IssuingCardSpendingLimit_Categories_SwimmingPoolsSales
  | IssuingCardSpendingLimit_Categories_TUiTravelGermany
  | IssuingCardSpendingLimit_Categories_TailorsAlterations
  | IssuingCardSpendingLimit_Categories_TaxPaymentsGovernmentAgencies
  | IssuingCardSpendingLimit_Categories_TaxPreparationServices
  | IssuingCardSpendingLimit_Categories_TaxicabsLimousines
  | IssuingCardSpendingLimit_Categories_TelecommunicationEquipmentAndTelephoneSales
  | IssuingCardSpendingLimit_Categories_TelecommunicationServices
  | IssuingCardSpendingLimit_Categories_TelegraphServices
  | IssuingCardSpendingLimit_Categories_TentAndAwningShops
  | IssuingCardSpendingLimit_Categories_TestingLaboratories
  | IssuingCardSpendingLimit_Categories_TheatricalTicketAgencies
  | IssuingCardSpendingLimit_Categories_Timeshares
  | IssuingCardSpendingLimit_Categories_TireRetreadingAndRepair
  | IssuingCardSpendingLimit_Categories_TollsBridgeFees
  | IssuingCardSpendingLimit_Categories_TouristAttractionsAndExhibits
  | IssuingCardSpendingLimit_Categories_TowingServices
  | IssuingCardSpendingLimit_Categories_TrailerParksCampgrounds
  | IssuingCardSpendingLimit_Categories_TransportationServices
  | IssuingCardSpendingLimit_Categories_TravelAgenciesTourOperators
  | IssuingCardSpendingLimit_Categories_TruckStopIteration
  | IssuingCardSpendingLimit_Categories_TruckUtilityTrailerRentals
  | IssuingCardSpendingLimit_Categories_TypesettingPlateMakingAndRelatedServices
  | IssuingCardSpendingLimit_Categories_TypewriterStores
  | IssuingCardSpendingLimit_Categories_USFederalGovernmentAgenciesOrDepartments
  | IssuingCardSpendingLimit_Categories_UniformsCommercialClothing
  | IssuingCardSpendingLimit_Categories_UsedMerchandiseAndSecondhandStores
  | IssuingCardSpendingLimit_Categories_Utilities
  | IssuingCardSpendingLimit_Categories_VarietyStores
  | IssuingCardSpendingLimit_Categories_VeterinaryServices
  | IssuingCardSpendingLimit_Categories_VideoAmusementGameSupplies
  | IssuingCardSpendingLimit_Categories_VideoGameArcades
  | IssuingCardSpendingLimit_Categories_VideoTapeRentalStores
  | IssuingCardSpendingLimit_Categories_VocationalTradeSchools
  | IssuingCardSpendingLimit_Categories_WatchJewelryRepair
  | IssuingCardSpendingLimit_Categories_WeldingRepair
  | IssuingCardSpendingLimit_Categories_WholesaleClubs
  | IssuingCardSpendingLimit_Categories_WigAndToupeeStores
  | IssuingCardSpendingLimit_Categories_WiresMoneyOrders
  | IssuingCardSpendingLimit_Categories_WomensAccessoryAndSpecialtyShops
  | IssuingCardSpendingLimit_Categories_WomensReadyToWearStores
  | IssuingCardSpendingLimit_Categories_WreckingAndSalvageYards
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON IssuingCardSpendingLimit_Categories where
  toJSON e = Text $ case e of
    IssuingCardSpendingLimit_Categories_AcRefrigerationRepair -> "ac_refrigeration_repair"
    IssuingCardSpendingLimit_Categories_AccountingBookkeepingServices -> "accounting_bookkeeping_services"
    IssuingCardSpendingLimit_Categories_AdvertisingServices -> "advertising_services"
    IssuingCardSpendingLimit_Categories_AgriculturalCooperative -> "agricultural_cooperative"
    IssuingCardSpendingLimit_Categories_AirlinesAirCarriers -> "airlines_air_carriers"
    IssuingCardSpendingLimit_Categories_AirportsFlyingFields -> "airports_flying_fields"
    IssuingCardSpendingLimit_Categories_AmbulanceServices -> "ambulance_services"
    IssuingCardSpendingLimit_Categories_AmusementParksCarnivals -> "amusement_parks_carnivals"
    IssuingCardSpendingLimit_Categories_AntiqueReproductions -> "antique_reproductions"
    IssuingCardSpendingLimit_Categories_AntiqueShops -> "antique_shops"
    IssuingCardSpendingLimit_Categories_Aquariums -> "aquariums"
    IssuingCardSpendingLimit_Categories_ArchitecturalSurveyingServices -> "architectural_surveying_services"
    IssuingCardSpendingLimit_Categories_ArtDealersAndGalleries -> "art_dealers_and_galleries"
    IssuingCardSpendingLimit_Categories_ArtistsSupplyAndCraftShops -> "artists_supply_and_craft_shops"
    IssuingCardSpendingLimit_Categories_AutoAndHomeSupplyStores -> "auto_and_home_supply_stores"
    IssuingCardSpendingLimit_Categories_AutoBodyRepairShops -> "auto_body_repair_shops"
    IssuingCardSpendingLimit_Categories_AutoPaintShops -> "auto_paint_shops"
    IssuingCardSpendingLimit_Categories_AutoServiceShops -> "auto_service_shops"
    IssuingCardSpendingLimit_Categories_AutomatedCashDisburse -> "automated_cash_disburse"
    IssuingCardSpendingLimit_Categories_AutomatedFuelDispensers -> "automated_fuel_dispensers"
    IssuingCardSpendingLimit_Categories_AutomobileAssociations -> "automobile_associations"
    IssuingCardSpendingLimit_Categories_AutomotivePartsAndAccessoriesStores -> "automotive_parts_and_accessories_stores"
    IssuingCardSpendingLimit_Categories_AutomotiveTireStores -> "automotive_tire_stores"
    IssuingCardSpendingLimit_Categories_BailAndBondPayments -> "bail_and_bond_payments"
    IssuingCardSpendingLimit_Categories_Bakeries -> "bakeries"
    IssuingCardSpendingLimit_Categories_BandsOrchestras -> "bands_orchestras"
    IssuingCardSpendingLimit_Categories_BarberAndBeautyShops -> "barber_and_beauty_shops"
    IssuingCardSpendingLimit_Categories_BettingCasinoGambling -> "betting_casino_gambling"
    IssuingCardSpendingLimit_Categories_BicycleShops -> "bicycle_shops"
    IssuingCardSpendingLimit_Categories_BilliardPoolEstablishments -> "billiard_pool_establishments"
    IssuingCardSpendingLimit_Categories_BoatDealers -> "boat_dealers"
    IssuingCardSpendingLimit_Categories_BoatRentalsAndLeases -> "boat_rentals_and_leases"
    IssuingCardSpendingLimit_Categories_BookStores -> "book_stores"
    IssuingCardSpendingLimit_Categories_BooksPeriodicalsAndNewspapers -> "books_periodicals_and_newspapers"
    IssuingCardSpendingLimit_Categories_BowlingAlleys -> "bowling_alleys"
    IssuingCardSpendingLimit_Categories_BusLines -> "bus_lines"
    IssuingCardSpendingLimit_Categories_BusinessSecretarialSchools -> "business_secretarial_schools"
    IssuingCardSpendingLimit_Categories_BuyingShoppingServices -> "buying_shopping_services"
    IssuingCardSpendingLimit_Categories_CableSatelliteAndOtherPayTelevisionAndRadio -> "cable_satellite_and_other_pay_television_and_radio"
    IssuingCardSpendingLimit_Categories_CameraAndPhotographicSupplyStores -> "camera_and_photographic_supply_stores"
    IssuingCardSpendingLimit_Categories_CandyNutAndConfectioneryStores -> "candy_nut_and_confectionery_stores"
    IssuingCardSpendingLimit_Categories_CarAndTruckDealersNewUsed -> "car_and_truck_dealers_new_used"
    IssuingCardSpendingLimit_Categories_CarAndTruckDealersUsedOnly -> "car_and_truck_dealers_used_only"
    IssuingCardSpendingLimit_Categories_CarRentalAgencies -> "car_rental_agencies"
    IssuingCardSpendingLimit_Categories_CarWashes -> "car_washes"
    IssuingCardSpendingLimit_Categories_CarpentryServices -> "carpentry_services"
    IssuingCardSpendingLimit_Categories_CarpetUpholsteryCleaning -> "carpet_upholstery_cleaning"
    IssuingCardSpendingLimit_Categories_Caterers -> "caterers"
    IssuingCardSpendingLimit_Categories_CharitableAndSocialServiceOrganizationsFundraising -> "charitable_and_social_service_organizations_fundraising"
    IssuingCardSpendingLimit_Categories_ChemicalsAndAlliedProducts -> "chemicals_and_allied_products"
    IssuingCardSpendingLimit_Categories_ChidrensAndInfantsWearStores -> "chidrens_and_infants_wear_stores"
    IssuingCardSpendingLimit_Categories_ChildCareServices -> "child_care_services"
    IssuingCardSpendingLimit_Categories_ChiropodistsPodiatrists -> "chiropodists_podiatrists"
    IssuingCardSpendingLimit_Categories_Chiropractors -> "chiropractors"
    IssuingCardSpendingLimit_Categories_CigarStoresAndStands -> "cigar_stores_and_stands"
    IssuingCardSpendingLimit_Categories_CivicSocialFraternalAssociations -> "civic_social_fraternal_associations"
    IssuingCardSpendingLimit_Categories_CleaningAndMaintenance -> "cleaning_and_maintenance"
    IssuingCardSpendingLimit_Categories_ClothingRental -> "clothing_rental"
    IssuingCardSpendingLimit_Categories_CollegesUniversities -> "colleges_universities"
    IssuingCardSpendingLimit_Categories_CommercialEquipment -> "commercial_equipment"
    IssuingCardSpendingLimit_Categories_CommercialFootwear -> "commercial_footwear"
    IssuingCardSpendingLimit_Categories_CommercialPhotographyArtAndGraphics -> "commercial_photography_art_and_graphics"
    IssuingCardSpendingLimit_Categories_CommuterTransportAndFerries -> "commuter_transport_and_ferries"
    IssuingCardSpendingLimit_Categories_ComputerNetworkServices -> "computer_network_services"
    IssuingCardSpendingLimit_Categories_ComputerProgramming -> "computer_programming"
    IssuingCardSpendingLimit_Categories_ComputerRepair -> "computer_repair"
    IssuingCardSpendingLimit_Categories_ComputerSoftwareStores -> "computer_software_stores"
    IssuingCardSpendingLimit_Categories_ComputersPeripheralsAndSoftware -> "computers_peripherals_and_software"
    IssuingCardSpendingLimit_Categories_ConcreteWorkServices -> "concrete_work_services"
    IssuingCardSpendingLimit_Categories_ConstructionMaterials -> "construction_materials"
    IssuingCardSpendingLimit_Categories_ConsultingPublicRelations -> "consulting_public_relations"
    IssuingCardSpendingLimit_Categories_CorrespondenceSchools -> "correspondence_schools"
    IssuingCardSpendingLimit_Categories_CosmeticStores -> "cosmetic_stores"
    IssuingCardSpendingLimit_Categories_CounselingServices -> "counseling_services"
    IssuingCardSpendingLimit_Categories_CountryClubs -> "country_clubs"
    IssuingCardSpendingLimit_Categories_CourierServices -> "courier_services"
    IssuingCardSpendingLimit_Categories_CourtCosts -> "court_costs"
    IssuingCardSpendingLimit_Categories_CreditReportingAgencies -> "credit_reporting_agencies"
    IssuingCardSpendingLimit_Categories_CruiseLines -> "cruise_lines"
    IssuingCardSpendingLimit_Categories_DairyProductsStores -> "dairy_products_stores"
    IssuingCardSpendingLimit_Categories_DanceHallStudiosSchools -> "dance_hall_studios_schools"
    IssuingCardSpendingLimit_Categories_DatingEscortServices -> "dating_escort_services"
    IssuingCardSpendingLimit_Categories_DentistsOrthodontists -> "dentists_orthodontists"
    IssuingCardSpendingLimit_Categories_DepartmentStores -> "department_stores"
    IssuingCardSpendingLimit_Categories_DetectiveAgencies -> "detective_agencies"
    IssuingCardSpendingLimit_Categories_DigitalGoodsApplications -> "digital_goods_applications"
    IssuingCardSpendingLimit_Categories_DirectMarketingCatalogMerchant -> "direct_marketing_catalog_merchant"
    IssuingCardSpendingLimit_Categories_DirectMarketingCombinationCatalogAndRetailMerchant -> "direct_marketing_combination_catalog_and_retail_merchant"
    IssuingCardSpendingLimit_Categories_DirectMarketingInboundTelemarketing -> "direct_marketing_inbound_telemarketing"
    IssuingCardSpendingLimit_Categories_DirectMarketingInsuranceServices -> "direct_marketing_insurance_services"
    IssuingCardSpendingLimit_Categories_DirectMarketingOther -> "direct_marketing_other"
    IssuingCardSpendingLimit_Categories_DirectMarketingOutboundTelemarketing -> "direct_marketing_outbound_telemarketing"
    IssuingCardSpendingLimit_Categories_DirectMarketingSubscription -> "direct_marketing_subscription"
    IssuingCardSpendingLimit_Categories_DirectMarketingTravel -> "direct_marketing_travel"
    IssuingCardSpendingLimit_Categories_DiscountStores -> "discount_stores"
    IssuingCardSpendingLimit_Categories_Doctors -> "doctors"
    IssuingCardSpendingLimit_Categories_DoorToDoorSales -> "door_to_door_sales"
    IssuingCardSpendingLimit_Categories_DraperyWindowCoveringAndUpholsteryStores -> "drapery_window_covering_and_upholstery_stores"
    IssuingCardSpendingLimit_Categories_DrinkingPlaces -> "drinking_places"
    IssuingCardSpendingLimit_Categories_DrugStoresAndPharmacies -> "drug_stores_and_pharmacies"
    IssuingCardSpendingLimit_Categories_DrugsDrugProprietariesAndDruggistSundries -> "drugs_drug_proprietaries_and_druggist_sundries"
    IssuingCardSpendingLimit_Categories_DryCleaners -> "dry_cleaners"
    IssuingCardSpendingLimit_Categories_DurableGoods -> "durable_goods"
    IssuingCardSpendingLimit_Categories_DutyFreeStores -> "duty_free_stores"
    IssuingCardSpendingLimit_Categories_EatingPlacesRestaurants -> "eating_places_restaurants"
    IssuingCardSpendingLimit_Categories_EducationalServices -> "educational_services"
    IssuingCardSpendingLimit_Categories_ElectricRazorStores -> "electric_razor_stores"
    IssuingCardSpendingLimit_Categories_ElectricalPartsAndEquipment -> "electrical_parts_and_equipment"
    IssuingCardSpendingLimit_Categories_ElectricalServices -> "electrical_services"
    IssuingCardSpendingLimit_Categories_ElectronicsRepairShops -> "electronics_repair_shops"
    IssuingCardSpendingLimit_Categories_ElectronicsStores -> "electronics_stores"
    IssuingCardSpendingLimit_Categories_ElementarySecondarySchools -> "elementary_secondary_schools"
    IssuingCardSpendingLimit_Categories_EmploymentTempAgencies -> "employment_temp_agencies"
    IssuingCardSpendingLimit_Categories_EquipmentRental -> "equipment_rental"
    IssuingCardSpendingLimit_Categories_ExterminatingServices -> "exterminating_services"
    IssuingCardSpendingLimit_Categories_FamilyClothingStores -> "family_clothing_stores"
    IssuingCardSpendingLimit_Categories_FastFoodRestaurants -> "fast_food_restaurants"
    IssuingCardSpendingLimit_Categories_FinancialInstitutions -> "financial_institutions"
    IssuingCardSpendingLimit_Categories_FinesGovernmentAdministrativeEntities -> "fines_government_administrative_entities"
    IssuingCardSpendingLimit_Categories_FireplaceFireplaceScreensAndAccessoriesStores -> "fireplace_fireplace_screens_and_accessories_stores"
    IssuingCardSpendingLimit_Categories_FloorCoveringStores -> "floor_covering_stores"
    IssuingCardSpendingLimit_Categories_Florists -> "florists"
    IssuingCardSpendingLimit_Categories_FloristsSuppliesNurseryStockAndFlowers -> "florists_supplies_nursery_stock_and_flowers"
    IssuingCardSpendingLimit_Categories_FreezerAndLockerMeatProvisioners -> "freezer_and_locker_meat_provisioners"
    IssuingCardSpendingLimit_Categories_FuelDealersNonAutomotive -> "fuel_dealers_non_automotive"
    IssuingCardSpendingLimit_Categories_FuneralServicesCrematories -> "funeral_services_crematories"
    IssuingCardSpendingLimit_Categories_FurnitureHomeFurnishingsAndEquipmentStoresExceptAppliances -> "furniture_home_furnishings_and_equipment_stores_except_appliances"
    IssuingCardSpendingLimit_Categories_FurnitureRepairRefinishing -> "furniture_repair_refinishing"
    IssuingCardSpendingLimit_Categories_FurriersAndFurShops -> "furriers_and_fur_shops"
    IssuingCardSpendingLimit_Categories_GeneralServices -> "general_services"
    IssuingCardSpendingLimit_Categories_GiftCardNoveltyAndSouvenirShops -> "gift_card_novelty_and_souvenir_shops"
    IssuingCardSpendingLimit_Categories_GlassPaintAndWallpaperStores -> "glass_paint_and_wallpaper_stores"
    IssuingCardSpendingLimit_Categories_GlasswareCrystalStores -> "glassware_crystal_stores"
    IssuingCardSpendingLimit_Categories_GolfCoursesPublic -> "golf_courses_public"
    IssuingCardSpendingLimit_Categories_GovernmentServices -> "government_services"
    IssuingCardSpendingLimit_Categories_GroceryStoresSupermarkets -> "grocery_stores_supermarkets"
    IssuingCardSpendingLimit_Categories_HardwareEquipmentAndSupplies -> "hardware_equipment_and_supplies"
    IssuingCardSpendingLimit_Categories_HardwareStores -> "hardware_stores"
    IssuingCardSpendingLimit_Categories_HealthAndBeautySpas -> "health_and_beauty_spas"
    IssuingCardSpendingLimit_Categories_HearingAidsSalesAndSupplies -> "hearing_aids_sales_and_supplies"
    IssuingCardSpendingLimit_Categories_HeatingPlumbingAC -> "heating_plumbing_a_c"
    IssuingCardSpendingLimit_Categories_HobbyToyAndGameShops -> "hobby_toy_and_game_shops"
    IssuingCardSpendingLimit_Categories_HomeSupplyWarehouseStores -> "home_supply_warehouse_stores"
    IssuingCardSpendingLimit_Categories_Hospitals -> "hospitals"
    IssuingCardSpendingLimit_Categories_HotelsMotelsAndResorts -> "hotels_motels_and_resorts"
    IssuingCardSpendingLimit_Categories_HouseholdApplianceStores -> "household_appliance_stores"
    IssuingCardSpendingLimit_Categories_IndustrialSupplies -> "industrial_supplies"
    IssuingCardSpendingLimit_Categories_InformationRetrievalServices -> "information_retrieval_services"
    IssuingCardSpendingLimit_Categories_InsuranceDefault -> "insurance_default"
    IssuingCardSpendingLimit_Categories_InsuranceUnderwritingPremiums -> "insurance_underwriting_premiums"
    IssuingCardSpendingLimit_Categories_IntraCompanyPurchases -> "intra_company_purchases"
    IssuingCardSpendingLimit_Categories_JewelryStoresWatchesClocksAndSilverwareStores -> "jewelry_stores_watches_clocks_and_silverware_stores"
    IssuingCardSpendingLimit_Categories_LandscapingServices -> "landscaping_services"
    IssuingCardSpendingLimit_Categories_Laundries -> "laundries"
    IssuingCardSpendingLimit_Categories_LaundryCleaningServices -> "laundry_cleaning_services"
    IssuingCardSpendingLimit_Categories_LegalServicesAttorneys -> "legal_services_attorneys"
    IssuingCardSpendingLimit_Categories_LuggageAndLeatherGoodsStores -> "luggage_and_leather_goods_stores"
    IssuingCardSpendingLimit_Categories_LumberBuildingMaterialsStores -> "lumber_building_materials_stores"
    IssuingCardSpendingLimit_Categories_ManualCashDisburse -> "manual_cash_disburse"
    IssuingCardSpendingLimit_Categories_MarinasServiceAndSupplies -> "marinas_service_and_supplies"
    IssuingCardSpendingLimit_Categories_MasonryStoneworkAndPlaster -> "masonry_stonework_and_plaster"
    IssuingCardSpendingLimit_Categories_MassageParlors -> "massage_parlors"
    IssuingCardSpendingLimit_Categories_MedicalAndDentalLabs -> "medical_and_dental_labs"
    IssuingCardSpendingLimit_Categories_MedicalDentalOphthalmicAndHospitalEquipmentAndSupplies -> "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
    IssuingCardSpendingLimit_Categories_MedicalServices -> "medical_services"
    IssuingCardSpendingLimit_Categories_MembershipOrganizations -> "membership_organizations"
    IssuingCardSpendingLimit_Categories_MensAndBoysClothingAndAccessoriesStores -> "mens_and_boys_clothing_and_accessories_stores"
    IssuingCardSpendingLimit_Categories_MensWomensClothingStores -> "mens_womens_clothing_stores"
    IssuingCardSpendingLimit_Categories_MetalServiceCenters -> "metal_service_centers"
    IssuingCardSpendingLimit_Categories_Miscellaneous -> "miscellaneous"
    IssuingCardSpendingLimit_Categories_MiscellaneousApparelAndAccessoryShops -> "miscellaneous_apparel_and_accessory_shops"
    IssuingCardSpendingLimit_Categories_MiscellaneousAutoDealers -> "miscellaneous_auto_dealers"
    IssuingCardSpendingLimit_Categories_MiscellaneousBusinessServices -> "miscellaneous_business_services"
    IssuingCardSpendingLimit_Categories_MiscellaneousFoodStores -> "miscellaneous_food_stores"
    IssuingCardSpendingLimit_Categories_MiscellaneousGeneralMerchandise -> "miscellaneous_general_merchandise"
    IssuingCardSpendingLimit_Categories_MiscellaneousGeneralServices -> "miscellaneous_general_services"
    IssuingCardSpendingLimit_Categories_MiscellaneousHomeFurnishingSpecialtyStores -> "miscellaneous_home_furnishing_specialty_stores"
    IssuingCardSpendingLimit_Categories_MiscellaneousPublishingAndPrinting -> "miscellaneous_publishing_and_printing"
    IssuingCardSpendingLimit_Categories_MiscellaneousRecreationServices -> "miscellaneous_recreation_services"
    IssuingCardSpendingLimit_Categories_MiscellaneousRepairShops -> "miscellaneous_repair_shops"
    IssuingCardSpendingLimit_Categories_MiscellaneousSpecialtyRetail -> "miscellaneous_specialty_retail"
    IssuingCardSpendingLimit_Categories_MobileHomeDealers -> "mobile_home_dealers"
    IssuingCardSpendingLimit_Categories_MotionPictureTheaters -> "motion_picture_theaters"
    IssuingCardSpendingLimit_Categories_MotorFreightCarriersAndTrucking -> "motor_freight_carriers_and_trucking"
    IssuingCardSpendingLimit_Categories_MotorHomesDealers -> "motor_homes_dealers"
    IssuingCardSpendingLimit_Categories_MotorVehicleSuppliesAndNewParts -> "motor_vehicle_supplies_and_new_parts"
    IssuingCardSpendingLimit_Categories_MotorcycleShopsAndDealers -> "motorcycle_shops_and_dealers"
    IssuingCardSpendingLimit_Categories_MotorcycleShopsDealers -> "motorcycle_shops_dealers"
    IssuingCardSpendingLimit_Categories_MusicStoresMusicalInstrumentsPianosAndSheetMusic -> "music_stores_musical_instruments_pianos_and_sheet_music"
    IssuingCardSpendingLimit_Categories_NewsDealersAndNewsstands -> "news_dealers_and_newsstands"
    IssuingCardSpendingLimit_Categories_NonFiMoneyOrders -> "non_fi_money_orders"
    IssuingCardSpendingLimit_Categories_NonFiStoredValueCardPurchaseLoad -> "non_fi_stored_value_card_purchase_load"
    IssuingCardSpendingLimit_Categories_NondurableGoods -> "nondurable_goods"
    IssuingCardSpendingLimit_Categories_NurseriesLawnAndGardenSupplyStores -> "nurseries_lawn_and_garden_supply_stores"
    IssuingCardSpendingLimit_Categories_NursingPersonalCare -> "nursing_personal_care"
    IssuingCardSpendingLimit_Categories_OfficeAndCommercialFurniture -> "office_and_commercial_furniture"
    IssuingCardSpendingLimit_Categories_OpticiansEyeglasses -> "opticians_eyeglasses"
    IssuingCardSpendingLimit_Categories_OptometristsOphthalmologist -> "optometrists_ophthalmologist"
    IssuingCardSpendingLimit_Categories_OrthopedicGoodsProstheticDevices -> "orthopedic_goods_prosthetic_devices"
    IssuingCardSpendingLimit_Categories_Osteopaths -> "osteopaths"
    IssuingCardSpendingLimit_Categories_PackageStoresBeerWineAndLiquor -> "package_stores_beer_wine_and_liquor"
    IssuingCardSpendingLimit_Categories_PaintsVarnishesAndSupplies -> "paints_varnishes_and_supplies"
    IssuingCardSpendingLimit_Categories_ParkingLotsGarages -> "parking_lots_garages"
    IssuingCardSpendingLimit_Categories_PassengerRailways -> "passenger_railways"
    IssuingCardSpendingLimit_Categories_PawnShops -> "pawn_shops"
    IssuingCardSpendingLimit_Categories_PetShopsPetFoodAndSupplies -> "pet_shops_pet_food_and_supplies"
    IssuingCardSpendingLimit_Categories_PetroleumAndPetroleumProducts -> "petroleum_and_petroleum_products"
    IssuingCardSpendingLimit_Categories_PhotoDeveloping -> "photo_developing"
    IssuingCardSpendingLimit_Categories_PhotographicPhotocopyMicrofilmEquipmentAndSupplies -> "photographic_photocopy_microfilm_equipment_and_supplies"
    IssuingCardSpendingLimit_Categories_PhotographicStudios -> "photographic_studios"
    IssuingCardSpendingLimit_Categories_PictureVideoProduction -> "picture_video_production"
    IssuingCardSpendingLimit_Categories_PieceGoodsNotionsAndOtherDryGoods -> "piece_goods_notions_and_other_dry_goods"
    IssuingCardSpendingLimit_Categories_PlumbingHeatingEquipmentAndSupplies -> "plumbing_heating_equipment_and_supplies"
    IssuingCardSpendingLimit_Categories_PoliticalOrganizations -> "political_organizations"
    IssuingCardSpendingLimit_Categories_PostalServicesGovernmentOnly -> "postal_services_government_only"
    IssuingCardSpendingLimit_Categories_PreciousStonesAndMetalsWatchesAndJewelry -> "precious_stones_and_metals_watches_and_jewelry"
    IssuingCardSpendingLimit_Categories_ProfessionalServices -> "professional_services"
    IssuingCardSpendingLimit_Categories_PublicWarehousingAndStorage -> "public_warehousing_and_storage"
    IssuingCardSpendingLimit_Categories_QuickCopyReproAndBlueprint -> "quick_copy_repro_and_blueprint"
    IssuingCardSpendingLimit_Categories_Railroads -> "railroads"
    IssuingCardSpendingLimit_Categories_RealEstateAgentsAndManagersRentals -> "real_estate_agents_and_managers_rentals"
    IssuingCardSpendingLimit_Categories_RecordStores -> "record_stores"
    IssuingCardSpendingLimit_Categories_RecreationalVehicleRentals -> "recreational_vehicle_rentals"
    IssuingCardSpendingLimit_Categories_ReligiousGoodsStores -> "religious_goods_stores"
    IssuingCardSpendingLimit_Categories_ReligiousOrganizations -> "religious_organizations"
    IssuingCardSpendingLimit_Categories_RoofingSidingSheetMetal -> "roofing_siding_sheet_metal"
    IssuingCardSpendingLimit_Categories_SecretarialSupportServices -> "secretarial_support_services"
    IssuingCardSpendingLimit_Categories_SecurityBrokersDealers -> "security_brokers_dealers"
    IssuingCardSpendingLimit_Categories_ServiceStations -> "service_stations"
    IssuingCardSpendingLimit_Categories_SewingNeedleworkFabricAndPieceGoodsStores -> "sewing_needlework_fabric_and_piece_goods_stores"
    IssuingCardSpendingLimit_Categories_ShoeRepairHatCleaning -> "shoe_repair_hat_cleaning"
    IssuingCardSpendingLimit_Categories_ShoeStores -> "shoe_stores"
    IssuingCardSpendingLimit_Categories_SmallApplianceRepair -> "small_appliance_repair"
    IssuingCardSpendingLimit_Categories_SnowmobileDealers -> "snowmobile_dealers"
    IssuingCardSpendingLimit_Categories_SpecialTradeServices -> "special_trade_services"
    IssuingCardSpendingLimit_Categories_SpecialtyCleaning -> "specialty_cleaning"
    IssuingCardSpendingLimit_Categories_SportingGoodsStores -> "sporting_goods_stores"
    IssuingCardSpendingLimit_Categories_SportingRecreationCamps -> "sporting_recreation_camps"
    IssuingCardSpendingLimit_Categories_SportsAndRidingApparelStores -> "sports_and_riding_apparel_stores"
    IssuingCardSpendingLimit_Categories_SportsClubsFields -> "sports_clubs_fields"
    IssuingCardSpendingLimit_Categories_StampAndCoinStores -> "stamp_and_coin_stores"
    IssuingCardSpendingLimit_Categories_StationaryOfficeSuppliesPrintingAndWritingPaper -> "stationary_office_supplies_printing_and_writing_paper"
    IssuingCardSpendingLimit_Categories_StationeryStoresOfficeAndSchoolSupplyStores -> "stationery_stores_office_and_school_supply_stores"
    IssuingCardSpendingLimit_Categories_SwimmingPoolsSales -> "swimming_pools_sales"
    IssuingCardSpendingLimit_Categories_TUiTravelGermany -> "t_ui_travel_germany"
    IssuingCardSpendingLimit_Categories_TailorsAlterations -> "tailors_alterations"
    IssuingCardSpendingLimit_Categories_TaxPaymentsGovernmentAgencies -> "tax_payments_government_agencies"
    IssuingCardSpendingLimit_Categories_TaxPreparationServices -> "tax_preparation_services"
    IssuingCardSpendingLimit_Categories_TaxicabsLimousines -> "taxicabs_limousines"
    IssuingCardSpendingLimit_Categories_TelecommunicationEquipmentAndTelephoneSales -> "telecommunication_equipment_and_telephone_sales"
    IssuingCardSpendingLimit_Categories_TelecommunicationServices -> "telecommunication_services"
    IssuingCardSpendingLimit_Categories_TelegraphServices -> "telegraph_services"
    IssuingCardSpendingLimit_Categories_TentAndAwningShops -> "tent_and_awning_shops"
    IssuingCardSpendingLimit_Categories_TestingLaboratories -> "testing_laboratories"
    IssuingCardSpendingLimit_Categories_TheatricalTicketAgencies -> "theatrical_ticket_agencies"
    IssuingCardSpendingLimit_Categories_Timeshares -> "timeshares"
    IssuingCardSpendingLimit_Categories_TireRetreadingAndRepair -> "tire_retreading_and_repair"
    IssuingCardSpendingLimit_Categories_TollsBridgeFees -> "tolls_bridge_fees"
    IssuingCardSpendingLimit_Categories_TouristAttractionsAndExhibits -> "tourist_attractions_and_exhibits"
    IssuingCardSpendingLimit_Categories_TowingServices -> "towing_services"
    IssuingCardSpendingLimit_Categories_TrailerParksCampgrounds -> "trailer_parks_campgrounds"
    IssuingCardSpendingLimit_Categories_TransportationServices -> "transportation_services"
    IssuingCardSpendingLimit_Categories_TravelAgenciesTourOperators -> "travel_agencies_tour_operators"
    IssuingCardSpendingLimit_Categories_TruckStopIteration -> "truck_stop_iteration"
    IssuingCardSpendingLimit_Categories_TruckUtilityTrailerRentals -> "truck_utility_trailer_rentals"
    IssuingCardSpendingLimit_Categories_TypesettingPlateMakingAndRelatedServices -> "typesetting_plate_making_and_related_services"
    IssuingCardSpendingLimit_Categories_TypewriterStores -> "typewriter_stores"
    IssuingCardSpendingLimit_Categories_USFederalGovernmentAgenciesOrDepartments -> "u_s_federal_government_agencies_or_departments"
    IssuingCardSpendingLimit_Categories_UniformsCommercialClothing -> "uniforms_commercial_clothing"
    IssuingCardSpendingLimit_Categories_UsedMerchandiseAndSecondhandStores -> "used_merchandise_and_secondhand_stores"
    IssuingCardSpendingLimit_Categories_Utilities -> "utilities"
    IssuingCardSpendingLimit_Categories_VarietyStores -> "variety_stores"
    IssuingCardSpendingLimit_Categories_VeterinaryServices -> "veterinary_services"
    IssuingCardSpendingLimit_Categories_VideoAmusementGameSupplies -> "video_amusement_game_supplies"
    IssuingCardSpendingLimit_Categories_VideoGameArcades -> "video_game_arcades"
    IssuingCardSpendingLimit_Categories_VideoTapeRentalStores -> "video_tape_rental_stores"
    IssuingCardSpendingLimit_Categories_VocationalTradeSchools -> "vocational_trade_schools"
    IssuingCardSpendingLimit_Categories_WatchJewelryRepair -> "watch_jewelry_repair"
    IssuingCardSpendingLimit_Categories_WeldingRepair -> "welding_repair"
    IssuingCardSpendingLimit_Categories_WholesaleClubs -> "wholesale_clubs"
    IssuingCardSpendingLimit_Categories_WigAndToupeeStores -> "wig_and_toupee_stores"
    IssuingCardSpendingLimit_Categories_WiresMoneyOrders -> "wires_money_orders"
    IssuingCardSpendingLimit_Categories_WomensAccessoryAndSpecialtyShops -> "womens_accessory_and_specialty_shops"
    IssuingCardSpendingLimit_Categories_WomensReadyToWearStores -> "womens_ready_to_wear_stores"
    IssuingCardSpendingLimit_Categories_WreckingAndSalvageYards -> "wrecking_and_salvage_yards"

instance FromJSON IssuingCardSpendingLimit_Categories where
  parseJSON = withText "IssuingCardSpendingLimit_Categories" $ \case
    "ac_refrigeration_repair" -> pure IssuingCardSpendingLimit_Categories_AcRefrigerationRepair
    "accounting_bookkeeping_services" -> pure IssuingCardSpendingLimit_Categories_AccountingBookkeepingServices
    "advertising_services" -> pure IssuingCardSpendingLimit_Categories_AdvertisingServices
    "agricultural_cooperative" -> pure IssuingCardSpendingLimit_Categories_AgriculturalCooperative
    "airlines_air_carriers" -> pure IssuingCardSpendingLimit_Categories_AirlinesAirCarriers
    "airports_flying_fields" -> pure IssuingCardSpendingLimit_Categories_AirportsFlyingFields
    "ambulance_services" -> pure IssuingCardSpendingLimit_Categories_AmbulanceServices
    "amusement_parks_carnivals" -> pure IssuingCardSpendingLimit_Categories_AmusementParksCarnivals
    "antique_reproductions" -> pure IssuingCardSpendingLimit_Categories_AntiqueReproductions
    "antique_shops" -> pure IssuingCardSpendingLimit_Categories_AntiqueShops
    "aquariums" -> pure IssuingCardSpendingLimit_Categories_Aquariums
    "architectural_surveying_services" -> pure IssuingCardSpendingLimit_Categories_ArchitecturalSurveyingServices
    "art_dealers_and_galleries" -> pure IssuingCardSpendingLimit_Categories_ArtDealersAndGalleries
    "artists_supply_and_craft_shops" -> pure IssuingCardSpendingLimit_Categories_ArtistsSupplyAndCraftShops
    "auto_and_home_supply_stores" -> pure IssuingCardSpendingLimit_Categories_AutoAndHomeSupplyStores
    "auto_body_repair_shops" -> pure IssuingCardSpendingLimit_Categories_AutoBodyRepairShops
    "auto_paint_shops" -> pure IssuingCardSpendingLimit_Categories_AutoPaintShops
    "auto_service_shops" -> pure IssuingCardSpendingLimit_Categories_AutoServiceShops
    "automated_cash_disburse" -> pure IssuingCardSpendingLimit_Categories_AutomatedCashDisburse
    "automated_fuel_dispensers" -> pure IssuingCardSpendingLimit_Categories_AutomatedFuelDispensers
    "automobile_associations" -> pure IssuingCardSpendingLimit_Categories_AutomobileAssociations
    "automotive_parts_and_accessories_stores" -> pure IssuingCardSpendingLimit_Categories_AutomotivePartsAndAccessoriesStores
    "automotive_tire_stores" -> pure IssuingCardSpendingLimit_Categories_AutomotiveTireStores
    "bail_and_bond_payments" -> pure IssuingCardSpendingLimit_Categories_BailAndBondPayments
    "bakeries" -> pure IssuingCardSpendingLimit_Categories_Bakeries
    "bands_orchestras" -> pure IssuingCardSpendingLimit_Categories_BandsOrchestras
    "barber_and_beauty_shops" -> pure IssuingCardSpendingLimit_Categories_BarberAndBeautyShops
    "betting_casino_gambling" -> pure IssuingCardSpendingLimit_Categories_BettingCasinoGambling
    "bicycle_shops" -> pure IssuingCardSpendingLimit_Categories_BicycleShops
    "billiard_pool_establishments" -> pure IssuingCardSpendingLimit_Categories_BilliardPoolEstablishments
    "boat_dealers" -> pure IssuingCardSpendingLimit_Categories_BoatDealers
    "boat_rentals_and_leases" -> pure IssuingCardSpendingLimit_Categories_BoatRentalsAndLeases
    "book_stores" -> pure IssuingCardSpendingLimit_Categories_BookStores
    "books_periodicals_and_newspapers" -> pure IssuingCardSpendingLimit_Categories_BooksPeriodicalsAndNewspapers
    "bowling_alleys" -> pure IssuingCardSpendingLimit_Categories_BowlingAlleys
    "bus_lines" -> pure IssuingCardSpendingLimit_Categories_BusLines
    "business_secretarial_schools" -> pure IssuingCardSpendingLimit_Categories_BusinessSecretarialSchools
    "buying_shopping_services" -> pure IssuingCardSpendingLimit_Categories_BuyingShoppingServices
    "cable_satellite_and_other_pay_television_and_radio" -> pure IssuingCardSpendingLimit_Categories_CableSatelliteAndOtherPayTelevisionAndRadio
    "camera_and_photographic_supply_stores" -> pure IssuingCardSpendingLimit_Categories_CameraAndPhotographicSupplyStores
    "candy_nut_and_confectionery_stores" -> pure IssuingCardSpendingLimit_Categories_CandyNutAndConfectioneryStores
    "car_and_truck_dealers_new_used" -> pure IssuingCardSpendingLimit_Categories_CarAndTruckDealersNewUsed
    "car_and_truck_dealers_used_only" -> pure IssuingCardSpendingLimit_Categories_CarAndTruckDealersUsedOnly
    "car_rental_agencies" -> pure IssuingCardSpendingLimit_Categories_CarRentalAgencies
    "car_washes" -> pure IssuingCardSpendingLimit_Categories_CarWashes
    "carpentry_services" -> pure IssuingCardSpendingLimit_Categories_CarpentryServices
    "carpet_upholstery_cleaning" -> pure IssuingCardSpendingLimit_Categories_CarpetUpholsteryCleaning
    "caterers" -> pure IssuingCardSpendingLimit_Categories_Caterers
    "charitable_and_social_service_organizations_fundraising" -> pure IssuingCardSpendingLimit_Categories_CharitableAndSocialServiceOrganizationsFundraising
    "chemicals_and_allied_products" -> pure IssuingCardSpendingLimit_Categories_ChemicalsAndAlliedProducts
    "chidrens_and_infants_wear_stores" -> pure IssuingCardSpendingLimit_Categories_ChidrensAndInfantsWearStores
    "child_care_services" -> pure IssuingCardSpendingLimit_Categories_ChildCareServices
    "chiropodists_podiatrists" -> pure IssuingCardSpendingLimit_Categories_ChiropodistsPodiatrists
    "chiropractors" -> pure IssuingCardSpendingLimit_Categories_Chiropractors
    "cigar_stores_and_stands" -> pure IssuingCardSpendingLimit_Categories_CigarStoresAndStands
    "civic_social_fraternal_associations" -> pure IssuingCardSpendingLimit_Categories_CivicSocialFraternalAssociations
    "cleaning_and_maintenance" -> pure IssuingCardSpendingLimit_Categories_CleaningAndMaintenance
    "clothing_rental" -> pure IssuingCardSpendingLimit_Categories_ClothingRental
    "colleges_universities" -> pure IssuingCardSpendingLimit_Categories_CollegesUniversities
    "commercial_equipment" -> pure IssuingCardSpendingLimit_Categories_CommercialEquipment
    "commercial_footwear" -> pure IssuingCardSpendingLimit_Categories_CommercialFootwear
    "commercial_photography_art_and_graphics" -> pure IssuingCardSpendingLimit_Categories_CommercialPhotographyArtAndGraphics
    "commuter_transport_and_ferries" -> pure IssuingCardSpendingLimit_Categories_CommuterTransportAndFerries
    "computer_network_services" -> pure IssuingCardSpendingLimit_Categories_ComputerNetworkServices
    "computer_programming" -> pure IssuingCardSpendingLimit_Categories_ComputerProgramming
    "computer_repair" -> pure IssuingCardSpendingLimit_Categories_ComputerRepair
    "computer_software_stores" -> pure IssuingCardSpendingLimit_Categories_ComputerSoftwareStores
    "computers_peripherals_and_software" -> pure IssuingCardSpendingLimit_Categories_ComputersPeripheralsAndSoftware
    "concrete_work_services" -> pure IssuingCardSpendingLimit_Categories_ConcreteWorkServices
    "construction_materials" -> pure IssuingCardSpendingLimit_Categories_ConstructionMaterials
    "consulting_public_relations" -> pure IssuingCardSpendingLimit_Categories_ConsultingPublicRelations
    "correspondence_schools" -> pure IssuingCardSpendingLimit_Categories_CorrespondenceSchools
    "cosmetic_stores" -> pure IssuingCardSpendingLimit_Categories_CosmeticStores
    "counseling_services" -> pure IssuingCardSpendingLimit_Categories_CounselingServices
    "country_clubs" -> pure IssuingCardSpendingLimit_Categories_CountryClubs
    "courier_services" -> pure IssuingCardSpendingLimit_Categories_CourierServices
    "court_costs" -> pure IssuingCardSpendingLimit_Categories_CourtCosts
    "credit_reporting_agencies" -> pure IssuingCardSpendingLimit_Categories_CreditReportingAgencies
    "cruise_lines" -> pure IssuingCardSpendingLimit_Categories_CruiseLines
    "dairy_products_stores" -> pure IssuingCardSpendingLimit_Categories_DairyProductsStores
    "dance_hall_studios_schools" -> pure IssuingCardSpendingLimit_Categories_DanceHallStudiosSchools
    "dating_escort_services" -> pure IssuingCardSpendingLimit_Categories_DatingEscortServices
    "dentists_orthodontists" -> pure IssuingCardSpendingLimit_Categories_DentistsOrthodontists
    "department_stores" -> pure IssuingCardSpendingLimit_Categories_DepartmentStores
    "detective_agencies" -> pure IssuingCardSpendingLimit_Categories_DetectiveAgencies
    "digital_goods_applications" -> pure IssuingCardSpendingLimit_Categories_DigitalGoodsApplications
    "direct_marketing_catalog_merchant" -> pure IssuingCardSpendingLimit_Categories_DirectMarketingCatalogMerchant
    "direct_marketing_combination_catalog_and_retail_merchant" -> pure IssuingCardSpendingLimit_Categories_DirectMarketingCombinationCatalogAndRetailMerchant
    "direct_marketing_inbound_telemarketing" -> pure IssuingCardSpendingLimit_Categories_DirectMarketingInboundTelemarketing
    "direct_marketing_insurance_services" -> pure IssuingCardSpendingLimit_Categories_DirectMarketingInsuranceServices
    "direct_marketing_other" -> pure IssuingCardSpendingLimit_Categories_DirectMarketingOther
    "direct_marketing_outbound_telemarketing" -> pure IssuingCardSpendingLimit_Categories_DirectMarketingOutboundTelemarketing
    "direct_marketing_subscription" -> pure IssuingCardSpendingLimit_Categories_DirectMarketingSubscription
    "direct_marketing_travel" -> pure IssuingCardSpendingLimit_Categories_DirectMarketingTravel
    "discount_stores" -> pure IssuingCardSpendingLimit_Categories_DiscountStores
    "doctors" -> pure IssuingCardSpendingLimit_Categories_Doctors
    "door_to_door_sales" -> pure IssuingCardSpendingLimit_Categories_DoorToDoorSales
    "drapery_window_covering_and_upholstery_stores" -> pure IssuingCardSpendingLimit_Categories_DraperyWindowCoveringAndUpholsteryStores
    "drinking_places" -> pure IssuingCardSpendingLimit_Categories_DrinkingPlaces
    "drug_stores_and_pharmacies" -> pure IssuingCardSpendingLimit_Categories_DrugStoresAndPharmacies
    "drugs_drug_proprietaries_and_druggist_sundries" -> pure IssuingCardSpendingLimit_Categories_DrugsDrugProprietariesAndDruggistSundries
    "dry_cleaners" -> pure IssuingCardSpendingLimit_Categories_DryCleaners
    "durable_goods" -> pure IssuingCardSpendingLimit_Categories_DurableGoods
    "duty_free_stores" -> pure IssuingCardSpendingLimit_Categories_DutyFreeStores
    "eating_places_restaurants" -> pure IssuingCardSpendingLimit_Categories_EatingPlacesRestaurants
    "educational_services" -> pure IssuingCardSpendingLimit_Categories_EducationalServices
    "electric_razor_stores" -> pure IssuingCardSpendingLimit_Categories_ElectricRazorStores
    "electrical_parts_and_equipment" -> pure IssuingCardSpendingLimit_Categories_ElectricalPartsAndEquipment
    "electrical_services" -> pure IssuingCardSpendingLimit_Categories_ElectricalServices
    "electronics_repair_shops" -> pure IssuingCardSpendingLimit_Categories_ElectronicsRepairShops
    "electronics_stores" -> pure IssuingCardSpendingLimit_Categories_ElectronicsStores
    "elementary_secondary_schools" -> pure IssuingCardSpendingLimit_Categories_ElementarySecondarySchools
    "employment_temp_agencies" -> pure IssuingCardSpendingLimit_Categories_EmploymentTempAgencies
    "equipment_rental" -> pure IssuingCardSpendingLimit_Categories_EquipmentRental
    "exterminating_services" -> pure IssuingCardSpendingLimit_Categories_ExterminatingServices
    "family_clothing_stores" -> pure IssuingCardSpendingLimit_Categories_FamilyClothingStores
    "fast_food_restaurants" -> pure IssuingCardSpendingLimit_Categories_FastFoodRestaurants
    "financial_institutions" -> pure IssuingCardSpendingLimit_Categories_FinancialInstitutions
    "fines_government_administrative_entities" -> pure IssuingCardSpendingLimit_Categories_FinesGovernmentAdministrativeEntities
    "fireplace_fireplace_screens_and_accessories_stores" -> pure IssuingCardSpendingLimit_Categories_FireplaceFireplaceScreensAndAccessoriesStores
    "floor_covering_stores" -> pure IssuingCardSpendingLimit_Categories_FloorCoveringStores
    "florists" -> pure IssuingCardSpendingLimit_Categories_Florists
    "florists_supplies_nursery_stock_and_flowers" -> pure IssuingCardSpendingLimit_Categories_FloristsSuppliesNurseryStockAndFlowers
    "freezer_and_locker_meat_provisioners" -> pure IssuingCardSpendingLimit_Categories_FreezerAndLockerMeatProvisioners
    "fuel_dealers_non_automotive" -> pure IssuingCardSpendingLimit_Categories_FuelDealersNonAutomotive
    "funeral_services_crematories" -> pure IssuingCardSpendingLimit_Categories_FuneralServicesCrematories
    "furniture_home_furnishings_and_equipment_stores_except_appliances" -> pure IssuingCardSpendingLimit_Categories_FurnitureHomeFurnishingsAndEquipmentStoresExceptAppliances
    "furniture_repair_refinishing" -> pure IssuingCardSpendingLimit_Categories_FurnitureRepairRefinishing
    "furriers_and_fur_shops" -> pure IssuingCardSpendingLimit_Categories_FurriersAndFurShops
    "general_services" -> pure IssuingCardSpendingLimit_Categories_GeneralServices
    "gift_card_novelty_and_souvenir_shops" -> pure IssuingCardSpendingLimit_Categories_GiftCardNoveltyAndSouvenirShops
    "glass_paint_and_wallpaper_stores" -> pure IssuingCardSpendingLimit_Categories_GlassPaintAndWallpaperStores
    "glassware_crystal_stores" -> pure IssuingCardSpendingLimit_Categories_GlasswareCrystalStores
    "golf_courses_public" -> pure IssuingCardSpendingLimit_Categories_GolfCoursesPublic
    "government_services" -> pure IssuingCardSpendingLimit_Categories_GovernmentServices
    "grocery_stores_supermarkets" -> pure IssuingCardSpendingLimit_Categories_GroceryStoresSupermarkets
    "hardware_equipment_and_supplies" -> pure IssuingCardSpendingLimit_Categories_HardwareEquipmentAndSupplies
    "hardware_stores" -> pure IssuingCardSpendingLimit_Categories_HardwareStores
    "health_and_beauty_spas" -> pure IssuingCardSpendingLimit_Categories_HealthAndBeautySpas
    "hearing_aids_sales_and_supplies" -> pure IssuingCardSpendingLimit_Categories_HearingAidsSalesAndSupplies
    "heating_plumbing_a_c" -> pure IssuingCardSpendingLimit_Categories_HeatingPlumbingAC
    "hobby_toy_and_game_shops" -> pure IssuingCardSpendingLimit_Categories_HobbyToyAndGameShops
    "home_supply_warehouse_stores" -> pure IssuingCardSpendingLimit_Categories_HomeSupplyWarehouseStores
    "hospitals" -> pure IssuingCardSpendingLimit_Categories_Hospitals
    "hotels_motels_and_resorts" -> pure IssuingCardSpendingLimit_Categories_HotelsMotelsAndResorts
    "household_appliance_stores" -> pure IssuingCardSpendingLimit_Categories_HouseholdApplianceStores
    "industrial_supplies" -> pure IssuingCardSpendingLimit_Categories_IndustrialSupplies
    "information_retrieval_services" -> pure IssuingCardSpendingLimit_Categories_InformationRetrievalServices
    "insurance_default" -> pure IssuingCardSpendingLimit_Categories_InsuranceDefault
    "insurance_underwriting_premiums" -> pure IssuingCardSpendingLimit_Categories_InsuranceUnderwritingPremiums
    "intra_company_purchases" -> pure IssuingCardSpendingLimit_Categories_IntraCompanyPurchases
    "jewelry_stores_watches_clocks_and_silverware_stores" -> pure IssuingCardSpendingLimit_Categories_JewelryStoresWatchesClocksAndSilverwareStores
    "landscaping_services" -> pure IssuingCardSpendingLimit_Categories_LandscapingServices
    "laundries" -> pure IssuingCardSpendingLimit_Categories_Laundries
    "laundry_cleaning_services" -> pure IssuingCardSpendingLimit_Categories_LaundryCleaningServices
    "legal_services_attorneys" -> pure IssuingCardSpendingLimit_Categories_LegalServicesAttorneys
    "luggage_and_leather_goods_stores" -> pure IssuingCardSpendingLimit_Categories_LuggageAndLeatherGoodsStores
    "lumber_building_materials_stores" -> pure IssuingCardSpendingLimit_Categories_LumberBuildingMaterialsStores
    "manual_cash_disburse" -> pure IssuingCardSpendingLimit_Categories_ManualCashDisburse
    "marinas_service_and_supplies" -> pure IssuingCardSpendingLimit_Categories_MarinasServiceAndSupplies
    "masonry_stonework_and_plaster" -> pure IssuingCardSpendingLimit_Categories_MasonryStoneworkAndPlaster
    "massage_parlors" -> pure IssuingCardSpendingLimit_Categories_MassageParlors
    "medical_and_dental_labs" -> pure IssuingCardSpendingLimit_Categories_MedicalAndDentalLabs
    "medical_dental_ophthalmic_and_hospital_equipment_and_supplies" -> pure IssuingCardSpendingLimit_Categories_MedicalDentalOphthalmicAndHospitalEquipmentAndSupplies
    "medical_services" -> pure IssuingCardSpendingLimit_Categories_MedicalServices
    "membership_organizations" -> pure IssuingCardSpendingLimit_Categories_MembershipOrganizations
    "mens_and_boys_clothing_and_accessories_stores" -> pure IssuingCardSpendingLimit_Categories_MensAndBoysClothingAndAccessoriesStores
    "mens_womens_clothing_stores" -> pure IssuingCardSpendingLimit_Categories_MensWomensClothingStores
    "metal_service_centers" -> pure IssuingCardSpendingLimit_Categories_MetalServiceCenters
    "miscellaneous" -> pure IssuingCardSpendingLimit_Categories_Miscellaneous
    "miscellaneous_apparel_and_accessory_shops" -> pure IssuingCardSpendingLimit_Categories_MiscellaneousApparelAndAccessoryShops
    "miscellaneous_auto_dealers" -> pure IssuingCardSpendingLimit_Categories_MiscellaneousAutoDealers
    "miscellaneous_business_services" -> pure IssuingCardSpendingLimit_Categories_MiscellaneousBusinessServices
    "miscellaneous_food_stores" -> pure IssuingCardSpendingLimit_Categories_MiscellaneousFoodStores
    "miscellaneous_general_merchandise" -> pure IssuingCardSpendingLimit_Categories_MiscellaneousGeneralMerchandise
    "miscellaneous_general_services" -> pure IssuingCardSpendingLimit_Categories_MiscellaneousGeneralServices
    "miscellaneous_home_furnishing_specialty_stores" -> pure IssuingCardSpendingLimit_Categories_MiscellaneousHomeFurnishingSpecialtyStores
    "miscellaneous_publishing_and_printing" -> pure IssuingCardSpendingLimit_Categories_MiscellaneousPublishingAndPrinting
    "miscellaneous_recreation_services" -> pure IssuingCardSpendingLimit_Categories_MiscellaneousRecreationServices
    "miscellaneous_repair_shops" -> pure IssuingCardSpendingLimit_Categories_MiscellaneousRepairShops
    "miscellaneous_specialty_retail" -> pure IssuingCardSpendingLimit_Categories_MiscellaneousSpecialtyRetail
    "mobile_home_dealers" -> pure IssuingCardSpendingLimit_Categories_MobileHomeDealers
    "motion_picture_theaters" -> pure IssuingCardSpendingLimit_Categories_MotionPictureTheaters
    "motor_freight_carriers_and_trucking" -> pure IssuingCardSpendingLimit_Categories_MotorFreightCarriersAndTrucking
    "motor_homes_dealers" -> pure IssuingCardSpendingLimit_Categories_MotorHomesDealers
    "motor_vehicle_supplies_and_new_parts" -> pure IssuingCardSpendingLimit_Categories_MotorVehicleSuppliesAndNewParts
    "motorcycle_shops_and_dealers" -> pure IssuingCardSpendingLimit_Categories_MotorcycleShopsAndDealers
    "motorcycle_shops_dealers" -> pure IssuingCardSpendingLimit_Categories_MotorcycleShopsDealers
    "music_stores_musical_instruments_pianos_and_sheet_music" -> pure IssuingCardSpendingLimit_Categories_MusicStoresMusicalInstrumentsPianosAndSheetMusic
    "news_dealers_and_newsstands" -> pure IssuingCardSpendingLimit_Categories_NewsDealersAndNewsstands
    "non_fi_money_orders" -> pure IssuingCardSpendingLimit_Categories_NonFiMoneyOrders
    "non_fi_stored_value_card_purchase_load" -> pure IssuingCardSpendingLimit_Categories_NonFiStoredValueCardPurchaseLoad
    "nondurable_goods" -> pure IssuingCardSpendingLimit_Categories_NondurableGoods
    "nurseries_lawn_and_garden_supply_stores" -> pure IssuingCardSpendingLimit_Categories_NurseriesLawnAndGardenSupplyStores
    "nursing_personal_care" -> pure IssuingCardSpendingLimit_Categories_NursingPersonalCare
    "office_and_commercial_furniture" -> pure IssuingCardSpendingLimit_Categories_OfficeAndCommercialFurniture
    "opticians_eyeglasses" -> pure IssuingCardSpendingLimit_Categories_OpticiansEyeglasses
    "optometrists_ophthalmologist" -> pure IssuingCardSpendingLimit_Categories_OptometristsOphthalmologist
    "orthopedic_goods_prosthetic_devices" -> pure IssuingCardSpendingLimit_Categories_OrthopedicGoodsProstheticDevices
    "osteopaths" -> pure IssuingCardSpendingLimit_Categories_Osteopaths
    "package_stores_beer_wine_and_liquor" -> pure IssuingCardSpendingLimit_Categories_PackageStoresBeerWineAndLiquor
    "paints_varnishes_and_supplies" -> pure IssuingCardSpendingLimit_Categories_PaintsVarnishesAndSupplies
    "parking_lots_garages" -> pure IssuingCardSpendingLimit_Categories_ParkingLotsGarages
    "passenger_railways" -> pure IssuingCardSpendingLimit_Categories_PassengerRailways
    "pawn_shops" -> pure IssuingCardSpendingLimit_Categories_PawnShops
    "pet_shops_pet_food_and_supplies" -> pure IssuingCardSpendingLimit_Categories_PetShopsPetFoodAndSupplies
    "petroleum_and_petroleum_products" -> pure IssuingCardSpendingLimit_Categories_PetroleumAndPetroleumProducts
    "photo_developing" -> pure IssuingCardSpendingLimit_Categories_PhotoDeveloping
    "photographic_photocopy_microfilm_equipment_and_supplies" -> pure IssuingCardSpendingLimit_Categories_PhotographicPhotocopyMicrofilmEquipmentAndSupplies
    "photographic_studios" -> pure IssuingCardSpendingLimit_Categories_PhotographicStudios
    "picture_video_production" -> pure IssuingCardSpendingLimit_Categories_PictureVideoProduction
    "piece_goods_notions_and_other_dry_goods" -> pure IssuingCardSpendingLimit_Categories_PieceGoodsNotionsAndOtherDryGoods
    "plumbing_heating_equipment_and_supplies" -> pure IssuingCardSpendingLimit_Categories_PlumbingHeatingEquipmentAndSupplies
    "political_organizations" -> pure IssuingCardSpendingLimit_Categories_PoliticalOrganizations
    "postal_services_government_only" -> pure IssuingCardSpendingLimit_Categories_PostalServicesGovernmentOnly
    "precious_stones_and_metals_watches_and_jewelry" -> pure IssuingCardSpendingLimit_Categories_PreciousStonesAndMetalsWatchesAndJewelry
    "professional_services" -> pure IssuingCardSpendingLimit_Categories_ProfessionalServices
    "public_warehousing_and_storage" -> pure IssuingCardSpendingLimit_Categories_PublicWarehousingAndStorage
    "quick_copy_repro_and_blueprint" -> pure IssuingCardSpendingLimit_Categories_QuickCopyReproAndBlueprint
    "railroads" -> pure IssuingCardSpendingLimit_Categories_Railroads
    "real_estate_agents_and_managers_rentals" -> pure IssuingCardSpendingLimit_Categories_RealEstateAgentsAndManagersRentals
    "record_stores" -> pure IssuingCardSpendingLimit_Categories_RecordStores
    "recreational_vehicle_rentals" -> pure IssuingCardSpendingLimit_Categories_RecreationalVehicleRentals
    "religious_goods_stores" -> pure IssuingCardSpendingLimit_Categories_ReligiousGoodsStores
    "religious_organizations" -> pure IssuingCardSpendingLimit_Categories_ReligiousOrganizations
    "roofing_siding_sheet_metal" -> pure IssuingCardSpendingLimit_Categories_RoofingSidingSheetMetal
    "secretarial_support_services" -> pure IssuingCardSpendingLimit_Categories_SecretarialSupportServices
    "security_brokers_dealers" -> pure IssuingCardSpendingLimit_Categories_SecurityBrokersDealers
    "service_stations" -> pure IssuingCardSpendingLimit_Categories_ServiceStations
    "sewing_needlework_fabric_and_piece_goods_stores" -> pure IssuingCardSpendingLimit_Categories_SewingNeedleworkFabricAndPieceGoodsStores
    "shoe_repair_hat_cleaning" -> pure IssuingCardSpendingLimit_Categories_ShoeRepairHatCleaning
    "shoe_stores" -> pure IssuingCardSpendingLimit_Categories_ShoeStores
    "small_appliance_repair" -> pure IssuingCardSpendingLimit_Categories_SmallApplianceRepair
    "snowmobile_dealers" -> pure IssuingCardSpendingLimit_Categories_SnowmobileDealers
    "special_trade_services" -> pure IssuingCardSpendingLimit_Categories_SpecialTradeServices
    "specialty_cleaning" -> pure IssuingCardSpendingLimit_Categories_SpecialtyCleaning
    "sporting_goods_stores" -> pure IssuingCardSpendingLimit_Categories_SportingGoodsStores
    "sporting_recreation_camps" -> pure IssuingCardSpendingLimit_Categories_SportingRecreationCamps
    "sports_and_riding_apparel_stores" -> pure IssuingCardSpendingLimit_Categories_SportsAndRidingApparelStores
    "sports_clubs_fields" -> pure IssuingCardSpendingLimit_Categories_SportsClubsFields
    "stamp_and_coin_stores" -> pure IssuingCardSpendingLimit_Categories_StampAndCoinStores
    "stationary_office_supplies_printing_and_writing_paper" -> pure IssuingCardSpendingLimit_Categories_StationaryOfficeSuppliesPrintingAndWritingPaper
    "stationery_stores_office_and_school_supply_stores" -> pure IssuingCardSpendingLimit_Categories_StationeryStoresOfficeAndSchoolSupplyStores
    "swimming_pools_sales" -> pure IssuingCardSpendingLimit_Categories_SwimmingPoolsSales
    "t_ui_travel_germany" -> pure IssuingCardSpendingLimit_Categories_TUiTravelGermany
    "tailors_alterations" -> pure IssuingCardSpendingLimit_Categories_TailorsAlterations
    "tax_payments_government_agencies" -> pure IssuingCardSpendingLimit_Categories_TaxPaymentsGovernmentAgencies
    "tax_preparation_services" -> pure IssuingCardSpendingLimit_Categories_TaxPreparationServices
    "taxicabs_limousines" -> pure IssuingCardSpendingLimit_Categories_TaxicabsLimousines
    "telecommunication_equipment_and_telephone_sales" -> pure IssuingCardSpendingLimit_Categories_TelecommunicationEquipmentAndTelephoneSales
    "telecommunication_services" -> pure IssuingCardSpendingLimit_Categories_TelecommunicationServices
    "telegraph_services" -> pure IssuingCardSpendingLimit_Categories_TelegraphServices
    "tent_and_awning_shops" -> pure IssuingCardSpendingLimit_Categories_TentAndAwningShops
    "testing_laboratories" -> pure IssuingCardSpendingLimit_Categories_TestingLaboratories
    "theatrical_ticket_agencies" -> pure IssuingCardSpendingLimit_Categories_TheatricalTicketAgencies
    "timeshares" -> pure IssuingCardSpendingLimit_Categories_Timeshares
    "tire_retreading_and_repair" -> pure IssuingCardSpendingLimit_Categories_TireRetreadingAndRepair
    "tolls_bridge_fees" -> pure IssuingCardSpendingLimit_Categories_TollsBridgeFees
    "tourist_attractions_and_exhibits" -> pure IssuingCardSpendingLimit_Categories_TouristAttractionsAndExhibits
    "towing_services" -> pure IssuingCardSpendingLimit_Categories_TowingServices
    "trailer_parks_campgrounds" -> pure IssuingCardSpendingLimit_Categories_TrailerParksCampgrounds
    "transportation_services" -> pure IssuingCardSpendingLimit_Categories_TransportationServices
    "travel_agencies_tour_operators" -> pure IssuingCardSpendingLimit_Categories_TravelAgenciesTourOperators
    "truck_stop_iteration" -> pure IssuingCardSpendingLimit_Categories_TruckStopIteration
    "truck_utility_trailer_rentals" -> pure IssuingCardSpendingLimit_Categories_TruckUtilityTrailerRentals
    "typesetting_plate_making_and_related_services" -> pure IssuingCardSpendingLimit_Categories_TypesettingPlateMakingAndRelatedServices
    "typewriter_stores" -> pure IssuingCardSpendingLimit_Categories_TypewriterStores
    "u_s_federal_government_agencies_or_departments" -> pure IssuingCardSpendingLimit_Categories_USFederalGovernmentAgenciesOrDepartments
    "uniforms_commercial_clothing" -> pure IssuingCardSpendingLimit_Categories_UniformsCommercialClothing
    "used_merchandise_and_secondhand_stores" -> pure IssuingCardSpendingLimit_Categories_UsedMerchandiseAndSecondhandStores
    "utilities" -> pure IssuingCardSpendingLimit_Categories_Utilities
    "variety_stores" -> pure IssuingCardSpendingLimit_Categories_VarietyStores
    "veterinary_services" -> pure IssuingCardSpendingLimit_Categories_VeterinaryServices
    "video_amusement_game_supplies" -> pure IssuingCardSpendingLimit_Categories_VideoAmusementGameSupplies
    "video_game_arcades" -> pure IssuingCardSpendingLimit_Categories_VideoGameArcades
    "video_tape_rental_stores" -> pure IssuingCardSpendingLimit_Categories_VideoTapeRentalStores
    "vocational_trade_schools" -> pure IssuingCardSpendingLimit_Categories_VocationalTradeSchools
    "watch_jewelry_repair" -> pure IssuingCardSpendingLimit_Categories_WatchJewelryRepair
    "welding_repair" -> pure IssuingCardSpendingLimit_Categories_WeldingRepair
    "wholesale_clubs" -> pure IssuingCardSpendingLimit_Categories_WholesaleClubs
    "wig_and_toupee_stores" -> pure IssuingCardSpendingLimit_Categories_WigAndToupeeStores
    "wires_money_orders" -> pure IssuingCardSpendingLimit_Categories_WiresMoneyOrders
    "womens_accessory_and_specialty_shops" -> pure IssuingCardSpendingLimit_Categories_WomensAccessoryAndSpecialtyShops
    "womens_ready_to_wear_stores" -> pure IssuingCardSpendingLimit_Categories_WomensReadyToWearStores
    "wrecking_and_salvage_yards" -> pure IssuingCardSpendingLimit_Categories_WreckingAndSalvageYards
    str -> fail (show str <> " is not a known valid option for IssuingCardSpendingLimit_Categories")

data IssuingCardSpendingLimit_Interval
  = IssuingCardSpendingLimit_Interval_AllTime
  | IssuingCardSpendingLimit_Interval_Daily
  | IssuingCardSpendingLimit_Interval_Monthly
  | IssuingCardSpendingLimit_Interval_PerAuthorization
  | IssuingCardSpendingLimit_Interval_Weekly
  | IssuingCardSpendingLimit_Interval_Yearly
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON IssuingCardSpendingLimit_Interval where
  toJSON e = Text $ case e of
    IssuingCardSpendingLimit_Interval_AllTime -> "all_time"
    IssuingCardSpendingLimit_Interval_Daily -> "daily"
    IssuingCardSpendingLimit_Interval_Monthly -> "monthly"
    IssuingCardSpendingLimit_Interval_PerAuthorization -> "per_authorization"
    IssuingCardSpendingLimit_Interval_Weekly -> "weekly"
    IssuingCardSpendingLimit_Interval_Yearly -> "yearly"

instance FromJSON IssuingCardSpendingLimit_Interval where
  parseJSON = withText "IssuingCardSpendingLimit_Interval" $ \case
    "all_time" -> pure IssuingCardSpendingLimit_Interval_AllTime
    "daily" -> pure IssuingCardSpendingLimit_Interval_Daily
    "monthly" -> pure IssuingCardSpendingLimit_Interval_Monthly
    "per_authorization" -> pure IssuingCardSpendingLimit_Interval_PerAuthorization
    "weekly" -> pure IssuingCardSpendingLimit_Interval_Weekly
    "yearly" -> pure IssuingCardSpendingLimit_Interval_Yearly
    str -> fail (show str <> " is not a known valid option for IssuingCardSpendingLimit_Interval")

data IssuingCardholderAuthorizationControls_AllowedCategories
  = IssuingCardholderAuthorizationControls_AllowedCategories_AcRefrigerationRepair
  | IssuingCardholderAuthorizationControls_AllowedCategories_AccountingBookkeepingServices
  | IssuingCardholderAuthorizationControls_AllowedCategories_AdvertisingServices
  | IssuingCardholderAuthorizationControls_AllowedCategories_AgriculturalCooperative
  | IssuingCardholderAuthorizationControls_AllowedCategories_AirlinesAirCarriers
  | IssuingCardholderAuthorizationControls_AllowedCategories_AirportsFlyingFields
  | IssuingCardholderAuthorizationControls_AllowedCategories_AmbulanceServices
  | IssuingCardholderAuthorizationControls_AllowedCategories_AmusementParksCarnivals
  | IssuingCardholderAuthorizationControls_AllowedCategories_AntiqueReproductions
  | IssuingCardholderAuthorizationControls_AllowedCategories_AntiqueShops
  | IssuingCardholderAuthorizationControls_AllowedCategories_Aquariums
  | IssuingCardholderAuthorizationControls_AllowedCategories_ArchitecturalSurveyingServices
  | IssuingCardholderAuthorizationControls_AllowedCategories_ArtDealersAndGalleries
  | IssuingCardholderAuthorizationControls_AllowedCategories_ArtistsSupplyAndCraftShops
  | IssuingCardholderAuthorizationControls_AllowedCategories_AutoAndHomeSupplyStores
  | IssuingCardholderAuthorizationControls_AllowedCategories_AutoBodyRepairShops
  | IssuingCardholderAuthorizationControls_AllowedCategories_AutoPaintShops
  | IssuingCardholderAuthorizationControls_AllowedCategories_AutoServiceShops
  | IssuingCardholderAuthorizationControls_AllowedCategories_AutomatedCashDisburse
  | IssuingCardholderAuthorizationControls_AllowedCategories_AutomatedFuelDispensers
  | IssuingCardholderAuthorizationControls_AllowedCategories_AutomobileAssociations
  | IssuingCardholderAuthorizationControls_AllowedCategories_AutomotivePartsAndAccessoriesStores
  | IssuingCardholderAuthorizationControls_AllowedCategories_AutomotiveTireStores
  | IssuingCardholderAuthorizationControls_AllowedCategories_BailAndBondPayments
  | IssuingCardholderAuthorizationControls_AllowedCategories_Bakeries
  | IssuingCardholderAuthorizationControls_AllowedCategories_BandsOrchestras
  | IssuingCardholderAuthorizationControls_AllowedCategories_BarberAndBeautyShops
  | IssuingCardholderAuthorizationControls_AllowedCategories_BettingCasinoGambling
  | IssuingCardholderAuthorizationControls_AllowedCategories_BicycleShops
  | IssuingCardholderAuthorizationControls_AllowedCategories_BilliardPoolEstablishments
  | IssuingCardholderAuthorizationControls_AllowedCategories_BoatDealers
  | IssuingCardholderAuthorizationControls_AllowedCategories_BoatRentalsAndLeases
  | IssuingCardholderAuthorizationControls_AllowedCategories_BookStores
  | IssuingCardholderAuthorizationControls_AllowedCategories_BooksPeriodicalsAndNewspapers
  | IssuingCardholderAuthorizationControls_AllowedCategories_BowlingAlleys
  | IssuingCardholderAuthorizationControls_AllowedCategories_BusLines
  | IssuingCardholderAuthorizationControls_AllowedCategories_BusinessSecretarialSchools
  | IssuingCardholderAuthorizationControls_AllowedCategories_BuyingShoppingServices
  | IssuingCardholderAuthorizationControls_AllowedCategories_CableSatelliteAndOtherPayTelevisionAndRadio
  | IssuingCardholderAuthorizationControls_AllowedCategories_CameraAndPhotographicSupplyStores
  | IssuingCardholderAuthorizationControls_AllowedCategories_CandyNutAndConfectioneryStores
  | IssuingCardholderAuthorizationControls_AllowedCategories_CarAndTruckDealersNewUsed
  | IssuingCardholderAuthorizationControls_AllowedCategories_CarAndTruckDealersUsedOnly
  | IssuingCardholderAuthorizationControls_AllowedCategories_CarRentalAgencies
  | IssuingCardholderAuthorizationControls_AllowedCategories_CarWashes
  | IssuingCardholderAuthorizationControls_AllowedCategories_CarpentryServices
  | IssuingCardholderAuthorizationControls_AllowedCategories_CarpetUpholsteryCleaning
  | IssuingCardholderAuthorizationControls_AllowedCategories_Caterers
  | IssuingCardholderAuthorizationControls_AllowedCategories_CharitableAndSocialServiceOrganizationsFundraising
  | IssuingCardholderAuthorizationControls_AllowedCategories_ChemicalsAndAlliedProducts
  | IssuingCardholderAuthorizationControls_AllowedCategories_ChidrensAndInfantsWearStores
  | IssuingCardholderAuthorizationControls_AllowedCategories_ChildCareServices
  | IssuingCardholderAuthorizationControls_AllowedCategories_ChiropodistsPodiatrists
  | IssuingCardholderAuthorizationControls_AllowedCategories_Chiropractors
  | IssuingCardholderAuthorizationControls_AllowedCategories_CigarStoresAndStands
  | IssuingCardholderAuthorizationControls_AllowedCategories_CivicSocialFraternalAssociations
  | IssuingCardholderAuthorizationControls_AllowedCategories_CleaningAndMaintenance
  | IssuingCardholderAuthorizationControls_AllowedCategories_ClothingRental
  | IssuingCardholderAuthorizationControls_AllowedCategories_CollegesUniversities
  | IssuingCardholderAuthorizationControls_AllowedCategories_CommercialEquipment
  | IssuingCardholderAuthorizationControls_AllowedCategories_CommercialFootwear
  | IssuingCardholderAuthorizationControls_AllowedCategories_CommercialPhotographyArtAndGraphics
  | IssuingCardholderAuthorizationControls_AllowedCategories_CommuterTransportAndFerries
  | IssuingCardholderAuthorizationControls_AllowedCategories_ComputerNetworkServices
  | IssuingCardholderAuthorizationControls_AllowedCategories_ComputerProgramming
  | IssuingCardholderAuthorizationControls_AllowedCategories_ComputerRepair
  | IssuingCardholderAuthorizationControls_AllowedCategories_ComputerSoftwareStores
  | IssuingCardholderAuthorizationControls_AllowedCategories_ComputersPeripheralsAndSoftware
  | IssuingCardholderAuthorizationControls_AllowedCategories_ConcreteWorkServices
  | IssuingCardholderAuthorizationControls_AllowedCategories_ConstructionMaterials
  | IssuingCardholderAuthorizationControls_AllowedCategories_ConsultingPublicRelations
  | IssuingCardholderAuthorizationControls_AllowedCategories_CorrespondenceSchools
  | IssuingCardholderAuthorizationControls_AllowedCategories_CosmeticStores
  | IssuingCardholderAuthorizationControls_AllowedCategories_CounselingServices
  | IssuingCardholderAuthorizationControls_AllowedCategories_CountryClubs
  | IssuingCardholderAuthorizationControls_AllowedCategories_CourierServices
  | IssuingCardholderAuthorizationControls_AllowedCategories_CourtCosts
  | IssuingCardholderAuthorizationControls_AllowedCategories_CreditReportingAgencies
  | IssuingCardholderAuthorizationControls_AllowedCategories_CruiseLines
  | IssuingCardholderAuthorizationControls_AllowedCategories_DairyProductsStores
  | IssuingCardholderAuthorizationControls_AllowedCategories_DanceHallStudiosSchools
  | IssuingCardholderAuthorizationControls_AllowedCategories_DatingEscortServices
  | IssuingCardholderAuthorizationControls_AllowedCategories_DentistsOrthodontists
  | IssuingCardholderAuthorizationControls_AllowedCategories_DepartmentStores
  | IssuingCardholderAuthorizationControls_AllowedCategories_DetectiveAgencies
  | IssuingCardholderAuthorizationControls_AllowedCategories_DigitalGoodsApplications
  | IssuingCardholderAuthorizationControls_AllowedCategories_DirectMarketingCatalogMerchant
  | IssuingCardholderAuthorizationControls_AllowedCategories_DirectMarketingCombinationCatalogAndRetailMerchant
  | IssuingCardholderAuthorizationControls_AllowedCategories_DirectMarketingInboundTelemarketing
  | IssuingCardholderAuthorizationControls_AllowedCategories_DirectMarketingInsuranceServices
  | IssuingCardholderAuthorizationControls_AllowedCategories_DirectMarketingOther
  | IssuingCardholderAuthorizationControls_AllowedCategories_DirectMarketingOutboundTelemarketing
  | IssuingCardholderAuthorizationControls_AllowedCategories_DirectMarketingSubscription
  | IssuingCardholderAuthorizationControls_AllowedCategories_DirectMarketingTravel
  | IssuingCardholderAuthorizationControls_AllowedCategories_DiscountStores
  | IssuingCardholderAuthorizationControls_AllowedCategories_Doctors
  | IssuingCardholderAuthorizationControls_AllowedCategories_DoorToDoorSales
  | IssuingCardholderAuthorizationControls_AllowedCategories_DraperyWindowCoveringAndUpholsteryStores
  | IssuingCardholderAuthorizationControls_AllowedCategories_DrinkingPlaces
  | IssuingCardholderAuthorizationControls_AllowedCategories_DrugStoresAndPharmacies
  | IssuingCardholderAuthorizationControls_AllowedCategories_DrugsDrugProprietariesAndDruggistSundries
  | IssuingCardholderAuthorizationControls_AllowedCategories_DryCleaners
  | IssuingCardholderAuthorizationControls_AllowedCategories_DurableGoods
  | IssuingCardholderAuthorizationControls_AllowedCategories_DutyFreeStores
  | IssuingCardholderAuthorizationControls_AllowedCategories_EatingPlacesRestaurants
  | IssuingCardholderAuthorizationControls_AllowedCategories_EducationalServices
  | IssuingCardholderAuthorizationControls_AllowedCategories_ElectricRazorStores
  | IssuingCardholderAuthorizationControls_AllowedCategories_ElectricalPartsAndEquipment
  | IssuingCardholderAuthorizationControls_AllowedCategories_ElectricalServices
  | IssuingCardholderAuthorizationControls_AllowedCategories_ElectronicsRepairShops
  | IssuingCardholderAuthorizationControls_AllowedCategories_ElectronicsStores
  | IssuingCardholderAuthorizationControls_AllowedCategories_ElementarySecondarySchools
  | IssuingCardholderAuthorizationControls_AllowedCategories_EmploymentTempAgencies
  | IssuingCardholderAuthorizationControls_AllowedCategories_EquipmentRental
  | IssuingCardholderAuthorizationControls_AllowedCategories_ExterminatingServices
  | IssuingCardholderAuthorizationControls_AllowedCategories_FamilyClothingStores
  | IssuingCardholderAuthorizationControls_AllowedCategories_FastFoodRestaurants
  | IssuingCardholderAuthorizationControls_AllowedCategories_FinancialInstitutions
  | IssuingCardholderAuthorizationControls_AllowedCategories_FinesGovernmentAdministrativeEntities
  | IssuingCardholderAuthorizationControls_AllowedCategories_FireplaceFireplaceScreensAndAccessoriesStores
  | IssuingCardholderAuthorizationControls_AllowedCategories_FloorCoveringStores
  | IssuingCardholderAuthorizationControls_AllowedCategories_Florists
  | IssuingCardholderAuthorizationControls_AllowedCategories_FloristsSuppliesNurseryStockAndFlowers
  | IssuingCardholderAuthorizationControls_AllowedCategories_FreezerAndLockerMeatProvisioners
  | IssuingCardholderAuthorizationControls_AllowedCategories_FuelDealersNonAutomotive
  | IssuingCardholderAuthorizationControls_AllowedCategories_FuneralServicesCrematories
  | IssuingCardholderAuthorizationControls_AllowedCategories_FurnitureHomeFurnishingsAndEquipmentStoresExceptAppliances
  | IssuingCardholderAuthorizationControls_AllowedCategories_FurnitureRepairRefinishing
  | IssuingCardholderAuthorizationControls_AllowedCategories_FurriersAndFurShops
  | IssuingCardholderAuthorizationControls_AllowedCategories_GeneralServices
  | IssuingCardholderAuthorizationControls_AllowedCategories_GiftCardNoveltyAndSouvenirShops
  | IssuingCardholderAuthorizationControls_AllowedCategories_GlassPaintAndWallpaperStores
  | IssuingCardholderAuthorizationControls_AllowedCategories_GlasswareCrystalStores
  | IssuingCardholderAuthorizationControls_AllowedCategories_GolfCoursesPublic
  | IssuingCardholderAuthorizationControls_AllowedCategories_GovernmentServices
  | IssuingCardholderAuthorizationControls_AllowedCategories_GroceryStoresSupermarkets
  | IssuingCardholderAuthorizationControls_AllowedCategories_HardwareEquipmentAndSupplies
  | IssuingCardholderAuthorizationControls_AllowedCategories_HardwareStores
  | IssuingCardholderAuthorizationControls_AllowedCategories_HealthAndBeautySpas
  | IssuingCardholderAuthorizationControls_AllowedCategories_HearingAidsSalesAndSupplies
  | IssuingCardholderAuthorizationControls_AllowedCategories_HeatingPlumbingAC
  | IssuingCardholderAuthorizationControls_AllowedCategories_HobbyToyAndGameShops
  | IssuingCardholderAuthorizationControls_AllowedCategories_HomeSupplyWarehouseStores
  | IssuingCardholderAuthorizationControls_AllowedCategories_Hospitals
  | IssuingCardholderAuthorizationControls_AllowedCategories_HotelsMotelsAndResorts
  | IssuingCardholderAuthorizationControls_AllowedCategories_HouseholdApplianceStores
  | IssuingCardholderAuthorizationControls_AllowedCategories_IndustrialSupplies
  | IssuingCardholderAuthorizationControls_AllowedCategories_InformationRetrievalServices
  | IssuingCardholderAuthorizationControls_AllowedCategories_InsuranceDefault
  | IssuingCardholderAuthorizationControls_AllowedCategories_InsuranceUnderwritingPremiums
  | IssuingCardholderAuthorizationControls_AllowedCategories_IntraCompanyPurchases
  | IssuingCardholderAuthorizationControls_AllowedCategories_JewelryStoresWatchesClocksAndSilverwareStores
  | IssuingCardholderAuthorizationControls_AllowedCategories_LandscapingServices
  | IssuingCardholderAuthorizationControls_AllowedCategories_Laundries
  | IssuingCardholderAuthorizationControls_AllowedCategories_LaundryCleaningServices
  | IssuingCardholderAuthorizationControls_AllowedCategories_LegalServicesAttorneys
  | IssuingCardholderAuthorizationControls_AllowedCategories_LuggageAndLeatherGoodsStores
  | IssuingCardholderAuthorizationControls_AllowedCategories_LumberBuildingMaterialsStores
  | IssuingCardholderAuthorizationControls_AllowedCategories_ManualCashDisburse
  | IssuingCardholderAuthorizationControls_AllowedCategories_MarinasServiceAndSupplies
  | IssuingCardholderAuthorizationControls_AllowedCategories_MasonryStoneworkAndPlaster
  | IssuingCardholderAuthorizationControls_AllowedCategories_MassageParlors
  | IssuingCardholderAuthorizationControls_AllowedCategories_MedicalAndDentalLabs
  | IssuingCardholderAuthorizationControls_AllowedCategories_MedicalDentalOphthalmicAndHospitalEquipmentAndSupplies
  | IssuingCardholderAuthorizationControls_AllowedCategories_MedicalServices
  | IssuingCardholderAuthorizationControls_AllowedCategories_MembershipOrganizations
  | IssuingCardholderAuthorizationControls_AllowedCategories_MensAndBoysClothingAndAccessoriesStores
  | IssuingCardholderAuthorizationControls_AllowedCategories_MensWomensClothingStores
  | IssuingCardholderAuthorizationControls_AllowedCategories_MetalServiceCenters
  | IssuingCardholderAuthorizationControls_AllowedCategories_Miscellaneous
  | IssuingCardholderAuthorizationControls_AllowedCategories_MiscellaneousApparelAndAccessoryShops
  | IssuingCardholderAuthorizationControls_AllowedCategories_MiscellaneousAutoDealers
  | IssuingCardholderAuthorizationControls_AllowedCategories_MiscellaneousBusinessServices
  | IssuingCardholderAuthorizationControls_AllowedCategories_MiscellaneousFoodStores
  | IssuingCardholderAuthorizationControls_AllowedCategories_MiscellaneousGeneralMerchandise
  | IssuingCardholderAuthorizationControls_AllowedCategories_MiscellaneousGeneralServices
  | IssuingCardholderAuthorizationControls_AllowedCategories_MiscellaneousHomeFurnishingSpecialtyStores
  | IssuingCardholderAuthorizationControls_AllowedCategories_MiscellaneousPublishingAndPrinting
  | IssuingCardholderAuthorizationControls_AllowedCategories_MiscellaneousRecreationServices
  | IssuingCardholderAuthorizationControls_AllowedCategories_MiscellaneousRepairShops
  | IssuingCardholderAuthorizationControls_AllowedCategories_MiscellaneousSpecialtyRetail
  | IssuingCardholderAuthorizationControls_AllowedCategories_MobileHomeDealers
  | IssuingCardholderAuthorizationControls_AllowedCategories_MotionPictureTheaters
  | IssuingCardholderAuthorizationControls_AllowedCategories_MotorFreightCarriersAndTrucking
  | IssuingCardholderAuthorizationControls_AllowedCategories_MotorHomesDealers
  | IssuingCardholderAuthorizationControls_AllowedCategories_MotorVehicleSuppliesAndNewParts
  | IssuingCardholderAuthorizationControls_AllowedCategories_MotorcycleShopsAndDealers
  | IssuingCardholderAuthorizationControls_AllowedCategories_MotorcycleShopsDealers
  | IssuingCardholderAuthorizationControls_AllowedCategories_MusicStoresMusicalInstrumentsPianosAndSheetMusic
  | IssuingCardholderAuthorizationControls_AllowedCategories_NewsDealersAndNewsstands
  | IssuingCardholderAuthorizationControls_AllowedCategories_NonFiMoneyOrders
  | IssuingCardholderAuthorizationControls_AllowedCategories_NonFiStoredValueCardPurchaseLoad
  | IssuingCardholderAuthorizationControls_AllowedCategories_NondurableGoods
  | IssuingCardholderAuthorizationControls_AllowedCategories_NurseriesLawnAndGardenSupplyStores
  | IssuingCardholderAuthorizationControls_AllowedCategories_NursingPersonalCare
  | IssuingCardholderAuthorizationControls_AllowedCategories_OfficeAndCommercialFurniture
  | IssuingCardholderAuthorizationControls_AllowedCategories_OpticiansEyeglasses
  | IssuingCardholderAuthorizationControls_AllowedCategories_OptometristsOphthalmologist
  | IssuingCardholderAuthorizationControls_AllowedCategories_OrthopedicGoodsProstheticDevices
  | IssuingCardholderAuthorizationControls_AllowedCategories_Osteopaths
  | IssuingCardholderAuthorizationControls_AllowedCategories_PackageStoresBeerWineAndLiquor
  | IssuingCardholderAuthorizationControls_AllowedCategories_PaintsVarnishesAndSupplies
  | IssuingCardholderAuthorizationControls_AllowedCategories_ParkingLotsGarages
  | IssuingCardholderAuthorizationControls_AllowedCategories_PassengerRailways
  | IssuingCardholderAuthorizationControls_AllowedCategories_PawnShops
  | IssuingCardholderAuthorizationControls_AllowedCategories_PetShopsPetFoodAndSupplies
  | IssuingCardholderAuthorizationControls_AllowedCategories_PetroleumAndPetroleumProducts
  | IssuingCardholderAuthorizationControls_AllowedCategories_PhotoDeveloping
  | IssuingCardholderAuthorizationControls_AllowedCategories_PhotographicPhotocopyMicrofilmEquipmentAndSupplies
  | IssuingCardholderAuthorizationControls_AllowedCategories_PhotographicStudios
  | IssuingCardholderAuthorizationControls_AllowedCategories_PictureVideoProduction
  | IssuingCardholderAuthorizationControls_AllowedCategories_PieceGoodsNotionsAndOtherDryGoods
  | IssuingCardholderAuthorizationControls_AllowedCategories_PlumbingHeatingEquipmentAndSupplies
  | IssuingCardholderAuthorizationControls_AllowedCategories_PoliticalOrganizations
  | IssuingCardholderAuthorizationControls_AllowedCategories_PostalServicesGovernmentOnly
  | IssuingCardholderAuthorizationControls_AllowedCategories_PreciousStonesAndMetalsWatchesAndJewelry
  | IssuingCardholderAuthorizationControls_AllowedCategories_ProfessionalServices
  | IssuingCardholderAuthorizationControls_AllowedCategories_PublicWarehousingAndStorage
  | IssuingCardholderAuthorizationControls_AllowedCategories_QuickCopyReproAndBlueprint
  | IssuingCardholderAuthorizationControls_AllowedCategories_Railroads
  | IssuingCardholderAuthorizationControls_AllowedCategories_RealEstateAgentsAndManagersRentals
  | IssuingCardholderAuthorizationControls_AllowedCategories_RecordStores
  | IssuingCardholderAuthorizationControls_AllowedCategories_RecreationalVehicleRentals
  | IssuingCardholderAuthorizationControls_AllowedCategories_ReligiousGoodsStores
  | IssuingCardholderAuthorizationControls_AllowedCategories_ReligiousOrganizations
  | IssuingCardholderAuthorizationControls_AllowedCategories_RoofingSidingSheetMetal
  | IssuingCardholderAuthorizationControls_AllowedCategories_SecretarialSupportServices
  | IssuingCardholderAuthorizationControls_AllowedCategories_SecurityBrokersDealers
  | IssuingCardholderAuthorizationControls_AllowedCategories_ServiceStations
  | IssuingCardholderAuthorizationControls_AllowedCategories_SewingNeedleworkFabricAndPieceGoodsStores
  | IssuingCardholderAuthorizationControls_AllowedCategories_ShoeRepairHatCleaning
  | IssuingCardholderAuthorizationControls_AllowedCategories_ShoeStores
  | IssuingCardholderAuthorizationControls_AllowedCategories_SmallApplianceRepair
  | IssuingCardholderAuthorizationControls_AllowedCategories_SnowmobileDealers
  | IssuingCardholderAuthorizationControls_AllowedCategories_SpecialTradeServices
  | IssuingCardholderAuthorizationControls_AllowedCategories_SpecialtyCleaning
  | IssuingCardholderAuthorizationControls_AllowedCategories_SportingGoodsStores
  | IssuingCardholderAuthorizationControls_AllowedCategories_SportingRecreationCamps
  | IssuingCardholderAuthorizationControls_AllowedCategories_SportsAndRidingApparelStores
  | IssuingCardholderAuthorizationControls_AllowedCategories_SportsClubsFields
  | IssuingCardholderAuthorizationControls_AllowedCategories_StampAndCoinStores
  | IssuingCardholderAuthorizationControls_AllowedCategories_StationaryOfficeSuppliesPrintingAndWritingPaper
  | IssuingCardholderAuthorizationControls_AllowedCategories_StationeryStoresOfficeAndSchoolSupplyStores
  | IssuingCardholderAuthorizationControls_AllowedCategories_SwimmingPoolsSales
  | IssuingCardholderAuthorizationControls_AllowedCategories_TUiTravelGermany
  | IssuingCardholderAuthorizationControls_AllowedCategories_TailorsAlterations
  | IssuingCardholderAuthorizationControls_AllowedCategories_TaxPaymentsGovernmentAgencies
  | IssuingCardholderAuthorizationControls_AllowedCategories_TaxPreparationServices
  | IssuingCardholderAuthorizationControls_AllowedCategories_TaxicabsLimousines
  | IssuingCardholderAuthorizationControls_AllowedCategories_TelecommunicationEquipmentAndTelephoneSales
  | IssuingCardholderAuthorizationControls_AllowedCategories_TelecommunicationServices
  | IssuingCardholderAuthorizationControls_AllowedCategories_TelegraphServices
  | IssuingCardholderAuthorizationControls_AllowedCategories_TentAndAwningShops
  | IssuingCardholderAuthorizationControls_AllowedCategories_TestingLaboratories
  | IssuingCardholderAuthorizationControls_AllowedCategories_TheatricalTicketAgencies
  | IssuingCardholderAuthorizationControls_AllowedCategories_Timeshares
  | IssuingCardholderAuthorizationControls_AllowedCategories_TireRetreadingAndRepair
  | IssuingCardholderAuthorizationControls_AllowedCategories_TollsBridgeFees
  | IssuingCardholderAuthorizationControls_AllowedCategories_TouristAttractionsAndExhibits
  | IssuingCardholderAuthorizationControls_AllowedCategories_TowingServices
  | IssuingCardholderAuthorizationControls_AllowedCategories_TrailerParksCampgrounds
  | IssuingCardholderAuthorizationControls_AllowedCategories_TransportationServices
  | IssuingCardholderAuthorizationControls_AllowedCategories_TravelAgenciesTourOperators
  | IssuingCardholderAuthorizationControls_AllowedCategories_TruckStopIteration
  | IssuingCardholderAuthorizationControls_AllowedCategories_TruckUtilityTrailerRentals
  | IssuingCardholderAuthorizationControls_AllowedCategories_TypesettingPlateMakingAndRelatedServices
  | IssuingCardholderAuthorizationControls_AllowedCategories_TypewriterStores
  | IssuingCardholderAuthorizationControls_AllowedCategories_USFederalGovernmentAgenciesOrDepartments
  | IssuingCardholderAuthorizationControls_AllowedCategories_UniformsCommercialClothing
  | IssuingCardholderAuthorizationControls_AllowedCategories_UsedMerchandiseAndSecondhandStores
  | IssuingCardholderAuthorizationControls_AllowedCategories_Utilities
  | IssuingCardholderAuthorizationControls_AllowedCategories_VarietyStores
  | IssuingCardholderAuthorizationControls_AllowedCategories_VeterinaryServices
  | IssuingCardholderAuthorizationControls_AllowedCategories_VideoAmusementGameSupplies
  | IssuingCardholderAuthorizationControls_AllowedCategories_VideoGameArcades
  | IssuingCardholderAuthorizationControls_AllowedCategories_VideoTapeRentalStores
  | IssuingCardholderAuthorizationControls_AllowedCategories_VocationalTradeSchools
  | IssuingCardholderAuthorizationControls_AllowedCategories_WatchJewelryRepair
  | IssuingCardholderAuthorizationControls_AllowedCategories_WeldingRepair
  | IssuingCardholderAuthorizationControls_AllowedCategories_WholesaleClubs
  | IssuingCardholderAuthorizationControls_AllowedCategories_WigAndToupeeStores
  | IssuingCardholderAuthorizationControls_AllowedCategories_WiresMoneyOrders
  | IssuingCardholderAuthorizationControls_AllowedCategories_WomensAccessoryAndSpecialtyShops
  | IssuingCardholderAuthorizationControls_AllowedCategories_WomensReadyToWearStores
  | IssuingCardholderAuthorizationControls_AllowedCategories_WreckingAndSalvageYards
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON IssuingCardholderAuthorizationControls_AllowedCategories where
  toJSON e = Text $ case e of
    IssuingCardholderAuthorizationControls_AllowedCategories_AcRefrigerationRepair -> "ac_refrigeration_repair"
    IssuingCardholderAuthorizationControls_AllowedCategories_AccountingBookkeepingServices -> "accounting_bookkeeping_services"
    IssuingCardholderAuthorizationControls_AllowedCategories_AdvertisingServices -> "advertising_services"
    IssuingCardholderAuthorizationControls_AllowedCategories_AgriculturalCooperative -> "agricultural_cooperative"
    IssuingCardholderAuthorizationControls_AllowedCategories_AirlinesAirCarriers -> "airlines_air_carriers"
    IssuingCardholderAuthorizationControls_AllowedCategories_AirportsFlyingFields -> "airports_flying_fields"
    IssuingCardholderAuthorizationControls_AllowedCategories_AmbulanceServices -> "ambulance_services"
    IssuingCardholderAuthorizationControls_AllowedCategories_AmusementParksCarnivals -> "amusement_parks_carnivals"
    IssuingCardholderAuthorizationControls_AllowedCategories_AntiqueReproductions -> "antique_reproductions"
    IssuingCardholderAuthorizationControls_AllowedCategories_AntiqueShops -> "antique_shops"
    IssuingCardholderAuthorizationControls_AllowedCategories_Aquariums -> "aquariums"
    IssuingCardholderAuthorizationControls_AllowedCategories_ArchitecturalSurveyingServices -> "architectural_surveying_services"
    IssuingCardholderAuthorizationControls_AllowedCategories_ArtDealersAndGalleries -> "art_dealers_and_galleries"
    IssuingCardholderAuthorizationControls_AllowedCategories_ArtistsSupplyAndCraftShops -> "artists_supply_and_craft_shops"
    IssuingCardholderAuthorizationControls_AllowedCategories_AutoAndHomeSupplyStores -> "auto_and_home_supply_stores"
    IssuingCardholderAuthorizationControls_AllowedCategories_AutoBodyRepairShops -> "auto_body_repair_shops"
    IssuingCardholderAuthorizationControls_AllowedCategories_AutoPaintShops -> "auto_paint_shops"
    IssuingCardholderAuthorizationControls_AllowedCategories_AutoServiceShops -> "auto_service_shops"
    IssuingCardholderAuthorizationControls_AllowedCategories_AutomatedCashDisburse -> "automated_cash_disburse"
    IssuingCardholderAuthorizationControls_AllowedCategories_AutomatedFuelDispensers -> "automated_fuel_dispensers"
    IssuingCardholderAuthorizationControls_AllowedCategories_AutomobileAssociations -> "automobile_associations"
    IssuingCardholderAuthorizationControls_AllowedCategories_AutomotivePartsAndAccessoriesStores -> "automotive_parts_and_accessories_stores"
    IssuingCardholderAuthorizationControls_AllowedCategories_AutomotiveTireStores -> "automotive_tire_stores"
    IssuingCardholderAuthorizationControls_AllowedCategories_BailAndBondPayments -> "bail_and_bond_payments"
    IssuingCardholderAuthorizationControls_AllowedCategories_Bakeries -> "bakeries"
    IssuingCardholderAuthorizationControls_AllowedCategories_BandsOrchestras -> "bands_orchestras"
    IssuingCardholderAuthorizationControls_AllowedCategories_BarberAndBeautyShops -> "barber_and_beauty_shops"
    IssuingCardholderAuthorizationControls_AllowedCategories_BettingCasinoGambling -> "betting_casino_gambling"
    IssuingCardholderAuthorizationControls_AllowedCategories_BicycleShops -> "bicycle_shops"
    IssuingCardholderAuthorizationControls_AllowedCategories_BilliardPoolEstablishments -> "billiard_pool_establishments"
    IssuingCardholderAuthorizationControls_AllowedCategories_BoatDealers -> "boat_dealers"
    IssuingCardholderAuthorizationControls_AllowedCategories_BoatRentalsAndLeases -> "boat_rentals_and_leases"
    IssuingCardholderAuthorizationControls_AllowedCategories_BookStores -> "book_stores"
    IssuingCardholderAuthorizationControls_AllowedCategories_BooksPeriodicalsAndNewspapers -> "books_periodicals_and_newspapers"
    IssuingCardholderAuthorizationControls_AllowedCategories_BowlingAlleys -> "bowling_alleys"
    IssuingCardholderAuthorizationControls_AllowedCategories_BusLines -> "bus_lines"
    IssuingCardholderAuthorizationControls_AllowedCategories_BusinessSecretarialSchools -> "business_secretarial_schools"
    IssuingCardholderAuthorizationControls_AllowedCategories_BuyingShoppingServices -> "buying_shopping_services"
    IssuingCardholderAuthorizationControls_AllowedCategories_CableSatelliteAndOtherPayTelevisionAndRadio -> "cable_satellite_and_other_pay_television_and_radio"
    IssuingCardholderAuthorizationControls_AllowedCategories_CameraAndPhotographicSupplyStores -> "camera_and_photographic_supply_stores"
    IssuingCardholderAuthorizationControls_AllowedCategories_CandyNutAndConfectioneryStores -> "candy_nut_and_confectionery_stores"
    IssuingCardholderAuthorizationControls_AllowedCategories_CarAndTruckDealersNewUsed -> "car_and_truck_dealers_new_used"
    IssuingCardholderAuthorizationControls_AllowedCategories_CarAndTruckDealersUsedOnly -> "car_and_truck_dealers_used_only"
    IssuingCardholderAuthorizationControls_AllowedCategories_CarRentalAgencies -> "car_rental_agencies"
    IssuingCardholderAuthorizationControls_AllowedCategories_CarWashes -> "car_washes"
    IssuingCardholderAuthorizationControls_AllowedCategories_CarpentryServices -> "carpentry_services"
    IssuingCardholderAuthorizationControls_AllowedCategories_CarpetUpholsteryCleaning -> "carpet_upholstery_cleaning"
    IssuingCardholderAuthorizationControls_AllowedCategories_Caterers -> "caterers"
    IssuingCardholderAuthorizationControls_AllowedCategories_CharitableAndSocialServiceOrganizationsFundraising -> "charitable_and_social_service_organizations_fundraising"
    IssuingCardholderAuthorizationControls_AllowedCategories_ChemicalsAndAlliedProducts -> "chemicals_and_allied_products"
    IssuingCardholderAuthorizationControls_AllowedCategories_ChidrensAndInfantsWearStores -> "chidrens_and_infants_wear_stores"
    IssuingCardholderAuthorizationControls_AllowedCategories_ChildCareServices -> "child_care_services"
    IssuingCardholderAuthorizationControls_AllowedCategories_ChiropodistsPodiatrists -> "chiropodists_podiatrists"
    IssuingCardholderAuthorizationControls_AllowedCategories_Chiropractors -> "chiropractors"
    IssuingCardholderAuthorizationControls_AllowedCategories_CigarStoresAndStands -> "cigar_stores_and_stands"
    IssuingCardholderAuthorizationControls_AllowedCategories_CivicSocialFraternalAssociations -> "civic_social_fraternal_associations"
    IssuingCardholderAuthorizationControls_AllowedCategories_CleaningAndMaintenance -> "cleaning_and_maintenance"
    IssuingCardholderAuthorizationControls_AllowedCategories_ClothingRental -> "clothing_rental"
    IssuingCardholderAuthorizationControls_AllowedCategories_CollegesUniversities -> "colleges_universities"
    IssuingCardholderAuthorizationControls_AllowedCategories_CommercialEquipment -> "commercial_equipment"
    IssuingCardholderAuthorizationControls_AllowedCategories_CommercialFootwear -> "commercial_footwear"
    IssuingCardholderAuthorizationControls_AllowedCategories_CommercialPhotographyArtAndGraphics -> "commercial_photography_art_and_graphics"
    IssuingCardholderAuthorizationControls_AllowedCategories_CommuterTransportAndFerries -> "commuter_transport_and_ferries"
    IssuingCardholderAuthorizationControls_AllowedCategories_ComputerNetworkServices -> "computer_network_services"
    IssuingCardholderAuthorizationControls_AllowedCategories_ComputerProgramming -> "computer_programming"
    IssuingCardholderAuthorizationControls_AllowedCategories_ComputerRepair -> "computer_repair"
    IssuingCardholderAuthorizationControls_AllowedCategories_ComputerSoftwareStores -> "computer_software_stores"
    IssuingCardholderAuthorizationControls_AllowedCategories_ComputersPeripheralsAndSoftware -> "computers_peripherals_and_software"
    IssuingCardholderAuthorizationControls_AllowedCategories_ConcreteWorkServices -> "concrete_work_services"
    IssuingCardholderAuthorizationControls_AllowedCategories_ConstructionMaterials -> "construction_materials"
    IssuingCardholderAuthorizationControls_AllowedCategories_ConsultingPublicRelations -> "consulting_public_relations"
    IssuingCardholderAuthorizationControls_AllowedCategories_CorrespondenceSchools -> "correspondence_schools"
    IssuingCardholderAuthorizationControls_AllowedCategories_CosmeticStores -> "cosmetic_stores"
    IssuingCardholderAuthorizationControls_AllowedCategories_CounselingServices -> "counseling_services"
    IssuingCardholderAuthorizationControls_AllowedCategories_CountryClubs -> "country_clubs"
    IssuingCardholderAuthorizationControls_AllowedCategories_CourierServices -> "courier_services"
    IssuingCardholderAuthorizationControls_AllowedCategories_CourtCosts -> "court_costs"
    IssuingCardholderAuthorizationControls_AllowedCategories_CreditReportingAgencies -> "credit_reporting_agencies"
    IssuingCardholderAuthorizationControls_AllowedCategories_CruiseLines -> "cruise_lines"
    IssuingCardholderAuthorizationControls_AllowedCategories_DairyProductsStores -> "dairy_products_stores"
    IssuingCardholderAuthorizationControls_AllowedCategories_DanceHallStudiosSchools -> "dance_hall_studios_schools"
    IssuingCardholderAuthorizationControls_AllowedCategories_DatingEscortServices -> "dating_escort_services"
    IssuingCardholderAuthorizationControls_AllowedCategories_DentistsOrthodontists -> "dentists_orthodontists"
    IssuingCardholderAuthorizationControls_AllowedCategories_DepartmentStores -> "department_stores"
    IssuingCardholderAuthorizationControls_AllowedCategories_DetectiveAgencies -> "detective_agencies"
    IssuingCardholderAuthorizationControls_AllowedCategories_DigitalGoodsApplications -> "digital_goods_applications"
    IssuingCardholderAuthorizationControls_AllowedCategories_DirectMarketingCatalogMerchant -> "direct_marketing_catalog_merchant"
    IssuingCardholderAuthorizationControls_AllowedCategories_DirectMarketingCombinationCatalogAndRetailMerchant -> "direct_marketing_combination_catalog_and_retail_merchant"
    IssuingCardholderAuthorizationControls_AllowedCategories_DirectMarketingInboundTelemarketing -> "direct_marketing_inbound_telemarketing"
    IssuingCardholderAuthorizationControls_AllowedCategories_DirectMarketingInsuranceServices -> "direct_marketing_insurance_services"
    IssuingCardholderAuthorizationControls_AllowedCategories_DirectMarketingOther -> "direct_marketing_other"
    IssuingCardholderAuthorizationControls_AllowedCategories_DirectMarketingOutboundTelemarketing -> "direct_marketing_outbound_telemarketing"
    IssuingCardholderAuthorizationControls_AllowedCategories_DirectMarketingSubscription -> "direct_marketing_subscription"
    IssuingCardholderAuthorizationControls_AllowedCategories_DirectMarketingTravel -> "direct_marketing_travel"
    IssuingCardholderAuthorizationControls_AllowedCategories_DiscountStores -> "discount_stores"
    IssuingCardholderAuthorizationControls_AllowedCategories_Doctors -> "doctors"
    IssuingCardholderAuthorizationControls_AllowedCategories_DoorToDoorSales -> "door_to_door_sales"
    IssuingCardholderAuthorizationControls_AllowedCategories_DraperyWindowCoveringAndUpholsteryStores -> "drapery_window_covering_and_upholstery_stores"
    IssuingCardholderAuthorizationControls_AllowedCategories_DrinkingPlaces -> "drinking_places"
    IssuingCardholderAuthorizationControls_AllowedCategories_DrugStoresAndPharmacies -> "drug_stores_and_pharmacies"
    IssuingCardholderAuthorizationControls_AllowedCategories_DrugsDrugProprietariesAndDruggistSundries -> "drugs_drug_proprietaries_and_druggist_sundries"
    IssuingCardholderAuthorizationControls_AllowedCategories_DryCleaners -> "dry_cleaners"
    IssuingCardholderAuthorizationControls_AllowedCategories_DurableGoods -> "durable_goods"
    IssuingCardholderAuthorizationControls_AllowedCategories_DutyFreeStores -> "duty_free_stores"
    IssuingCardholderAuthorizationControls_AllowedCategories_EatingPlacesRestaurants -> "eating_places_restaurants"
    IssuingCardholderAuthorizationControls_AllowedCategories_EducationalServices -> "educational_services"
    IssuingCardholderAuthorizationControls_AllowedCategories_ElectricRazorStores -> "electric_razor_stores"
    IssuingCardholderAuthorizationControls_AllowedCategories_ElectricalPartsAndEquipment -> "electrical_parts_and_equipment"
    IssuingCardholderAuthorizationControls_AllowedCategories_ElectricalServices -> "electrical_services"
    IssuingCardholderAuthorizationControls_AllowedCategories_ElectronicsRepairShops -> "electronics_repair_shops"
    IssuingCardholderAuthorizationControls_AllowedCategories_ElectronicsStores -> "electronics_stores"
    IssuingCardholderAuthorizationControls_AllowedCategories_ElementarySecondarySchools -> "elementary_secondary_schools"
    IssuingCardholderAuthorizationControls_AllowedCategories_EmploymentTempAgencies -> "employment_temp_agencies"
    IssuingCardholderAuthorizationControls_AllowedCategories_EquipmentRental -> "equipment_rental"
    IssuingCardholderAuthorizationControls_AllowedCategories_ExterminatingServices -> "exterminating_services"
    IssuingCardholderAuthorizationControls_AllowedCategories_FamilyClothingStores -> "family_clothing_stores"
    IssuingCardholderAuthorizationControls_AllowedCategories_FastFoodRestaurants -> "fast_food_restaurants"
    IssuingCardholderAuthorizationControls_AllowedCategories_FinancialInstitutions -> "financial_institutions"
    IssuingCardholderAuthorizationControls_AllowedCategories_FinesGovernmentAdministrativeEntities -> "fines_government_administrative_entities"
    IssuingCardholderAuthorizationControls_AllowedCategories_FireplaceFireplaceScreensAndAccessoriesStores -> "fireplace_fireplace_screens_and_accessories_stores"
    IssuingCardholderAuthorizationControls_AllowedCategories_FloorCoveringStores -> "floor_covering_stores"
    IssuingCardholderAuthorizationControls_AllowedCategories_Florists -> "florists"
    IssuingCardholderAuthorizationControls_AllowedCategories_FloristsSuppliesNurseryStockAndFlowers -> "florists_supplies_nursery_stock_and_flowers"
    IssuingCardholderAuthorizationControls_AllowedCategories_FreezerAndLockerMeatProvisioners -> "freezer_and_locker_meat_provisioners"
    IssuingCardholderAuthorizationControls_AllowedCategories_FuelDealersNonAutomotive -> "fuel_dealers_non_automotive"
    IssuingCardholderAuthorizationControls_AllowedCategories_FuneralServicesCrematories -> "funeral_services_crematories"
    IssuingCardholderAuthorizationControls_AllowedCategories_FurnitureHomeFurnishingsAndEquipmentStoresExceptAppliances -> "furniture_home_furnishings_and_equipment_stores_except_appliances"
    IssuingCardholderAuthorizationControls_AllowedCategories_FurnitureRepairRefinishing -> "furniture_repair_refinishing"
    IssuingCardholderAuthorizationControls_AllowedCategories_FurriersAndFurShops -> "furriers_and_fur_shops"
    IssuingCardholderAuthorizationControls_AllowedCategories_GeneralServices -> "general_services"
    IssuingCardholderAuthorizationControls_AllowedCategories_GiftCardNoveltyAndSouvenirShops -> "gift_card_novelty_and_souvenir_shops"
    IssuingCardholderAuthorizationControls_AllowedCategories_GlassPaintAndWallpaperStores -> "glass_paint_and_wallpaper_stores"
    IssuingCardholderAuthorizationControls_AllowedCategories_GlasswareCrystalStores -> "glassware_crystal_stores"
    IssuingCardholderAuthorizationControls_AllowedCategories_GolfCoursesPublic -> "golf_courses_public"
    IssuingCardholderAuthorizationControls_AllowedCategories_GovernmentServices -> "government_services"
    IssuingCardholderAuthorizationControls_AllowedCategories_GroceryStoresSupermarkets -> "grocery_stores_supermarkets"
    IssuingCardholderAuthorizationControls_AllowedCategories_HardwareEquipmentAndSupplies -> "hardware_equipment_and_supplies"
    IssuingCardholderAuthorizationControls_AllowedCategories_HardwareStores -> "hardware_stores"
    IssuingCardholderAuthorizationControls_AllowedCategories_HealthAndBeautySpas -> "health_and_beauty_spas"
    IssuingCardholderAuthorizationControls_AllowedCategories_HearingAidsSalesAndSupplies -> "hearing_aids_sales_and_supplies"
    IssuingCardholderAuthorizationControls_AllowedCategories_HeatingPlumbingAC -> "heating_plumbing_a_c"
    IssuingCardholderAuthorizationControls_AllowedCategories_HobbyToyAndGameShops -> "hobby_toy_and_game_shops"
    IssuingCardholderAuthorizationControls_AllowedCategories_HomeSupplyWarehouseStores -> "home_supply_warehouse_stores"
    IssuingCardholderAuthorizationControls_AllowedCategories_Hospitals -> "hospitals"
    IssuingCardholderAuthorizationControls_AllowedCategories_HotelsMotelsAndResorts -> "hotels_motels_and_resorts"
    IssuingCardholderAuthorizationControls_AllowedCategories_HouseholdApplianceStores -> "household_appliance_stores"
    IssuingCardholderAuthorizationControls_AllowedCategories_IndustrialSupplies -> "industrial_supplies"
    IssuingCardholderAuthorizationControls_AllowedCategories_InformationRetrievalServices -> "information_retrieval_services"
    IssuingCardholderAuthorizationControls_AllowedCategories_InsuranceDefault -> "insurance_default"
    IssuingCardholderAuthorizationControls_AllowedCategories_InsuranceUnderwritingPremiums -> "insurance_underwriting_premiums"
    IssuingCardholderAuthorizationControls_AllowedCategories_IntraCompanyPurchases -> "intra_company_purchases"
    IssuingCardholderAuthorizationControls_AllowedCategories_JewelryStoresWatchesClocksAndSilverwareStores -> "jewelry_stores_watches_clocks_and_silverware_stores"
    IssuingCardholderAuthorizationControls_AllowedCategories_LandscapingServices -> "landscaping_services"
    IssuingCardholderAuthorizationControls_AllowedCategories_Laundries -> "laundries"
    IssuingCardholderAuthorizationControls_AllowedCategories_LaundryCleaningServices -> "laundry_cleaning_services"
    IssuingCardholderAuthorizationControls_AllowedCategories_LegalServicesAttorneys -> "legal_services_attorneys"
    IssuingCardholderAuthorizationControls_AllowedCategories_LuggageAndLeatherGoodsStores -> "luggage_and_leather_goods_stores"
    IssuingCardholderAuthorizationControls_AllowedCategories_LumberBuildingMaterialsStores -> "lumber_building_materials_stores"
    IssuingCardholderAuthorizationControls_AllowedCategories_ManualCashDisburse -> "manual_cash_disburse"
    IssuingCardholderAuthorizationControls_AllowedCategories_MarinasServiceAndSupplies -> "marinas_service_and_supplies"
    IssuingCardholderAuthorizationControls_AllowedCategories_MasonryStoneworkAndPlaster -> "masonry_stonework_and_plaster"
    IssuingCardholderAuthorizationControls_AllowedCategories_MassageParlors -> "massage_parlors"
    IssuingCardholderAuthorizationControls_AllowedCategories_MedicalAndDentalLabs -> "medical_and_dental_labs"
    IssuingCardholderAuthorizationControls_AllowedCategories_MedicalDentalOphthalmicAndHospitalEquipmentAndSupplies -> "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
    IssuingCardholderAuthorizationControls_AllowedCategories_MedicalServices -> "medical_services"
    IssuingCardholderAuthorizationControls_AllowedCategories_MembershipOrganizations -> "membership_organizations"
    IssuingCardholderAuthorizationControls_AllowedCategories_MensAndBoysClothingAndAccessoriesStores -> "mens_and_boys_clothing_and_accessories_stores"
    IssuingCardholderAuthorizationControls_AllowedCategories_MensWomensClothingStores -> "mens_womens_clothing_stores"
    IssuingCardholderAuthorizationControls_AllowedCategories_MetalServiceCenters -> "metal_service_centers"
    IssuingCardholderAuthorizationControls_AllowedCategories_Miscellaneous -> "miscellaneous"
    IssuingCardholderAuthorizationControls_AllowedCategories_MiscellaneousApparelAndAccessoryShops -> "miscellaneous_apparel_and_accessory_shops"
    IssuingCardholderAuthorizationControls_AllowedCategories_MiscellaneousAutoDealers -> "miscellaneous_auto_dealers"
    IssuingCardholderAuthorizationControls_AllowedCategories_MiscellaneousBusinessServices -> "miscellaneous_business_services"
    IssuingCardholderAuthorizationControls_AllowedCategories_MiscellaneousFoodStores -> "miscellaneous_food_stores"
    IssuingCardholderAuthorizationControls_AllowedCategories_MiscellaneousGeneralMerchandise -> "miscellaneous_general_merchandise"
    IssuingCardholderAuthorizationControls_AllowedCategories_MiscellaneousGeneralServices -> "miscellaneous_general_services"
    IssuingCardholderAuthorizationControls_AllowedCategories_MiscellaneousHomeFurnishingSpecialtyStores -> "miscellaneous_home_furnishing_specialty_stores"
    IssuingCardholderAuthorizationControls_AllowedCategories_MiscellaneousPublishingAndPrinting -> "miscellaneous_publishing_and_printing"
    IssuingCardholderAuthorizationControls_AllowedCategories_MiscellaneousRecreationServices -> "miscellaneous_recreation_services"
    IssuingCardholderAuthorizationControls_AllowedCategories_MiscellaneousRepairShops -> "miscellaneous_repair_shops"
    IssuingCardholderAuthorizationControls_AllowedCategories_MiscellaneousSpecialtyRetail -> "miscellaneous_specialty_retail"
    IssuingCardholderAuthorizationControls_AllowedCategories_MobileHomeDealers -> "mobile_home_dealers"
    IssuingCardholderAuthorizationControls_AllowedCategories_MotionPictureTheaters -> "motion_picture_theaters"
    IssuingCardholderAuthorizationControls_AllowedCategories_MotorFreightCarriersAndTrucking -> "motor_freight_carriers_and_trucking"
    IssuingCardholderAuthorizationControls_AllowedCategories_MotorHomesDealers -> "motor_homes_dealers"
    IssuingCardholderAuthorizationControls_AllowedCategories_MotorVehicleSuppliesAndNewParts -> "motor_vehicle_supplies_and_new_parts"
    IssuingCardholderAuthorizationControls_AllowedCategories_MotorcycleShopsAndDealers -> "motorcycle_shops_and_dealers"
    IssuingCardholderAuthorizationControls_AllowedCategories_MotorcycleShopsDealers -> "motorcycle_shops_dealers"
    IssuingCardholderAuthorizationControls_AllowedCategories_MusicStoresMusicalInstrumentsPianosAndSheetMusic -> "music_stores_musical_instruments_pianos_and_sheet_music"
    IssuingCardholderAuthorizationControls_AllowedCategories_NewsDealersAndNewsstands -> "news_dealers_and_newsstands"
    IssuingCardholderAuthorizationControls_AllowedCategories_NonFiMoneyOrders -> "non_fi_money_orders"
    IssuingCardholderAuthorizationControls_AllowedCategories_NonFiStoredValueCardPurchaseLoad -> "non_fi_stored_value_card_purchase_load"
    IssuingCardholderAuthorizationControls_AllowedCategories_NondurableGoods -> "nondurable_goods"
    IssuingCardholderAuthorizationControls_AllowedCategories_NurseriesLawnAndGardenSupplyStores -> "nurseries_lawn_and_garden_supply_stores"
    IssuingCardholderAuthorizationControls_AllowedCategories_NursingPersonalCare -> "nursing_personal_care"
    IssuingCardholderAuthorizationControls_AllowedCategories_OfficeAndCommercialFurniture -> "office_and_commercial_furniture"
    IssuingCardholderAuthorizationControls_AllowedCategories_OpticiansEyeglasses -> "opticians_eyeglasses"
    IssuingCardholderAuthorizationControls_AllowedCategories_OptometristsOphthalmologist -> "optometrists_ophthalmologist"
    IssuingCardholderAuthorizationControls_AllowedCategories_OrthopedicGoodsProstheticDevices -> "orthopedic_goods_prosthetic_devices"
    IssuingCardholderAuthorizationControls_AllowedCategories_Osteopaths -> "osteopaths"
    IssuingCardholderAuthorizationControls_AllowedCategories_PackageStoresBeerWineAndLiquor -> "package_stores_beer_wine_and_liquor"
    IssuingCardholderAuthorizationControls_AllowedCategories_PaintsVarnishesAndSupplies -> "paints_varnishes_and_supplies"
    IssuingCardholderAuthorizationControls_AllowedCategories_ParkingLotsGarages -> "parking_lots_garages"
    IssuingCardholderAuthorizationControls_AllowedCategories_PassengerRailways -> "passenger_railways"
    IssuingCardholderAuthorizationControls_AllowedCategories_PawnShops -> "pawn_shops"
    IssuingCardholderAuthorizationControls_AllowedCategories_PetShopsPetFoodAndSupplies -> "pet_shops_pet_food_and_supplies"
    IssuingCardholderAuthorizationControls_AllowedCategories_PetroleumAndPetroleumProducts -> "petroleum_and_petroleum_products"
    IssuingCardholderAuthorizationControls_AllowedCategories_PhotoDeveloping -> "photo_developing"
    IssuingCardholderAuthorizationControls_AllowedCategories_PhotographicPhotocopyMicrofilmEquipmentAndSupplies -> "photographic_photocopy_microfilm_equipment_and_supplies"
    IssuingCardholderAuthorizationControls_AllowedCategories_PhotographicStudios -> "photographic_studios"
    IssuingCardholderAuthorizationControls_AllowedCategories_PictureVideoProduction -> "picture_video_production"
    IssuingCardholderAuthorizationControls_AllowedCategories_PieceGoodsNotionsAndOtherDryGoods -> "piece_goods_notions_and_other_dry_goods"
    IssuingCardholderAuthorizationControls_AllowedCategories_PlumbingHeatingEquipmentAndSupplies -> "plumbing_heating_equipment_and_supplies"
    IssuingCardholderAuthorizationControls_AllowedCategories_PoliticalOrganizations -> "political_organizations"
    IssuingCardholderAuthorizationControls_AllowedCategories_PostalServicesGovernmentOnly -> "postal_services_government_only"
    IssuingCardholderAuthorizationControls_AllowedCategories_PreciousStonesAndMetalsWatchesAndJewelry -> "precious_stones_and_metals_watches_and_jewelry"
    IssuingCardholderAuthorizationControls_AllowedCategories_ProfessionalServices -> "professional_services"
    IssuingCardholderAuthorizationControls_AllowedCategories_PublicWarehousingAndStorage -> "public_warehousing_and_storage"
    IssuingCardholderAuthorizationControls_AllowedCategories_QuickCopyReproAndBlueprint -> "quick_copy_repro_and_blueprint"
    IssuingCardholderAuthorizationControls_AllowedCategories_Railroads -> "railroads"
    IssuingCardholderAuthorizationControls_AllowedCategories_RealEstateAgentsAndManagersRentals -> "real_estate_agents_and_managers_rentals"
    IssuingCardholderAuthorizationControls_AllowedCategories_RecordStores -> "record_stores"
    IssuingCardholderAuthorizationControls_AllowedCategories_RecreationalVehicleRentals -> "recreational_vehicle_rentals"
    IssuingCardholderAuthorizationControls_AllowedCategories_ReligiousGoodsStores -> "religious_goods_stores"
    IssuingCardholderAuthorizationControls_AllowedCategories_ReligiousOrganizations -> "religious_organizations"
    IssuingCardholderAuthorizationControls_AllowedCategories_RoofingSidingSheetMetal -> "roofing_siding_sheet_metal"
    IssuingCardholderAuthorizationControls_AllowedCategories_SecretarialSupportServices -> "secretarial_support_services"
    IssuingCardholderAuthorizationControls_AllowedCategories_SecurityBrokersDealers -> "security_brokers_dealers"
    IssuingCardholderAuthorizationControls_AllowedCategories_ServiceStations -> "service_stations"
    IssuingCardholderAuthorizationControls_AllowedCategories_SewingNeedleworkFabricAndPieceGoodsStores -> "sewing_needlework_fabric_and_piece_goods_stores"
    IssuingCardholderAuthorizationControls_AllowedCategories_ShoeRepairHatCleaning -> "shoe_repair_hat_cleaning"
    IssuingCardholderAuthorizationControls_AllowedCategories_ShoeStores -> "shoe_stores"
    IssuingCardholderAuthorizationControls_AllowedCategories_SmallApplianceRepair -> "small_appliance_repair"
    IssuingCardholderAuthorizationControls_AllowedCategories_SnowmobileDealers -> "snowmobile_dealers"
    IssuingCardholderAuthorizationControls_AllowedCategories_SpecialTradeServices -> "special_trade_services"
    IssuingCardholderAuthorizationControls_AllowedCategories_SpecialtyCleaning -> "specialty_cleaning"
    IssuingCardholderAuthorizationControls_AllowedCategories_SportingGoodsStores -> "sporting_goods_stores"
    IssuingCardholderAuthorizationControls_AllowedCategories_SportingRecreationCamps -> "sporting_recreation_camps"
    IssuingCardholderAuthorizationControls_AllowedCategories_SportsAndRidingApparelStores -> "sports_and_riding_apparel_stores"
    IssuingCardholderAuthorizationControls_AllowedCategories_SportsClubsFields -> "sports_clubs_fields"
    IssuingCardholderAuthorizationControls_AllowedCategories_StampAndCoinStores -> "stamp_and_coin_stores"
    IssuingCardholderAuthorizationControls_AllowedCategories_StationaryOfficeSuppliesPrintingAndWritingPaper -> "stationary_office_supplies_printing_and_writing_paper"
    IssuingCardholderAuthorizationControls_AllowedCategories_StationeryStoresOfficeAndSchoolSupplyStores -> "stationery_stores_office_and_school_supply_stores"
    IssuingCardholderAuthorizationControls_AllowedCategories_SwimmingPoolsSales -> "swimming_pools_sales"
    IssuingCardholderAuthorizationControls_AllowedCategories_TUiTravelGermany -> "t_ui_travel_germany"
    IssuingCardholderAuthorizationControls_AllowedCategories_TailorsAlterations -> "tailors_alterations"
    IssuingCardholderAuthorizationControls_AllowedCategories_TaxPaymentsGovernmentAgencies -> "tax_payments_government_agencies"
    IssuingCardholderAuthorizationControls_AllowedCategories_TaxPreparationServices -> "tax_preparation_services"
    IssuingCardholderAuthorizationControls_AllowedCategories_TaxicabsLimousines -> "taxicabs_limousines"
    IssuingCardholderAuthorizationControls_AllowedCategories_TelecommunicationEquipmentAndTelephoneSales -> "telecommunication_equipment_and_telephone_sales"
    IssuingCardholderAuthorizationControls_AllowedCategories_TelecommunicationServices -> "telecommunication_services"
    IssuingCardholderAuthorizationControls_AllowedCategories_TelegraphServices -> "telegraph_services"
    IssuingCardholderAuthorizationControls_AllowedCategories_TentAndAwningShops -> "tent_and_awning_shops"
    IssuingCardholderAuthorizationControls_AllowedCategories_TestingLaboratories -> "testing_laboratories"
    IssuingCardholderAuthorizationControls_AllowedCategories_TheatricalTicketAgencies -> "theatrical_ticket_agencies"
    IssuingCardholderAuthorizationControls_AllowedCategories_Timeshares -> "timeshares"
    IssuingCardholderAuthorizationControls_AllowedCategories_TireRetreadingAndRepair -> "tire_retreading_and_repair"
    IssuingCardholderAuthorizationControls_AllowedCategories_TollsBridgeFees -> "tolls_bridge_fees"
    IssuingCardholderAuthorizationControls_AllowedCategories_TouristAttractionsAndExhibits -> "tourist_attractions_and_exhibits"
    IssuingCardholderAuthorizationControls_AllowedCategories_TowingServices -> "towing_services"
    IssuingCardholderAuthorizationControls_AllowedCategories_TrailerParksCampgrounds -> "trailer_parks_campgrounds"
    IssuingCardholderAuthorizationControls_AllowedCategories_TransportationServices -> "transportation_services"
    IssuingCardholderAuthorizationControls_AllowedCategories_TravelAgenciesTourOperators -> "travel_agencies_tour_operators"
    IssuingCardholderAuthorizationControls_AllowedCategories_TruckStopIteration -> "truck_stop_iteration"
    IssuingCardholderAuthorizationControls_AllowedCategories_TruckUtilityTrailerRentals -> "truck_utility_trailer_rentals"
    IssuingCardholderAuthorizationControls_AllowedCategories_TypesettingPlateMakingAndRelatedServices -> "typesetting_plate_making_and_related_services"
    IssuingCardholderAuthorizationControls_AllowedCategories_TypewriterStores -> "typewriter_stores"
    IssuingCardholderAuthorizationControls_AllowedCategories_USFederalGovernmentAgenciesOrDepartments -> "u_s_federal_government_agencies_or_departments"
    IssuingCardholderAuthorizationControls_AllowedCategories_UniformsCommercialClothing -> "uniforms_commercial_clothing"
    IssuingCardholderAuthorizationControls_AllowedCategories_UsedMerchandiseAndSecondhandStores -> "used_merchandise_and_secondhand_stores"
    IssuingCardholderAuthorizationControls_AllowedCategories_Utilities -> "utilities"
    IssuingCardholderAuthorizationControls_AllowedCategories_VarietyStores -> "variety_stores"
    IssuingCardholderAuthorizationControls_AllowedCategories_VeterinaryServices -> "veterinary_services"
    IssuingCardholderAuthorizationControls_AllowedCategories_VideoAmusementGameSupplies -> "video_amusement_game_supplies"
    IssuingCardholderAuthorizationControls_AllowedCategories_VideoGameArcades -> "video_game_arcades"
    IssuingCardholderAuthorizationControls_AllowedCategories_VideoTapeRentalStores -> "video_tape_rental_stores"
    IssuingCardholderAuthorizationControls_AllowedCategories_VocationalTradeSchools -> "vocational_trade_schools"
    IssuingCardholderAuthorizationControls_AllowedCategories_WatchJewelryRepair -> "watch_jewelry_repair"
    IssuingCardholderAuthorizationControls_AllowedCategories_WeldingRepair -> "welding_repair"
    IssuingCardholderAuthorizationControls_AllowedCategories_WholesaleClubs -> "wholesale_clubs"
    IssuingCardholderAuthorizationControls_AllowedCategories_WigAndToupeeStores -> "wig_and_toupee_stores"
    IssuingCardholderAuthorizationControls_AllowedCategories_WiresMoneyOrders -> "wires_money_orders"
    IssuingCardholderAuthorizationControls_AllowedCategories_WomensAccessoryAndSpecialtyShops -> "womens_accessory_and_specialty_shops"
    IssuingCardholderAuthorizationControls_AllowedCategories_WomensReadyToWearStores -> "womens_ready_to_wear_stores"
    IssuingCardholderAuthorizationControls_AllowedCategories_WreckingAndSalvageYards -> "wrecking_and_salvage_yards"

instance FromJSON IssuingCardholderAuthorizationControls_AllowedCategories where
  parseJSON = withText "IssuingCardholderAuthorizationControls_AllowedCategories" $ \case
    "ac_refrigeration_repair" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_AcRefrigerationRepair
    "accounting_bookkeeping_services" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_AccountingBookkeepingServices
    "advertising_services" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_AdvertisingServices
    "agricultural_cooperative" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_AgriculturalCooperative
    "airlines_air_carriers" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_AirlinesAirCarriers
    "airports_flying_fields" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_AirportsFlyingFields
    "ambulance_services" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_AmbulanceServices
    "amusement_parks_carnivals" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_AmusementParksCarnivals
    "antique_reproductions" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_AntiqueReproductions
    "antique_shops" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_AntiqueShops
    "aquariums" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_Aquariums
    "architectural_surveying_services" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_ArchitecturalSurveyingServices
    "art_dealers_and_galleries" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_ArtDealersAndGalleries
    "artists_supply_and_craft_shops" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_ArtistsSupplyAndCraftShops
    "auto_and_home_supply_stores" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_AutoAndHomeSupplyStores
    "auto_body_repair_shops" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_AutoBodyRepairShops
    "auto_paint_shops" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_AutoPaintShops
    "auto_service_shops" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_AutoServiceShops
    "automated_cash_disburse" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_AutomatedCashDisburse
    "automated_fuel_dispensers" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_AutomatedFuelDispensers
    "automobile_associations" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_AutomobileAssociations
    "automotive_parts_and_accessories_stores" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_AutomotivePartsAndAccessoriesStores
    "automotive_tire_stores" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_AutomotiveTireStores
    "bail_and_bond_payments" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_BailAndBondPayments
    "bakeries" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_Bakeries
    "bands_orchestras" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_BandsOrchestras
    "barber_and_beauty_shops" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_BarberAndBeautyShops
    "betting_casino_gambling" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_BettingCasinoGambling
    "bicycle_shops" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_BicycleShops
    "billiard_pool_establishments" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_BilliardPoolEstablishments
    "boat_dealers" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_BoatDealers
    "boat_rentals_and_leases" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_BoatRentalsAndLeases
    "book_stores" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_BookStores
    "books_periodicals_and_newspapers" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_BooksPeriodicalsAndNewspapers
    "bowling_alleys" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_BowlingAlleys
    "bus_lines" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_BusLines
    "business_secretarial_schools" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_BusinessSecretarialSchools
    "buying_shopping_services" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_BuyingShoppingServices
    "cable_satellite_and_other_pay_television_and_radio" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_CableSatelliteAndOtherPayTelevisionAndRadio
    "camera_and_photographic_supply_stores" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_CameraAndPhotographicSupplyStores
    "candy_nut_and_confectionery_stores" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_CandyNutAndConfectioneryStores
    "car_and_truck_dealers_new_used" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_CarAndTruckDealersNewUsed
    "car_and_truck_dealers_used_only" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_CarAndTruckDealersUsedOnly
    "car_rental_agencies" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_CarRentalAgencies
    "car_washes" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_CarWashes
    "carpentry_services" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_CarpentryServices
    "carpet_upholstery_cleaning" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_CarpetUpholsteryCleaning
    "caterers" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_Caterers
    "charitable_and_social_service_organizations_fundraising" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_CharitableAndSocialServiceOrganizationsFundraising
    "chemicals_and_allied_products" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_ChemicalsAndAlliedProducts
    "chidrens_and_infants_wear_stores" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_ChidrensAndInfantsWearStores
    "child_care_services" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_ChildCareServices
    "chiropodists_podiatrists" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_ChiropodistsPodiatrists
    "chiropractors" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_Chiropractors
    "cigar_stores_and_stands" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_CigarStoresAndStands
    "civic_social_fraternal_associations" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_CivicSocialFraternalAssociations
    "cleaning_and_maintenance" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_CleaningAndMaintenance
    "clothing_rental" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_ClothingRental
    "colleges_universities" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_CollegesUniversities
    "commercial_equipment" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_CommercialEquipment
    "commercial_footwear" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_CommercialFootwear
    "commercial_photography_art_and_graphics" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_CommercialPhotographyArtAndGraphics
    "commuter_transport_and_ferries" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_CommuterTransportAndFerries
    "computer_network_services" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_ComputerNetworkServices
    "computer_programming" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_ComputerProgramming
    "computer_repair" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_ComputerRepair
    "computer_software_stores" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_ComputerSoftwareStores
    "computers_peripherals_and_software" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_ComputersPeripheralsAndSoftware
    "concrete_work_services" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_ConcreteWorkServices
    "construction_materials" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_ConstructionMaterials
    "consulting_public_relations" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_ConsultingPublicRelations
    "correspondence_schools" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_CorrespondenceSchools
    "cosmetic_stores" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_CosmeticStores
    "counseling_services" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_CounselingServices
    "country_clubs" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_CountryClubs
    "courier_services" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_CourierServices
    "court_costs" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_CourtCosts
    "credit_reporting_agencies" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_CreditReportingAgencies
    "cruise_lines" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_CruiseLines
    "dairy_products_stores" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_DairyProductsStores
    "dance_hall_studios_schools" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_DanceHallStudiosSchools
    "dating_escort_services" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_DatingEscortServices
    "dentists_orthodontists" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_DentistsOrthodontists
    "department_stores" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_DepartmentStores
    "detective_agencies" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_DetectiveAgencies
    "digital_goods_applications" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_DigitalGoodsApplications
    "direct_marketing_catalog_merchant" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_DirectMarketingCatalogMerchant
    "direct_marketing_combination_catalog_and_retail_merchant" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_DirectMarketingCombinationCatalogAndRetailMerchant
    "direct_marketing_inbound_telemarketing" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_DirectMarketingInboundTelemarketing
    "direct_marketing_insurance_services" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_DirectMarketingInsuranceServices
    "direct_marketing_other" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_DirectMarketingOther
    "direct_marketing_outbound_telemarketing" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_DirectMarketingOutboundTelemarketing
    "direct_marketing_subscription" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_DirectMarketingSubscription
    "direct_marketing_travel" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_DirectMarketingTravel
    "discount_stores" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_DiscountStores
    "doctors" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_Doctors
    "door_to_door_sales" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_DoorToDoorSales
    "drapery_window_covering_and_upholstery_stores" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_DraperyWindowCoveringAndUpholsteryStores
    "drinking_places" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_DrinkingPlaces
    "drug_stores_and_pharmacies" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_DrugStoresAndPharmacies
    "drugs_drug_proprietaries_and_druggist_sundries" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_DrugsDrugProprietariesAndDruggistSundries
    "dry_cleaners" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_DryCleaners
    "durable_goods" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_DurableGoods
    "duty_free_stores" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_DutyFreeStores
    "eating_places_restaurants" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_EatingPlacesRestaurants
    "educational_services" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_EducationalServices
    "electric_razor_stores" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_ElectricRazorStores
    "electrical_parts_and_equipment" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_ElectricalPartsAndEquipment
    "electrical_services" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_ElectricalServices
    "electronics_repair_shops" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_ElectronicsRepairShops
    "electronics_stores" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_ElectronicsStores
    "elementary_secondary_schools" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_ElementarySecondarySchools
    "employment_temp_agencies" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_EmploymentTempAgencies
    "equipment_rental" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_EquipmentRental
    "exterminating_services" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_ExterminatingServices
    "family_clothing_stores" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_FamilyClothingStores
    "fast_food_restaurants" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_FastFoodRestaurants
    "financial_institutions" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_FinancialInstitutions
    "fines_government_administrative_entities" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_FinesGovernmentAdministrativeEntities
    "fireplace_fireplace_screens_and_accessories_stores" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_FireplaceFireplaceScreensAndAccessoriesStores
    "floor_covering_stores" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_FloorCoveringStores
    "florists" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_Florists
    "florists_supplies_nursery_stock_and_flowers" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_FloristsSuppliesNurseryStockAndFlowers
    "freezer_and_locker_meat_provisioners" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_FreezerAndLockerMeatProvisioners
    "fuel_dealers_non_automotive" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_FuelDealersNonAutomotive
    "funeral_services_crematories" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_FuneralServicesCrematories
    "furniture_home_furnishings_and_equipment_stores_except_appliances" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_FurnitureHomeFurnishingsAndEquipmentStoresExceptAppliances
    "furniture_repair_refinishing" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_FurnitureRepairRefinishing
    "furriers_and_fur_shops" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_FurriersAndFurShops
    "general_services" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_GeneralServices
    "gift_card_novelty_and_souvenir_shops" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_GiftCardNoveltyAndSouvenirShops
    "glass_paint_and_wallpaper_stores" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_GlassPaintAndWallpaperStores
    "glassware_crystal_stores" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_GlasswareCrystalStores
    "golf_courses_public" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_GolfCoursesPublic
    "government_services" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_GovernmentServices
    "grocery_stores_supermarkets" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_GroceryStoresSupermarkets
    "hardware_equipment_and_supplies" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_HardwareEquipmentAndSupplies
    "hardware_stores" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_HardwareStores
    "health_and_beauty_spas" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_HealthAndBeautySpas
    "hearing_aids_sales_and_supplies" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_HearingAidsSalesAndSupplies
    "heating_plumbing_a_c" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_HeatingPlumbingAC
    "hobby_toy_and_game_shops" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_HobbyToyAndGameShops
    "home_supply_warehouse_stores" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_HomeSupplyWarehouseStores
    "hospitals" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_Hospitals
    "hotels_motels_and_resorts" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_HotelsMotelsAndResorts
    "household_appliance_stores" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_HouseholdApplianceStores
    "industrial_supplies" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_IndustrialSupplies
    "information_retrieval_services" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_InformationRetrievalServices
    "insurance_default" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_InsuranceDefault
    "insurance_underwriting_premiums" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_InsuranceUnderwritingPremiums
    "intra_company_purchases" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_IntraCompanyPurchases
    "jewelry_stores_watches_clocks_and_silverware_stores" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_JewelryStoresWatchesClocksAndSilverwareStores
    "landscaping_services" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_LandscapingServices
    "laundries" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_Laundries
    "laundry_cleaning_services" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_LaundryCleaningServices
    "legal_services_attorneys" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_LegalServicesAttorneys
    "luggage_and_leather_goods_stores" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_LuggageAndLeatherGoodsStores
    "lumber_building_materials_stores" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_LumberBuildingMaterialsStores
    "manual_cash_disburse" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_ManualCashDisburse
    "marinas_service_and_supplies" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_MarinasServiceAndSupplies
    "masonry_stonework_and_plaster" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_MasonryStoneworkAndPlaster
    "massage_parlors" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_MassageParlors
    "medical_and_dental_labs" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_MedicalAndDentalLabs
    "medical_dental_ophthalmic_and_hospital_equipment_and_supplies" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_MedicalDentalOphthalmicAndHospitalEquipmentAndSupplies
    "medical_services" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_MedicalServices
    "membership_organizations" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_MembershipOrganizations
    "mens_and_boys_clothing_and_accessories_stores" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_MensAndBoysClothingAndAccessoriesStores
    "mens_womens_clothing_stores" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_MensWomensClothingStores
    "metal_service_centers" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_MetalServiceCenters
    "miscellaneous" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_Miscellaneous
    "miscellaneous_apparel_and_accessory_shops" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_MiscellaneousApparelAndAccessoryShops
    "miscellaneous_auto_dealers" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_MiscellaneousAutoDealers
    "miscellaneous_business_services" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_MiscellaneousBusinessServices
    "miscellaneous_food_stores" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_MiscellaneousFoodStores
    "miscellaneous_general_merchandise" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_MiscellaneousGeneralMerchandise
    "miscellaneous_general_services" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_MiscellaneousGeneralServices
    "miscellaneous_home_furnishing_specialty_stores" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_MiscellaneousHomeFurnishingSpecialtyStores
    "miscellaneous_publishing_and_printing" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_MiscellaneousPublishingAndPrinting
    "miscellaneous_recreation_services" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_MiscellaneousRecreationServices
    "miscellaneous_repair_shops" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_MiscellaneousRepairShops
    "miscellaneous_specialty_retail" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_MiscellaneousSpecialtyRetail
    "mobile_home_dealers" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_MobileHomeDealers
    "motion_picture_theaters" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_MotionPictureTheaters
    "motor_freight_carriers_and_trucking" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_MotorFreightCarriersAndTrucking
    "motor_homes_dealers" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_MotorHomesDealers
    "motor_vehicle_supplies_and_new_parts" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_MotorVehicleSuppliesAndNewParts
    "motorcycle_shops_and_dealers" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_MotorcycleShopsAndDealers
    "motorcycle_shops_dealers" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_MotorcycleShopsDealers
    "music_stores_musical_instruments_pianos_and_sheet_music" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_MusicStoresMusicalInstrumentsPianosAndSheetMusic
    "news_dealers_and_newsstands" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_NewsDealersAndNewsstands
    "non_fi_money_orders" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_NonFiMoneyOrders
    "non_fi_stored_value_card_purchase_load" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_NonFiStoredValueCardPurchaseLoad
    "nondurable_goods" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_NondurableGoods
    "nurseries_lawn_and_garden_supply_stores" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_NurseriesLawnAndGardenSupplyStores
    "nursing_personal_care" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_NursingPersonalCare
    "office_and_commercial_furniture" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_OfficeAndCommercialFurniture
    "opticians_eyeglasses" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_OpticiansEyeglasses
    "optometrists_ophthalmologist" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_OptometristsOphthalmologist
    "orthopedic_goods_prosthetic_devices" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_OrthopedicGoodsProstheticDevices
    "osteopaths" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_Osteopaths
    "package_stores_beer_wine_and_liquor" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_PackageStoresBeerWineAndLiquor
    "paints_varnishes_and_supplies" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_PaintsVarnishesAndSupplies
    "parking_lots_garages" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_ParkingLotsGarages
    "passenger_railways" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_PassengerRailways
    "pawn_shops" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_PawnShops
    "pet_shops_pet_food_and_supplies" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_PetShopsPetFoodAndSupplies
    "petroleum_and_petroleum_products" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_PetroleumAndPetroleumProducts
    "photo_developing" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_PhotoDeveloping
    "photographic_photocopy_microfilm_equipment_and_supplies" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_PhotographicPhotocopyMicrofilmEquipmentAndSupplies
    "photographic_studios" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_PhotographicStudios
    "picture_video_production" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_PictureVideoProduction
    "piece_goods_notions_and_other_dry_goods" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_PieceGoodsNotionsAndOtherDryGoods
    "plumbing_heating_equipment_and_supplies" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_PlumbingHeatingEquipmentAndSupplies
    "political_organizations" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_PoliticalOrganizations
    "postal_services_government_only" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_PostalServicesGovernmentOnly
    "precious_stones_and_metals_watches_and_jewelry" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_PreciousStonesAndMetalsWatchesAndJewelry
    "professional_services" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_ProfessionalServices
    "public_warehousing_and_storage" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_PublicWarehousingAndStorage
    "quick_copy_repro_and_blueprint" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_QuickCopyReproAndBlueprint
    "railroads" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_Railroads
    "real_estate_agents_and_managers_rentals" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_RealEstateAgentsAndManagersRentals
    "record_stores" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_RecordStores
    "recreational_vehicle_rentals" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_RecreationalVehicleRentals
    "religious_goods_stores" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_ReligiousGoodsStores
    "religious_organizations" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_ReligiousOrganizations
    "roofing_siding_sheet_metal" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_RoofingSidingSheetMetal
    "secretarial_support_services" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_SecretarialSupportServices
    "security_brokers_dealers" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_SecurityBrokersDealers
    "service_stations" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_ServiceStations
    "sewing_needlework_fabric_and_piece_goods_stores" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_SewingNeedleworkFabricAndPieceGoodsStores
    "shoe_repair_hat_cleaning" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_ShoeRepairHatCleaning
    "shoe_stores" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_ShoeStores
    "small_appliance_repair" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_SmallApplianceRepair
    "snowmobile_dealers" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_SnowmobileDealers
    "special_trade_services" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_SpecialTradeServices
    "specialty_cleaning" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_SpecialtyCleaning
    "sporting_goods_stores" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_SportingGoodsStores
    "sporting_recreation_camps" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_SportingRecreationCamps
    "sports_and_riding_apparel_stores" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_SportsAndRidingApparelStores
    "sports_clubs_fields" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_SportsClubsFields
    "stamp_and_coin_stores" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_StampAndCoinStores
    "stationary_office_supplies_printing_and_writing_paper" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_StationaryOfficeSuppliesPrintingAndWritingPaper
    "stationery_stores_office_and_school_supply_stores" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_StationeryStoresOfficeAndSchoolSupplyStores
    "swimming_pools_sales" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_SwimmingPoolsSales
    "t_ui_travel_germany" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_TUiTravelGermany
    "tailors_alterations" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_TailorsAlterations
    "tax_payments_government_agencies" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_TaxPaymentsGovernmentAgencies
    "tax_preparation_services" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_TaxPreparationServices
    "taxicabs_limousines" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_TaxicabsLimousines
    "telecommunication_equipment_and_telephone_sales" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_TelecommunicationEquipmentAndTelephoneSales
    "telecommunication_services" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_TelecommunicationServices
    "telegraph_services" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_TelegraphServices
    "tent_and_awning_shops" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_TentAndAwningShops
    "testing_laboratories" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_TestingLaboratories
    "theatrical_ticket_agencies" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_TheatricalTicketAgencies
    "timeshares" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_Timeshares
    "tire_retreading_and_repair" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_TireRetreadingAndRepair
    "tolls_bridge_fees" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_TollsBridgeFees
    "tourist_attractions_and_exhibits" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_TouristAttractionsAndExhibits
    "towing_services" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_TowingServices
    "trailer_parks_campgrounds" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_TrailerParksCampgrounds
    "transportation_services" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_TransportationServices
    "travel_agencies_tour_operators" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_TravelAgenciesTourOperators
    "truck_stop_iteration" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_TruckStopIteration
    "truck_utility_trailer_rentals" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_TruckUtilityTrailerRentals
    "typesetting_plate_making_and_related_services" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_TypesettingPlateMakingAndRelatedServices
    "typewriter_stores" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_TypewriterStores
    "u_s_federal_government_agencies_or_departments" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_USFederalGovernmentAgenciesOrDepartments
    "uniforms_commercial_clothing" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_UniformsCommercialClothing
    "used_merchandise_and_secondhand_stores" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_UsedMerchandiseAndSecondhandStores
    "utilities" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_Utilities
    "variety_stores" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_VarietyStores
    "veterinary_services" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_VeterinaryServices
    "video_amusement_game_supplies" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_VideoAmusementGameSupplies
    "video_game_arcades" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_VideoGameArcades
    "video_tape_rental_stores" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_VideoTapeRentalStores
    "vocational_trade_schools" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_VocationalTradeSchools
    "watch_jewelry_repair" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_WatchJewelryRepair
    "welding_repair" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_WeldingRepair
    "wholesale_clubs" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_WholesaleClubs
    "wig_and_toupee_stores" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_WigAndToupeeStores
    "wires_money_orders" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_WiresMoneyOrders
    "womens_accessory_and_specialty_shops" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_WomensAccessoryAndSpecialtyShops
    "womens_ready_to_wear_stores" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_WomensReadyToWearStores
    "wrecking_and_salvage_yards" -> pure IssuingCardholderAuthorizationControls_AllowedCategories_WreckingAndSalvageYards
    str -> fail (show str <> " is not a known valid option for IssuingCardholderAuthorizationControls_AllowedCategories")

data IssuingCardholderAuthorizationControls_BlockedCategories
  = IssuingCardholderAuthorizationControls_BlockedCategories_AcRefrigerationRepair
  | IssuingCardholderAuthorizationControls_BlockedCategories_AccountingBookkeepingServices
  | IssuingCardholderAuthorizationControls_BlockedCategories_AdvertisingServices
  | IssuingCardholderAuthorizationControls_BlockedCategories_AgriculturalCooperative
  | IssuingCardholderAuthorizationControls_BlockedCategories_AirlinesAirCarriers
  | IssuingCardholderAuthorizationControls_BlockedCategories_AirportsFlyingFields
  | IssuingCardholderAuthorizationControls_BlockedCategories_AmbulanceServices
  | IssuingCardholderAuthorizationControls_BlockedCategories_AmusementParksCarnivals
  | IssuingCardholderAuthorizationControls_BlockedCategories_AntiqueReproductions
  | IssuingCardholderAuthorizationControls_BlockedCategories_AntiqueShops
  | IssuingCardholderAuthorizationControls_BlockedCategories_Aquariums
  | IssuingCardholderAuthorizationControls_BlockedCategories_ArchitecturalSurveyingServices
  | IssuingCardholderAuthorizationControls_BlockedCategories_ArtDealersAndGalleries
  | IssuingCardholderAuthorizationControls_BlockedCategories_ArtistsSupplyAndCraftShops
  | IssuingCardholderAuthorizationControls_BlockedCategories_AutoAndHomeSupplyStores
  | IssuingCardholderAuthorizationControls_BlockedCategories_AutoBodyRepairShops
  | IssuingCardholderAuthorizationControls_BlockedCategories_AutoPaintShops
  | IssuingCardholderAuthorizationControls_BlockedCategories_AutoServiceShops
  | IssuingCardholderAuthorizationControls_BlockedCategories_AutomatedCashDisburse
  | IssuingCardholderAuthorizationControls_BlockedCategories_AutomatedFuelDispensers
  | IssuingCardholderAuthorizationControls_BlockedCategories_AutomobileAssociations
  | IssuingCardholderAuthorizationControls_BlockedCategories_AutomotivePartsAndAccessoriesStores
  | IssuingCardholderAuthorizationControls_BlockedCategories_AutomotiveTireStores
  | IssuingCardholderAuthorizationControls_BlockedCategories_BailAndBondPayments
  | IssuingCardholderAuthorizationControls_BlockedCategories_Bakeries
  | IssuingCardholderAuthorizationControls_BlockedCategories_BandsOrchestras
  | IssuingCardholderAuthorizationControls_BlockedCategories_BarberAndBeautyShops
  | IssuingCardholderAuthorizationControls_BlockedCategories_BettingCasinoGambling
  | IssuingCardholderAuthorizationControls_BlockedCategories_BicycleShops
  | IssuingCardholderAuthorizationControls_BlockedCategories_BilliardPoolEstablishments
  | IssuingCardholderAuthorizationControls_BlockedCategories_BoatDealers
  | IssuingCardholderAuthorizationControls_BlockedCategories_BoatRentalsAndLeases
  | IssuingCardholderAuthorizationControls_BlockedCategories_BookStores
  | IssuingCardholderAuthorizationControls_BlockedCategories_BooksPeriodicalsAndNewspapers
  | IssuingCardholderAuthorizationControls_BlockedCategories_BowlingAlleys
  | IssuingCardholderAuthorizationControls_BlockedCategories_BusLines
  | IssuingCardholderAuthorizationControls_BlockedCategories_BusinessSecretarialSchools
  | IssuingCardholderAuthorizationControls_BlockedCategories_BuyingShoppingServices
  | IssuingCardholderAuthorizationControls_BlockedCategories_CableSatelliteAndOtherPayTelevisionAndRadio
  | IssuingCardholderAuthorizationControls_BlockedCategories_CameraAndPhotographicSupplyStores
  | IssuingCardholderAuthorizationControls_BlockedCategories_CandyNutAndConfectioneryStores
  | IssuingCardholderAuthorizationControls_BlockedCategories_CarAndTruckDealersNewUsed
  | IssuingCardholderAuthorizationControls_BlockedCategories_CarAndTruckDealersUsedOnly
  | IssuingCardholderAuthorizationControls_BlockedCategories_CarRentalAgencies
  | IssuingCardholderAuthorizationControls_BlockedCategories_CarWashes
  | IssuingCardholderAuthorizationControls_BlockedCategories_CarpentryServices
  | IssuingCardholderAuthorizationControls_BlockedCategories_CarpetUpholsteryCleaning
  | IssuingCardholderAuthorizationControls_BlockedCategories_Caterers
  | IssuingCardholderAuthorizationControls_BlockedCategories_CharitableAndSocialServiceOrganizationsFundraising
  | IssuingCardholderAuthorizationControls_BlockedCategories_ChemicalsAndAlliedProducts
  | IssuingCardholderAuthorizationControls_BlockedCategories_ChidrensAndInfantsWearStores
  | IssuingCardholderAuthorizationControls_BlockedCategories_ChildCareServices
  | IssuingCardholderAuthorizationControls_BlockedCategories_ChiropodistsPodiatrists
  | IssuingCardholderAuthorizationControls_BlockedCategories_Chiropractors
  | IssuingCardholderAuthorizationControls_BlockedCategories_CigarStoresAndStands
  | IssuingCardholderAuthorizationControls_BlockedCategories_CivicSocialFraternalAssociations
  | IssuingCardholderAuthorizationControls_BlockedCategories_CleaningAndMaintenance
  | IssuingCardholderAuthorizationControls_BlockedCategories_ClothingRental
  | IssuingCardholderAuthorizationControls_BlockedCategories_CollegesUniversities
  | IssuingCardholderAuthorizationControls_BlockedCategories_CommercialEquipment
  | IssuingCardholderAuthorizationControls_BlockedCategories_CommercialFootwear
  | IssuingCardholderAuthorizationControls_BlockedCategories_CommercialPhotographyArtAndGraphics
  | IssuingCardholderAuthorizationControls_BlockedCategories_CommuterTransportAndFerries
  | IssuingCardholderAuthorizationControls_BlockedCategories_ComputerNetworkServices
  | IssuingCardholderAuthorizationControls_BlockedCategories_ComputerProgramming
  | IssuingCardholderAuthorizationControls_BlockedCategories_ComputerRepair
  | IssuingCardholderAuthorizationControls_BlockedCategories_ComputerSoftwareStores
  | IssuingCardholderAuthorizationControls_BlockedCategories_ComputersPeripheralsAndSoftware
  | IssuingCardholderAuthorizationControls_BlockedCategories_ConcreteWorkServices
  | IssuingCardholderAuthorizationControls_BlockedCategories_ConstructionMaterials
  | IssuingCardholderAuthorizationControls_BlockedCategories_ConsultingPublicRelations
  | IssuingCardholderAuthorizationControls_BlockedCategories_CorrespondenceSchools
  | IssuingCardholderAuthorizationControls_BlockedCategories_CosmeticStores
  | IssuingCardholderAuthorizationControls_BlockedCategories_CounselingServices
  | IssuingCardholderAuthorizationControls_BlockedCategories_CountryClubs
  | IssuingCardholderAuthorizationControls_BlockedCategories_CourierServices
  | IssuingCardholderAuthorizationControls_BlockedCategories_CourtCosts
  | IssuingCardholderAuthorizationControls_BlockedCategories_CreditReportingAgencies
  | IssuingCardholderAuthorizationControls_BlockedCategories_CruiseLines
  | IssuingCardholderAuthorizationControls_BlockedCategories_DairyProductsStores
  | IssuingCardholderAuthorizationControls_BlockedCategories_DanceHallStudiosSchools
  | IssuingCardholderAuthorizationControls_BlockedCategories_DatingEscortServices
  | IssuingCardholderAuthorizationControls_BlockedCategories_DentistsOrthodontists
  | IssuingCardholderAuthorizationControls_BlockedCategories_DepartmentStores
  | IssuingCardholderAuthorizationControls_BlockedCategories_DetectiveAgencies
  | IssuingCardholderAuthorizationControls_BlockedCategories_DigitalGoodsApplications
  | IssuingCardholderAuthorizationControls_BlockedCategories_DirectMarketingCatalogMerchant
  | IssuingCardholderAuthorizationControls_BlockedCategories_DirectMarketingCombinationCatalogAndRetailMerchant
  | IssuingCardholderAuthorizationControls_BlockedCategories_DirectMarketingInboundTelemarketing
  | IssuingCardholderAuthorizationControls_BlockedCategories_DirectMarketingInsuranceServices
  | IssuingCardholderAuthorizationControls_BlockedCategories_DirectMarketingOther
  | IssuingCardholderAuthorizationControls_BlockedCategories_DirectMarketingOutboundTelemarketing
  | IssuingCardholderAuthorizationControls_BlockedCategories_DirectMarketingSubscription
  | IssuingCardholderAuthorizationControls_BlockedCategories_DirectMarketingTravel
  | IssuingCardholderAuthorizationControls_BlockedCategories_DiscountStores
  | IssuingCardholderAuthorizationControls_BlockedCategories_Doctors
  | IssuingCardholderAuthorizationControls_BlockedCategories_DoorToDoorSales
  | IssuingCardholderAuthorizationControls_BlockedCategories_DraperyWindowCoveringAndUpholsteryStores
  | IssuingCardholderAuthorizationControls_BlockedCategories_DrinkingPlaces
  | IssuingCardholderAuthorizationControls_BlockedCategories_DrugStoresAndPharmacies
  | IssuingCardholderAuthorizationControls_BlockedCategories_DrugsDrugProprietariesAndDruggistSundries
  | IssuingCardholderAuthorizationControls_BlockedCategories_DryCleaners
  | IssuingCardholderAuthorizationControls_BlockedCategories_DurableGoods
  | IssuingCardholderAuthorizationControls_BlockedCategories_DutyFreeStores
  | IssuingCardholderAuthorizationControls_BlockedCategories_EatingPlacesRestaurants
  | IssuingCardholderAuthorizationControls_BlockedCategories_EducationalServices
  | IssuingCardholderAuthorizationControls_BlockedCategories_ElectricRazorStores
  | IssuingCardholderAuthorizationControls_BlockedCategories_ElectricalPartsAndEquipment
  | IssuingCardholderAuthorizationControls_BlockedCategories_ElectricalServices
  | IssuingCardholderAuthorizationControls_BlockedCategories_ElectronicsRepairShops
  | IssuingCardholderAuthorizationControls_BlockedCategories_ElectronicsStores
  | IssuingCardholderAuthorizationControls_BlockedCategories_ElementarySecondarySchools
  | IssuingCardholderAuthorizationControls_BlockedCategories_EmploymentTempAgencies
  | IssuingCardholderAuthorizationControls_BlockedCategories_EquipmentRental
  | IssuingCardholderAuthorizationControls_BlockedCategories_ExterminatingServices
  | IssuingCardholderAuthorizationControls_BlockedCategories_FamilyClothingStores
  | IssuingCardholderAuthorizationControls_BlockedCategories_FastFoodRestaurants
  | IssuingCardholderAuthorizationControls_BlockedCategories_FinancialInstitutions
  | IssuingCardholderAuthorizationControls_BlockedCategories_FinesGovernmentAdministrativeEntities
  | IssuingCardholderAuthorizationControls_BlockedCategories_FireplaceFireplaceScreensAndAccessoriesStores
  | IssuingCardholderAuthorizationControls_BlockedCategories_FloorCoveringStores
  | IssuingCardholderAuthorizationControls_BlockedCategories_Florists
  | IssuingCardholderAuthorizationControls_BlockedCategories_FloristsSuppliesNurseryStockAndFlowers
  | IssuingCardholderAuthorizationControls_BlockedCategories_FreezerAndLockerMeatProvisioners
  | IssuingCardholderAuthorizationControls_BlockedCategories_FuelDealersNonAutomotive
  | IssuingCardholderAuthorizationControls_BlockedCategories_FuneralServicesCrematories
  | IssuingCardholderAuthorizationControls_BlockedCategories_FurnitureHomeFurnishingsAndEquipmentStoresExceptAppliances
  | IssuingCardholderAuthorizationControls_BlockedCategories_FurnitureRepairRefinishing
  | IssuingCardholderAuthorizationControls_BlockedCategories_FurriersAndFurShops
  | IssuingCardholderAuthorizationControls_BlockedCategories_GeneralServices
  | IssuingCardholderAuthorizationControls_BlockedCategories_GiftCardNoveltyAndSouvenirShops
  | IssuingCardholderAuthorizationControls_BlockedCategories_GlassPaintAndWallpaperStores
  | IssuingCardholderAuthorizationControls_BlockedCategories_GlasswareCrystalStores
  | IssuingCardholderAuthorizationControls_BlockedCategories_GolfCoursesPublic
  | IssuingCardholderAuthorizationControls_BlockedCategories_GovernmentServices
  | IssuingCardholderAuthorizationControls_BlockedCategories_GroceryStoresSupermarkets
  | IssuingCardholderAuthorizationControls_BlockedCategories_HardwareEquipmentAndSupplies
  | IssuingCardholderAuthorizationControls_BlockedCategories_HardwareStores
  | IssuingCardholderAuthorizationControls_BlockedCategories_HealthAndBeautySpas
  | IssuingCardholderAuthorizationControls_BlockedCategories_HearingAidsSalesAndSupplies
  | IssuingCardholderAuthorizationControls_BlockedCategories_HeatingPlumbingAC
  | IssuingCardholderAuthorizationControls_BlockedCategories_HobbyToyAndGameShops
  | IssuingCardholderAuthorizationControls_BlockedCategories_HomeSupplyWarehouseStores
  | IssuingCardholderAuthorizationControls_BlockedCategories_Hospitals
  | IssuingCardholderAuthorizationControls_BlockedCategories_HotelsMotelsAndResorts
  | IssuingCardholderAuthorizationControls_BlockedCategories_HouseholdApplianceStores
  | IssuingCardholderAuthorizationControls_BlockedCategories_IndustrialSupplies
  | IssuingCardholderAuthorizationControls_BlockedCategories_InformationRetrievalServices
  | IssuingCardholderAuthorizationControls_BlockedCategories_InsuranceDefault
  | IssuingCardholderAuthorizationControls_BlockedCategories_InsuranceUnderwritingPremiums
  | IssuingCardholderAuthorizationControls_BlockedCategories_IntraCompanyPurchases
  | IssuingCardholderAuthorizationControls_BlockedCategories_JewelryStoresWatchesClocksAndSilverwareStores
  | IssuingCardholderAuthorizationControls_BlockedCategories_LandscapingServices
  | IssuingCardholderAuthorizationControls_BlockedCategories_Laundries
  | IssuingCardholderAuthorizationControls_BlockedCategories_LaundryCleaningServices
  | IssuingCardholderAuthorizationControls_BlockedCategories_LegalServicesAttorneys
  | IssuingCardholderAuthorizationControls_BlockedCategories_LuggageAndLeatherGoodsStores
  | IssuingCardholderAuthorizationControls_BlockedCategories_LumberBuildingMaterialsStores
  | IssuingCardholderAuthorizationControls_BlockedCategories_ManualCashDisburse
  | IssuingCardholderAuthorizationControls_BlockedCategories_MarinasServiceAndSupplies
  | IssuingCardholderAuthorizationControls_BlockedCategories_MasonryStoneworkAndPlaster
  | IssuingCardholderAuthorizationControls_BlockedCategories_MassageParlors
  | IssuingCardholderAuthorizationControls_BlockedCategories_MedicalAndDentalLabs
  | IssuingCardholderAuthorizationControls_BlockedCategories_MedicalDentalOphthalmicAndHospitalEquipmentAndSupplies
  | IssuingCardholderAuthorizationControls_BlockedCategories_MedicalServices
  | IssuingCardholderAuthorizationControls_BlockedCategories_MembershipOrganizations
  | IssuingCardholderAuthorizationControls_BlockedCategories_MensAndBoysClothingAndAccessoriesStores
  | IssuingCardholderAuthorizationControls_BlockedCategories_MensWomensClothingStores
  | IssuingCardholderAuthorizationControls_BlockedCategories_MetalServiceCenters
  | IssuingCardholderAuthorizationControls_BlockedCategories_Miscellaneous
  | IssuingCardholderAuthorizationControls_BlockedCategories_MiscellaneousApparelAndAccessoryShops
  | IssuingCardholderAuthorizationControls_BlockedCategories_MiscellaneousAutoDealers
  | IssuingCardholderAuthorizationControls_BlockedCategories_MiscellaneousBusinessServices
  | IssuingCardholderAuthorizationControls_BlockedCategories_MiscellaneousFoodStores
  | IssuingCardholderAuthorizationControls_BlockedCategories_MiscellaneousGeneralMerchandise
  | IssuingCardholderAuthorizationControls_BlockedCategories_MiscellaneousGeneralServices
  | IssuingCardholderAuthorizationControls_BlockedCategories_MiscellaneousHomeFurnishingSpecialtyStores
  | IssuingCardholderAuthorizationControls_BlockedCategories_MiscellaneousPublishingAndPrinting
  | IssuingCardholderAuthorizationControls_BlockedCategories_MiscellaneousRecreationServices
  | IssuingCardholderAuthorizationControls_BlockedCategories_MiscellaneousRepairShops
  | IssuingCardholderAuthorizationControls_BlockedCategories_MiscellaneousSpecialtyRetail
  | IssuingCardholderAuthorizationControls_BlockedCategories_MobileHomeDealers
  | IssuingCardholderAuthorizationControls_BlockedCategories_MotionPictureTheaters
  | IssuingCardholderAuthorizationControls_BlockedCategories_MotorFreightCarriersAndTrucking
  | IssuingCardholderAuthorizationControls_BlockedCategories_MotorHomesDealers
  | IssuingCardholderAuthorizationControls_BlockedCategories_MotorVehicleSuppliesAndNewParts
  | IssuingCardholderAuthorizationControls_BlockedCategories_MotorcycleShopsAndDealers
  | IssuingCardholderAuthorizationControls_BlockedCategories_MotorcycleShopsDealers
  | IssuingCardholderAuthorizationControls_BlockedCategories_MusicStoresMusicalInstrumentsPianosAndSheetMusic
  | IssuingCardholderAuthorizationControls_BlockedCategories_NewsDealersAndNewsstands
  | IssuingCardholderAuthorizationControls_BlockedCategories_NonFiMoneyOrders
  | IssuingCardholderAuthorizationControls_BlockedCategories_NonFiStoredValueCardPurchaseLoad
  | IssuingCardholderAuthorizationControls_BlockedCategories_NondurableGoods
  | IssuingCardholderAuthorizationControls_BlockedCategories_NurseriesLawnAndGardenSupplyStores
  | IssuingCardholderAuthorizationControls_BlockedCategories_NursingPersonalCare
  | IssuingCardholderAuthorizationControls_BlockedCategories_OfficeAndCommercialFurniture
  | IssuingCardholderAuthorizationControls_BlockedCategories_OpticiansEyeglasses
  | IssuingCardholderAuthorizationControls_BlockedCategories_OptometristsOphthalmologist
  | IssuingCardholderAuthorizationControls_BlockedCategories_OrthopedicGoodsProstheticDevices
  | IssuingCardholderAuthorizationControls_BlockedCategories_Osteopaths
  | IssuingCardholderAuthorizationControls_BlockedCategories_PackageStoresBeerWineAndLiquor
  | IssuingCardholderAuthorizationControls_BlockedCategories_PaintsVarnishesAndSupplies
  | IssuingCardholderAuthorizationControls_BlockedCategories_ParkingLotsGarages
  | IssuingCardholderAuthorizationControls_BlockedCategories_PassengerRailways
  | IssuingCardholderAuthorizationControls_BlockedCategories_PawnShops
  | IssuingCardholderAuthorizationControls_BlockedCategories_PetShopsPetFoodAndSupplies
  | IssuingCardholderAuthorizationControls_BlockedCategories_PetroleumAndPetroleumProducts
  | IssuingCardholderAuthorizationControls_BlockedCategories_PhotoDeveloping
  | IssuingCardholderAuthorizationControls_BlockedCategories_PhotographicPhotocopyMicrofilmEquipmentAndSupplies
  | IssuingCardholderAuthorizationControls_BlockedCategories_PhotographicStudios
  | IssuingCardholderAuthorizationControls_BlockedCategories_PictureVideoProduction
  | IssuingCardholderAuthorizationControls_BlockedCategories_PieceGoodsNotionsAndOtherDryGoods
  | IssuingCardholderAuthorizationControls_BlockedCategories_PlumbingHeatingEquipmentAndSupplies
  | IssuingCardholderAuthorizationControls_BlockedCategories_PoliticalOrganizations
  | IssuingCardholderAuthorizationControls_BlockedCategories_PostalServicesGovernmentOnly
  | IssuingCardholderAuthorizationControls_BlockedCategories_PreciousStonesAndMetalsWatchesAndJewelry
  | IssuingCardholderAuthorizationControls_BlockedCategories_ProfessionalServices
  | IssuingCardholderAuthorizationControls_BlockedCategories_PublicWarehousingAndStorage
  | IssuingCardholderAuthorizationControls_BlockedCategories_QuickCopyReproAndBlueprint
  | IssuingCardholderAuthorizationControls_BlockedCategories_Railroads
  | IssuingCardholderAuthorizationControls_BlockedCategories_RealEstateAgentsAndManagersRentals
  | IssuingCardholderAuthorizationControls_BlockedCategories_RecordStores
  | IssuingCardholderAuthorizationControls_BlockedCategories_RecreationalVehicleRentals
  | IssuingCardholderAuthorizationControls_BlockedCategories_ReligiousGoodsStores
  | IssuingCardholderAuthorizationControls_BlockedCategories_ReligiousOrganizations
  | IssuingCardholderAuthorizationControls_BlockedCategories_RoofingSidingSheetMetal
  | IssuingCardholderAuthorizationControls_BlockedCategories_SecretarialSupportServices
  | IssuingCardholderAuthorizationControls_BlockedCategories_SecurityBrokersDealers
  | IssuingCardholderAuthorizationControls_BlockedCategories_ServiceStations
  | IssuingCardholderAuthorizationControls_BlockedCategories_SewingNeedleworkFabricAndPieceGoodsStores
  | IssuingCardholderAuthorizationControls_BlockedCategories_ShoeRepairHatCleaning
  | IssuingCardholderAuthorizationControls_BlockedCategories_ShoeStores
  | IssuingCardholderAuthorizationControls_BlockedCategories_SmallApplianceRepair
  | IssuingCardholderAuthorizationControls_BlockedCategories_SnowmobileDealers
  | IssuingCardholderAuthorizationControls_BlockedCategories_SpecialTradeServices
  | IssuingCardholderAuthorizationControls_BlockedCategories_SpecialtyCleaning
  | IssuingCardholderAuthorizationControls_BlockedCategories_SportingGoodsStores
  | IssuingCardholderAuthorizationControls_BlockedCategories_SportingRecreationCamps
  | IssuingCardholderAuthorizationControls_BlockedCategories_SportsAndRidingApparelStores
  | IssuingCardholderAuthorizationControls_BlockedCategories_SportsClubsFields
  | IssuingCardholderAuthorizationControls_BlockedCategories_StampAndCoinStores
  | IssuingCardholderAuthorizationControls_BlockedCategories_StationaryOfficeSuppliesPrintingAndWritingPaper
  | IssuingCardholderAuthorizationControls_BlockedCategories_StationeryStoresOfficeAndSchoolSupplyStores
  | IssuingCardholderAuthorizationControls_BlockedCategories_SwimmingPoolsSales
  | IssuingCardholderAuthorizationControls_BlockedCategories_TUiTravelGermany
  | IssuingCardholderAuthorizationControls_BlockedCategories_TailorsAlterations
  | IssuingCardholderAuthorizationControls_BlockedCategories_TaxPaymentsGovernmentAgencies
  | IssuingCardholderAuthorizationControls_BlockedCategories_TaxPreparationServices
  | IssuingCardholderAuthorizationControls_BlockedCategories_TaxicabsLimousines
  | IssuingCardholderAuthorizationControls_BlockedCategories_TelecommunicationEquipmentAndTelephoneSales
  | IssuingCardholderAuthorizationControls_BlockedCategories_TelecommunicationServices
  | IssuingCardholderAuthorizationControls_BlockedCategories_TelegraphServices
  | IssuingCardholderAuthorizationControls_BlockedCategories_TentAndAwningShops
  | IssuingCardholderAuthorizationControls_BlockedCategories_TestingLaboratories
  | IssuingCardholderAuthorizationControls_BlockedCategories_TheatricalTicketAgencies
  | IssuingCardholderAuthorizationControls_BlockedCategories_Timeshares
  | IssuingCardholderAuthorizationControls_BlockedCategories_TireRetreadingAndRepair
  | IssuingCardholderAuthorizationControls_BlockedCategories_TollsBridgeFees
  | IssuingCardholderAuthorizationControls_BlockedCategories_TouristAttractionsAndExhibits
  | IssuingCardholderAuthorizationControls_BlockedCategories_TowingServices
  | IssuingCardholderAuthorizationControls_BlockedCategories_TrailerParksCampgrounds
  | IssuingCardholderAuthorizationControls_BlockedCategories_TransportationServices
  | IssuingCardholderAuthorizationControls_BlockedCategories_TravelAgenciesTourOperators
  | IssuingCardholderAuthorizationControls_BlockedCategories_TruckStopIteration
  | IssuingCardholderAuthorizationControls_BlockedCategories_TruckUtilityTrailerRentals
  | IssuingCardholderAuthorizationControls_BlockedCategories_TypesettingPlateMakingAndRelatedServices
  | IssuingCardholderAuthorizationControls_BlockedCategories_TypewriterStores
  | IssuingCardholderAuthorizationControls_BlockedCategories_USFederalGovernmentAgenciesOrDepartments
  | IssuingCardholderAuthorizationControls_BlockedCategories_UniformsCommercialClothing
  | IssuingCardholderAuthorizationControls_BlockedCategories_UsedMerchandiseAndSecondhandStores
  | IssuingCardholderAuthorizationControls_BlockedCategories_Utilities
  | IssuingCardholderAuthorizationControls_BlockedCategories_VarietyStores
  | IssuingCardholderAuthorizationControls_BlockedCategories_VeterinaryServices
  | IssuingCardholderAuthorizationControls_BlockedCategories_VideoAmusementGameSupplies
  | IssuingCardholderAuthorizationControls_BlockedCategories_VideoGameArcades
  | IssuingCardholderAuthorizationControls_BlockedCategories_VideoTapeRentalStores
  | IssuingCardholderAuthorizationControls_BlockedCategories_VocationalTradeSchools
  | IssuingCardholderAuthorizationControls_BlockedCategories_WatchJewelryRepair
  | IssuingCardholderAuthorizationControls_BlockedCategories_WeldingRepair
  | IssuingCardholderAuthorizationControls_BlockedCategories_WholesaleClubs
  | IssuingCardholderAuthorizationControls_BlockedCategories_WigAndToupeeStores
  | IssuingCardholderAuthorizationControls_BlockedCategories_WiresMoneyOrders
  | IssuingCardholderAuthorizationControls_BlockedCategories_WomensAccessoryAndSpecialtyShops
  | IssuingCardholderAuthorizationControls_BlockedCategories_WomensReadyToWearStores
  | IssuingCardholderAuthorizationControls_BlockedCategories_WreckingAndSalvageYards
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON IssuingCardholderAuthorizationControls_BlockedCategories where
  toJSON e = Text $ case e of
    IssuingCardholderAuthorizationControls_BlockedCategories_AcRefrigerationRepair -> "ac_refrigeration_repair"
    IssuingCardholderAuthorizationControls_BlockedCategories_AccountingBookkeepingServices -> "accounting_bookkeeping_services"
    IssuingCardholderAuthorizationControls_BlockedCategories_AdvertisingServices -> "advertising_services"
    IssuingCardholderAuthorizationControls_BlockedCategories_AgriculturalCooperative -> "agricultural_cooperative"
    IssuingCardholderAuthorizationControls_BlockedCategories_AirlinesAirCarriers -> "airlines_air_carriers"
    IssuingCardholderAuthorizationControls_BlockedCategories_AirportsFlyingFields -> "airports_flying_fields"
    IssuingCardholderAuthorizationControls_BlockedCategories_AmbulanceServices -> "ambulance_services"
    IssuingCardholderAuthorizationControls_BlockedCategories_AmusementParksCarnivals -> "amusement_parks_carnivals"
    IssuingCardholderAuthorizationControls_BlockedCategories_AntiqueReproductions -> "antique_reproductions"
    IssuingCardholderAuthorizationControls_BlockedCategories_AntiqueShops -> "antique_shops"
    IssuingCardholderAuthorizationControls_BlockedCategories_Aquariums -> "aquariums"
    IssuingCardholderAuthorizationControls_BlockedCategories_ArchitecturalSurveyingServices -> "architectural_surveying_services"
    IssuingCardholderAuthorizationControls_BlockedCategories_ArtDealersAndGalleries -> "art_dealers_and_galleries"
    IssuingCardholderAuthorizationControls_BlockedCategories_ArtistsSupplyAndCraftShops -> "artists_supply_and_craft_shops"
    IssuingCardholderAuthorizationControls_BlockedCategories_AutoAndHomeSupplyStores -> "auto_and_home_supply_stores"
    IssuingCardholderAuthorizationControls_BlockedCategories_AutoBodyRepairShops -> "auto_body_repair_shops"
    IssuingCardholderAuthorizationControls_BlockedCategories_AutoPaintShops -> "auto_paint_shops"
    IssuingCardholderAuthorizationControls_BlockedCategories_AutoServiceShops -> "auto_service_shops"
    IssuingCardholderAuthorizationControls_BlockedCategories_AutomatedCashDisburse -> "automated_cash_disburse"
    IssuingCardholderAuthorizationControls_BlockedCategories_AutomatedFuelDispensers -> "automated_fuel_dispensers"
    IssuingCardholderAuthorizationControls_BlockedCategories_AutomobileAssociations -> "automobile_associations"
    IssuingCardholderAuthorizationControls_BlockedCategories_AutomotivePartsAndAccessoriesStores -> "automotive_parts_and_accessories_stores"
    IssuingCardholderAuthorizationControls_BlockedCategories_AutomotiveTireStores -> "automotive_tire_stores"
    IssuingCardholderAuthorizationControls_BlockedCategories_BailAndBondPayments -> "bail_and_bond_payments"
    IssuingCardholderAuthorizationControls_BlockedCategories_Bakeries -> "bakeries"
    IssuingCardholderAuthorizationControls_BlockedCategories_BandsOrchestras -> "bands_orchestras"
    IssuingCardholderAuthorizationControls_BlockedCategories_BarberAndBeautyShops -> "barber_and_beauty_shops"
    IssuingCardholderAuthorizationControls_BlockedCategories_BettingCasinoGambling -> "betting_casino_gambling"
    IssuingCardholderAuthorizationControls_BlockedCategories_BicycleShops -> "bicycle_shops"
    IssuingCardholderAuthorizationControls_BlockedCategories_BilliardPoolEstablishments -> "billiard_pool_establishments"
    IssuingCardholderAuthorizationControls_BlockedCategories_BoatDealers -> "boat_dealers"
    IssuingCardholderAuthorizationControls_BlockedCategories_BoatRentalsAndLeases -> "boat_rentals_and_leases"
    IssuingCardholderAuthorizationControls_BlockedCategories_BookStores -> "book_stores"
    IssuingCardholderAuthorizationControls_BlockedCategories_BooksPeriodicalsAndNewspapers -> "books_periodicals_and_newspapers"
    IssuingCardholderAuthorizationControls_BlockedCategories_BowlingAlleys -> "bowling_alleys"
    IssuingCardholderAuthorizationControls_BlockedCategories_BusLines -> "bus_lines"
    IssuingCardholderAuthorizationControls_BlockedCategories_BusinessSecretarialSchools -> "business_secretarial_schools"
    IssuingCardholderAuthorizationControls_BlockedCategories_BuyingShoppingServices -> "buying_shopping_services"
    IssuingCardholderAuthorizationControls_BlockedCategories_CableSatelliteAndOtherPayTelevisionAndRadio -> "cable_satellite_and_other_pay_television_and_radio"
    IssuingCardholderAuthorizationControls_BlockedCategories_CameraAndPhotographicSupplyStores -> "camera_and_photographic_supply_stores"
    IssuingCardholderAuthorizationControls_BlockedCategories_CandyNutAndConfectioneryStores -> "candy_nut_and_confectionery_stores"
    IssuingCardholderAuthorizationControls_BlockedCategories_CarAndTruckDealersNewUsed -> "car_and_truck_dealers_new_used"
    IssuingCardholderAuthorizationControls_BlockedCategories_CarAndTruckDealersUsedOnly -> "car_and_truck_dealers_used_only"
    IssuingCardholderAuthorizationControls_BlockedCategories_CarRentalAgencies -> "car_rental_agencies"
    IssuingCardholderAuthorizationControls_BlockedCategories_CarWashes -> "car_washes"
    IssuingCardholderAuthorizationControls_BlockedCategories_CarpentryServices -> "carpentry_services"
    IssuingCardholderAuthorizationControls_BlockedCategories_CarpetUpholsteryCleaning -> "carpet_upholstery_cleaning"
    IssuingCardholderAuthorizationControls_BlockedCategories_Caterers -> "caterers"
    IssuingCardholderAuthorizationControls_BlockedCategories_CharitableAndSocialServiceOrganizationsFundraising -> "charitable_and_social_service_organizations_fundraising"
    IssuingCardholderAuthorizationControls_BlockedCategories_ChemicalsAndAlliedProducts -> "chemicals_and_allied_products"
    IssuingCardholderAuthorizationControls_BlockedCategories_ChidrensAndInfantsWearStores -> "chidrens_and_infants_wear_stores"
    IssuingCardholderAuthorizationControls_BlockedCategories_ChildCareServices -> "child_care_services"
    IssuingCardholderAuthorizationControls_BlockedCategories_ChiropodistsPodiatrists -> "chiropodists_podiatrists"
    IssuingCardholderAuthorizationControls_BlockedCategories_Chiropractors -> "chiropractors"
    IssuingCardholderAuthorizationControls_BlockedCategories_CigarStoresAndStands -> "cigar_stores_and_stands"
    IssuingCardholderAuthorizationControls_BlockedCategories_CivicSocialFraternalAssociations -> "civic_social_fraternal_associations"
    IssuingCardholderAuthorizationControls_BlockedCategories_CleaningAndMaintenance -> "cleaning_and_maintenance"
    IssuingCardholderAuthorizationControls_BlockedCategories_ClothingRental -> "clothing_rental"
    IssuingCardholderAuthorizationControls_BlockedCategories_CollegesUniversities -> "colleges_universities"
    IssuingCardholderAuthorizationControls_BlockedCategories_CommercialEquipment -> "commercial_equipment"
    IssuingCardholderAuthorizationControls_BlockedCategories_CommercialFootwear -> "commercial_footwear"
    IssuingCardholderAuthorizationControls_BlockedCategories_CommercialPhotographyArtAndGraphics -> "commercial_photography_art_and_graphics"
    IssuingCardholderAuthorizationControls_BlockedCategories_CommuterTransportAndFerries -> "commuter_transport_and_ferries"
    IssuingCardholderAuthorizationControls_BlockedCategories_ComputerNetworkServices -> "computer_network_services"
    IssuingCardholderAuthorizationControls_BlockedCategories_ComputerProgramming -> "computer_programming"
    IssuingCardholderAuthorizationControls_BlockedCategories_ComputerRepair -> "computer_repair"
    IssuingCardholderAuthorizationControls_BlockedCategories_ComputerSoftwareStores -> "computer_software_stores"
    IssuingCardholderAuthorizationControls_BlockedCategories_ComputersPeripheralsAndSoftware -> "computers_peripherals_and_software"
    IssuingCardholderAuthorizationControls_BlockedCategories_ConcreteWorkServices -> "concrete_work_services"
    IssuingCardholderAuthorizationControls_BlockedCategories_ConstructionMaterials -> "construction_materials"
    IssuingCardholderAuthorizationControls_BlockedCategories_ConsultingPublicRelations -> "consulting_public_relations"
    IssuingCardholderAuthorizationControls_BlockedCategories_CorrespondenceSchools -> "correspondence_schools"
    IssuingCardholderAuthorizationControls_BlockedCategories_CosmeticStores -> "cosmetic_stores"
    IssuingCardholderAuthorizationControls_BlockedCategories_CounselingServices -> "counseling_services"
    IssuingCardholderAuthorizationControls_BlockedCategories_CountryClubs -> "country_clubs"
    IssuingCardholderAuthorizationControls_BlockedCategories_CourierServices -> "courier_services"
    IssuingCardholderAuthorizationControls_BlockedCategories_CourtCosts -> "court_costs"
    IssuingCardholderAuthorizationControls_BlockedCategories_CreditReportingAgencies -> "credit_reporting_agencies"
    IssuingCardholderAuthorizationControls_BlockedCategories_CruiseLines -> "cruise_lines"
    IssuingCardholderAuthorizationControls_BlockedCategories_DairyProductsStores -> "dairy_products_stores"
    IssuingCardholderAuthorizationControls_BlockedCategories_DanceHallStudiosSchools -> "dance_hall_studios_schools"
    IssuingCardholderAuthorizationControls_BlockedCategories_DatingEscortServices -> "dating_escort_services"
    IssuingCardholderAuthorizationControls_BlockedCategories_DentistsOrthodontists -> "dentists_orthodontists"
    IssuingCardholderAuthorizationControls_BlockedCategories_DepartmentStores -> "department_stores"
    IssuingCardholderAuthorizationControls_BlockedCategories_DetectiveAgencies -> "detective_agencies"
    IssuingCardholderAuthorizationControls_BlockedCategories_DigitalGoodsApplications -> "digital_goods_applications"
    IssuingCardholderAuthorizationControls_BlockedCategories_DirectMarketingCatalogMerchant -> "direct_marketing_catalog_merchant"
    IssuingCardholderAuthorizationControls_BlockedCategories_DirectMarketingCombinationCatalogAndRetailMerchant -> "direct_marketing_combination_catalog_and_retail_merchant"
    IssuingCardholderAuthorizationControls_BlockedCategories_DirectMarketingInboundTelemarketing -> "direct_marketing_inbound_telemarketing"
    IssuingCardholderAuthorizationControls_BlockedCategories_DirectMarketingInsuranceServices -> "direct_marketing_insurance_services"
    IssuingCardholderAuthorizationControls_BlockedCategories_DirectMarketingOther -> "direct_marketing_other"
    IssuingCardholderAuthorizationControls_BlockedCategories_DirectMarketingOutboundTelemarketing -> "direct_marketing_outbound_telemarketing"
    IssuingCardholderAuthorizationControls_BlockedCategories_DirectMarketingSubscription -> "direct_marketing_subscription"
    IssuingCardholderAuthorizationControls_BlockedCategories_DirectMarketingTravel -> "direct_marketing_travel"
    IssuingCardholderAuthorizationControls_BlockedCategories_DiscountStores -> "discount_stores"
    IssuingCardholderAuthorizationControls_BlockedCategories_Doctors -> "doctors"
    IssuingCardholderAuthorizationControls_BlockedCategories_DoorToDoorSales -> "door_to_door_sales"
    IssuingCardholderAuthorizationControls_BlockedCategories_DraperyWindowCoveringAndUpholsteryStores -> "drapery_window_covering_and_upholstery_stores"
    IssuingCardholderAuthorizationControls_BlockedCategories_DrinkingPlaces -> "drinking_places"
    IssuingCardholderAuthorizationControls_BlockedCategories_DrugStoresAndPharmacies -> "drug_stores_and_pharmacies"
    IssuingCardholderAuthorizationControls_BlockedCategories_DrugsDrugProprietariesAndDruggistSundries -> "drugs_drug_proprietaries_and_druggist_sundries"
    IssuingCardholderAuthorizationControls_BlockedCategories_DryCleaners -> "dry_cleaners"
    IssuingCardholderAuthorizationControls_BlockedCategories_DurableGoods -> "durable_goods"
    IssuingCardholderAuthorizationControls_BlockedCategories_DutyFreeStores -> "duty_free_stores"
    IssuingCardholderAuthorizationControls_BlockedCategories_EatingPlacesRestaurants -> "eating_places_restaurants"
    IssuingCardholderAuthorizationControls_BlockedCategories_EducationalServices -> "educational_services"
    IssuingCardholderAuthorizationControls_BlockedCategories_ElectricRazorStores -> "electric_razor_stores"
    IssuingCardholderAuthorizationControls_BlockedCategories_ElectricalPartsAndEquipment -> "electrical_parts_and_equipment"
    IssuingCardholderAuthorizationControls_BlockedCategories_ElectricalServices -> "electrical_services"
    IssuingCardholderAuthorizationControls_BlockedCategories_ElectronicsRepairShops -> "electronics_repair_shops"
    IssuingCardholderAuthorizationControls_BlockedCategories_ElectronicsStores -> "electronics_stores"
    IssuingCardholderAuthorizationControls_BlockedCategories_ElementarySecondarySchools -> "elementary_secondary_schools"
    IssuingCardholderAuthorizationControls_BlockedCategories_EmploymentTempAgencies -> "employment_temp_agencies"
    IssuingCardholderAuthorizationControls_BlockedCategories_EquipmentRental -> "equipment_rental"
    IssuingCardholderAuthorizationControls_BlockedCategories_ExterminatingServices -> "exterminating_services"
    IssuingCardholderAuthorizationControls_BlockedCategories_FamilyClothingStores -> "family_clothing_stores"
    IssuingCardholderAuthorizationControls_BlockedCategories_FastFoodRestaurants -> "fast_food_restaurants"
    IssuingCardholderAuthorizationControls_BlockedCategories_FinancialInstitutions -> "financial_institutions"
    IssuingCardholderAuthorizationControls_BlockedCategories_FinesGovernmentAdministrativeEntities -> "fines_government_administrative_entities"
    IssuingCardholderAuthorizationControls_BlockedCategories_FireplaceFireplaceScreensAndAccessoriesStores -> "fireplace_fireplace_screens_and_accessories_stores"
    IssuingCardholderAuthorizationControls_BlockedCategories_FloorCoveringStores -> "floor_covering_stores"
    IssuingCardholderAuthorizationControls_BlockedCategories_Florists -> "florists"
    IssuingCardholderAuthorizationControls_BlockedCategories_FloristsSuppliesNurseryStockAndFlowers -> "florists_supplies_nursery_stock_and_flowers"
    IssuingCardholderAuthorizationControls_BlockedCategories_FreezerAndLockerMeatProvisioners -> "freezer_and_locker_meat_provisioners"
    IssuingCardholderAuthorizationControls_BlockedCategories_FuelDealersNonAutomotive -> "fuel_dealers_non_automotive"
    IssuingCardholderAuthorizationControls_BlockedCategories_FuneralServicesCrematories -> "funeral_services_crematories"
    IssuingCardholderAuthorizationControls_BlockedCategories_FurnitureHomeFurnishingsAndEquipmentStoresExceptAppliances -> "furniture_home_furnishings_and_equipment_stores_except_appliances"
    IssuingCardholderAuthorizationControls_BlockedCategories_FurnitureRepairRefinishing -> "furniture_repair_refinishing"
    IssuingCardholderAuthorizationControls_BlockedCategories_FurriersAndFurShops -> "furriers_and_fur_shops"
    IssuingCardholderAuthorizationControls_BlockedCategories_GeneralServices -> "general_services"
    IssuingCardholderAuthorizationControls_BlockedCategories_GiftCardNoveltyAndSouvenirShops -> "gift_card_novelty_and_souvenir_shops"
    IssuingCardholderAuthorizationControls_BlockedCategories_GlassPaintAndWallpaperStores -> "glass_paint_and_wallpaper_stores"
    IssuingCardholderAuthorizationControls_BlockedCategories_GlasswareCrystalStores -> "glassware_crystal_stores"
    IssuingCardholderAuthorizationControls_BlockedCategories_GolfCoursesPublic -> "golf_courses_public"
    IssuingCardholderAuthorizationControls_BlockedCategories_GovernmentServices -> "government_services"
    IssuingCardholderAuthorizationControls_BlockedCategories_GroceryStoresSupermarkets -> "grocery_stores_supermarkets"
    IssuingCardholderAuthorizationControls_BlockedCategories_HardwareEquipmentAndSupplies -> "hardware_equipment_and_supplies"
    IssuingCardholderAuthorizationControls_BlockedCategories_HardwareStores -> "hardware_stores"
    IssuingCardholderAuthorizationControls_BlockedCategories_HealthAndBeautySpas -> "health_and_beauty_spas"
    IssuingCardholderAuthorizationControls_BlockedCategories_HearingAidsSalesAndSupplies -> "hearing_aids_sales_and_supplies"
    IssuingCardholderAuthorizationControls_BlockedCategories_HeatingPlumbingAC -> "heating_plumbing_a_c"
    IssuingCardholderAuthorizationControls_BlockedCategories_HobbyToyAndGameShops -> "hobby_toy_and_game_shops"
    IssuingCardholderAuthorizationControls_BlockedCategories_HomeSupplyWarehouseStores -> "home_supply_warehouse_stores"
    IssuingCardholderAuthorizationControls_BlockedCategories_Hospitals -> "hospitals"
    IssuingCardholderAuthorizationControls_BlockedCategories_HotelsMotelsAndResorts -> "hotels_motels_and_resorts"
    IssuingCardholderAuthorizationControls_BlockedCategories_HouseholdApplianceStores -> "household_appliance_stores"
    IssuingCardholderAuthorizationControls_BlockedCategories_IndustrialSupplies -> "industrial_supplies"
    IssuingCardholderAuthorizationControls_BlockedCategories_InformationRetrievalServices -> "information_retrieval_services"
    IssuingCardholderAuthorizationControls_BlockedCategories_InsuranceDefault -> "insurance_default"
    IssuingCardholderAuthorizationControls_BlockedCategories_InsuranceUnderwritingPremiums -> "insurance_underwriting_premiums"
    IssuingCardholderAuthorizationControls_BlockedCategories_IntraCompanyPurchases -> "intra_company_purchases"
    IssuingCardholderAuthorizationControls_BlockedCategories_JewelryStoresWatchesClocksAndSilverwareStores -> "jewelry_stores_watches_clocks_and_silverware_stores"
    IssuingCardholderAuthorizationControls_BlockedCategories_LandscapingServices -> "landscaping_services"
    IssuingCardholderAuthorizationControls_BlockedCategories_Laundries -> "laundries"
    IssuingCardholderAuthorizationControls_BlockedCategories_LaundryCleaningServices -> "laundry_cleaning_services"
    IssuingCardholderAuthorizationControls_BlockedCategories_LegalServicesAttorneys -> "legal_services_attorneys"
    IssuingCardholderAuthorizationControls_BlockedCategories_LuggageAndLeatherGoodsStores -> "luggage_and_leather_goods_stores"
    IssuingCardholderAuthorizationControls_BlockedCategories_LumberBuildingMaterialsStores -> "lumber_building_materials_stores"
    IssuingCardholderAuthorizationControls_BlockedCategories_ManualCashDisburse -> "manual_cash_disburse"
    IssuingCardholderAuthorizationControls_BlockedCategories_MarinasServiceAndSupplies -> "marinas_service_and_supplies"
    IssuingCardholderAuthorizationControls_BlockedCategories_MasonryStoneworkAndPlaster -> "masonry_stonework_and_plaster"
    IssuingCardholderAuthorizationControls_BlockedCategories_MassageParlors -> "massage_parlors"
    IssuingCardholderAuthorizationControls_BlockedCategories_MedicalAndDentalLabs -> "medical_and_dental_labs"
    IssuingCardholderAuthorizationControls_BlockedCategories_MedicalDentalOphthalmicAndHospitalEquipmentAndSupplies -> "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
    IssuingCardholderAuthorizationControls_BlockedCategories_MedicalServices -> "medical_services"
    IssuingCardholderAuthorizationControls_BlockedCategories_MembershipOrganizations -> "membership_organizations"
    IssuingCardholderAuthorizationControls_BlockedCategories_MensAndBoysClothingAndAccessoriesStores -> "mens_and_boys_clothing_and_accessories_stores"
    IssuingCardholderAuthorizationControls_BlockedCategories_MensWomensClothingStores -> "mens_womens_clothing_stores"
    IssuingCardholderAuthorizationControls_BlockedCategories_MetalServiceCenters -> "metal_service_centers"
    IssuingCardholderAuthorizationControls_BlockedCategories_Miscellaneous -> "miscellaneous"
    IssuingCardholderAuthorizationControls_BlockedCategories_MiscellaneousApparelAndAccessoryShops -> "miscellaneous_apparel_and_accessory_shops"
    IssuingCardholderAuthorizationControls_BlockedCategories_MiscellaneousAutoDealers -> "miscellaneous_auto_dealers"
    IssuingCardholderAuthorizationControls_BlockedCategories_MiscellaneousBusinessServices -> "miscellaneous_business_services"
    IssuingCardholderAuthorizationControls_BlockedCategories_MiscellaneousFoodStores -> "miscellaneous_food_stores"
    IssuingCardholderAuthorizationControls_BlockedCategories_MiscellaneousGeneralMerchandise -> "miscellaneous_general_merchandise"
    IssuingCardholderAuthorizationControls_BlockedCategories_MiscellaneousGeneralServices -> "miscellaneous_general_services"
    IssuingCardholderAuthorizationControls_BlockedCategories_MiscellaneousHomeFurnishingSpecialtyStores -> "miscellaneous_home_furnishing_specialty_stores"
    IssuingCardholderAuthorizationControls_BlockedCategories_MiscellaneousPublishingAndPrinting -> "miscellaneous_publishing_and_printing"
    IssuingCardholderAuthorizationControls_BlockedCategories_MiscellaneousRecreationServices -> "miscellaneous_recreation_services"
    IssuingCardholderAuthorizationControls_BlockedCategories_MiscellaneousRepairShops -> "miscellaneous_repair_shops"
    IssuingCardholderAuthorizationControls_BlockedCategories_MiscellaneousSpecialtyRetail -> "miscellaneous_specialty_retail"
    IssuingCardholderAuthorizationControls_BlockedCategories_MobileHomeDealers -> "mobile_home_dealers"
    IssuingCardholderAuthorizationControls_BlockedCategories_MotionPictureTheaters -> "motion_picture_theaters"
    IssuingCardholderAuthorizationControls_BlockedCategories_MotorFreightCarriersAndTrucking -> "motor_freight_carriers_and_trucking"
    IssuingCardholderAuthorizationControls_BlockedCategories_MotorHomesDealers -> "motor_homes_dealers"
    IssuingCardholderAuthorizationControls_BlockedCategories_MotorVehicleSuppliesAndNewParts -> "motor_vehicle_supplies_and_new_parts"
    IssuingCardholderAuthorizationControls_BlockedCategories_MotorcycleShopsAndDealers -> "motorcycle_shops_and_dealers"
    IssuingCardholderAuthorizationControls_BlockedCategories_MotorcycleShopsDealers -> "motorcycle_shops_dealers"
    IssuingCardholderAuthorizationControls_BlockedCategories_MusicStoresMusicalInstrumentsPianosAndSheetMusic -> "music_stores_musical_instruments_pianos_and_sheet_music"
    IssuingCardholderAuthorizationControls_BlockedCategories_NewsDealersAndNewsstands -> "news_dealers_and_newsstands"
    IssuingCardholderAuthorizationControls_BlockedCategories_NonFiMoneyOrders -> "non_fi_money_orders"
    IssuingCardholderAuthorizationControls_BlockedCategories_NonFiStoredValueCardPurchaseLoad -> "non_fi_stored_value_card_purchase_load"
    IssuingCardholderAuthorizationControls_BlockedCategories_NondurableGoods -> "nondurable_goods"
    IssuingCardholderAuthorizationControls_BlockedCategories_NurseriesLawnAndGardenSupplyStores -> "nurseries_lawn_and_garden_supply_stores"
    IssuingCardholderAuthorizationControls_BlockedCategories_NursingPersonalCare -> "nursing_personal_care"
    IssuingCardholderAuthorizationControls_BlockedCategories_OfficeAndCommercialFurniture -> "office_and_commercial_furniture"
    IssuingCardholderAuthorizationControls_BlockedCategories_OpticiansEyeglasses -> "opticians_eyeglasses"
    IssuingCardholderAuthorizationControls_BlockedCategories_OptometristsOphthalmologist -> "optometrists_ophthalmologist"
    IssuingCardholderAuthorizationControls_BlockedCategories_OrthopedicGoodsProstheticDevices -> "orthopedic_goods_prosthetic_devices"
    IssuingCardholderAuthorizationControls_BlockedCategories_Osteopaths -> "osteopaths"
    IssuingCardholderAuthorizationControls_BlockedCategories_PackageStoresBeerWineAndLiquor -> "package_stores_beer_wine_and_liquor"
    IssuingCardholderAuthorizationControls_BlockedCategories_PaintsVarnishesAndSupplies -> "paints_varnishes_and_supplies"
    IssuingCardholderAuthorizationControls_BlockedCategories_ParkingLotsGarages -> "parking_lots_garages"
    IssuingCardholderAuthorizationControls_BlockedCategories_PassengerRailways -> "passenger_railways"
    IssuingCardholderAuthorizationControls_BlockedCategories_PawnShops -> "pawn_shops"
    IssuingCardholderAuthorizationControls_BlockedCategories_PetShopsPetFoodAndSupplies -> "pet_shops_pet_food_and_supplies"
    IssuingCardholderAuthorizationControls_BlockedCategories_PetroleumAndPetroleumProducts -> "petroleum_and_petroleum_products"
    IssuingCardholderAuthorizationControls_BlockedCategories_PhotoDeveloping -> "photo_developing"
    IssuingCardholderAuthorizationControls_BlockedCategories_PhotographicPhotocopyMicrofilmEquipmentAndSupplies -> "photographic_photocopy_microfilm_equipment_and_supplies"
    IssuingCardholderAuthorizationControls_BlockedCategories_PhotographicStudios -> "photographic_studios"
    IssuingCardholderAuthorizationControls_BlockedCategories_PictureVideoProduction -> "picture_video_production"
    IssuingCardholderAuthorizationControls_BlockedCategories_PieceGoodsNotionsAndOtherDryGoods -> "piece_goods_notions_and_other_dry_goods"
    IssuingCardholderAuthorizationControls_BlockedCategories_PlumbingHeatingEquipmentAndSupplies -> "plumbing_heating_equipment_and_supplies"
    IssuingCardholderAuthorizationControls_BlockedCategories_PoliticalOrganizations -> "political_organizations"
    IssuingCardholderAuthorizationControls_BlockedCategories_PostalServicesGovernmentOnly -> "postal_services_government_only"
    IssuingCardholderAuthorizationControls_BlockedCategories_PreciousStonesAndMetalsWatchesAndJewelry -> "precious_stones_and_metals_watches_and_jewelry"
    IssuingCardholderAuthorizationControls_BlockedCategories_ProfessionalServices -> "professional_services"
    IssuingCardholderAuthorizationControls_BlockedCategories_PublicWarehousingAndStorage -> "public_warehousing_and_storage"
    IssuingCardholderAuthorizationControls_BlockedCategories_QuickCopyReproAndBlueprint -> "quick_copy_repro_and_blueprint"
    IssuingCardholderAuthorizationControls_BlockedCategories_Railroads -> "railroads"
    IssuingCardholderAuthorizationControls_BlockedCategories_RealEstateAgentsAndManagersRentals -> "real_estate_agents_and_managers_rentals"
    IssuingCardholderAuthorizationControls_BlockedCategories_RecordStores -> "record_stores"
    IssuingCardholderAuthorizationControls_BlockedCategories_RecreationalVehicleRentals -> "recreational_vehicle_rentals"
    IssuingCardholderAuthorizationControls_BlockedCategories_ReligiousGoodsStores -> "religious_goods_stores"
    IssuingCardholderAuthorizationControls_BlockedCategories_ReligiousOrganizations -> "religious_organizations"
    IssuingCardholderAuthorizationControls_BlockedCategories_RoofingSidingSheetMetal -> "roofing_siding_sheet_metal"
    IssuingCardholderAuthorizationControls_BlockedCategories_SecretarialSupportServices -> "secretarial_support_services"
    IssuingCardholderAuthorizationControls_BlockedCategories_SecurityBrokersDealers -> "security_brokers_dealers"
    IssuingCardholderAuthorizationControls_BlockedCategories_ServiceStations -> "service_stations"
    IssuingCardholderAuthorizationControls_BlockedCategories_SewingNeedleworkFabricAndPieceGoodsStores -> "sewing_needlework_fabric_and_piece_goods_stores"
    IssuingCardholderAuthorizationControls_BlockedCategories_ShoeRepairHatCleaning -> "shoe_repair_hat_cleaning"
    IssuingCardholderAuthorizationControls_BlockedCategories_ShoeStores -> "shoe_stores"
    IssuingCardholderAuthorizationControls_BlockedCategories_SmallApplianceRepair -> "small_appliance_repair"
    IssuingCardholderAuthorizationControls_BlockedCategories_SnowmobileDealers -> "snowmobile_dealers"
    IssuingCardholderAuthorizationControls_BlockedCategories_SpecialTradeServices -> "special_trade_services"
    IssuingCardholderAuthorizationControls_BlockedCategories_SpecialtyCleaning -> "specialty_cleaning"
    IssuingCardholderAuthorizationControls_BlockedCategories_SportingGoodsStores -> "sporting_goods_stores"
    IssuingCardholderAuthorizationControls_BlockedCategories_SportingRecreationCamps -> "sporting_recreation_camps"
    IssuingCardholderAuthorizationControls_BlockedCategories_SportsAndRidingApparelStores -> "sports_and_riding_apparel_stores"
    IssuingCardholderAuthorizationControls_BlockedCategories_SportsClubsFields -> "sports_clubs_fields"
    IssuingCardholderAuthorizationControls_BlockedCategories_StampAndCoinStores -> "stamp_and_coin_stores"
    IssuingCardholderAuthorizationControls_BlockedCategories_StationaryOfficeSuppliesPrintingAndWritingPaper -> "stationary_office_supplies_printing_and_writing_paper"
    IssuingCardholderAuthorizationControls_BlockedCategories_StationeryStoresOfficeAndSchoolSupplyStores -> "stationery_stores_office_and_school_supply_stores"
    IssuingCardholderAuthorizationControls_BlockedCategories_SwimmingPoolsSales -> "swimming_pools_sales"
    IssuingCardholderAuthorizationControls_BlockedCategories_TUiTravelGermany -> "t_ui_travel_germany"
    IssuingCardholderAuthorizationControls_BlockedCategories_TailorsAlterations -> "tailors_alterations"
    IssuingCardholderAuthorizationControls_BlockedCategories_TaxPaymentsGovernmentAgencies -> "tax_payments_government_agencies"
    IssuingCardholderAuthorizationControls_BlockedCategories_TaxPreparationServices -> "tax_preparation_services"
    IssuingCardholderAuthorizationControls_BlockedCategories_TaxicabsLimousines -> "taxicabs_limousines"
    IssuingCardholderAuthorizationControls_BlockedCategories_TelecommunicationEquipmentAndTelephoneSales -> "telecommunication_equipment_and_telephone_sales"
    IssuingCardholderAuthorizationControls_BlockedCategories_TelecommunicationServices -> "telecommunication_services"
    IssuingCardholderAuthorizationControls_BlockedCategories_TelegraphServices -> "telegraph_services"
    IssuingCardholderAuthorizationControls_BlockedCategories_TentAndAwningShops -> "tent_and_awning_shops"
    IssuingCardholderAuthorizationControls_BlockedCategories_TestingLaboratories -> "testing_laboratories"
    IssuingCardholderAuthorizationControls_BlockedCategories_TheatricalTicketAgencies -> "theatrical_ticket_agencies"
    IssuingCardholderAuthorizationControls_BlockedCategories_Timeshares -> "timeshares"
    IssuingCardholderAuthorizationControls_BlockedCategories_TireRetreadingAndRepair -> "tire_retreading_and_repair"
    IssuingCardholderAuthorizationControls_BlockedCategories_TollsBridgeFees -> "tolls_bridge_fees"
    IssuingCardholderAuthorizationControls_BlockedCategories_TouristAttractionsAndExhibits -> "tourist_attractions_and_exhibits"
    IssuingCardholderAuthorizationControls_BlockedCategories_TowingServices -> "towing_services"
    IssuingCardholderAuthorizationControls_BlockedCategories_TrailerParksCampgrounds -> "trailer_parks_campgrounds"
    IssuingCardholderAuthorizationControls_BlockedCategories_TransportationServices -> "transportation_services"
    IssuingCardholderAuthorizationControls_BlockedCategories_TravelAgenciesTourOperators -> "travel_agencies_tour_operators"
    IssuingCardholderAuthorizationControls_BlockedCategories_TruckStopIteration -> "truck_stop_iteration"
    IssuingCardholderAuthorizationControls_BlockedCategories_TruckUtilityTrailerRentals -> "truck_utility_trailer_rentals"
    IssuingCardholderAuthorizationControls_BlockedCategories_TypesettingPlateMakingAndRelatedServices -> "typesetting_plate_making_and_related_services"
    IssuingCardholderAuthorizationControls_BlockedCategories_TypewriterStores -> "typewriter_stores"
    IssuingCardholderAuthorizationControls_BlockedCategories_USFederalGovernmentAgenciesOrDepartments -> "u_s_federal_government_agencies_or_departments"
    IssuingCardholderAuthorizationControls_BlockedCategories_UniformsCommercialClothing -> "uniforms_commercial_clothing"
    IssuingCardholderAuthorizationControls_BlockedCategories_UsedMerchandiseAndSecondhandStores -> "used_merchandise_and_secondhand_stores"
    IssuingCardholderAuthorizationControls_BlockedCategories_Utilities -> "utilities"
    IssuingCardholderAuthorizationControls_BlockedCategories_VarietyStores -> "variety_stores"
    IssuingCardholderAuthorizationControls_BlockedCategories_VeterinaryServices -> "veterinary_services"
    IssuingCardholderAuthorizationControls_BlockedCategories_VideoAmusementGameSupplies -> "video_amusement_game_supplies"
    IssuingCardholderAuthorizationControls_BlockedCategories_VideoGameArcades -> "video_game_arcades"
    IssuingCardholderAuthorizationControls_BlockedCategories_VideoTapeRentalStores -> "video_tape_rental_stores"
    IssuingCardholderAuthorizationControls_BlockedCategories_VocationalTradeSchools -> "vocational_trade_schools"
    IssuingCardholderAuthorizationControls_BlockedCategories_WatchJewelryRepair -> "watch_jewelry_repair"
    IssuingCardholderAuthorizationControls_BlockedCategories_WeldingRepair -> "welding_repair"
    IssuingCardholderAuthorizationControls_BlockedCategories_WholesaleClubs -> "wholesale_clubs"
    IssuingCardholderAuthorizationControls_BlockedCategories_WigAndToupeeStores -> "wig_and_toupee_stores"
    IssuingCardholderAuthorizationControls_BlockedCategories_WiresMoneyOrders -> "wires_money_orders"
    IssuingCardholderAuthorizationControls_BlockedCategories_WomensAccessoryAndSpecialtyShops -> "womens_accessory_and_specialty_shops"
    IssuingCardholderAuthorizationControls_BlockedCategories_WomensReadyToWearStores -> "womens_ready_to_wear_stores"
    IssuingCardholderAuthorizationControls_BlockedCategories_WreckingAndSalvageYards -> "wrecking_and_salvage_yards"

instance FromJSON IssuingCardholderAuthorizationControls_BlockedCategories where
  parseJSON = withText "IssuingCardholderAuthorizationControls_BlockedCategories" $ \case
    "ac_refrigeration_repair" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_AcRefrigerationRepair
    "accounting_bookkeeping_services" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_AccountingBookkeepingServices
    "advertising_services" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_AdvertisingServices
    "agricultural_cooperative" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_AgriculturalCooperative
    "airlines_air_carriers" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_AirlinesAirCarriers
    "airports_flying_fields" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_AirportsFlyingFields
    "ambulance_services" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_AmbulanceServices
    "amusement_parks_carnivals" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_AmusementParksCarnivals
    "antique_reproductions" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_AntiqueReproductions
    "antique_shops" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_AntiqueShops
    "aquariums" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_Aquariums
    "architectural_surveying_services" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_ArchitecturalSurveyingServices
    "art_dealers_and_galleries" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_ArtDealersAndGalleries
    "artists_supply_and_craft_shops" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_ArtistsSupplyAndCraftShops
    "auto_and_home_supply_stores" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_AutoAndHomeSupplyStores
    "auto_body_repair_shops" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_AutoBodyRepairShops
    "auto_paint_shops" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_AutoPaintShops
    "auto_service_shops" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_AutoServiceShops
    "automated_cash_disburse" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_AutomatedCashDisburse
    "automated_fuel_dispensers" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_AutomatedFuelDispensers
    "automobile_associations" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_AutomobileAssociations
    "automotive_parts_and_accessories_stores" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_AutomotivePartsAndAccessoriesStores
    "automotive_tire_stores" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_AutomotiveTireStores
    "bail_and_bond_payments" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_BailAndBondPayments
    "bakeries" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_Bakeries
    "bands_orchestras" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_BandsOrchestras
    "barber_and_beauty_shops" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_BarberAndBeautyShops
    "betting_casino_gambling" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_BettingCasinoGambling
    "bicycle_shops" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_BicycleShops
    "billiard_pool_establishments" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_BilliardPoolEstablishments
    "boat_dealers" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_BoatDealers
    "boat_rentals_and_leases" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_BoatRentalsAndLeases
    "book_stores" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_BookStores
    "books_periodicals_and_newspapers" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_BooksPeriodicalsAndNewspapers
    "bowling_alleys" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_BowlingAlleys
    "bus_lines" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_BusLines
    "business_secretarial_schools" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_BusinessSecretarialSchools
    "buying_shopping_services" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_BuyingShoppingServices
    "cable_satellite_and_other_pay_television_and_radio" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_CableSatelliteAndOtherPayTelevisionAndRadio
    "camera_and_photographic_supply_stores" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_CameraAndPhotographicSupplyStores
    "candy_nut_and_confectionery_stores" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_CandyNutAndConfectioneryStores
    "car_and_truck_dealers_new_used" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_CarAndTruckDealersNewUsed
    "car_and_truck_dealers_used_only" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_CarAndTruckDealersUsedOnly
    "car_rental_agencies" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_CarRentalAgencies
    "car_washes" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_CarWashes
    "carpentry_services" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_CarpentryServices
    "carpet_upholstery_cleaning" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_CarpetUpholsteryCleaning
    "caterers" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_Caterers
    "charitable_and_social_service_organizations_fundraising" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_CharitableAndSocialServiceOrganizationsFundraising
    "chemicals_and_allied_products" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_ChemicalsAndAlliedProducts
    "chidrens_and_infants_wear_stores" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_ChidrensAndInfantsWearStores
    "child_care_services" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_ChildCareServices
    "chiropodists_podiatrists" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_ChiropodistsPodiatrists
    "chiropractors" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_Chiropractors
    "cigar_stores_and_stands" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_CigarStoresAndStands
    "civic_social_fraternal_associations" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_CivicSocialFraternalAssociations
    "cleaning_and_maintenance" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_CleaningAndMaintenance
    "clothing_rental" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_ClothingRental
    "colleges_universities" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_CollegesUniversities
    "commercial_equipment" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_CommercialEquipment
    "commercial_footwear" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_CommercialFootwear
    "commercial_photography_art_and_graphics" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_CommercialPhotographyArtAndGraphics
    "commuter_transport_and_ferries" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_CommuterTransportAndFerries
    "computer_network_services" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_ComputerNetworkServices
    "computer_programming" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_ComputerProgramming
    "computer_repair" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_ComputerRepair
    "computer_software_stores" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_ComputerSoftwareStores
    "computers_peripherals_and_software" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_ComputersPeripheralsAndSoftware
    "concrete_work_services" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_ConcreteWorkServices
    "construction_materials" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_ConstructionMaterials
    "consulting_public_relations" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_ConsultingPublicRelations
    "correspondence_schools" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_CorrespondenceSchools
    "cosmetic_stores" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_CosmeticStores
    "counseling_services" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_CounselingServices
    "country_clubs" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_CountryClubs
    "courier_services" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_CourierServices
    "court_costs" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_CourtCosts
    "credit_reporting_agencies" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_CreditReportingAgencies
    "cruise_lines" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_CruiseLines
    "dairy_products_stores" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_DairyProductsStores
    "dance_hall_studios_schools" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_DanceHallStudiosSchools
    "dating_escort_services" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_DatingEscortServices
    "dentists_orthodontists" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_DentistsOrthodontists
    "department_stores" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_DepartmentStores
    "detective_agencies" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_DetectiveAgencies
    "digital_goods_applications" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_DigitalGoodsApplications
    "direct_marketing_catalog_merchant" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_DirectMarketingCatalogMerchant
    "direct_marketing_combination_catalog_and_retail_merchant" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_DirectMarketingCombinationCatalogAndRetailMerchant
    "direct_marketing_inbound_telemarketing" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_DirectMarketingInboundTelemarketing
    "direct_marketing_insurance_services" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_DirectMarketingInsuranceServices
    "direct_marketing_other" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_DirectMarketingOther
    "direct_marketing_outbound_telemarketing" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_DirectMarketingOutboundTelemarketing
    "direct_marketing_subscription" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_DirectMarketingSubscription
    "direct_marketing_travel" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_DirectMarketingTravel
    "discount_stores" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_DiscountStores
    "doctors" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_Doctors
    "door_to_door_sales" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_DoorToDoorSales
    "drapery_window_covering_and_upholstery_stores" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_DraperyWindowCoveringAndUpholsteryStores
    "drinking_places" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_DrinkingPlaces
    "drug_stores_and_pharmacies" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_DrugStoresAndPharmacies
    "drugs_drug_proprietaries_and_druggist_sundries" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_DrugsDrugProprietariesAndDruggistSundries
    "dry_cleaners" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_DryCleaners
    "durable_goods" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_DurableGoods
    "duty_free_stores" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_DutyFreeStores
    "eating_places_restaurants" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_EatingPlacesRestaurants
    "educational_services" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_EducationalServices
    "electric_razor_stores" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_ElectricRazorStores
    "electrical_parts_and_equipment" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_ElectricalPartsAndEquipment
    "electrical_services" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_ElectricalServices
    "electronics_repair_shops" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_ElectronicsRepairShops
    "electronics_stores" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_ElectronicsStores
    "elementary_secondary_schools" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_ElementarySecondarySchools
    "employment_temp_agencies" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_EmploymentTempAgencies
    "equipment_rental" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_EquipmentRental
    "exterminating_services" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_ExterminatingServices
    "family_clothing_stores" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_FamilyClothingStores
    "fast_food_restaurants" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_FastFoodRestaurants
    "financial_institutions" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_FinancialInstitutions
    "fines_government_administrative_entities" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_FinesGovernmentAdministrativeEntities
    "fireplace_fireplace_screens_and_accessories_stores" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_FireplaceFireplaceScreensAndAccessoriesStores
    "floor_covering_stores" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_FloorCoveringStores
    "florists" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_Florists
    "florists_supplies_nursery_stock_and_flowers" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_FloristsSuppliesNurseryStockAndFlowers
    "freezer_and_locker_meat_provisioners" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_FreezerAndLockerMeatProvisioners
    "fuel_dealers_non_automotive" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_FuelDealersNonAutomotive
    "funeral_services_crematories" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_FuneralServicesCrematories
    "furniture_home_furnishings_and_equipment_stores_except_appliances" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_FurnitureHomeFurnishingsAndEquipmentStoresExceptAppliances
    "furniture_repair_refinishing" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_FurnitureRepairRefinishing
    "furriers_and_fur_shops" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_FurriersAndFurShops
    "general_services" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_GeneralServices
    "gift_card_novelty_and_souvenir_shops" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_GiftCardNoveltyAndSouvenirShops
    "glass_paint_and_wallpaper_stores" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_GlassPaintAndWallpaperStores
    "glassware_crystal_stores" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_GlasswareCrystalStores
    "golf_courses_public" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_GolfCoursesPublic
    "government_services" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_GovernmentServices
    "grocery_stores_supermarkets" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_GroceryStoresSupermarkets
    "hardware_equipment_and_supplies" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_HardwareEquipmentAndSupplies
    "hardware_stores" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_HardwareStores
    "health_and_beauty_spas" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_HealthAndBeautySpas
    "hearing_aids_sales_and_supplies" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_HearingAidsSalesAndSupplies
    "heating_plumbing_a_c" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_HeatingPlumbingAC
    "hobby_toy_and_game_shops" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_HobbyToyAndGameShops
    "home_supply_warehouse_stores" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_HomeSupplyWarehouseStores
    "hospitals" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_Hospitals
    "hotels_motels_and_resorts" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_HotelsMotelsAndResorts
    "household_appliance_stores" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_HouseholdApplianceStores
    "industrial_supplies" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_IndustrialSupplies
    "information_retrieval_services" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_InformationRetrievalServices
    "insurance_default" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_InsuranceDefault
    "insurance_underwriting_premiums" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_InsuranceUnderwritingPremiums
    "intra_company_purchases" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_IntraCompanyPurchases
    "jewelry_stores_watches_clocks_and_silverware_stores" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_JewelryStoresWatchesClocksAndSilverwareStores
    "landscaping_services" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_LandscapingServices
    "laundries" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_Laundries
    "laundry_cleaning_services" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_LaundryCleaningServices
    "legal_services_attorneys" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_LegalServicesAttorneys
    "luggage_and_leather_goods_stores" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_LuggageAndLeatherGoodsStores
    "lumber_building_materials_stores" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_LumberBuildingMaterialsStores
    "manual_cash_disburse" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_ManualCashDisburse
    "marinas_service_and_supplies" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_MarinasServiceAndSupplies
    "masonry_stonework_and_plaster" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_MasonryStoneworkAndPlaster
    "massage_parlors" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_MassageParlors
    "medical_and_dental_labs" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_MedicalAndDentalLabs
    "medical_dental_ophthalmic_and_hospital_equipment_and_supplies" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_MedicalDentalOphthalmicAndHospitalEquipmentAndSupplies
    "medical_services" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_MedicalServices
    "membership_organizations" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_MembershipOrganizations
    "mens_and_boys_clothing_and_accessories_stores" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_MensAndBoysClothingAndAccessoriesStores
    "mens_womens_clothing_stores" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_MensWomensClothingStores
    "metal_service_centers" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_MetalServiceCenters
    "miscellaneous" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_Miscellaneous
    "miscellaneous_apparel_and_accessory_shops" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_MiscellaneousApparelAndAccessoryShops
    "miscellaneous_auto_dealers" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_MiscellaneousAutoDealers
    "miscellaneous_business_services" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_MiscellaneousBusinessServices
    "miscellaneous_food_stores" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_MiscellaneousFoodStores
    "miscellaneous_general_merchandise" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_MiscellaneousGeneralMerchandise
    "miscellaneous_general_services" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_MiscellaneousGeneralServices
    "miscellaneous_home_furnishing_specialty_stores" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_MiscellaneousHomeFurnishingSpecialtyStores
    "miscellaneous_publishing_and_printing" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_MiscellaneousPublishingAndPrinting
    "miscellaneous_recreation_services" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_MiscellaneousRecreationServices
    "miscellaneous_repair_shops" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_MiscellaneousRepairShops
    "miscellaneous_specialty_retail" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_MiscellaneousSpecialtyRetail
    "mobile_home_dealers" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_MobileHomeDealers
    "motion_picture_theaters" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_MotionPictureTheaters
    "motor_freight_carriers_and_trucking" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_MotorFreightCarriersAndTrucking
    "motor_homes_dealers" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_MotorHomesDealers
    "motor_vehicle_supplies_and_new_parts" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_MotorVehicleSuppliesAndNewParts
    "motorcycle_shops_and_dealers" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_MotorcycleShopsAndDealers
    "motorcycle_shops_dealers" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_MotorcycleShopsDealers
    "music_stores_musical_instruments_pianos_and_sheet_music" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_MusicStoresMusicalInstrumentsPianosAndSheetMusic
    "news_dealers_and_newsstands" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_NewsDealersAndNewsstands
    "non_fi_money_orders" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_NonFiMoneyOrders
    "non_fi_stored_value_card_purchase_load" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_NonFiStoredValueCardPurchaseLoad
    "nondurable_goods" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_NondurableGoods
    "nurseries_lawn_and_garden_supply_stores" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_NurseriesLawnAndGardenSupplyStores
    "nursing_personal_care" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_NursingPersonalCare
    "office_and_commercial_furniture" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_OfficeAndCommercialFurniture
    "opticians_eyeglasses" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_OpticiansEyeglasses
    "optometrists_ophthalmologist" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_OptometristsOphthalmologist
    "orthopedic_goods_prosthetic_devices" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_OrthopedicGoodsProstheticDevices
    "osteopaths" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_Osteopaths
    "package_stores_beer_wine_and_liquor" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_PackageStoresBeerWineAndLiquor
    "paints_varnishes_and_supplies" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_PaintsVarnishesAndSupplies
    "parking_lots_garages" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_ParkingLotsGarages
    "passenger_railways" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_PassengerRailways
    "pawn_shops" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_PawnShops
    "pet_shops_pet_food_and_supplies" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_PetShopsPetFoodAndSupplies
    "petroleum_and_petroleum_products" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_PetroleumAndPetroleumProducts
    "photo_developing" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_PhotoDeveloping
    "photographic_photocopy_microfilm_equipment_and_supplies" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_PhotographicPhotocopyMicrofilmEquipmentAndSupplies
    "photographic_studios" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_PhotographicStudios
    "picture_video_production" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_PictureVideoProduction
    "piece_goods_notions_and_other_dry_goods" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_PieceGoodsNotionsAndOtherDryGoods
    "plumbing_heating_equipment_and_supplies" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_PlumbingHeatingEquipmentAndSupplies
    "political_organizations" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_PoliticalOrganizations
    "postal_services_government_only" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_PostalServicesGovernmentOnly
    "precious_stones_and_metals_watches_and_jewelry" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_PreciousStonesAndMetalsWatchesAndJewelry
    "professional_services" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_ProfessionalServices
    "public_warehousing_and_storage" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_PublicWarehousingAndStorage
    "quick_copy_repro_and_blueprint" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_QuickCopyReproAndBlueprint
    "railroads" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_Railroads
    "real_estate_agents_and_managers_rentals" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_RealEstateAgentsAndManagersRentals
    "record_stores" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_RecordStores
    "recreational_vehicle_rentals" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_RecreationalVehicleRentals
    "religious_goods_stores" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_ReligiousGoodsStores
    "religious_organizations" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_ReligiousOrganizations
    "roofing_siding_sheet_metal" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_RoofingSidingSheetMetal
    "secretarial_support_services" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_SecretarialSupportServices
    "security_brokers_dealers" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_SecurityBrokersDealers
    "service_stations" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_ServiceStations
    "sewing_needlework_fabric_and_piece_goods_stores" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_SewingNeedleworkFabricAndPieceGoodsStores
    "shoe_repair_hat_cleaning" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_ShoeRepairHatCleaning
    "shoe_stores" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_ShoeStores
    "small_appliance_repair" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_SmallApplianceRepair
    "snowmobile_dealers" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_SnowmobileDealers
    "special_trade_services" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_SpecialTradeServices
    "specialty_cleaning" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_SpecialtyCleaning
    "sporting_goods_stores" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_SportingGoodsStores
    "sporting_recreation_camps" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_SportingRecreationCamps
    "sports_and_riding_apparel_stores" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_SportsAndRidingApparelStores
    "sports_clubs_fields" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_SportsClubsFields
    "stamp_and_coin_stores" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_StampAndCoinStores
    "stationary_office_supplies_printing_and_writing_paper" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_StationaryOfficeSuppliesPrintingAndWritingPaper
    "stationery_stores_office_and_school_supply_stores" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_StationeryStoresOfficeAndSchoolSupplyStores
    "swimming_pools_sales" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_SwimmingPoolsSales
    "t_ui_travel_germany" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_TUiTravelGermany
    "tailors_alterations" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_TailorsAlterations
    "tax_payments_government_agencies" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_TaxPaymentsGovernmentAgencies
    "tax_preparation_services" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_TaxPreparationServices
    "taxicabs_limousines" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_TaxicabsLimousines
    "telecommunication_equipment_and_telephone_sales" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_TelecommunicationEquipmentAndTelephoneSales
    "telecommunication_services" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_TelecommunicationServices
    "telegraph_services" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_TelegraphServices
    "tent_and_awning_shops" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_TentAndAwningShops
    "testing_laboratories" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_TestingLaboratories
    "theatrical_ticket_agencies" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_TheatricalTicketAgencies
    "timeshares" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_Timeshares
    "tire_retreading_and_repair" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_TireRetreadingAndRepair
    "tolls_bridge_fees" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_TollsBridgeFees
    "tourist_attractions_and_exhibits" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_TouristAttractionsAndExhibits
    "towing_services" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_TowingServices
    "trailer_parks_campgrounds" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_TrailerParksCampgrounds
    "transportation_services" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_TransportationServices
    "travel_agencies_tour_operators" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_TravelAgenciesTourOperators
    "truck_stop_iteration" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_TruckStopIteration
    "truck_utility_trailer_rentals" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_TruckUtilityTrailerRentals
    "typesetting_plate_making_and_related_services" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_TypesettingPlateMakingAndRelatedServices
    "typewriter_stores" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_TypewriterStores
    "u_s_federal_government_agencies_or_departments" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_USFederalGovernmentAgenciesOrDepartments
    "uniforms_commercial_clothing" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_UniformsCommercialClothing
    "used_merchandise_and_secondhand_stores" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_UsedMerchandiseAndSecondhandStores
    "utilities" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_Utilities
    "variety_stores" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_VarietyStores
    "veterinary_services" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_VeterinaryServices
    "video_amusement_game_supplies" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_VideoAmusementGameSupplies
    "video_game_arcades" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_VideoGameArcades
    "video_tape_rental_stores" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_VideoTapeRentalStores
    "vocational_trade_schools" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_VocationalTradeSchools
    "watch_jewelry_repair" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_WatchJewelryRepair
    "welding_repair" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_WeldingRepair
    "wholesale_clubs" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_WholesaleClubs
    "wig_and_toupee_stores" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_WigAndToupeeStores
    "wires_money_orders" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_WiresMoneyOrders
    "womens_accessory_and_specialty_shops" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_WomensAccessoryAndSpecialtyShops
    "womens_ready_to_wear_stores" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_WomensReadyToWearStores
    "wrecking_and_salvage_yards" -> pure IssuingCardholderAuthorizationControls_BlockedCategories_WreckingAndSalvageYards
    str -> fail (show str <> " is not a known valid option for IssuingCardholderAuthorizationControls_BlockedCategories")

data IssuingCardholderSpendingLimit_Categories
  = IssuingCardholderSpendingLimit_Categories_AcRefrigerationRepair
  | IssuingCardholderSpendingLimit_Categories_AccountingBookkeepingServices
  | IssuingCardholderSpendingLimit_Categories_AdvertisingServices
  | IssuingCardholderSpendingLimit_Categories_AgriculturalCooperative
  | IssuingCardholderSpendingLimit_Categories_AirlinesAirCarriers
  | IssuingCardholderSpendingLimit_Categories_AirportsFlyingFields
  | IssuingCardholderSpendingLimit_Categories_AmbulanceServices
  | IssuingCardholderSpendingLimit_Categories_AmusementParksCarnivals
  | IssuingCardholderSpendingLimit_Categories_AntiqueReproductions
  | IssuingCardholderSpendingLimit_Categories_AntiqueShops
  | IssuingCardholderSpendingLimit_Categories_Aquariums
  | IssuingCardholderSpendingLimit_Categories_ArchitecturalSurveyingServices
  | IssuingCardholderSpendingLimit_Categories_ArtDealersAndGalleries
  | IssuingCardholderSpendingLimit_Categories_ArtistsSupplyAndCraftShops
  | IssuingCardholderSpendingLimit_Categories_AutoAndHomeSupplyStores
  | IssuingCardholderSpendingLimit_Categories_AutoBodyRepairShops
  | IssuingCardholderSpendingLimit_Categories_AutoPaintShops
  | IssuingCardholderSpendingLimit_Categories_AutoServiceShops
  | IssuingCardholderSpendingLimit_Categories_AutomatedCashDisburse
  | IssuingCardholderSpendingLimit_Categories_AutomatedFuelDispensers
  | IssuingCardholderSpendingLimit_Categories_AutomobileAssociations
  | IssuingCardholderSpendingLimit_Categories_AutomotivePartsAndAccessoriesStores
  | IssuingCardholderSpendingLimit_Categories_AutomotiveTireStores
  | IssuingCardholderSpendingLimit_Categories_BailAndBondPayments
  | IssuingCardholderSpendingLimit_Categories_Bakeries
  | IssuingCardholderSpendingLimit_Categories_BandsOrchestras
  | IssuingCardholderSpendingLimit_Categories_BarberAndBeautyShops
  | IssuingCardholderSpendingLimit_Categories_BettingCasinoGambling
  | IssuingCardholderSpendingLimit_Categories_BicycleShops
  | IssuingCardholderSpendingLimit_Categories_BilliardPoolEstablishments
  | IssuingCardholderSpendingLimit_Categories_BoatDealers
  | IssuingCardholderSpendingLimit_Categories_BoatRentalsAndLeases
  | IssuingCardholderSpendingLimit_Categories_BookStores
  | IssuingCardholderSpendingLimit_Categories_BooksPeriodicalsAndNewspapers
  | IssuingCardholderSpendingLimit_Categories_BowlingAlleys
  | IssuingCardholderSpendingLimit_Categories_BusLines
  | IssuingCardholderSpendingLimit_Categories_BusinessSecretarialSchools
  | IssuingCardholderSpendingLimit_Categories_BuyingShoppingServices
  | IssuingCardholderSpendingLimit_Categories_CableSatelliteAndOtherPayTelevisionAndRadio
  | IssuingCardholderSpendingLimit_Categories_CameraAndPhotographicSupplyStores
  | IssuingCardholderSpendingLimit_Categories_CandyNutAndConfectioneryStores
  | IssuingCardholderSpendingLimit_Categories_CarAndTruckDealersNewUsed
  | IssuingCardholderSpendingLimit_Categories_CarAndTruckDealersUsedOnly
  | IssuingCardholderSpendingLimit_Categories_CarRentalAgencies
  | IssuingCardholderSpendingLimit_Categories_CarWashes
  | IssuingCardholderSpendingLimit_Categories_CarpentryServices
  | IssuingCardholderSpendingLimit_Categories_CarpetUpholsteryCleaning
  | IssuingCardholderSpendingLimit_Categories_Caterers
  | IssuingCardholderSpendingLimit_Categories_CharitableAndSocialServiceOrganizationsFundraising
  | IssuingCardholderSpendingLimit_Categories_ChemicalsAndAlliedProducts
  | IssuingCardholderSpendingLimit_Categories_ChidrensAndInfantsWearStores
  | IssuingCardholderSpendingLimit_Categories_ChildCareServices
  | IssuingCardholderSpendingLimit_Categories_ChiropodistsPodiatrists
  | IssuingCardholderSpendingLimit_Categories_Chiropractors
  | IssuingCardholderSpendingLimit_Categories_CigarStoresAndStands
  | IssuingCardholderSpendingLimit_Categories_CivicSocialFraternalAssociations
  | IssuingCardholderSpendingLimit_Categories_CleaningAndMaintenance
  | IssuingCardholderSpendingLimit_Categories_ClothingRental
  | IssuingCardholderSpendingLimit_Categories_CollegesUniversities
  | IssuingCardholderSpendingLimit_Categories_CommercialEquipment
  | IssuingCardholderSpendingLimit_Categories_CommercialFootwear
  | IssuingCardholderSpendingLimit_Categories_CommercialPhotographyArtAndGraphics
  | IssuingCardholderSpendingLimit_Categories_CommuterTransportAndFerries
  | IssuingCardholderSpendingLimit_Categories_ComputerNetworkServices
  | IssuingCardholderSpendingLimit_Categories_ComputerProgramming
  | IssuingCardholderSpendingLimit_Categories_ComputerRepair
  | IssuingCardholderSpendingLimit_Categories_ComputerSoftwareStores
  | IssuingCardholderSpendingLimit_Categories_ComputersPeripheralsAndSoftware
  | IssuingCardholderSpendingLimit_Categories_ConcreteWorkServices
  | IssuingCardholderSpendingLimit_Categories_ConstructionMaterials
  | IssuingCardholderSpendingLimit_Categories_ConsultingPublicRelations
  | IssuingCardholderSpendingLimit_Categories_CorrespondenceSchools
  | IssuingCardholderSpendingLimit_Categories_CosmeticStores
  | IssuingCardholderSpendingLimit_Categories_CounselingServices
  | IssuingCardholderSpendingLimit_Categories_CountryClubs
  | IssuingCardholderSpendingLimit_Categories_CourierServices
  | IssuingCardholderSpendingLimit_Categories_CourtCosts
  | IssuingCardholderSpendingLimit_Categories_CreditReportingAgencies
  | IssuingCardholderSpendingLimit_Categories_CruiseLines
  | IssuingCardholderSpendingLimit_Categories_DairyProductsStores
  | IssuingCardholderSpendingLimit_Categories_DanceHallStudiosSchools
  | IssuingCardholderSpendingLimit_Categories_DatingEscortServices
  | IssuingCardholderSpendingLimit_Categories_DentistsOrthodontists
  | IssuingCardholderSpendingLimit_Categories_DepartmentStores
  | IssuingCardholderSpendingLimit_Categories_DetectiveAgencies
  | IssuingCardholderSpendingLimit_Categories_DigitalGoodsApplications
  | IssuingCardholderSpendingLimit_Categories_DirectMarketingCatalogMerchant
  | IssuingCardholderSpendingLimit_Categories_DirectMarketingCombinationCatalogAndRetailMerchant
  | IssuingCardholderSpendingLimit_Categories_DirectMarketingInboundTelemarketing
  | IssuingCardholderSpendingLimit_Categories_DirectMarketingInsuranceServices
  | IssuingCardholderSpendingLimit_Categories_DirectMarketingOther
  | IssuingCardholderSpendingLimit_Categories_DirectMarketingOutboundTelemarketing
  | IssuingCardholderSpendingLimit_Categories_DirectMarketingSubscription
  | IssuingCardholderSpendingLimit_Categories_DirectMarketingTravel
  | IssuingCardholderSpendingLimit_Categories_DiscountStores
  | IssuingCardholderSpendingLimit_Categories_Doctors
  | IssuingCardholderSpendingLimit_Categories_DoorToDoorSales
  | IssuingCardholderSpendingLimit_Categories_DraperyWindowCoveringAndUpholsteryStores
  | IssuingCardholderSpendingLimit_Categories_DrinkingPlaces
  | IssuingCardholderSpendingLimit_Categories_DrugStoresAndPharmacies
  | IssuingCardholderSpendingLimit_Categories_DrugsDrugProprietariesAndDruggistSundries
  | IssuingCardholderSpendingLimit_Categories_DryCleaners
  | IssuingCardholderSpendingLimit_Categories_DurableGoods
  | IssuingCardholderSpendingLimit_Categories_DutyFreeStores
  | IssuingCardholderSpendingLimit_Categories_EatingPlacesRestaurants
  | IssuingCardholderSpendingLimit_Categories_EducationalServices
  | IssuingCardholderSpendingLimit_Categories_ElectricRazorStores
  | IssuingCardholderSpendingLimit_Categories_ElectricalPartsAndEquipment
  | IssuingCardholderSpendingLimit_Categories_ElectricalServices
  | IssuingCardholderSpendingLimit_Categories_ElectronicsRepairShops
  | IssuingCardholderSpendingLimit_Categories_ElectronicsStores
  | IssuingCardholderSpendingLimit_Categories_ElementarySecondarySchools
  | IssuingCardholderSpendingLimit_Categories_EmploymentTempAgencies
  | IssuingCardholderSpendingLimit_Categories_EquipmentRental
  | IssuingCardholderSpendingLimit_Categories_ExterminatingServices
  | IssuingCardholderSpendingLimit_Categories_FamilyClothingStores
  | IssuingCardholderSpendingLimit_Categories_FastFoodRestaurants
  | IssuingCardholderSpendingLimit_Categories_FinancialInstitutions
  | IssuingCardholderSpendingLimit_Categories_FinesGovernmentAdministrativeEntities
  | IssuingCardholderSpendingLimit_Categories_FireplaceFireplaceScreensAndAccessoriesStores
  | IssuingCardholderSpendingLimit_Categories_FloorCoveringStores
  | IssuingCardholderSpendingLimit_Categories_Florists
  | IssuingCardholderSpendingLimit_Categories_FloristsSuppliesNurseryStockAndFlowers
  | IssuingCardholderSpendingLimit_Categories_FreezerAndLockerMeatProvisioners
  | IssuingCardholderSpendingLimit_Categories_FuelDealersNonAutomotive
  | IssuingCardholderSpendingLimit_Categories_FuneralServicesCrematories
  | IssuingCardholderSpendingLimit_Categories_FurnitureHomeFurnishingsAndEquipmentStoresExceptAppliances
  | IssuingCardholderSpendingLimit_Categories_FurnitureRepairRefinishing
  | IssuingCardholderSpendingLimit_Categories_FurriersAndFurShops
  | IssuingCardholderSpendingLimit_Categories_GeneralServices
  | IssuingCardholderSpendingLimit_Categories_GiftCardNoveltyAndSouvenirShops
  | IssuingCardholderSpendingLimit_Categories_GlassPaintAndWallpaperStores
  | IssuingCardholderSpendingLimit_Categories_GlasswareCrystalStores
  | IssuingCardholderSpendingLimit_Categories_GolfCoursesPublic
  | IssuingCardholderSpendingLimit_Categories_GovernmentServices
  | IssuingCardholderSpendingLimit_Categories_GroceryStoresSupermarkets
  | IssuingCardholderSpendingLimit_Categories_HardwareEquipmentAndSupplies
  | IssuingCardholderSpendingLimit_Categories_HardwareStores
  | IssuingCardholderSpendingLimit_Categories_HealthAndBeautySpas
  | IssuingCardholderSpendingLimit_Categories_HearingAidsSalesAndSupplies
  | IssuingCardholderSpendingLimit_Categories_HeatingPlumbingAC
  | IssuingCardholderSpendingLimit_Categories_HobbyToyAndGameShops
  | IssuingCardholderSpendingLimit_Categories_HomeSupplyWarehouseStores
  | IssuingCardholderSpendingLimit_Categories_Hospitals
  | IssuingCardholderSpendingLimit_Categories_HotelsMotelsAndResorts
  | IssuingCardholderSpendingLimit_Categories_HouseholdApplianceStores
  | IssuingCardholderSpendingLimit_Categories_IndustrialSupplies
  | IssuingCardholderSpendingLimit_Categories_InformationRetrievalServices
  | IssuingCardholderSpendingLimit_Categories_InsuranceDefault
  | IssuingCardholderSpendingLimit_Categories_InsuranceUnderwritingPremiums
  | IssuingCardholderSpendingLimit_Categories_IntraCompanyPurchases
  | IssuingCardholderSpendingLimit_Categories_JewelryStoresWatchesClocksAndSilverwareStores
  | IssuingCardholderSpendingLimit_Categories_LandscapingServices
  | IssuingCardholderSpendingLimit_Categories_Laundries
  | IssuingCardholderSpendingLimit_Categories_LaundryCleaningServices
  | IssuingCardholderSpendingLimit_Categories_LegalServicesAttorneys
  | IssuingCardholderSpendingLimit_Categories_LuggageAndLeatherGoodsStores
  | IssuingCardholderSpendingLimit_Categories_LumberBuildingMaterialsStores
  | IssuingCardholderSpendingLimit_Categories_ManualCashDisburse
  | IssuingCardholderSpendingLimit_Categories_MarinasServiceAndSupplies
  | IssuingCardholderSpendingLimit_Categories_MasonryStoneworkAndPlaster
  | IssuingCardholderSpendingLimit_Categories_MassageParlors
  | IssuingCardholderSpendingLimit_Categories_MedicalAndDentalLabs
  | IssuingCardholderSpendingLimit_Categories_MedicalDentalOphthalmicAndHospitalEquipmentAndSupplies
  | IssuingCardholderSpendingLimit_Categories_MedicalServices
  | IssuingCardholderSpendingLimit_Categories_MembershipOrganizations
  | IssuingCardholderSpendingLimit_Categories_MensAndBoysClothingAndAccessoriesStores
  | IssuingCardholderSpendingLimit_Categories_MensWomensClothingStores
  | IssuingCardholderSpendingLimit_Categories_MetalServiceCenters
  | IssuingCardholderSpendingLimit_Categories_Miscellaneous
  | IssuingCardholderSpendingLimit_Categories_MiscellaneousApparelAndAccessoryShops
  | IssuingCardholderSpendingLimit_Categories_MiscellaneousAutoDealers
  | IssuingCardholderSpendingLimit_Categories_MiscellaneousBusinessServices
  | IssuingCardholderSpendingLimit_Categories_MiscellaneousFoodStores
  | IssuingCardholderSpendingLimit_Categories_MiscellaneousGeneralMerchandise
  | IssuingCardholderSpendingLimit_Categories_MiscellaneousGeneralServices
  | IssuingCardholderSpendingLimit_Categories_MiscellaneousHomeFurnishingSpecialtyStores
  | IssuingCardholderSpendingLimit_Categories_MiscellaneousPublishingAndPrinting
  | IssuingCardholderSpendingLimit_Categories_MiscellaneousRecreationServices
  | IssuingCardholderSpendingLimit_Categories_MiscellaneousRepairShops
  | IssuingCardholderSpendingLimit_Categories_MiscellaneousSpecialtyRetail
  | IssuingCardholderSpendingLimit_Categories_MobileHomeDealers
  | IssuingCardholderSpendingLimit_Categories_MotionPictureTheaters
  | IssuingCardholderSpendingLimit_Categories_MotorFreightCarriersAndTrucking
  | IssuingCardholderSpendingLimit_Categories_MotorHomesDealers
  | IssuingCardholderSpendingLimit_Categories_MotorVehicleSuppliesAndNewParts
  | IssuingCardholderSpendingLimit_Categories_MotorcycleShopsAndDealers
  | IssuingCardholderSpendingLimit_Categories_MotorcycleShopsDealers
  | IssuingCardholderSpendingLimit_Categories_MusicStoresMusicalInstrumentsPianosAndSheetMusic
  | IssuingCardholderSpendingLimit_Categories_NewsDealersAndNewsstands
  | IssuingCardholderSpendingLimit_Categories_NonFiMoneyOrders
  | IssuingCardholderSpendingLimit_Categories_NonFiStoredValueCardPurchaseLoad
  | IssuingCardholderSpendingLimit_Categories_NondurableGoods
  | IssuingCardholderSpendingLimit_Categories_NurseriesLawnAndGardenSupplyStores
  | IssuingCardholderSpendingLimit_Categories_NursingPersonalCare
  | IssuingCardholderSpendingLimit_Categories_OfficeAndCommercialFurniture
  | IssuingCardholderSpendingLimit_Categories_OpticiansEyeglasses
  | IssuingCardholderSpendingLimit_Categories_OptometristsOphthalmologist
  | IssuingCardholderSpendingLimit_Categories_OrthopedicGoodsProstheticDevices
  | IssuingCardholderSpendingLimit_Categories_Osteopaths
  | IssuingCardholderSpendingLimit_Categories_PackageStoresBeerWineAndLiquor
  | IssuingCardholderSpendingLimit_Categories_PaintsVarnishesAndSupplies
  | IssuingCardholderSpendingLimit_Categories_ParkingLotsGarages
  | IssuingCardholderSpendingLimit_Categories_PassengerRailways
  | IssuingCardholderSpendingLimit_Categories_PawnShops
  | IssuingCardholderSpendingLimit_Categories_PetShopsPetFoodAndSupplies
  | IssuingCardholderSpendingLimit_Categories_PetroleumAndPetroleumProducts
  | IssuingCardholderSpendingLimit_Categories_PhotoDeveloping
  | IssuingCardholderSpendingLimit_Categories_PhotographicPhotocopyMicrofilmEquipmentAndSupplies
  | IssuingCardholderSpendingLimit_Categories_PhotographicStudios
  | IssuingCardholderSpendingLimit_Categories_PictureVideoProduction
  | IssuingCardholderSpendingLimit_Categories_PieceGoodsNotionsAndOtherDryGoods
  | IssuingCardholderSpendingLimit_Categories_PlumbingHeatingEquipmentAndSupplies
  | IssuingCardholderSpendingLimit_Categories_PoliticalOrganizations
  | IssuingCardholderSpendingLimit_Categories_PostalServicesGovernmentOnly
  | IssuingCardholderSpendingLimit_Categories_PreciousStonesAndMetalsWatchesAndJewelry
  | IssuingCardholderSpendingLimit_Categories_ProfessionalServices
  | IssuingCardholderSpendingLimit_Categories_PublicWarehousingAndStorage
  | IssuingCardholderSpendingLimit_Categories_QuickCopyReproAndBlueprint
  | IssuingCardholderSpendingLimit_Categories_Railroads
  | IssuingCardholderSpendingLimit_Categories_RealEstateAgentsAndManagersRentals
  | IssuingCardholderSpendingLimit_Categories_RecordStores
  | IssuingCardholderSpendingLimit_Categories_RecreationalVehicleRentals
  | IssuingCardholderSpendingLimit_Categories_ReligiousGoodsStores
  | IssuingCardholderSpendingLimit_Categories_ReligiousOrganizations
  | IssuingCardholderSpendingLimit_Categories_RoofingSidingSheetMetal
  | IssuingCardholderSpendingLimit_Categories_SecretarialSupportServices
  | IssuingCardholderSpendingLimit_Categories_SecurityBrokersDealers
  | IssuingCardholderSpendingLimit_Categories_ServiceStations
  | IssuingCardholderSpendingLimit_Categories_SewingNeedleworkFabricAndPieceGoodsStores
  | IssuingCardholderSpendingLimit_Categories_ShoeRepairHatCleaning
  | IssuingCardholderSpendingLimit_Categories_ShoeStores
  | IssuingCardholderSpendingLimit_Categories_SmallApplianceRepair
  | IssuingCardholderSpendingLimit_Categories_SnowmobileDealers
  | IssuingCardholderSpendingLimit_Categories_SpecialTradeServices
  | IssuingCardholderSpendingLimit_Categories_SpecialtyCleaning
  | IssuingCardholderSpendingLimit_Categories_SportingGoodsStores
  | IssuingCardholderSpendingLimit_Categories_SportingRecreationCamps
  | IssuingCardholderSpendingLimit_Categories_SportsAndRidingApparelStores
  | IssuingCardholderSpendingLimit_Categories_SportsClubsFields
  | IssuingCardholderSpendingLimit_Categories_StampAndCoinStores
  | IssuingCardholderSpendingLimit_Categories_StationaryOfficeSuppliesPrintingAndWritingPaper
  | IssuingCardholderSpendingLimit_Categories_StationeryStoresOfficeAndSchoolSupplyStores
  | IssuingCardholderSpendingLimit_Categories_SwimmingPoolsSales
  | IssuingCardholderSpendingLimit_Categories_TUiTravelGermany
  | IssuingCardholderSpendingLimit_Categories_TailorsAlterations
  | IssuingCardholderSpendingLimit_Categories_TaxPaymentsGovernmentAgencies
  | IssuingCardholderSpendingLimit_Categories_TaxPreparationServices
  | IssuingCardholderSpendingLimit_Categories_TaxicabsLimousines
  | IssuingCardholderSpendingLimit_Categories_TelecommunicationEquipmentAndTelephoneSales
  | IssuingCardholderSpendingLimit_Categories_TelecommunicationServices
  | IssuingCardholderSpendingLimit_Categories_TelegraphServices
  | IssuingCardholderSpendingLimit_Categories_TentAndAwningShops
  | IssuingCardholderSpendingLimit_Categories_TestingLaboratories
  | IssuingCardholderSpendingLimit_Categories_TheatricalTicketAgencies
  | IssuingCardholderSpendingLimit_Categories_Timeshares
  | IssuingCardholderSpendingLimit_Categories_TireRetreadingAndRepair
  | IssuingCardholderSpendingLimit_Categories_TollsBridgeFees
  | IssuingCardholderSpendingLimit_Categories_TouristAttractionsAndExhibits
  | IssuingCardholderSpendingLimit_Categories_TowingServices
  | IssuingCardholderSpendingLimit_Categories_TrailerParksCampgrounds
  | IssuingCardholderSpendingLimit_Categories_TransportationServices
  | IssuingCardholderSpendingLimit_Categories_TravelAgenciesTourOperators
  | IssuingCardholderSpendingLimit_Categories_TruckStopIteration
  | IssuingCardholderSpendingLimit_Categories_TruckUtilityTrailerRentals
  | IssuingCardholderSpendingLimit_Categories_TypesettingPlateMakingAndRelatedServices
  | IssuingCardholderSpendingLimit_Categories_TypewriterStores
  | IssuingCardholderSpendingLimit_Categories_USFederalGovernmentAgenciesOrDepartments
  | IssuingCardholderSpendingLimit_Categories_UniformsCommercialClothing
  | IssuingCardholderSpendingLimit_Categories_UsedMerchandiseAndSecondhandStores
  | IssuingCardholderSpendingLimit_Categories_Utilities
  | IssuingCardholderSpendingLimit_Categories_VarietyStores
  | IssuingCardholderSpendingLimit_Categories_VeterinaryServices
  | IssuingCardholderSpendingLimit_Categories_VideoAmusementGameSupplies
  | IssuingCardholderSpendingLimit_Categories_VideoGameArcades
  | IssuingCardholderSpendingLimit_Categories_VideoTapeRentalStores
  | IssuingCardholderSpendingLimit_Categories_VocationalTradeSchools
  | IssuingCardholderSpendingLimit_Categories_WatchJewelryRepair
  | IssuingCardholderSpendingLimit_Categories_WeldingRepair
  | IssuingCardholderSpendingLimit_Categories_WholesaleClubs
  | IssuingCardholderSpendingLimit_Categories_WigAndToupeeStores
  | IssuingCardholderSpendingLimit_Categories_WiresMoneyOrders
  | IssuingCardholderSpendingLimit_Categories_WomensAccessoryAndSpecialtyShops
  | IssuingCardholderSpendingLimit_Categories_WomensReadyToWearStores
  | IssuingCardholderSpendingLimit_Categories_WreckingAndSalvageYards
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON IssuingCardholderSpendingLimit_Categories where
  toJSON e = Text $ case e of
    IssuingCardholderSpendingLimit_Categories_AcRefrigerationRepair -> "ac_refrigeration_repair"
    IssuingCardholderSpendingLimit_Categories_AccountingBookkeepingServices -> "accounting_bookkeeping_services"
    IssuingCardholderSpendingLimit_Categories_AdvertisingServices -> "advertising_services"
    IssuingCardholderSpendingLimit_Categories_AgriculturalCooperative -> "agricultural_cooperative"
    IssuingCardholderSpendingLimit_Categories_AirlinesAirCarriers -> "airlines_air_carriers"
    IssuingCardholderSpendingLimit_Categories_AirportsFlyingFields -> "airports_flying_fields"
    IssuingCardholderSpendingLimit_Categories_AmbulanceServices -> "ambulance_services"
    IssuingCardholderSpendingLimit_Categories_AmusementParksCarnivals -> "amusement_parks_carnivals"
    IssuingCardholderSpendingLimit_Categories_AntiqueReproductions -> "antique_reproductions"
    IssuingCardholderSpendingLimit_Categories_AntiqueShops -> "antique_shops"
    IssuingCardholderSpendingLimit_Categories_Aquariums -> "aquariums"
    IssuingCardholderSpendingLimit_Categories_ArchitecturalSurveyingServices -> "architectural_surveying_services"
    IssuingCardholderSpendingLimit_Categories_ArtDealersAndGalleries -> "art_dealers_and_galleries"
    IssuingCardholderSpendingLimit_Categories_ArtistsSupplyAndCraftShops -> "artists_supply_and_craft_shops"
    IssuingCardholderSpendingLimit_Categories_AutoAndHomeSupplyStores -> "auto_and_home_supply_stores"
    IssuingCardholderSpendingLimit_Categories_AutoBodyRepairShops -> "auto_body_repair_shops"
    IssuingCardholderSpendingLimit_Categories_AutoPaintShops -> "auto_paint_shops"
    IssuingCardholderSpendingLimit_Categories_AutoServiceShops -> "auto_service_shops"
    IssuingCardholderSpendingLimit_Categories_AutomatedCashDisburse -> "automated_cash_disburse"
    IssuingCardholderSpendingLimit_Categories_AutomatedFuelDispensers -> "automated_fuel_dispensers"
    IssuingCardholderSpendingLimit_Categories_AutomobileAssociations -> "automobile_associations"
    IssuingCardholderSpendingLimit_Categories_AutomotivePartsAndAccessoriesStores -> "automotive_parts_and_accessories_stores"
    IssuingCardholderSpendingLimit_Categories_AutomotiveTireStores -> "automotive_tire_stores"
    IssuingCardholderSpendingLimit_Categories_BailAndBondPayments -> "bail_and_bond_payments"
    IssuingCardholderSpendingLimit_Categories_Bakeries -> "bakeries"
    IssuingCardholderSpendingLimit_Categories_BandsOrchestras -> "bands_orchestras"
    IssuingCardholderSpendingLimit_Categories_BarberAndBeautyShops -> "barber_and_beauty_shops"
    IssuingCardholderSpendingLimit_Categories_BettingCasinoGambling -> "betting_casino_gambling"
    IssuingCardholderSpendingLimit_Categories_BicycleShops -> "bicycle_shops"
    IssuingCardholderSpendingLimit_Categories_BilliardPoolEstablishments -> "billiard_pool_establishments"
    IssuingCardholderSpendingLimit_Categories_BoatDealers -> "boat_dealers"
    IssuingCardholderSpendingLimit_Categories_BoatRentalsAndLeases -> "boat_rentals_and_leases"
    IssuingCardholderSpendingLimit_Categories_BookStores -> "book_stores"
    IssuingCardholderSpendingLimit_Categories_BooksPeriodicalsAndNewspapers -> "books_periodicals_and_newspapers"
    IssuingCardholderSpendingLimit_Categories_BowlingAlleys -> "bowling_alleys"
    IssuingCardholderSpendingLimit_Categories_BusLines -> "bus_lines"
    IssuingCardholderSpendingLimit_Categories_BusinessSecretarialSchools -> "business_secretarial_schools"
    IssuingCardholderSpendingLimit_Categories_BuyingShoppingServices -> "buying_shopping_services"
    IssuingCardholderSpendingLimit_Categories_CableSatelliteAndOtherPayTelevisionAndRadio -> "cable_satellite_and_other_pay_television_and_radio"
    IssuingCardholderSpendingLimit_Categories_CameraAndPhotographicSupplyStores -> "camera_and_photographic_supply_stores"
    IssuingCardholderSpendingLimit_Categories_CandyNutAndConfectioneryStores -> "candy_nut_and_confectionery_stores"
    IssuingCardholderSpendingLimit_Categories_CarAndTruckDealersNewUsed -> "car_and_truck_dealers_new_used"
    IssuingCardholderSpendingLimit_Categories_CarAndTruckDealersUsedOnly -> "car_and_truck_dealers_used_only"
    IssuingCardholderSpendingLimit_Categories_CarRentalAgencies -> "car_rental_agencies"
    IssuingCardholderSpendingLimit_Categories_CarWashes -> "car_washes"
    IssuingCardholderSpendingLimit_Categories_CarpentryServices -> "carpentry_services"
    IssuingCardholderSpendingLimit_Categories_CarpetUpholsteryCleaning -> "carpet_upholstery_cleaning"
    IssuingCardholderSpendingLimit_Categories_Caterers -> "caterers"
    IssuingCardholderSpendingLimit_Categories_CharitableAndSocialServiceOrganizationsFundraising -> "charitable_and_social_service_organizations_fundraising"
    IssuingCardholderSpendingLimit_Categories_ChemicalsAndAlliedProducts -> "chemicals_and_allied_products"
    IssuingCardholderSpendingLimit_Categories_ChidrensAndInfantsWearStores -> "chidrens_and_infants_wear_stores"
    IssuingCardholderSpendingLimit_Categories_ChildCareServices -> "child_care_services"
    IssuingCardholderSpendingLimit_Categories_ChiropodistsPodiatrists -> "chiropodists_podiatrists"
    IssuingCardholderSpendingLimit_Categories_Chiropractors -> "chiropractors"
    IssuingCardholderSpendingLimit_Categories_CigarStoresAndStands -> "cigar_stores_and_stands"
    IssuingCardholderSpendingLimit_Categories_CivicSocialFraternalAssociations -> "civic_social_fraternal_associations"
    IssuingCardholderSpendingLimit_Categories_CleaningAndMaintenance -> "cleaning_and_maintenance"
    IssuingCardholderSpendingLimit_Categories_ClothingRental -> "clothing_rental"
    IssuingCardholderSpendingLimit_Categories_CollegesUniversities -> "colleges_universities"
    IssuingCardholderSpendingLimit_Categories_CommercialEquipment -> "commercial_equipment"
    IssuingCardholderSpendingLimit_Categories_CommercialFootwear -> "commercial_footwear"
    IssuingCardholderSpendingLimit_Categories_CommercialPhotographyArtAndGraphics -> "commercial_photography_art_and_graphics"
    IssuingCardholderSpendingLimit_Categories_CommuterTransportAndFerries -> "commuter_transport_and_ferries"
    IssuingCardholderSpendingLimit_Categories_ComputerNetworkServices -> "computer_network_services"
    IssuingCardholderSpendingLimit_Categories_ComputerProgramming -> "computer_programming"
    IssuingCardholderSpendingLimit_Categories_ComputerRepair -> "computer_repair"
    IssuingCardholderSpendingLimit_Categories_ComputerSoftwareStores -> "computer_software_stores"
    IssuingCardholderSpendingLimit_Categories_ComputersPeripheralsAndSoftware -> "computers_peripherals_and_software"
    IssuingCardholderSpendingLimit_Categories_ConcreteWorkServices -> "concrete_work_services"
    IssuingCardholderSpendingLimit_Categories_ConstructionMaterials -> "construction_materials"
    IssuingCardholderSpendingLimit_Categories_ConsultingPublicRelations -> "consulting_public_relations"
    IssuingCardholderSpendingLimit_Categories_CorrespondenceSchools -> "correspondence_schools"
    IssuingCardholderSpendingLimit_Categories_CosmeticStores -> "cosmetic_stores"
    IssuingCardholderSpendingLimit_Categories_CounselingServices -> "counseling_services"
    IssuingCardholderSpendingLimit_Categories_CountryClubs -> "country_clubs"
    IssuingCardholderSpendingLimit_Categories_CourierServices -> "courier_services"
    IssuingCardholderSpendingLimit_Categories_CourtCosts -> "court_costs"
    IssuingCardholderSpendingLimit_Categories_CreditReportingAgencies -> "credit_reporting_agencies"
    IssuingCardholderSpendingLimit_Categories_CruiseLines -> "cruise_lines"
    IssuingCardholderSpendingLimit_Categories_DairyProductsStores -> "dairy_products_stores"
    IssuingCardholderSpendingLimit_Categories_DanceHallStudiosSchools -> "dance_hall_studios_schools"
    IssuingCardholderSpendingLimit_Categories_DatingEscortServices -> "dating_escort_services"
    IssuingCardholderSpendingLimit_Categories_DentistsOrthodontists -> "dentists_orthodontists"
    IssuingCardholderSpendingLimit_Categories_DepartmentStores -> "department_stores"
    IssuingCardholderSpendingLimit_Categories_DetectiveAgencies -> "detective_agencies"
    IssuingCardholderSpendingLimit_Categories_DigitalGoodsApplications -> "digital_goods_applications"
    IssuingCardholderSpendingLimit_Categories_DirectMarketingCatalogMerchant -> "direct_marketing_catalog_merchant"
    IssuingCardholderSpendingLimit_Categories_DirectMarketingCombinationCatalogAndRetailMerchant -> "direct_marketing_combination_catalog_and_retail_merchant"
    IssuingCardholderSpendingLimit_Categories_DirectMarketingInboundTelemarketing -> "direct_marketing_inbound_telemarketing"
    IssuingCardholderSpendingLimit_Categories_DirectMarketingInsuranceServices -> "direct_marketing_insurance_services"
    IssuingCardholderSpendingLimit_Categories_DirectMarketingOther -> "direct_marketing_other"
    IssuingCardholderSpendingLimit_Categories_DirectMarketingOutboundTelemarketing -> "direct_marketing_outbound_telemarketing"
    IssuingCardholderSpendingLimit_Categories_DirectMarketingSubscription -> "direct_marketing_subscription"
    IssuingCardholderSpendingLimit_Categories_DirectMarketingTravel -> "direct_marketing_travel"
    IssuingCardholderSpendingLimit_Categories_DiscountStores -> "discount_stores"
    IssuingCardholderSpendingLimit_Categories_Doctors -> "doctors"
    IssuingCardholderSpendingLimit_Categories_DoorToDoorSales -> "door_to_door_sales"
    IssuingCardholderSpendingLimit_Categories_DraperyWindowCoveringAndUpholsteryStores -> "drapery_window_covering_and_upholstery_stores"
    IssuingCardholderSpendingLimit_Categories_DrinkingPlaces -> "drinking_places"
    IssuingCardholderSpendingLimit_Categories_DrugStoresAndPharmacies -> "drug_stores_and_pharmacies"
    IssuingCardholderSpendingLimit_Categories_DrugsDrugProprietariesAndDruggistSundries -> "drugs_drug_proprietaries_and_druggist_sundries"
    IssuingCardholderSpendingLimit_Categories_DryCleaners -> "dry_cleaners"
    IssuingCardholderSpendingLimit_Categories_DurableGoods -> "durable_goods"
    IssuingCardholderSpendingLimit_Categories_DutyFreeStores -> "duty_free_stores"
    IssuingCardholderSpendingLimit_Categories_EatingPlacesRestaurants -> "eating_places_restaurants"
    IssuingCardholderSpendingLimit_Categories_EducationalServices -> "educational_services"
    IssuingCardholderSpendingLimit_Categories_ElectricRazorStores -> "electric_razor_stores"
    IssuingCardholderSpendingLimit_Categories_ElectricalPartsAndEquipment -> "electrical_parts_and_equipment"
    IssuingCardholderSpendingLimit_Categories_ElectricalServices -> "electrical_services"
    IssuingCardholderSpendingLimit_Categories_ElectronicsRepairShops -> "electronics_repair_shops"
    IssuingCardholderSpendingLimit_Categories_ElectronicsStores -> "electronics_stores"
    IssuingCardholderSpendingLimit_Categories_ElementarySecondarySchools -> "elementary_secondary_schools"
    IssuingCardholderSpendingLimit_Categories_EmploymentTempAgencies -> "employment_temp_agencies"
    IssuingCardholderSpendingLimit_Categories_EquipmentRental -> "equipment_rental"
    IssuingCardholderSpendingLimit_Categories_ExterminatingServices -> "exterminating_services"
    IssuingCardholderSpendingLimit_Categories_FamilyClothingStores -> "family_clothing_stores"
    IssuingCardholderSpendingLimit_Categories_FastFoodRestaurants -> "fast_food_restaurants"
    IssuingCardholderSpendingLimit_Categories_FinancialInstitutions -> "financial_institutions"
    IssuingCardholderSpendingLimit_Categories_FinesGovernmentAdministrativeEntities -> "fines_government_administrative_entities"
    IssuingCardholderSpendingLimit_Categories_FireplaceFireplaceScreensAndAccessoriesStores -> "fireplace_fireplace_screens_and_accessories_stores"
    IssuingCardholderSpendingLimit_Categories_FloorCoveringStores -> "floor_covering_stores"
    IssuingCardholderSpendingLimit_Categories_Florists -> "florists"
    IssuingCardholderSpendingLimit_Categories_FloristsSuppliesNurseryStockAndFlowers -> "florists_supplies_nursery_stock_and_flowers"
    IssuingCardholderSpendingLimit_Categories_FreezerAndLockerMeatProvisioners -> "freezer_and_locker_meat_provisioners"
    IssuingCardholderSpendingLimit_Categories_FuelDealersNonAutomotive -> "fuel_dealers_non_automotive"
    IssuingCardholderSpendingLimit_Categories_FuneralServicesCrematories -> "funeral_services_crematories"
    IssuingCardholderSpendingLimit_Categories_FurnitureHomeFurnishingsAndEquipmentStoresExceptAppliances -> "furniture_home_furnishings_and_equipment_stores_except_appliances"
    IssuingCardholderSpendingLimit_Categories_FurnitureRepairRefinishing -> "furniture_repair_refinishing"
    IssuingCardholderSpendingLimit_Categories_FurriersAndFurShops -> "furriers_and_fur_shops"
    IssuingCardholderSpendingLimit_Categories_GeneralServices -> "general_services"
    IssuingCardholderSpendingLimit_Categories_GiftCardNoveltyAndSouvenirShops -> "gift_card_novelty_and_souvenir_shops"
    IssuingCardholderSpendingLimit_Categories_GlassPaintAndWallpaperStores -> "glass_paint_and_wallpaper_stores"
    IssuingCardholderSpendingLimit_Categories_GlasswareCrystalStores -> "glassware_crystal_stores"
    IssuingCardholderSpendingLimit_Categories_GolfCoursesPublic -> "golf_courses_public"
    IssuingCardholderSpendingLimit_Categories_GovernmentServices -> "government_services"
    IssuingCardholderSpendingLimit_Categories_GroceryStoresSupermarkets -> "grocery_stores_supermarkets"
    IssuingCardholderSpendingLimit_Categories_HardwareEquipmentAndSupplies -> "hardware_equipment_and_supplies"
    IssuingCardholderSpendingLimit_Categories_HardwareStores -> "hardware_stores"
    IssuingCardholderSpendingLimit_Categories_HealthAndBeautySpas -> "health_and_beauty_spas"
    IssuingCardholderSpendingLimit_Categories_HearingAidsSalesAndSupplies -> "hearing_aids_sales_and_supplies"
    IssuingCardholderSpendingLimit_Categories_HeatingPlumbingAC -> "heating_plumbing_a_c"
    IssuingCardholderSpendingLimit_Categories_HobbyToyAndGameShops -> "hobby_toy_and_game_shops"
    IssuingCardholderSpendingLimit_Categories_HomeSupplyWarehouseStores -> "home_supply_warehouse_stores"
    IssuingCardholderSpendingLimit_Categories_Hospitals -> "hospitals"
    IssuingCardholderSpendingLimit_Categories_HotelsMotelsAndResorts -> "hotels_motels_and_resorts"
    IssuingCardholderSpendingLimit_Categories_HouseholdApplianceStores -> "household_appliance_stores"
    IssuingCardholderSpendingLimit_Categories_IndustrialSupplies -> "industrial_supplies"
    IssuingCardholderSpendingLimit_Categories_InformationRetrievalServices -> "information_retrieval_services"
    IssuingCardholderSpendingLimit_Categories_InsuranceDefault -> "insurance_default"
    IssuingCardholderSpendingLimit_Categories_InsuranceUnderwritingPremiums -> "insurance_underwriting_premiums"
    IssuingCardholderSpendingLimit_Categories_IntraCompanyPurchases -> "intra_company_purchases"
    IssuingCardholderSpendingLimit_Categories_JewelryStoresWatchesClocksAndSilverwareStores -> "jewelry_stores_watches_clocks_and_silverware_stores"
    IssuingCardholderSpendingLimit_Categories_LandscapingServices -> "landscaping_services"
    IssuingCardholderSpendingLimit_Categories_Laundries -> "laundries"
    IssuingCardholderSpendingLimit_Categories_LaundryCleaningServices -> "laundry_cleaning_services"
    IssuingCardholderSpendingLimit_Categories_LegalServicesAttorneys -> "legal_services_attorneys"
    IssuingCardholderSpendingLimit_Categories_LuggageAndLeatherGoodsStores -> "luggage_and_leather_goods_stores"
    IssuingCardholderSpendingLimit_Categories_LumberBuildingMaterialsStores -> "lumber_building_materials_stores"
    IssuingCardholderSpendingLimit_Categories_ManualCashDisburse -> "manual_cash_disburse"
    IssuingCardholderSpendingLimit_Categories_MarinasServiceAndSupplies -> "marinas_service_and_supplies"
    IssuingCardholderSpendingLimit_Categories_MasonryStoneworkAndPlaster -> "masonry_stonework_and_plaster"
    IssuingCardholderSpendingLimit_Categories_MassageParlors -> "massage_parlors"
    IssuingCardholderSpendingLimit_Categories_MedicalAndDentalLabs -> "medical_and_dental_labs"
    IssuingCardholderSpendingLimit_Categories_MedicalDentalOphthalmicAndHospitalEquipmentAndSupplies -> "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
    IssuingCardholderSpendingLimit_Categories_MedicalServices -> "medical_services"
    IssuingCardholderSpendingLimit_Categories_MembershipOrganizations -> "membership_organizations"
    IssuingCardholderSpendingLimit_Categories_MensAndBoysClothingAndAccessoriesStores -> "mens_and_boys_clothing_and_accessories_stores"
    IssuingCardholderSpendingLimit_Categories_MensWomensClothingStores -> "mens_womens_clothing_stores"
    IssuingCardholderSpendingLimit_Categories_MetalServiceCenters -> "metal_service_centers"
    IssuingCardholderSpendingLimit_Categories_Miscellaneous -> "miscellaneous"
    IssuingCardholderSpendingLimit_Categories_MiscellaneousApparelAndAccessoryShops -> "miscellaneous_apparel_and_accessory_shops"
    IssuingCardholderSpendingLimit_Categories_MiscellaneousAutoDealers -> "miscellaneous_auto_dealers"
    IssuingCardholderSpendingLimit_Categories_MiscellaneousBusinessServices -> "miscellaneous_business_services"
    IssuingCardholderSpendingLimit_Categories_MiscellaneousFoodStores -> "miscellaneous_food_stores"
    IssuingCardholderSpendingLimit_Categories_MiscellaneousGeneralMerchandise -> "miscellaneous_general_merchandise"
    IssuingCardholderSpendingLimit_Categories_MiscellaneousGeneralServices -> "miscellaneous_general_services"
    IssuingCardholderSpendingLimit_Categories_MiscellaneousHomeFurnishingSpecialtyStores -> "miscellaneous_home_furnishing_specialty_stores"
    IssuingCardholderSpendingLimit_Categories_MiscellaneousPublishingAndPrinting -> "miscellaneous_publishing_and_printing"
    IssuingCardholderSpendingLimit_Categories_MiscellaneousRecreationServices -> "miscellaneous_recreation_services"
    IssuingCardholderSpendingLimit_Categories_MiscellaneousRepairShops -> "miscellaneous_repair_shops"
    IssuingCardholderSpendingLimit_Categories_MiscellaneousSpecialtyRetail -> "miscellaneous_specialty_retail"
    IssuingCardholderSpendingLimit_Categories_MobileHomeDealers -> "mobile_home_dealers"
    IssuingCardholderSpendingLimit_Categories_MotionPictureTheaters -> "motion_picture_theaters"
    IssuingCardholderSpendingLimit_Categories_MotorFreightCarriersAndTrucking -> "motor_freight_carriers_and_trucking"
    IssuingCardholderSpendingLimit_Categories_MotorHomesDealers -> "motor_homes_dealers"
    IssuingCardholderSpendingLimit_Categories_MotorVehicleSuppliesAndNewParts -> "motor_vehicle_supplies_and_new_parts"
    IssuingCardholderSpendingLimit_Categories_MotorcycleShopsAndDealers -> "motorcycle_shops_and_dealers"
    IssuingCardholderSpendingLimit_Categories_MotorcycleShopsDealers -> "motorcycle_shops_dealers"
    IssuingCardholderSpendingLimit_Categories_MusicStoresMusicalInstrumentsPianosAndSheetMusic -> "music_stores_musical_instruments_pianos_and_sheet_music"
    IssuingCardholderSpendingLimit_Categories_NewsDealersAndNewsstands -> "news_dealers_and_newsstands"
    IssuingCardholderSpendingLimit_Categories_NonFiMoneyOrders -> "non_fi_money_orders"
    IssuingCardholderSpendingLimit_Categories_NonFiStoredValueCardPurchaseLoad -> "non_fi_stored_value_card_purchase_load"
    IssuingCardholderSpendingLimit_Categories_NondurableGoods -> "nondurable_goods"
    IssuingCardholderSpendingLimit_Categories_NurseriesLawnAndGardenSupplyStores -> "nurseries_lawn_and_garden_supply_stores"
    IssuingCardholderSpendingLimit_Categories_NursingPersonalCare -> "nursing_personal_care"
    IssuingCardholderSpendingLimit_Categories_OfficeAndCommercialFurniture -> "office_and_commercial_furniture"
    IssuingCardholderSpendingLimit_Categories_OpticiansEyeglasses -> "opticians_eyeglasses"
    IssuingCardholderSpendingLimit_Categories_OptometristsOphthalmologist -> "optometrists_ophthalmologist"
    IssuingCardholderSpendingLimit_Categories_OrthopedicGoodsProstheticDevices -> "orthopedic_goods_prosthetic_devices"
    IssuingCardholderSpendingLimit_Categories_Osteopaths -> "osteopaths"
    IssuingCardholderSpendingLimit_Categories_PackageStoresBeerWineAndLiquor -> "package_stores_beer_wine_and_liquor"
    IssuingCardholderSpendingLimit_Categories_PaintsVarnishesAndSupplies -> "paints_varnishes_and_supplies"
    IssuingCardholderSpendingLimit_Categories_ParkingLotsGarages -> "parking_lots_garages"
    IssuingCardholderSpendingLimit_Categories_PassengerRailways -> "passenger_railways"
    IssuingCardholderSpendingLimit_Categories_PawnShops -> "pawn_shops"
    IssuingCardholderSpendingLimit_Categories_PetShopsPetFoodAndSupplies -> "pet_shops_pet_food_and_supplies"
    IssuingCardholderSpendingLimit_Categories_PetroleumAndPetroleumProducts -> "petroleum_and_petroleum_products"
    IssuingCardholderSpendingLimit_Categories_PhotoDeveloping -> "photo_developing"
    IssuingCardholderSpendingLimit_Categories_PhotographicPhotocopyMicrofilmEquipmentAndSupplies -> "photographic_photocopy_microfilm_equipment_and_supplies"
    IssuingCardholderSpendingLimit_Categories_PhotographicStudios -> "photographic_studios"
    IssuingCardholderSpendingLimit_Categories_PictureVideoProduction -> "picture_video_production"
    IssuingCardholderSpendingLimit_Categories_PieceGoodsNotionsAndOtherDryGoods -> "piece_goods_notions_and_other_dry_goods"
    IssuingCardholderSpendingLimit_Categories_PlumbingHeatingEquipmentAndSupplies -> "plumbing_heating_equipment_and_supplies"
    IssuingCardholderSpendingLimit_Categories_PoliticalOrganizations -> "political_organizations"
    IssuingCardholderSpendingLimit_Categories_PostalServicesGovernmentOnly -> "postal_services_government_only"
    IssuingCardholderSpendingLimit_Categories_PreciousStonesAndMetalsWatchesAndJewelry -> "precious_stones_and_metals_watches_and_jewelry"
    IssuingCardholderSpendingLimit_Categories_ProfessionalServices -> "professional_services"
    IssuingCardholderSpendingLimit_Categories_PublicWarehousingAndStorage -> "public_warehousing_and_storage"
    IssuingCardholderSpendingLimit_Categories_QuickCopyReproAndBlueprint -> "quick_copy_repro_and_blueprint"
    IssuingCardholderSpendingLimit_Categories_Railroads -> "railroads"
    IssuingCardholderSpendingLimit_Categories_RealEstateAgentsAndManagersRentals -> "real_estate_agents_and_managers_rentals"
    IssuingCardholderSpendingLimit_Categories_RecordStores -> "record_stores"
    IssuingCardholderSpendingLimit_Categories_RecreationalVehicleRentals -> "recreational_vehicle_rentals"
    IssuingCardholderSpendingLimit_Categories_ReligiousGoodsStores -> "religious_goods_stores"
    IssuingCardholderSpendingLimit_Categories_ReligiousOrganizations -> "religious_organizations"
    IssuingCardholderSpendingLimit_Categories_RoofingSidingSheetMetal -> "roofing_siding_sheet_metal"
    IssuingCardholderSpendingLimit_Categories_SecretarialSupportServices -> "secretarial_support_services"
    IssuingCardholderSpendingLimit_Categories_SecurityBrokersDealers -> "security_brokers_dealers"
    IssuingCardholderSpendingLimit_Categories_ServiceStations -> "service_stations"
    IssuingCardholderSpendingLimit_Categories_SewingNeedleworkFabricAndPieceGoodsStores -> "sewing_needlework_fabric_and_piece_goods_stores"
    IssuingCardholderSpendingLimit_Categories_ShoeRepairHatCleaning -> "shoe_repair_hat_cleaning"
    IssuingCardholderSpendingLimit_Categories_ShoeStores -> "shoe_stores"
    IssuingCardholderSpendingLimit_Categories_SmallApplianceRepair -> "small_appliance_repair"
    IssuingCardholderSpendingLimit_Categories_SnowmobileDealers -> "snowmobile_dealers"
    IssuingCardholderSpendingLimit_Categories_SpecialTradeServices -> "special_trade_services"
    IssuingCardholderSpendingLimit_Categories_SpecialtyCleaning -> "specialty_cleaning"
    IssuingCardholderSpendingLimit_Categories_SportingGoodsStores -> "sporting_goods_stores"
    IssuingCardholderSpendingLimit_Categories_SportingRecreationCamps -> "sporting_recreation_camps"
    IssuingCardholderSpendingLimit_Categories_SportsAndRidingApparelStores -> "sports_and_riding_apparel_stores"
    IssuingCardholderSpendingLimit_Categories_SportsClubsFields -> "sports_clubs_fields"
    IssuingCardholderSpendingLimit_Categories_StampAndCoinStores -> "stamp_and_coin_stores"
    IssuingCardholderSpendingLimit_Categories_StationaryOfficeSuppliesPrintingAndWritingPaper -> "stationary_office_supplies_printing_and_writing_paper"
    IssuingCardholderSpendingLimit_Categories_StationeryStoresOfficeAndSchoolSupplyStores -> "stationery_stores_office_and_school_supply_stores"
    IssuingCardholderSpendingLimit_Categories_SwimmingPoolsSales -> "swimming_pools_sales"
    IssuingCardholderSpendingLimit_Categories_TUiTravelGermany -> "t_ui_travel_germany"
    IssuingCardholderSpendingLimit_Categories_TailorsAlterations -> "tailors_alterations"
    IssuingCardholderSpendingLimit_Categories_TaxPaymentsGovernmentAgencies -> "tax_payments_government_agencies"
    IssuingCardholderSpendingLimit_Categories_TaxPreparationServices -> "tax_preparation_services"
    IssuingCardholderSpendingLimit_Categories_TaxicabsLimousines -> "taxicabs_limousines"
    IssuingCardholderSpendingLimit_Categories_TelecommunicationEquipmentAndTelephoneSales -> "telecommunication_equipment_and_telephone_sales"
    IssuingCardholderSpendingLimit_Categories_TelecommunicationServices -> "telecommunication_services"
    IssuingCardholderSpendingLimit_Categories_TelegraphServices -> "telegraph_services"
    IssuingCardholderSpendingLimit_Categories_TentAndAwningShops -> "tent_and_awning_shops"
    IssuingCardholderSpendingLimit_Categories_TestingLaboratories -> "testing_laboratories"
    IssuingCardholderSpendingLimit_Categories_TheatricalTicketAgencies -> "theatrical_ticket_agencies"
    IssuingCardholderSpendingLimit_Categories_Timeshares -> "timeshares"
    IssuingCardholderSpendingLimit_Categories_TireRetreadingAndRepair -> "tire_retreading_and_repair"
    IssuingCardholderSpendingLimit_Categories_TollsBridgeFees -> "tolls_bridge_fees"
    IssuingCardholderSpendingLimit_Categories_TouristAttractionsAndExhibits -> "tourist_attractions_and_exhibits"
    IssuingCardholderSpendingLimit_Categories_TowingServices -> "towing_services"
    IssuingCardholderSpendingLimit_Categories_TrailerParksCampgrounds -> "trailer_parks_campgrounds"
    IssuingCardholderSpendingLimit_Categories_TransportationServices -> "transportation_services"
    IssuingCardholderSpendingLimit_Categories_TravelAgenciesTourOperators -> "travel_agencies_tour_operators"
    IssuingCardholderSpendingLimit_Categories_TruckStopIteration -> "truck_stop_iteration"
    IssuingCardholderSpendingLimit_Categories_TruckUtilityTrailerRentals -> "truck_utility_trailer_rentals"
    IssuingCardholderSpendingLimit_Categories_TypesettingPlateMakingAndRelatedServices -> "typesetting_plate_making_and_related_services"
    IssuingCardholderSpendingLimit_Categories_TypewriterStores -> "typewriter_stores"
    IssuingCardholderSpendingLimit_Categories_USFederalGovernmentAgenciesOrDepartments -> "u_s_federal_government_agencies_or_departments"
    IssuingCardholderSpendingLimit_Categories_UniformsCommercialClothing -> "uniforms_commercial_clothing"
    IssuingCardholderSpendingLimit_Categories_UsedMerchandiseAndSecondhandStores -> "used_merchandise_and_secondhand_stores"
    IssuingCardholderSpendingLimit_Categories_Utilities -> "utilities"
    IssuingCardholderSpendingLimit_Categories_VarietyStores -> "variety_stores"
    IssuingCardholderSpendingLimit_Categories_VeterinaryServices -> "veterinary_services"
    IssuingCardholderSpendingLimit_Categories_VideoAmusementGameSupplies -> "video_amusement_game_supplies"
    IssuingCardholderSpendingLimit_Categories_VideoGameArcades -> "video_game_arcades"
    IssuingCardholderSpendingLimit_Categories_VideoTapeRentalStores -> "video_tape_rental_stores"
    IssuingCardholderSpendingLimit_Categories_VocationalTradeSchools -> "vocational_trade_schools"
    IssuingCardholderSpendingLimit_Categories_WatchJewelryRepair -> "watch_jewelry_repair"
    IssuingCardholderSpendingLimit_Categories_WeldingRepair -> "welding_repair"
    IssuingCardholderSpendingLimit_Categories_WholesaleClubs -> "wholesale_clubs"
    IssuingCardholderSpendingLimit_Categories_WigAndToupeeStores -> "wig_and_toupee_stores"
    IssuingCardholderSpendingLimit_Categories_WiresMoneyOrders -> "wires_money_orders"
    IssuingCardholderSpendingLimit_Categories_WomensAccessoryAndSpecialtyShops -> "womens_accessory_and_specialty_shops"
    IssuingCardholderSpendingLimit_Categories_WomensReadyToWearStores -> "womens_ready_to_wear_stores"
    IssuingCardholderSpendingLimit_Categories_WreckingAndSalvageYards -> "wrecking_and_salvage_yards"

instance FromJSON IssuingCardholderSpendingLimit_Categories where
  parseJSON = withText "IssuingCardholderSpendingLimit_Categories" $ \case
    "ac_refrigeration_repair" -> pure IssuingCardholderSpendingLimit_Categories_AcRefrigerationRepair
    "accounting_bookkeeping_services" -> pure IssuingCardholderSpendingLimit_Categories_AccountingBookkeepingServices
    "advertising_services" -> pure IssuingCardholderSpendingLimit_Categories_AdvertisingServices
    "agricultural_cooperative" -> pure IssuingCardholderSpendingLimit_Categories_AgriculturalCooperative
    "airlines_air_carriers" -> pure IssuingCardholderSpendingLimit_Categories_AirlinesAirCarriers
    "airports_flying_fields" -> pure IssuingCardholderSpendingLimit_Categories_AirportsFlyingFields
    "ambulance_services" -> pure IssuingCardholderSpendingLimit_Categories_AmbulanceServices
    "amusement_parks_carnivals" -> pure IssuingCardholderSpendingLimit_Categories_AmusementParksCarnivals
    "antique_reproductions" -> pure IssuingCardholderSpendingLimit_Categories_AntiqueReproductions
    "antique_shops" -> pure IssuingCardholderSpendingLimit_Categories_AntiqueShops
    "aquariums" -> pure IssuingCardholderSpendingLimit_Categories_Aquariums
    "architectural_surveying_services" -> pure IssuingCardholderSpendingLimit_Categories_ArchitecturalSurveyingServices
    "art_dealers_and_galleries" -> pure IssuingCardholderSpendingLimit_Categories_ArtDealersAndGalleries
    "artists_supply_and_craft_shops" -> pure IssuingCardholderSpendingLimit_Categories_ArtistsSupplyAndCraftShops
    "auto_and_home_supply_stores" -> pure IssuingCardholderSpendingLimit_Categories_AutoAndHomeSupplyStores
    "auto_body_repair_shops" -> pure IssuingCardholderSpendingLimit_Categories_AutoBodyRepairShops
    "auto_paint_shops" -> pure IssuingCardholderSpendingLimit_Categories_AutoPaintShops
    "auto_service_shops" -> pure IssuingCardholderSpendingLimit_Categories_AutoServiceShops
    "automated_cash_disburse" -> pure IssuingCardholderSpendingLimit_Categories_AutomatedCashDisburse
    "automated_fuel_dispensers" -> pure IssuingCardholderSpendingLimit_Categories_AutomatedFuelDispensers
    "automobile_associations" -> pure IssuingCardholderSpendingLimit_Categories_AutomobileAssociations
    "automotive_parts_and_accessories_stores" -> pure IssuingCardholderSpendingLimit_Categories_AutomotivePartsAndAccessoriesStores
    "automotive_tire_stores" -> pure IssuingCardholderSpendingLimit_Categories_AutomotiveTireStores
    "bail_and_bond_payments" -> pure IssuingCardholderSpendingLimit_Categories_BailAndBondPayments
    "bakeries" -> pure IssuingCardholderSpendingLimit_Categories_Bakeries
    "bands_orchestras" -> pure IssuingCardholderSpendingLimit_Categories_BandsOrchestras
    "barber_and_beauty_shops" -> pure IssuingCardholderSpendingLimit_Categories_BarberAndBeautyShops
    "betting_casino_gambling" -> pure IssuingCardholderSpendingLimit_Categories_BettingCasinoGambling
    "bicycle_shops" -> pure IssuingCardholderSpendingLimit_Categories_BicycleShops
    "billiard_pool_establishments" -> pure IssuingCardholderSpendingLimit_Categories_BilliardPoolEstablishments
    "boat_dealers" -> pure IssuingCardholderSpendingLimit_Categories_BoatDealers
    "boat_rentals_and_leases" -> pure IssuingCardholderSpendingLimit_Categories_BoatRentalsAndLeases
    "book_stores" -> pure IssuingCardholderSpendingLimit_Categories_BookStores
    "books_periodicals_and_newspapers" -> pure IssuingCardholderSpendingLimit_Categories_BooksPeriodicalsAndNewspapers
    "bowling_alleys" -> pure IssuingCardholderSpendingLimit_Categories_BowlingAlleys
    "bus_lines" -> pure IssuingCardholderSpendingLimit_Categories_BusLines
    "business_secretarial_schools" -> pure IssuingCardholderSpendingLimit_Categories_BusinessSecretarialSchools
    "buying_shopping_services" -> pure IssuingCardholderSpendingLimit_Categories_BuyingShoppingServices
    "cable_satellite_and_other_pay_television_and_radio" -> pure IssuingCardholderSpendingLimit_Categories_CableSatelliteAndOtherPayTelevisionAndRadio
    "camera_and_photographic_supply_stores" -> pure IssuingCardholderSpendingLimit_Categories_CameraAndPhotographicSupplyStores
    "candy_nut_and_confectionery_stores" -> pure IssuingCardholderSpendingLimit_Categories_CandyNutAndConfectioneryStores
    "car_and_truck_dealers_new_used" -> pure IssuingCardholderSpendingLimit_Categories_CarAndTruckDealersNewUsed
    "car_and_truck_dealers_used_only" -> pure IssuingCardholderSpendingLimit_Categories_CarAndTruckDealersUsedOnly
    "car_rental_agencies" -> pure IssuingCardholderSpendingLimit_Categories_CarRentalAgencies
    "car_washes" -> pure IssuingCardholderSpendingLimit_Categories_CarWashes
    "carpentry_services" -> pure IssuingCardholderSpendingLimit_Categories_CarpentryServices
    "carpet_upholstery_cleaning" -> pure IssuingCardholderSpendingLimit_Categories_CarpetUpholsteryCleaning
    "caterers" -> pure IssuingCardholderSpendingLimit_Categories_Caterers
    "charitable_and_social_service_organizations_fundraising" -> pure IssuingCardholderSpendingLimit_Categories_CharitableAndSocialServiceOrganizationsFundraising
    "chemicals_and_allied_products" -> pure IssuingCardholderSpendingLimit_Categories_ChemicalsAndAlliedProducts
    "chidrens_and_infants_wear_stores" -> pure IssuingCardholderSpendingLimit_Categories_ChidrensAndInfantsWearStores
    "child_care_services" -> pure IssuingCardholderSpendingLimit_Categories_ChildCareServices
    "chiropodists_podiatrists" -> pure IssuingCardholderSpendingLimit_Categories_ChiropodistsPodiatrists
    "chiropractors" -> pure IssuingCardholderSpendingLimit_Categories_Chiropractors
    "cigar_stores_and_stands" -> pure IssuingCardholderSpendingLimit_Categories_CigarStoresAndStands
    "civic_social_fraternal_associations" -> pure IssuingCardholderSpendingLimit_Categories_CivicSocialFraternalAssociations
    "cleaning_and_maintenance" -> pure IssuingCardholderSpendingLimit_Categories_CleaningAndMaintenance
    "clothing_rental" -> pure IssuingCardholderSpendingLimit_Categories_ClothingRental
    "colleges_universities" -> pure IssuingCardholderSpendingLimit_Categories_CollegesUniversities
    "commercial_equipment" -> pure IssuingCardholderSpendingLimit_Categories_CommercialEquipment
    "commercial_footwear" -> pure IssuingCardholderSpendingLimit_Categories_CommercialFootwear
    "commercial_photography_art_and_graphics" -> pure IssuingCardholderSpendingLimit_Categories_CommercialPhotographyArtAndGraphics
    "commuter_transport_and_ferries" -> pure IssuingCardholderSpendingLimit_Categories_CommuterTransportAndFerries
    "computer_network_services" -> pure IssuingCardholderSpendingLimit_Categories_ComputerNetworkServices
    "computer_programming" -> pure IssuingCardholderSpendingLimit_Categories_ComputerProgramming
    "computer_repair" -> pure IssuingCardholderSpendingLimit_Categories_ComputerRepair
    "computer_software_stores" -> pure IssuingCardholderSpendingLimit_Categories_ComputerSoftwareStores
    "computers_peripherals_and_software" -> pure IssuingCardholderSpendingLimit_Categories_ComputersPeripheralsAndSoftware
    "concrete_work_services" -> pure IssuingCardholderSpendingLimit_Categories_ConcreteWorkServices
    "construction_materials" -> pure IssuingCardholderSpendingLimit_Categories_ConstructionMaterials
    "consulting_public_relations" -> pure IssuingCardholderSpendingLimit_Categories_ConsultingPublicRelations
    "correspondence_schools" -> pure IssuingCardholderSpendingLimit_Categories_CorrespondenceSchools
    "cosmetic_stores" -> pure IssuingCardholderSpendingLimit_Categories_CosmeticStores
    "counseling_services" -> pure IssuingCardholderSpendingLimit_Categories_CounselingServices
    "country_clubs" -> pure IssuingCardholderSpendingLimit_Categories_CountryClubs
    "courier_services" -> pure IssuingCardholderSpendingLimit_Categories_CourierServices
    "court_costs" -> pure IssuingCardholderSpendingLimit_Categories_CourtCosts
    "credit_reporting_agencies" -> pure IssuingCardholderSpendingLimit_Categories_CreditReportingAgencies
    "cruise_lines" -> pure IssuingCardholderSpendingLimit_Categories_CruiseLines
    "dairy_products_stores" -> pure IssuingCardholderSpendingLimit_Categories_DairyProductsStores
    "dance_hall_studios_schools" -> pure IssuingCardholderSpendingLimit_Categories_DanceHallStudiosSchools
    "dating_escort_services" -> pure IssuingCardholderSpendingLimit_Categories_DatingEscortServices
    "dentists_orthodontists" -> pure IssuingCardholderSpendingLimit_Categories_DentistsOrthodontists
    "department_stores" -> pure IssuingCardholderSpendingLimit_Categories_DepartmentStores
    "detective_agencies" -> pure IssuingCardholderSpendingLimit_Categories_DetectiveAgencies
    "digital_goods_applications" -> pure IssuingCardholderSpendingLimit_Categories_DigitalGoodsApplications
    "direct_marketing_catalog_merchant" -> pure IssuingCardholderSpendingLimit_Categories_DirectMarketingCatalogMerchant
    "direct_marketing_combination_catalog_and_retail_merchant" -> pure IssuingCardholderSpendingLimit_Categories_DirectMarketingCombinationCatalogAndRetailMerchant
    "direct_marketing_inbound_telemarketing" -> pure IssuingCardholderSpendingLimit_Categories_DirectMarketingInboundTelemarketing
    "direct_marketing_insurance_services" -> pure IssuingCardholderSpendingLimit_Categories_DirectMarketingInsuranceServices
    "direct_marketing_other" -> pure IssuingCardholderSpendingLimit_Categories_DirectMarketingOther
    "direct_marketing_outbound_telemarketing" -> pure IssuingCardholderSpendingLimit_Categories_DirectMarketingOutboundTelemarketing
    "direct_marketing_subscription" -> pure IssuingCardholderSpendingLimit_Categories_DirectMarketingSubscription
    "direct_marketing_travel" -> pure IssuingCardholderSpendingLimit_Categories_DirectMarketingTravel
    "discount_stores" -> pure IssuingCardholderSpendingLimit_Categories_DiscountStores
    "doctors" -> pure IssuingCardholderSpendingLimit_Categories_Doctors
    "door_to_door_sales" -> pure IssuingCardholderSpendingLimit_Categories_DoorToDoorSales
    "drapery_window_covering_and_upholstery_stores" -> pure IssuingCardholderSpendingLimit_Categories_DraperyWindowCoveringAndUpholsteryStores
    "drinking_places" -> pure IssuingCardholderSpendingLimit_Categories_DrinkingPlaces
    "drug_stores_and_pharmacies" -> pure IssuingCardholderSpendingLimit_Categories_DrugStoresAndPharmacies
    "drugs_drug_proprietaries_and_druggist_sundries" -> pure IssuingCardholderSpendingLimit_Categories_DrugsDrugProprietariesAndDruggistSundries
    "dry_cleaners" -> pure IssuingCardholderSpendingLimit_Categories_DryCleaners
    "durable_goods" -> pure IssuingCardholderSpendingLimit_Categories_DurableGoods
    "duty_free_stores" -> pure IssuingCardholderSpendingLimit_Categories_DutyFreeStores
    "eating_places_restaurants" -> pure IssuingCardholderSpendingLimit_Categories_EatingPlacesRestaurants
    "educational_services" -> pure IssuingCardholderSpendingLimit_Categories_EducationalServices
    "electric_razor_stores" -> pure IssuingCardholderSpendingLimit_Categories_ElectricRazorStores
    "electrical_parts_and_equipment" -> pure IssuingCardholderSpendingLimit_Categories_ElectricalPartsAndEquipment
    "electrical_services" -> pure IssuingCardholderSpendingLimit_Categories_ElectricalServices
    "electronics_repair_shops" -> pure IssuingCardholderSpendingLimit_Categories_ElectronicsRepairShops
    "electronics_stores" -> pure IssuingCardholderSpendingLimit_Categories_ElectronicsStores
    "elementary_secondary_schools" -> pure IssuingCardholderSpendingLimit_Categories_ElementarySecondarySchools
    "employment_temp_agencies" -> pure IssuingCardholderSpendingLimit_Categories_EmploymentTempAgencies
    "equipment_rental" -> pure IssuingCardholderSpendingLimit_Categories_EquipmentRental
    "exterminating_services" -> pure IssuingCardholderSpendingLimit_Categories_ExterminatingServices
    "family_clothing_stores" -> pure IssuingCardholderSpendingLimit_Categories_FamilyClothingStores
    "fast_food_restaurants" -> pure IssuingCardholderSpendingLimit_Categories_FastFoodRestaurants
    "financial_institutions" -> pure IssuingCardholderSpendingLimit_Categories_FinancialInstitutions
    "fines_government_administrative_entities" -> pure IssuingCardholderSpendingLimit_Categories_FinesGovernmentAdministrativeEntities
    "fireplace_fireplace_screens_and_accessories_stores" -> pure IssuingCardholderSpendingLimit_Categories_FireplaceFireplaceScreensAndAccessoriesStores
    "floor_covering_stores" -> pure IssuingCardholderSpendingLimit_Categories_FloorCoveringStores
    "florists" -> pure IssuingCardholderSpendingLimit_Categories_Florists
    "florists_supplies_nursery_stock_and_flowers" -> pure IssuingCardholderSpendingLimit_Categories_FloristsSuppliesNurseryStockAndFlowers
    "freezer_and_locker_meat_provisioners" -> pure IssuingCardholderSpendingLimit_Categories_FreezerAndLockerMeatProvisioners
    "fuel_dealers_non_automotive" -> pure IssuingCardholderSpendingLimit_Categories_FuelDealersNonAutomotive
    "funeral_services_crematories" -> pure IssuingCardholderSpendingLimit_Categories_FuneralServicesCrematories
    "furniture_home_furnishings_and_equipment_stores_except_appliances" -> pure IssuingCardholderSpendingLimit_Categories_FurnitureHomeFurnishingsAndEquipmentStoresExceptAppliances
    "furniture_repair_refinishing" -> pure IssuingCardholderSpendingLimit_Categories_FurnitureRepairRefinishing
    "furriers_and_fur_shops" -> pure IssuingCardholderSpendingLimit_Categories_FurriersAndFurShops
    "general_services" -> pure IssuingCardholderSpendingLimit_Categories_GeneralServices
    "gift_card_novelty_and_souvenir_shops" -> pure IssuingCardholderSpendingLimit_Categories_GiftCardNoveltyAndSouvenirShops
    "glass_paint_and_wallpaper_stores" -> pure IssuingCardholderSpendingLimit_Categories_GlassPaintAndWallpaperStores
    "glassware_crystal_stores" -> pure IssuingCardholderSpendingLimit_Categories_GlasswareCrystalStores
    "golf_courses_public" -> pure IssuingCardholderSpendingLimit_Categories_GolfCoursesPublic
    "government_services" -> pure IssuingCardholderSpendingLimit_Categories_GovernmentServices
    "grocery_stores_supermarkets" -> pure IssuingCardholderSpendingLimit_Categories_GroceryStoresSupermarkets
    "hardware_equipment_and_supplies" -> pure IssuingCardholderSpendingLimit_Categories_HardwareEquipmentAndSupplies
    "hardware_stores" -> pure IssuingCardholderSpendingLimit_Categories_HardwareStores
    "health_and_beauty_spas" -> pure IssuingCardholderSpendingLimit_Categories_HealthAndBeautySpas
    "hearing_aids_sales_and_supplies" -> pure IssuingCardholderSpendingLimit_Categories_HearingAidsSalesAndSupplies
    "heating_plumbing_a_c" -> pure IssuingCardholderSpendingLimit_Categories_HeatingPlumbingAC
    "hobby_toy_and_game_shops" -> pure IssuingCardholderSpendingLimit_Categories_HobbyToyAndGameShops
    "home_supply_warehouse_stores" -> pure IssuingCardholderSpendingLimit_Categories_HomeSupplyWarehouseStores
    "hospitals" -> pure IssuingCardholderSpendingLimit_Categories_Hospitals
    "hotels_motels_and_resorts" -> pure IssuingCardholderSpendingLimit_Categories_HotelsMotelsAndResorts
    "household_appliance_stores" -> pure IssuingCardholderSpendingLimit_Categories_HouseholdApplianceStores
    "industrial_supplies" -> pure IssuingCardholderSpendingLimit_Categories_IndustrialSupplies
    "information_retrieval_services" -> pure IssuingCardholderSpendingLimit_Categories_InformationRetrievalServices
    "insurance_default" -> pure IssuingCardholderSpendingLimit_Categories_InsuranceDefault
    "insurance_underwriting_premiums" -> pure IssuingCardholderSpendingLimit_Categories_InsuranceUnderwritingPremiums
    "intra_company_purchases" -> pure IssuingCardholderSpendingLimit_Categories_IntraCompanyPurchases
    "jewelry_stores_watches_clocks_and_silverware_stores" -> pure IssuingCardholderSpendingLimit_Categories_JewelryStoresWatchesClocksAndSilverwareStores
    "landscaping_services" -> pure IssuingCardholderSpendingLimit_Categories_LandscapingServices
    "laundries" -> pure IssuingCardholderSpendingLimit_Categories_Laundries
    "laundry_cleaning_services" -> pure IssuingCardholderSpendingLimit_Categories_LaundryCleaningServices
    "legal_services_attorneys" -> pure IssuingCardholderSpendingLimit_Categories_LegalServicesAttorneys
    "luggage_and_leather_goods_stores" -> pure IssuingCardholderSpendingLimit_Categories_LuggageAndLeatherGoodsStores
    "lumber_building_materials_stores" -> pure IssuingCardholderSpendingLimit_Categories_LumberBuildingMaterialsStores
    "manual_cash_disburse" -> pure IssuingCardholderSpendingLimit_Categories_ManualCashDisburse
    "marinas_service_and_supplies" -> pure IssuingCardholderSpendingLimit_Categories_MarinasServiceAndSupplies
    "masonry_stonework_and_plaster" -> pure IssuingCardholderSpendingLimit_Categories_MasonryStoneworkAndPlaster
    "massage_parlors" -> pure IssuingCardholderSpendingLimit_Categories_MassageParlors
    "medical_and_dental_labs" -> pure IssuingCardholderSpendingLimit_Categories_MedicalAndDentalLabs
    "medical_dental_ophthalmic_and_hospital_equipment_and_supplies" -> pure IssuingCardholderSpendingLimit_Categories_MedicalDentalOphthalmicAndHospitalEquipmentAndSupplies
    "medical_services" -> pure IssuingCardholderSpendingLimit_Categories_MedicalServices
    "membership_organizations" -> pure IssuingCardholderSpendingLimit_Categories_MembershipOrganizations
    "mens_and_boys_clothing_and_accessories_stores" -> pure IssuingCardholderSpendingLimit_Categories_MensAndBoysClothingAndAccessoriesStores
    "mens_womens_clothing_stores" -> pure IssuingCardholderSpendingLimit_Categories_MensWomensClothingStores
    "metal_service_centers" -> pure IssuingCardholderSpendingLimit_Categories_MetalServiceCenters
    "miscellaneous" -> pure IssuingCardholderSpendingLimit_Categories_Miscellaneous
    "miscellaneous_apparel_and_accessory_shops" -> pure IssuingCardholderSpendingLimit_Categories_MiscellaneousApparelAndAccessoryShops
    "miscellaneous_auto_dealers" -> pure IssuingCardholderSpendingLimit_Categories_MiscellaneousAutoDealers
    "miscellaneous_business_services" -> pure IssuingCardholderSpendingLimit_Categories_MiscellaneousBusinessServices
    "miscellaneous_food_stores" -> pure IssuingCardholderSpendingLimit_Categories_MiscellaneousFoodStores
    "miscellaneous_general_merchandise" -> pure IssuingCardholderSpendingLimit_Categories_MiscellaneousGeneralMerchandise
    "miscellaneous_general_services" -> pure IssuingCardholderSpendingLimit_Categories_MiscellaneousGeneralServices
    "miscellaneous_home_furnishing_specialty_stores" -> pure IssuingCardholderSpendingLimit_Categories_MiscellaneousHomeFurnishingSpecialtyStores
    "miscellaneous_publishing_and_printing" -> pure IssuingCardholderSpendingLimit_Categories_MiscellaneousPublishingAndPrinting
    "miscellaneous_recreation_services" -> pure IssuingCardholderSpendingLimit_Categories_MiscellaneousRecreationServices
    "miscellaneous_repair_shops" -> pure IssuingCardholderSpendingLimit_Categories_MiscellaneousRepairShops
    "miscellaneous_specialty_retail" -> pure IssuingCardholderSpendingLimit_Categories_MiscellaneousSpecialtyRetail
    "mobile_home_dealers" -> pure IssuingCardholderSpendingLimit_Categories_MobileHomeDealers
    "motion_picture_theaters" -> pure IssuingCardholderSpendingLimit_Categories_MotionPictureTheaters
    "motor_freight_carriers_and_trucking" -> pure IssuingCardholderSpendingLimit_Categories_MotorFreightCarriersAndTrucking
    "motor_homes_dealers" -> pure IssuingCardholderSpendingLimit_Categories_MotorHomesDealers
    "motor_vehicle_supplies_and_new_parts" -> pure IssuingCardholderSpendingLimit_Categories_MotorVehicleSuppliesAndNewParts
    "motorcycle_shops_and_dealers" -> pure IssuingCardholderSpendingLimit_Categories_MotorcycleShopsAndDealers
    "motorcycle_shops_dealers" -> pure IssuingCardholderSpendingLimit_Categories_MotorcycleShopsDealers
    "music_stores_musical_instruments_pianos_and_sheet_music" -> pure IssuingCardholderSpendingLimit_Categories_MusicStoresMusicalInstrumentsPianosAndSheetMusic
    "news_dealers_and_newsstands" -> pure IssuingCardholderSpendingLimit_Categories_NewsDealersAndNewsstands
    "non_fi_money_orders" -> pure IssuingCardholderSpendingLimit_Categories_NonFiMoneyOrders
    "non_fi_stored_value_card_purchase_load" -> pure IssuingCardholderSpendingLimit_Categories_NonFiStoredValueCardPurchaseLoad
    "nondurable_goods" -> pure IssuingCardholderSpendingLimit_Categories_NondurableGoods
    "nurseries_lawn_and_garden_supply_stores" -> pure IssuingCardholderSpendingLimit_Categories_NurseriesLawnAndGardenSupplyStores
    "nursing_personal_care" -> pure IssuingCardholderSpendingLimit_Categories_NursingPersonalCare
    "office_and_commercial_furniture" -> pure IssuingCardholderSpendingLimit_Categories_OfficeAndCommercialFurniture
    "opticians_eyeglasses" -> pure IssuingCardholderSpendingLimit_Categories_OpticiansEyeglasses
    "optometrists_ophthalmologist" -> pure IssuingCardholderSpendingLimit_Categories_OptometristsOphthalmologist
    "orthopedic_goods_prosthetic_devices" -> pure IssuingCardholderSpendingLimit_Categories_OrthopedicGoodsProstheticDevices
    "osteopaths" -> pure IssuingCardholderSpendingLimit_Categories_Osteopaths
    "package_stores_beer_wine_and_liquor" -> pure IssuingCardholderSpendingLimit_Categories_PackageStoresBeerWineAndLiquor
    "paints_varnishes_and_supplies" -> pure IssuingCardholderSpendingLimit_Categories_PaintsVarnishesAndSupplies
    "parking_lots_garages" -> pure IssuingCardholderSpendingLimit_Categories_ParkingLotsGarages
    "passenger_railways" -> pure IssuingCardholderSpendingLimit_Categories_PassengerRailways
    "pawn_shops" -> pure IssuingCardholderSpendingLimit_Categories_PawnShops
    "pet_shops_pet_food_and_supplies" -> pure IssuingCardholderSpendingLimit_Categories_PetShopsPetFoodAndSupplies
    "petroleum_and_petroleum_products" -> pure IssuingCardholderSpendingLimit_Categories_PetroleumAndPetroleumProducts
    "photo_developing" -> pure IssuingCardholderSpendingLimit_Categories_PhotoDeveloping
    "photographic_photocopy_microfilm_equipment_and_supplies" -> pure IssuingCardholderSpendingLimit_Categories_PhotographicPhotocopyMicrofilmEquipmentAndSupplies
    "photographic_studios" -> pure IssuingCardholderSpendingLimit_Categories_PhotographicStudios
    "picture_video_production" -> pure IssuingCardholderSpendingLimit_Categories_PictureVideoProduction
    "piece_goods_notions_and_other_dry_goods" -> pure IssuingCardholderSpendingLimit_Categories_PieceGoodsNotionsAndOtherDryGoods
    "plumbing_heating_equipment_and_supplies" -> pure IssuingCardholderSpendingLimit_Categories_PlumbingHeatingEquipmentAndSupplies
    "political_organizations" -> pure IssuingCardholderSpendingLimit_Categories_PoliticalOrganizations
    "postal_services_government_only" -> pure IssuingCardholderSpendingLimit_Categories_PostalServicesGovernmentOnly
    "precious_stones_and_metals_watches_and_jewelry" -> pure IssuingCardholderSpendingLimit_Categories_PreciousStonesAndMetalsWatchesAndJewelry
    "professional_services" -> pure IssuingCardholderSpendingLimit_Categories_ProfessionalServices
    "public_warehousing_and_storage" -> pure IssuingCardholderSpendingLimit_Categories_PublicWarehousingAndStorage
    "quick_copy_repro_and_blueprint" -> pure IssuingCardholderSpendingLimit_Categories_QuickCopyReproAndBlueprint
    "railroads" -> pure IssuingCardholderSpendingLimit_Categories_Railroads
    "real_estate_agents_and_managers_rentals" -> pure IssuingCardholderSpendingLimit_Categories_RealEstateAgentsAndManagersRentals
    "record_stores" -> pure IssuingCardholderSpendingLimit_Categories_RecordStores
    "recreational_vehicle_rentals" -> pure IssuingCardholderSpendingLimit_Categories_RecreationalVehicleRentals
    "religious_goods_stores" -> pure IssuingCardholderSpendingLimit_Categories_ReligiousGoodsStores
    "religious_organizations" -> pure IssuingCardholderSpendingLimit_Categories_ReligiousOrganizations
    "roofing_siding_sheet_metal" -> pure IssuingCardholderSpendingLimit_Categories_RoofingSidingSheetMetal
    "secretarial_support_services" -> pure IssuingCardholderSpendingLimit_Categories_SecretarialSupportServices
    "security_brokers_dealers" -> pure IssuingCardholderSpendingLimit_Categories_SecurityBrokersDealers
    "service_stations" -> pure IssuingCardholderSpendingLimit_Categories_ServiceStations
    "sewing_needlework_fabric_and_piece_goods_stores" -> pure IssuingCardholderSpendingLimit_Categories_SewingNeedleworkFabricAndPieceGoodsStores
    "shoe_repair_hat_cleaning" -> pure IssuingCardholderSpendingLimit_Categories_ShoeRepairHatCleaning
    "shoe_stores" -> pure IssuingCardholderSpendingLimit_Categories_ShoeStores
    "small_appliance_repair" -> pure IssuingCardholderSpendingLimit_Categories_SmallApplianceRepair
    "snowmobile_dealers" -> pure IssuingCardholderSpendingLimit_Categories_SnowmobileDealers
    "special_trade_services" -> pure IssuingCardholderSpendingLimit_Categories_SpecialTradeServices
    "specialty_cleaning" -> pure IssuingCardholderSpendingLimit_Categories_SpecialtyCleaning
    "sporting_goods_stores" -> pure IssuingCardholderSpendingLimit_Categories_SportingGoodsStores
    "sporting_recreation_camps" -> pure IssuingCardholderSpendingLimit_Categories_SportingRecreationCamps
    "sports_and_riding_apparel_stores" -> pure IssuingCardholderSpendingLimit_Categories_SportsAndRidingApparelStores
    "sports_clubs_fields" -> pure IssuingCardholderSpendingLimit_Categories_SportsClubsFields
    "stamp_and_coin_stores" -> pure IssuingCardholderSpendingLimit_Categories_StampAndCoinStores
    "stationary_office_supplies_printing_and_writing_paper" -> pure IssuingCardholderSpendingLimit_Categories_StationaryOfficeSuppliesPrintingAndWritingPaper
    "stationery_stores_office_and_school_supply_stores" -> pure IssuingCardholderSpendingLimit_Categories_StationeryStoresOfficeAndSchoolSupplyStores
    "swimming_pools_sales" -> pure IssuingCardholderSpendingLimit_Categories_SwimmingPoolsSales
    "t_ui_travel_germany" -> pure IssuingCardholderSpendingLimit_Categories_TUiTravelGermany
    "tailors_alterations" -> pure IssuingCardholderSpendingLimit_Categories_TailorsAlterations
    "tax_payments_government_agencies" -> pure IssuingCardholderSpendingLimit_Categories_TaxPaymentsGovernmentAgencies
    "tax_preparation_services" -> pure IssuingCardholderSpendingLimit_Categories_TaxPreparationServices
    "taxicabs_limousines" -> pure IssuingCardholderSpendingLimit_Categories_TaxicabsLimousines
    "telecommunication_equipment_and_telephone_sales" -> pure IssuingCardholderSpendingLimit_Categories_TelecommunicationEquipmentAndTelephoneSales
    "telecommunication_services" -> pure IssuingCardholderSpendingLimit_Categories_TelecommunicationServices
    "telegraph_services" -> pure IssuingCardholderSpendingLimit_Categories_TelegraphServices
    "tent_and_awning_shops" -> pure IssuingCardholderSpendingLimit_Categories_TentAndAwningShops
    "testing_laboratories" -> pure IssuingCardholderSpendingLimit_Categories_TestingLaboratories
    "theatrical_ticket_agencies" -> pure IssuingCardholderSpendingLimit_Categories_TheatricalTicketAgencies
    "timeshares" -> pure IssuingCardholderSpendingLimit_Categories_Timeshares
    "tire_retreading_and_repair" -> pure IssuingCardholderSpendingLimit_Categories_TireRetreadingAndRepair
    "tolls_bridge_fees" -> pure IssuingCardholderSpendingLimit_Categories_TollsBridgeFees
    "tourist_attractions_and_exhibits" -> pure IssuingCardholderSpendingLimit_Categories_TouristAttractionsAndExhibits
    "towing_services" -> pure IssuingCardholderSpendingLimit_Categories_TowingServices
    "trailer_parks_campgrounds" -> pure IssuingCardholderSpendingLimit_Categories_TrailerParksCampgrounds
    "transportation_services" -> pure IssuingCardholderSpendingLimit_Categories_TransportationServices
    "travel_agencies_tour_operators" -> pure IssuingCardholderSpendingLimit_Categories_TravelAgenciesTourOperators
    "truck_stop_iteration" -> pure IssuingCardholderSpendingLimit_Categories_TruckStopIteration
    "truck_utility_trailer_rentals" -> pure IssuingCardholderSpendingLimit_Categories_TruckUtilityTrailerRentals
    "typesetting_plate_making_and_related_services" -> pure IssuingCardholderSpendingLimit_Categories_TypesettingPlateMakingAndRelatedServices
    "typewriter_stores" -> pure IssuingCardholderSpendingLimit_Categories_TypewriterStores
    "u_s_federal_government_agencies_or_departments" -> pure IssuingCardholderSpendingLimit_Categories_USFederalGovernmentAgenciesOrDepartments
    "uniforms_commercial_clothing" -> pure IssuingCardholderSpendingLimit_Categories_UniformsCommercialClothing
    "used_merchandise_and_secondhand_stores" -> pure IssuingCardholderSpendingLimit_Categories_UsedMerchandiseAndSecondhandStores
    "utilities" -> pure IssuingCardholderSpendingLimit_Categories_Utilities
    "variety_stores" -> pure IssuingCardholderSpendingLimit_Categories_VarietyStores
    "veterinary_services" -> pure IssuingCardholderSpendingLimit_Categories_VeterinaryServices
    "video_amusement_game_supplies" -> pure IssuingCardholderSpendingLimit_Categories_VideoAmusementGameSupplies
    "video_game_arcades" -> pure IssuingCardholderSpendingLimit_Categories_VideoGameArcades
    "video_tape_rental_stores" -> pure IssuingCardholderSpendingLimit_Categories_VideoTapeRentalStores
    "vocational_trade_schools" -> pure IssuingCardholderSpendingLimit_Categories_VocationalTradeSchools
    "watch_jewelry_repair" -> pure IssuingCardholderSpendingLimit_Categories_WatchJewelryRepair
    "welding_repair" -> pure IssuingCardholderSpendingLimit_Categories_WeldingRepair
    "wholesale_clubs" -> pure IssuingCardholderSpendingLimit_Categories_WholesaleClubs
    "wig_and_toupee_stores" -> pure IssuingCardholderSpendingLimit_Categories_WigAndToupeeStores
    "wires_money_orders" -> pure IssuingCardholderSpendingLimit_Categories_WiresMoneyOrders
    "womens_accessory_and_specialty_shops" -> pure IssuingCardholderSpendingLimit_Categories_WomensAccessoryAndSpecialtyShops
    "womens_ready_to_wear_stores" -> pure IssuingCardholderSpendingLimit_Categories_WomensReadyToWearStores
    "wrecking_and_salvage_yards" -> pure IssuingCardholderSpendingLimit_Categories_WreckingAndSalvageYards
    str -> fail (show str <> " is not a known valid option for IssuingCardholderSpendingLimit_Categories")

data IssuingCardholderSpendingLimit_Interval
  = IssuingCardholderSpendingLimit_Interval_AllTime
  | IssuingCardholderSpendingLimit_Interval_Daily
  | IssuingCardholderSpendingLimit_Interval_Monthly
  | IssuingCardholderSpendingLimit_Interval_PerAuthorization
  | IssuingCardholderSpendingLimit_Interval_Weekly
  | IssuingCardholderSpendingLimit_Interval_Yearly
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON IssuingCardholderSpendingLimit_Interval where
  toJSON e = Text $ case e of
    IssuingCardholderSpendingLimit_Interval_AllTime -> "all_time"
    IssuingCardholderSpendingLimit_Interval_Daily -> "daily"
    IssuingCardholderSpendingLimit_Interval_Monthly -> "monthly"
    IssuingCardholderSpendingLimit_Interval_PerAuthorization -> "per_authorization"
    IssuingCardholderSpendingLimit_Interval_Weekly -> "weekly"
    IssuingCardholderSpendingLimit_Interval_Yearly -> "yearly"

instance FromJSON IssuingCardholderSpendingLimit_Interval where
  parseJSON = withText "IssuingCardholderSpendingLimit_Interval" $ \case
    "all_time" -> pure IssuingCardholderSpendingLimit_Interval_AllTime
    "daily" -> pure IssuingCardholderSpendingLimit_Interval_Daily
    "monthly" -> pure IssuingCardholderSpendingLimit_Interval_Monthly
    "per_authorization" -> pure IssuingCardholderSpendingLimit_Interval_PerAuthorization
    "weekly" -> pure IssuingCardholderSpendingLimit_Interval_Weekly
    "yearly" -> pure IssuingCardholderSpendingLimit_Interval_Yearly
    str -> fail (show str <> " is not a known valid option for IssuingCardholderSpendingLimit_Interval")

data Issuing_Authorization_Object
  = Issuing_Authorization_Object_Issuing_Authorization
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON Issuing_Authorization_Object where
  toJSON e = Text $ case e of
    Issuing_Authorization_Object_Issuing_Authorization -> "issuing.authorization"

instance FromJSON Issuing_Authorization_Object where
  parseJSON = withText "Issuing_Authorization_Object" $ \case
    "issuing.authorization" -> pure Issuing_Authorization_Object_Issuing_Authorization
    str -> fail (show str <> " is not a known valid option for Issuing_Authorization_Object")

data Issuing_CardDetails_Object
  = Issuing_CardDetails_Object_Issuing_CardDetails
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON Issuing_CardDetails_Object where
  toJSON e = Text $ case e of
    Issuing_CardDetails_Object_Issuing_CardDetails -> "issuing.card_details"

instance FromJSON Issuing_CardDetails_Object where
  parseJSON = withText "Issuing_CardDetails_Object" $ \case
    "issuing.card_details" -> pure Issuing_CardDetails_Object_Issuing_CardDetails
    str -> fail (show str <> " is not a known valid option for Issuing_CardDetails_Object")

data Issuing_CardPin_Object
  = Issuing_CardPin_Object_Issuing_CardPin
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON Issuing_CardPin_Object where
  toJSON e = Text $ case e of
    Issuing_CardPin_Object_Issuing_CardPin -> "issuing.card_pin"

instance FromJSON Issuing_CardPin_Object where
  parseJSON = withText "Issuing_CardPin_Object" $ \case
    "issuing.card_pin" -> pure Issuing_CardPin_Object_Issuing_CardPin
    str -> fail (show str <> " is not a known valid option for Issuing_CardPin_Object")

data Issuing_Card_Object
  = Issuing_Card_Object_Issuing_Card
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON Issuing_Card_Object where
  toJSON e = Text $ case e of
    Issuing_Card_Object_Issuing_Card -> "issuing.card"

instance FromJSON Issuing_Card_Object where
  parseJSON = withText "Issuing_Card_Object" $ \case
    "issuing.card" -> pure Issuing_Card_Object_Issuing_Card
    str -> fail (show str <> " is not a known valid option for Issuing_Card_Object")

data Issuing_Card_ReplacementReason
  = Issuing_Card_ReplacementReason_Damage
  | Issuing_Card_ReplacementReason_Expiration
  | Issuing_Card_ReplacementReason_Loss
  | Issuing_Card_ReplacementReason_Theft
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON Issuing_Card_ReplacementReason where
  toJSON e = Text $ case e of
    Issuing_Card_ReplacementReason_Damage -> "damage"
    Issuing_Card_ReplacementReason_Expiration -> "expiration"
    Issuing_Card_ReplacementReason_Loss -> "loss"
    Issuing_Card_ReplacementReason_Theft -> "theft"

instance FromJSON Issuing_Card_ReplacementReason where
  parseJSON = withText "Issuing_Card_ReplacementReason" $ \case
    "damage" -> pure Issuing_Card_ReplacementReason_Damage
    "expiration" -> pure Issuing_Card_ReplacementReason_Expiration
    "loss" -> pure Issuing_Card_ReplacementReason_Loss
    "theft" -> pure Issuing_Card_ReplacementReason_Theft
    str -> fail (show str <> " is not a known valid option for Issuing_Card_ReplacementReason")

data Issuing_Card_Status
  = Issuing_Card_Status_Active
  | Issuing_Card_Status_Canceled
  | Issuing_Card_Status_Inactive
  | Issuing_Card_Status_Lost
  | Issuing_Card_Status_Pending
  | Issuing_Card_Status_Stolen
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON Issuing_Card_Status where
  toJSON e = Text $ case e of
    Issuing_Card_Status_Active -> "active"
    Issuing_Card_Status_Canceled -> "canceled"
    Issuing_Card_Status_Inactive -> "inactive"
    Issuing_Card_Status_Lost -> "lost"
    Issuing_Card_Status_Pending -> "pending"
    Issuing_Card_Status_Stolen -> "stolen"

instance FromJSON Issuing_Card_Status where
  parseJSON = withText "Issuing_Card_Status" $ \case
    "active" -> pure Issuing_Card_Status_Active
    "canceled" -> pure Issuing_Card_Status_Canceled
    "inactive" -> pure Issuing_Card_Status_Inactive
    "lost" -> pure Issuing_Card_Status_Lost
    "pending" -> pure Issuing_Card_Status_Pending
    "stolen" -> pure Issuing_Card_Status_Stolen
    str -> fail (show str <> " is not a known valid option for Issuing_Card_Status")

data Issuing_Cardholder_Object
  = Issuing_Cardholder_Object_Issuing_Cardholder
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON Issuing_Cardholder_Object where
  toJSON e = Text $ case e of
    Issuing_Cardholder_Object_Issuing_Cardholder -> "issuing.cardholder"

instance FromJSON Issuing_Cardholder_Object where
  parseJSON = withText "Issuing_Cardholder_Object" $ \case
    "issuing.cardholder" -> pure Issuing_Cardholder_Object_Issuing_Cardholder
    str -> fail (show str <> " is not a known valid option for Issuing_Cardholder_Object")

data Issuing_Cardholder_Status
  = Issuing_Cardholder_Status_Active
  | Issuing_Cardholder_Status_Blocked
  | Issuing_Cardholder_Status_Inactive
  | Issuing_Cardholder_Status_Pending
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON Issuing_Cardholder_Status where
  toJSON e = Text $ case e of
    Issuing_Cardholder_Status_Active -> "active"
    Issuing_Cardholder_Status_Blocked -> "blocked"
    Issuing_Cardholder_Status_Inactive -> "inactive"
    Issuing_Cardholder_Status_Pending -> "pending"

instance FromJSON Issuing_Cardholder_Status where
  parseJSON = withText "Issuing_Cardholder_Status" $ \case
    "active" -> pure Issuing_Cardholder_Status_Active
    "blocked" -> pure Issuing_Cardholder_Status_Blocked
    "inactive" -> pure Issuing_Cardholder_Status_Inactive
    "pending" -> pure Issuing_Cardholder_Status_Pending
    str -> fail (show str <> " is not a known valid option for Issuing_Cardholder_Status")

data Issuing_Cardholder_Type
  = Issuing_Cardholder_Type_BusinessEntity
  | Issuing_Cardholder_Type_Individual
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON Issuing_Cardholder_Type where
  toJSON e = Text $ case e of
    Issuing_Cardholder_Type_BusinessEntity -> "business_entity"
    Issuing_Cardholder_Type_Individual -> "individual"

instance FromJSON Issuing_Cardholder_Type where
  parseJSON = withText "Issuing_Cardholder_Type" $ \case
    "business_entity" -> pure Issuing_Cardholder_Type_BusinessEntity
    "individual" -> pure Issuing_Cardholder_Type_Individual
    str -> fail (show str <> " is not a known valid option for Issuing_Cardholder_Type")

data Issuing_Dispute_Object
  = Issuing_Dispute_Object_Issuing_Dispute
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON Issuing_Dispute_Object where
  toJSON e = Text $ case e of
    Issuing_Dispute_Object_Issuing_Dispute -> "issuing.dispute"

instance FromJSON Issuing_Dispute_Object where
  parseJSON = withText "Issuing_Dispute_Object" $ \case
    "issuing.dispute" -> pure Issuing_Dispute_Object_Issuing_Dispute
    str -> fail (show str <> " is not a known valid option for Issuing_Dispute_Object")

data Issuing_Settlement_Object
  = Issuing_Settlement_Object_Issuing_Settlement
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON Issuing_Settlement_Object where
  toJSON e = Text $ case e of
    Issuing_Settlement_Object_Issuing_Settlement -> "issuing.settlement"

instance FromJSON Issuing_Settlement_Object where
  parseJSON = withText "Issuing_Settlement_Object" $ \case
    "issuing.settlement" -> pure Issuing_Settlement_Object_Issuing_Settlement
    str -> fail (show str <> " is not a known valid option for Issuing_Settlement_Object")

data Issuing_Transaction_Object
  = Issuing_Transaction_Object_Issuing_Transaction
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON Issuing_Transaction_Object where
  toJSON e = Text $ case e of
    Issuing_Transaction_Object_Issuing_Transaction -> "issuing.transaction"

instance FromJSON Issuing_Transaction_Object where
  parseJSON = withText "Issuing_Transaction_Object" $ \case
    "issuing.transaction" -> pure Issuing_Transaction_Object_Issuing_Transaction
    str -> fail (show str <> " is not a known valid option for Issuing_Transaction_Object")

data Issuing_Verification_Object
  = Issuing_Verification_Object_Issuing_Verification
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON Issuing_Verification_Object where
  toJSON e = Text $ case e of
    Issuing_Verification_Object_Issuing_Verification -> "issuing.verification"

instance FromJSON Issuing_Verification_Object where
  parseJSON = withText "Issuing_Verification_Object" $ \case
    "issuing.verification" -> pure Issuing_Verification_Object_Issuing_Verification
    str -> fail (show str <> " is not a known valid option for Issuing_Verification_Object")

data Issuing_Verification_Scope
  = Issuing_Verification_Scope_CardPinRetrieve
  | Issuing_Verification_Scope_CardPinUpdate
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON Issuing_Verification_Scope where
  toJSON e = Text $ case e of
    Issuing_Verification_Scope_CardPinRetrieve -> "card_pin_retrieve"
    Issuing_Verification_Scope_CardPinUpdate -> "card_pin_update"

instance FromJSON Issuing_Verification_Scope where
  parseJSON = withText "Issuing_Verification_Scope" $ \case
    "card_pin_retrieve" -> pure Issuing_Verification_Scope_CardPinRetrieve
    "card_pin_update" -> pure Issuing_Verification_Scope_CardPinUpdate
    str -> fail (show str <> " is not a known valid option for Issuing_Verification_Scope")

data Issuing_Verification_VerificationMethod
  = Issuing_Verification_VerificationMethod_Email
  | Issuing_Verification_VerificationMethod_Sms
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON Issuing_Verification_VerificationMethod where
  toJSON e = Text $ case e of
    Issuing_Verification_VerificationMethod_Email -> "email"
    Issuing_Verification_VerificationMethod_Sms -> "sms"

instance FromJSON Issuing_Verification_VerificationMethod where
  parseJSON = withText "Issuing_Verification_VerificationMethod" $ \case
    "email" -> pure Issuing_Verification_VerificationMethod_Email
    "sms" -> pure Issuing_Verification_VerificationMethod_Sms
    str -> fail (show str <> " is not a known valid option for Issuing_Verification_VerificationMethod")

data LineItem_Object
  = LineItem_Object_LineItem
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON LineItem_Object where
  toJSON e = Text $ case e of
    LineItem_Object_LineItem -> "line_item"

instance FromJSON LineItem_Object where
  parseJSON = withText "LineItem_Object" $ \case
    "line_item" -> pure LineItem_Object_LineItem
    str -> fail (show str <> " is not a known valid option for LineItem_Object")

data LineItem_Type
  = LineItem_Type_Invoiceitem
  | LineItem_Type_Subscription
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON LineItem_Type where
  toJSON e = Text $ case e of
    LineItem_Type_Invoiceitem -> "invoiceitem"
    LineItem_Type_Subscription -> "subscription"

instance FromJSON LineItem_Type where
  parseJSON = withText "LineItem_Type" $ \case
    "invoiceitem" -> pure LineItem_Type_Invoiceitem
    "subscription" -> pure LineItem_Type_Subscription
    str -> fail (show str <> " is not a known valid option for LineItem_Type")

data LoginLink_Object
  = LoginLink_Object_LoginLink
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON LoginLink_Object where
  toJSON e = Text $ case e of
    LoginLink_Object_LoginLink -> "login_link"

instance FromJSON LoginLink_Object where
  parseJSON = withText "LoginLink_Object" $ \case
    "login_link" -> pure LoginLink_Object_LoginLink
    str -> fail (show str <> " is not a known valid option for LoginLink_Object")

data OrderItem_Object
  = OrderItem_Object_OrderItem
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON OrderItem_Object where
  toJSON e = Text $ case e of
    OrderItem_Object_OrderItem -> "order_item"

instance FromJSON OrderItem_Object where
  parseJSON = withText "OrderItem_Object" $ \case
    "order_item" -> pure OrderItem_Object_OrderItem
    str -> fail (show str <> " is not a known valid option for OrderItem_Object")

data OrderReturn_Object
  = OrderReturn_Object_OrderReturn
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON OrderReturn_Object where
  toJSON e = Text $ case e of
    OrderReturn_Object_OrderReturn -> "order_return"

instance FromJSON OrderReturn_Object where
  parseJSON = withText "OrderReturn_Object" $ \case
    "order_return" -> pure OrderReturn_Object_OrderReturn
    str -> fail (show str <> " is not a known valid option for OrderReturn_Object")

data Order_Object
  = Order_Object_Order
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON Order_Object where
  toJSON e = Text $ case e of
    Order_Object_Order -> "order"

instance FromJSON Order_Object where
  parseJSON = withText "Order_Object" $ \case
    "order" -> pure Order_Object_Order
    str -> fail (show str <> " is not a known valid option for Order_Object")

data PaymentIntentPaymentMethodOptionsCard_RequestThreeDSecure
  = PaymentIntentPaymentMethodOptionsCard_RequestThreeDSecure_Any
  | PaymentIntentPaymentMethodOptionsCard_RequestThreeDSecure_Automatic
  | PaymentIntentPaymentMethodOptionsCard_RequestThreeDSecure_ChallengeOnly
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON PaymentIntentPaymentMethodOptionsCard_RequestThreeDSecure where
  toJSON e = Text $ case e of
    PaymentIntentPaymentMethodOptionsCard_RequestThreeDSecure_Any -> "any"
    PaymentIntentPaymentMethodOptionsCard_RequestThreeDSecure_Automatic -> "automatic"
    PaymentIntentPaymentMethodOptionsCard_RequestThreeDSecure_ChallengeOnly -> "challenge_only"

instance FromJSON PaymentIntentPaymentMethodOptionsCard_RequestThreeDSecure where
  parseJSON = withText "PaymentIntentPaymentMethodOptionsCard_RequestThreeDSecure" $ \case
    "any" -> pure PaymentIntentPaymentMethodOptionsCard_RequestThreeDSecure_Any
    "automatic" -> pure PaymentIntentPaymentMethodOptionsCard_RequestThreeDSecure_Automatic
    "challenge_only" -> pure PaymentIntentPaymentMethodOptionsCard_RequestThreeDSecure_ChallengeOnly
    str -> fail (show str <> " is not a known valid option for PaymentIntentPaymentMethodOptionsCard_RequestThreeDSecure")

data PaymentIntent_CancellationReason
  = PaymentIntent_CancellationReason_Abandoned
  | PaymentIntent_CancellationReason_Automatic
  | PaymentIntent_CancellationReason_Duplicate
  | PaymentIntent_CancellationReason_FailedInvoice
  | PaymentIntent_CancellationReason_Fraudulent
  | PaymentIntent_CancellationReason_RequestedByCustomer
  | PaymentIntent_CancellationReason_VoidInvoice
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON PaymentIntent_CancellationReason where
  toJSON e = Text $ case e of
    PaymentIntent_CancellationReason_Abandoned -> "abandoned"
    PaymentIntent_CancellationReason_Automatic -> "automatic"
    PaymentIntent_CancellationReason_Duplicate -> "duplicate"
    PaymentIntent_CancellationReason_FailedInvoice -> "failed_invoice"
    PaymentIntent_CancellationReason_Fraudulent -> "fraudulent"
    PaymentIntent_CancellationReason_RequestedByCustomer -> "requested_by_customer"
    PaymentIntent_CancellationReason_VoidInvoice -> "void_invoice"

instance FromJSON PaymentIntent_CancellationReason where
  parseJSON = withText "PaymentIntent_CancellationReason" $ \case
    "abandoned" -> pure PaymentIntent_CancellationReason_Abandoned
    "automatic" -> pure PaymentIntent_CancellationReason_Automatic
    "duplicate" -> pure PaymentIntent_CancellationReason_Duplicate
    "failed_invoice" -> pure PaymentIntent_CancellationReason_FailedInvoice
    "fraudulent" -> pure PaymentIntent_CancellationReason_Fraudulent
    "requested_by_customer" -> pure PaymentIntent_CancellationReason_RequestedByCustomer
    "void_invoice" -> pure PaymentIntent_CancellationReason_VoidInvoice
    str -> fail (show str <> " is not a known valid option for PaymentIntent_CancellationReason")

data PaymentIntent_CaptureMethod
  = PaymentIntent_CaptureMethod_Automatic
  | PaymentIntent_CaptureMethod_Manual
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON PaymentIntent_CaptureMethod where
  toJSON e = Text $ case e of
    PaymentIntent_CaptureMethod_Automatic -> "automatic"
    PaymentIntent_CaptureMethod_Manual -> "manual"

instance FromJSON PaymentIntent_CaptureMethod where
  parseJSON = withText "PaymentIntent_CaptureMethod" $ \case
    "automatic" -> pure PaymentIntent_CaptureMethod_Automatic
    "manual" -> pure PaymentIntent_CaptureMethod_Manual
    str -> fail (show str <> " is not a known valid option for PaymentIntent_CaptureMethod")

data PaymentIntent_ConfirmationMethod
  = PaymentIntent_ConfirmationMethod_Automatic
  | PaymentIntent_ConfirmationMethod_Manual
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON PaymentIntent_ConfirmationMethod where
  toJSON e = Text $ case e of
    PaymentIntent_ConfirmationMethod_Automatic -> "automatic"
    PaymentIntent_ConfirmationMethod_Manual -> "manual"

instance FromJSON PaymentIntent_ConfirmationMethod where
  parseJSON = withText "PaymentIntent_ConfirmationMethod" $ \case
    "automatic" -> pure PaymentIntent_ConfirmationMethod_Automatic
    "manual" -> pure PaymentIntent_ConfirmationMethod_Manual
    str -> fail (show str <> " is not a known valid option for PaymentIntent_ConfirmationMethod")

data PaymentIntent_Object
  = PaymentIntent_Object_PaymentIntent
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON PaymentIntent_Object where
  toJSON e = Text $ case e of
    PaymentIntent_Object_PaymentIntent -> "payment_intent"

instance FromJSON PaymentIntent_Object where
  parseJSON = withText "PaymentIntent_Object" $ \case
    "payment_intent" -> pure PaymentIntent_Object_PaymentIntent
    str -> fail (show str <> " is not a known valid option for PaymentIntent_Object")

data PaymentIntent_Status
  = PaymentIntent_Status_Canceled
  | PaymentIntent_Status_Processing
  | PaymentIntent_Status_RequiresAction
  | PaymentIntent_Status_RequiresCapture
  | PaymentIntent_Status_RequiresConfirmation
  | PaymentIntent_Status_RequiresPaymentMethod
  | PaymentIntent_Status_Succeeded
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON PaymentIntent_Status where
  toJSON e = Text $ case e of
    PaymentIntent_Status_Canceled -> "canceled"
    PaymentIntent_Status_Processing -> "processing"
    PaymentIntent_Status_RequiresAction -> "requires_action"
    PaymentIntent_Status_RequiresCapture -> "requires_capture"
    PaymentIntent_Status_RequiresConfirmation -> "requires_confirmation"
    PaymentIntent_Status_RequiresPaymentMethod -> "requires_payment_method"
    PaymentIntent_Status_Succeeded -> "succeeded"

instance FromJSON PaymentIntent_Status where
  parseJSON = withText "PaymentIntent_Status" $ \case
    "canceled" -> pure PaymentIntent_Status_Canceled
    "processing" -> pure PaymentIntent_Status_Processing
    "requires_action" -> pure PaymentIntent_Status_RequiresAction
    "requires_capture" -> pure PaymentIntent_Status_RequiresCapture
    "requires_confirmation" -> pure PaymentIntent_Status_RequiresConfirmation
    "requires_payment_method" -> pure PaymentIntent_Status_RequiresPaymentMethod
    "succeeded" -> pure PaymentIntent_Status_Succeeded
    str -> fail (show str <> " is not a known valid option for PaymentIntent_Status")

data PaymentMethodCardWallet_Type
  = PaymentMethodCardWallet_Type_AmexExpressCheckout
  | PaymentMethodCardWallet_Type_ApplePay
  | PaymentMethodCardWallet_Type_GooglePay
  | PaymentMethodCardWallet_Type_Masterpass
  | PaymentMethodCardWallet_Type_SamsungPay
  | PaymentMethodCardWallet_Type_VisaCheckout
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON PaymentMethodCardWallet_Type where
  toJSON e = Text $ case e of
    PaymentMethodCardWallet_Type_AmexExpressCheckout -> "amex_express_checkout"
    PaymentMethodCardWallet_Type_ApplePay -> "apple_pay"
    PaymentMethodCardWallet_Type_GooglePay -> "google_pay"
    PaymentMethodCardWallet_Type_Masterpass -> "masterpass"
    PaymentMethodCardWallet_Type_SamsungPay -> "samsung_pay"
    PaymentMethodCardWallet_Type_VisaCheckout -> "visa_checkout"

instance FromJSON PaymentMethodCardWallet_Type where
  parseJSON = withText "PaymentMethodCardWallet_Type" $ \case
    "amex_express_checkout" -> pure PaymentMethodCardWallet_Type_AmexExpressCheckout
    "apple_pay" -> pure PaymentMethodCardWallet_Type_ApplePay
    "google_pay" -> pure PaymentMethodCardWallet_Type_GooglePay
    "masterpass" -> pure PaymentMethodCardWallet_Type_Masterpass
    "samsung_pay" -> pure PaymentMethodCardWallet_Type_SamsungPay
    "visa_checkout" -> pure PaymentMethodCardWallet_Type_VisaCheckout
    str -> fail (show str <> " is not a known valid option for PaymentMethodCardWallet_Type")

data PaymentMethodDetailsAchDebit_AccountHolderType
  = PaymentMethodDetailsAchDebit_AccountHolderType_Company
  | PaymentMethodDetailsAchDebit_AccountHolderType_Individual
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON PaymentMethodDetailsAchDebit_AccountHolderType where
  toJSON e = Text $ case e of
    PaymentMethodDetailsAchDebit_AccountHolderType_Company -> "company"
    PaymentMethodDetailsAchDebit_AccountHolderType_Individual -> "individual"

instance FromJSON PaymentMethodDetailsAchDebit_AccountHolderType where
  parseJSON = withText "PaymentMethodDetailsAchDebit_AccountHolderType" $ \case
    "company" -> pure PaymentMethodDetailsAchDebit_AccountHolderType_Company
    "individual" -> pure PaymentMethodDetailsAchDebit_AccountHolderType_Individual
    str -> fail (show str <> " is not a known valid option for PaymentMethodDetailsAchDebit_AccountHolderType")

data PaymentMethodDetailsBancontact_PreferredLanguage
  = PaymentMethodDetailsBancontact_PreferredLanguage_De
  | PaymentMethodDetailsBancontact_PreferredLanguage_En
  | PaymentMethodDetailsBancontact_PreferredLanguage_Fr
  | PaymentMethodDetailsBancontact_PreferredLanguage_Nl
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON PaymentMethodDetailsBancontact_PreferredLanguage where
  toJSON e = Text $ case e of
    PaymentMethodDetailsBancontact_PreferredLanguage_De -> "de"
    PaymentMethodDetailsBancontact_PreferredLanguage_En -> "en"
    PaymentMethodDetailsBancontact_PreferredLanguage_Fr -> "fr"
    PaymentMethodDetailsBancontact_PreferredLanguage_Nl -> "nl"

instance FromJSON PaymentMethodDetailsBancontact_PreferredLanguage where
  parseJSON = withText "PaymentMethodDetailsBancontact_PreferredLanguage" $ \case
    "de" -> pure PaymentMethodDetailsBancontact_PreferredLanguage_De
    "en" -> pure PaymentMethodDetailsBancontact_PreferredLanguage_En
    "fr" -> pure PaymentMethodDetailsBancontact_PreferredLanguage_Fr
    "nl" -> pure PaymentMethodDetailsBancontact_PreferredLanguage_Nl
    str -> fail (show str <> " is not a known valid option for PaymentMethodDetailsBancontact_PreferredLanguage")

data PaymentMethodDetailsCardWallet_Type
  = PaymentMethodDetailsCardWallet_Type_AmexExpressCheckout
  | PaymentMethodDetailsCardWallet_Type_ApplePay
  | PaymentMethodDetailsCardWallet_Type_GooglePay
  | PaymentMethodDetailsCardWallet_Type_Masterpass
  | PaymentMethodDetailsCardWallet_Type_SamsungPay
  | PaymentMethodDetailsCardWallet_Type_VisaCheckout
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON PaymentMethodDetailsCardWallet_Type where
  toJSON e = Text $ case e of
    PaymentMethodDetailsCardWallet_Type_AmexExpressCheckout -> "amex_express_checkout"
    PaymentMethodDetailsCardWallet_Type_ApplePay -> "apple_pay"
    PaymentMethodDetailsCardWallet_Type_GooglePay -> "google_pay"
    PaymentMethodDetailsCardWallet_Type_Masterpass -> "masterpass"
    PaymentMethodDetailsCardWallet_Type_SamsungPay -> "samsung_pay"
    PaymentMethodDetailsCardWallet_Type_VisaCheckout -> "visa_checkout"

instance FromJSON PaymentMethodDetailsCardWallet_Type where
  parseJSON = withText "PaymentMethodDetailsCardWallet_Type" $ \case
    "amex_express_checkout" -> pure PaymentMethodDetailsCardWallet_Type_AmexExpressCheckout
    "apple_pay" -> pure PaymentMethodDetailsCardWallet_Type_ApplePay
    "google_pay" -> pure PaymentMethodDetailsCardWallet_Type_GooglePay
    "masterpass" -> pure PaymentMethodDetailsCardWallet_Type_Masterpass
    "samsung_pay" -> pure PaymentMethodDetailsCardWallet_Type_SamsungPay
    "visa_checkout" -> pure PaymentMethodDetailsCardWallet_Type_VisaCheckout
    str -> fail (show str <> " is not a known valid option for PaymentMethodDetailsCardWallet_Type")

data PaymentMethodDetailsIdeal_Bank
  = PaymentMethodDetailsIdeal_Bank_AbnAmro
  | PaymentMethodDetailsIdeal_Bank_AsnBank
  | PaymentMethodDetailsIdeal_Bank_Bunq
  | PaymentMethodDetailsIdeal_Bank_Handelsbanken
  | PaymentMethodDetailsIdeal_Bank_Ing
  | PaymentMethodDetailsIdeal_Bank_Knab
  | PaymentMethodDetailsIdeal_Bank_Moneyou
  | PaymentMethodDetailsIdeal_Bank_Rabobank
  | PaymentMethodDetailsIdeal_Bank_Regiobank
  | PaymentMethodDetailsIdeal_Bank_SnsBank
  | PaymentMethodDetailsIdeal_Bank_TriodosBank
  | PaymentMethodDetailsIdeal_Bank_VanLanschot
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON PaymentMethodDetailsIdeal_Bank where
  toJSON e = Text $ case e of
    PaymentMethodDetailsIdeal_Bank_AbnAmro -> "abn_amro"
    PaymentMethodDetailsIdeal_Bank_AsnBank -> "asn_bank"
    PaymentMethodDetailsIdeal_Bank_Bunq -> "bunq"
    PaymentMethodDetailsIdeal_Bank_Handelsbanken -> "handelsbanken"
    PaymentMethodDetailsIdeal_Bank_Ing -> "ing"
    PaymentMethodDetailsIdeal_Bank_Knab -> "knab"
    PaymentMethodDetailsIdeal_Bank_Moneyou -> "moneyou"
    PaymentMethodDetailsIdeal_Bank_Rabobank -> "rabobank"
    PaymentMethodDetailsIdeal_Bank_Regiobank -> "regiobank"
    PaymentMethodDetailsIdeal_Bank_SnsBank -> "sns_bank"
    PaymentMethodDetailsIdeal_Bank_TriodosBank -> "triodos_bank"
    PaymentMethodDetailsIdeal_Bank_VanLanschot -> "van_lanschot"

instance FromJSON PaymentMethodDetailsIdeal_Bank where
  parseJSON = withText "PaymentMethodDetailsIdeal_Bank" $ \case
    "abn_amro" -> pure PaymentMethodDetailsIdeal_Bank_AbnAmro
    "asn_bank" -> pure PaymentMethodDetailsIdeal_Bank_AsnBank
    "bunq" -> pure PaymentMethodDetailsIdeal_Bank_Bunq
    "handelsbanken" -> pure PaymentMethodDetailsIdeal_Bank_Handelsbanken
    "ing" -> pure PaymentMethodDetailsIdeal_Bank_Ing
    "knab" -> pure PaymentMethodDetailsIdeal_Bank_Knab
    "moneyou" -> pure PaymentMethodDetailsIdeal_Bank_Moneyou
    "rabobank" -> pure PaymentMethodDetailsIdeal_Bank_Rabobank
    "regiobank" -> pure PaymentMethodDetailsIdeal_Bank_Regiobank
    "sns_bank" -> pure PaymentMethodDetailsIdeal_Bank_SnsBank
    "triodos_bank" -> pure PaymentMethodDetailsIdeal_Bank_TriodosBank
    "van_lanschot" -> pure PaymentMethodDetailsIdeal_Bank_VanLanschot
    str -> fail (show str <> " is not a known valid option for PaymentMethodDetailsIdeal_Bank")

data PaymentMethodDetailsIdeal_Bic
  = PaymentMethodDetailsIdeal_Bic_ABNANL2A
  | PaymentMethodDetailsIdeal_Bic_ASNBNL21
  | PaymentMethodDetailsIdeal_Bic_BUNQNL2A
  | PaymentMethodDetailsIdeal_Bic_FVLBNL22
  | PaymentMethodDetailsIdeal_Bic_HANDNL2A
  | PaymentMethodDetailsIdeal_Bic_INGBNL2A
  | PaymentMethodDetailsIdeal_Bic_KNABNL2H
  | PaymentMethodDetailsIdeal_Bic_MOYONL21
  | PaymentMethodDetailsIdeal_Bic_RABONL2U
  | PaymentMethodDetailsIdeal_Bic_RBRBNL21
  | PaymentMethodDetailsIdeal_Bic_SNSBNL2A
  | PaymentMethodDetailsIdeal_Bic_TRIONL2U
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON PaymentMethodDetailsIdeal_Bic where
  toJSON e = Text $ case e of
    PaymentMethodDetailsIdeal_Bic_ABNANL2A -> "ABNANL2A"
    PaymentMethodDetailsIdeal_Bic_ASNBNL21 -> "ASNBNL21"
    PaymentMethodDetailsIdeal_Bic_BUNQNL2A -> "BUNQNL2A"
    PaymentMethodDetailsIdeal_Bic_FVLBNL22 -> "FVLBNL22"
    PaymentMethodDetailsIdeal_Bic_HANDNL2A -> "HANDNL2A"
    PaymentMethodDetailsIdeal_Bic_INGBNL2A -> "INGBNL2A"
    PaymentMethodDetailsIdeal_Bic_KNABNL2H -> "KNABNL2H"
    PaymentMethodDetailsIdeal_Bic_MOYONL21 -> "MOYONL21"
    PaymentMethodDetailsIdeal_Bic_RABONL2U -> "RABONL2U"
    PaymentMethodDetailsIdeal_Bic_RBRBNL21 -> "RBRBNL21"
    PaymentMethodDetailsIdeal_Bic_SNSBNL2A -> "SNSBNL2A"
    PaymentMethodDetailsIdeal_Bic_TRIONL2U -> "TRIONL2U"

instance FromJSON PaymentMethodDetailsIdeal_Bic where
  parseJSON = withText "PaymentMethodDetailsIdeal_Bic" $ \case
    "ABNANL2A" -> pure PaymentMethodDetailsIdeal_Bic_ABNANL2A
    "ASNBNL21" -> pure PaymentMethodDetailsIdeal_Bic_ASNBNL21
    "BUNQNL2A" -> pure PaymentMethodDetailsIdeal_Bic_BUNQNL2A
    "FVLBNL22" -> pure PaymentMethodDetailsIdeal_Bic_FVLBNL22
    "HANDNL2A" -> pure PaymentMethodDetailsIdeal_Bic_HANDNL2A
    "INGBNL2A" -> pure PaymentMethodDetailsIdeal_Bic_INGBNL2A
    "KNABNL2H" -> pure PaymentMethodDetailsIdeal_Bic_KNABNL2H
    "MOYONL21" -> pure PaymentMethodDetailsIdeal_Bic_MOYONL21
    "RABONL2U" -> pure PaymentMethodDetailsIdeal_Bic_RABONL2U
    "RBRBNL21" -> pure PaymentMethodDetailsIdeal_Bic_RBRBNL21
    "SNSBNL2A" -> pure PaymentMethodDetailsIdeal_Bic_SNSBNL2A
    "TRIONL2U" -> pure PaymentMethodDetailsIdeal_Bic_TRIONL2U
    str -> fail (show str <> " is not a known valid option for PaymentMethodDetailsIdeal_Bic")

data PaymentMethod_Object
  = PaymentMethod_Object_PaymentMethod
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON PaymentMethod_Object where
  toJSON e = Text $ case e of
    PaymentMethod_Object_PaymentMethod -> "payment_method"

instance FromJSON PaymentMethod_Object where
  parseJSON = withText "PaymentMethod_Object" $ \case
    "payment_method" -> pure PaymentMethod_Object_PaymentMethod
    str -> fail (show str <> " is not a known valid option for PaymentMethod_Object")

data PaymentMethod_Type
  = PaymentMethod_Type_Card
  | PaymentMethod_Type_CardPresent
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON PaymentMethod_Type where
  toJSON e = Text $ case e of
    PaymentMethod_Type_Card -> "card"
    PaymentMethod_Type_CardPresent -> "card_present"

instance FromJSON PaymentMethod_Type where
  parseJSON = withText "PaymentMethod_Type" $ \case
    "card" -> pure PaymentMethod_Type_Card
    "card_present" -> pure PaymentMethod_Type_CardPresent
    str -> fail (show str <> " is not a known valid option for PaymentMethod_Type")

data Payout_Object
  = Payout_Object_Payout
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON Payout_Object where
  toJSON e = Text $ case e of
    Payout_Object_Payout -> "payout"

instance FromJSON Payout_Object where
  parseJSON = withText "Payout_Object" $ \case
    "payout" -> pure Payout_Object_Payout
    str -> fail (show str <> " is not a known valid option for Payout_Object")

data Payout_Type
  = Payout_Type_BankAccount
  | Payout_Type_Card
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON Payout_Type where
  toJSON e = Text $ case e of
    Payout_Type_BankAccount -> "bank_account"
    Payout_Type_Card -> "card"

instance FromJSON Payout_Type where
  parseJSON = withText "Payout_Type" $ \case
    "bank_account" -> pure Payout_Type_BankAccount
    "card" -> pure Payout_Type_Card
    str -> fail (show str <> " is not a known valid option for Payout_Type")

data Person_Object
  = Person_Object_Person
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON Person_Object where
  toJSON e = Text $ case e of
    Person_Object_Person -> "person"

instance FromJSON Person_Object where
  parseJSON = withText "Person_Object" $ \case
    "person" -> pure Person_Object_Person
    str -> fail (show str <> " is not a known valid option for Person_Object")

data Plan_AggregateUsage
  = Plan_AggregateUsage_LastDuringPeriod
  | Plan_AggregateUsage_LastEver
  | Plan_AggregateUsage_Max
  | Plan_AggregateUsage_Sum
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON Plan_AggregateUsage where
  toJSON e = Text $ case e of
    Plan_AggregateUsage_LastDuringPeriod -> "last_during_period"
    Plan_AggregateUsage_LastEver -> "last_ever"
    Plan_AggregateUsage_Max -> "max"
    Plan_AggregateUsage_Sum -> "sum"

instance FromJSON Plan_AggregateUsage where
  parseJSON = withText "Plan_AggregateUsage" $ \case
    "last_during_period" -> pure Plan_AggregateUsage_LastDuringPeriod
    "last_ever" -> pure Plan_AggregateUsage_LastEver
    "max" -> pure Plan_AggregateUsage_Max
    "sum" -> pure Plan_AggregateUsage_Sum
    str -> fail (show str <> " is not a known valid option for Plan_AggregateUsage")

data Plan_BillingScheme
  = Plan_BillingScheme_PerUnit
  | Plan_BillingScheme_Tiered
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON Plan_BillingScheme where
  toJSON e = Text $ case e of
    Plan_BillingScheme_PerUnit -> "per_unit"
    Plan_BillingScheme_Tiered -> "tiered"

instance FromJSON Plan_BillingScheme where
  parseJSON = withText "Plan_BillingScheme" $ \case
    "per_unit" -> pure Plan_BillingScheme_PerUnit
    "tiered" -> pure Plan_BillingScheme_Tiered
    str -> fail (show str <> " is not a known valid option for Plan_BillingScheme")

data Plan_Interval
  = Plan_Interval_Day
  | Plan_Interval_Month
  | Plan_Interval_Week
  | Plan_Interval_Year
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON Plan_Interval where
  toJSON e = Text $ case e of
    Plan_Interval_Day -> "day"
    Plan_Interval_Month -> "month"
    Plan_Interval_Week -> "week"
    Plan_Interval_Year -> "year"

instance FromJSON Plan_Interval where
  parseJSON = withText "Plan_Interval" $ \case
    "day" -> pure Plan_Interval_Day
    "month" -> pure Plan_Interval_Month
    "week" -> pure Plan_Interval_Week
    "year" -> pure Plan_Interval_Year
    str -> fail (show str <> " is not a known valid option for Plan_Interval")

data Plan_Object
  = Plan_Object_Plan
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON Plan_Object where
  toJSON e = Text $ case e of
    Plan_Object_Plan -> "plan"

instance FromJSON Plan_Object where
  parseJSON = withText "Plan_Object" $ \case
    "plan" -> pure Plan_Object_Plan
    str -> fail (show str <> " is not a known valid option for Plan_Object")

data Plan_TiersMode
  = Plan_TiersMode_Graduated
  | Plan_TiersMode_Volume
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON Plan_TiersMode where
  toJSON e = Text $ case e of
    Plan_TiersMode_Graduated -> "graduated"
    Plan_TiersMode_Volume -> "volume"

instance FromJSON Plan_TiersMode where
  parseJSON = withText "Plan_TiersMode" $ \case
    "graduated" -> pure Plan_TiersMode_Graduated
    "volume" -> pure Plan_TiersMode_Volume
    str -> fail (show str <> " is not a known valid option for Plan_TiersMode")

data Plan_UsageType
  = Plan_UsageType_Licensed
  | Plan_UsageType_Metered
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON Plan_UsageType where
  toJSON e = Text $ case e of
    Plan_UsageType_Licensed -> "licensed"
    Plan_UsageType_Metered -> "metered"

instance FromJSON Plan_UsageType where
  parseJSON = withText "Plan_UsageType" $ \case
    "licensed" -> pure Plan_UsageType_Licensed
    "metered" -> pure Plan_UsageType_Metered
    str -> fail (show str <> " is not a known valid option for Plan_UsageType")

data PlatformTaxFee_Object
  = PlatformTaxFee_Object_PlatformTaxFee
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON PlatformTaxFee_Object where
  toJSON e = Text $ case e of
    PlatformTaxFee_Object_PlatformTaxFee -> "platform_tax_fee"

instance FromJSON PlatformTaxFee_Object where
  parseJSON = withText "PlatformTaxFee_Object" $ \case
    "platform_tax_fee" -> pure PlatformTaxFee_Object_PlatformTaxFee
    str -> fail (show str <> " is not a known valid option for PlatformTaxFee_Object")

data Product_Object
  = Product_Object_Product
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON Product_Object where
  toJSON e = Text $ case e of
    Product_Object_Product -> "product"

instance FromJSON Product_Object where
  parseJSON = withText "Product_Object" $ \case
    "product" -> pure Product_Object_Product
    str -> fail (show str <> " is not a known valid option for Product_Object")

data Product_Type
  = Product_Type_Good
  | Product_Type_Service
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON Product_Type where
  toJSON e = Text $ case e of
    Product_Type_Good -> "good"
    Product_Type_Service -> "service"

instance FromJSON Product_Type where
  parseJSON = withText "Product_Type" $ \case
    "good" -> pure Product_Type_Good
    "service" -> pure Product_Type_Service
    str -> fail (show str <> " is not a known valid option for Product_Type")

data Purpose
  = Purpose_BusinessIcon
  | Purpose_BusinessLogo
  | Purpose_CustomerSignature
  | Purpose_DisputeEvidence
  | Purpose_FinanceReportRun
  | Purpose_IdentityDocument
  | Purpose_PciDocument
  | Purpose_SigmaScheduledQuery
  | Purpose_TaxDocumentUserUpload
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON Purpose where
  toJSON e = Text $ case e of
    Purpose_BusinessIcon -> "business_icon"
    Purpose_BusinessLogo -> "business_logo"
    Purpose_CustomerSignature -> "customer_signature"
    Purpose_DisputeEvidence -> "dispute_evidence"
    Purpose_FinanceReportRun -> "finance_report_run"
    Purpose_IdentityDocument -> "identity_document"
    Purpose_PciDocument -> "pci_document"
    Purpose_SigmaScheduledQuery -> "sigma_scheduled_query"
    Purpose_TaxDocumentUserUpload -> "tax_document_user_upload"

instance FromJSON Purpose where
  parseJSON = withText "Purpose" $ \case
    "business_icon" -> pure Purpose_BusinessIcon
    "business_logo" -> pure Purpose_BusinessLogo
    "customer_signature" -> pure Purpose_CustomerSignature
    "dispute_evidence" -> pure Purpose_DisputeEvidence
    "finance_report_run" -> pure Purpose_FinanceReportRun
    "identity_document" -> pure Purpose_IdentityDocument
    "pci_document" -> pure Purpose_PciDocument
    "sigma_scheduled_query" -> pure Purpose_SigmaScheduledQuery
    "tax_document_user_upload" -> pure Purpose_TaxDocumentUserUpload
    str -> fail (show str <> " is not a known valid option for Purpose")

data Radar_EarlyFraudWarning_Object
  = Radar_EarlyFraudWarning_Object_Radar_EarlyFraudWarning
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON Radar_EarlyFraudWarning_Object where
  toJSON e = Text $ case e of
    Radar_EarlyFraudWarning_Object_Radar_EarlyFraudWarning -> "radar.early_fraud_warning"

instance FromJSON Radar_EarlyFraudWarning_Object where
  parseJSON = withText "Radar_EarlyFraudWarning_Object" $ \case
    "radar.early_fraud_warning" -> pure Radar_EarlyFraudWarning_Object_Radar_EarlyFraudWarning
    str -> fail (show str <> " is not a known valid option for Radar_EarlyFraudWarning_Object")

data Radar_ValueListItem_Object
  = Radar_ValueListItem_Object_Radar_ValueListItem
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON Radar_ValueListItem_Object where
  toJSON e = Text $ case e of
    Radar_ValueListItem_Object_Radar_ValueListItem -> "radar.value_list_item"

instance FromJSON Radar_ValueListItem_Object where
  parseJSON = withText "Radar_ValueListItem_Object" $ \case
    "radar.value_list_item" -> pure Radar_ValueListItem_Object_Radar_ValueListItem
    str -> fail (show str <> " is not a known valid option for Radar_ValueListItem_Object")

data Radar_ValueList_ItemType
  = Radar_ValueList_ItemType_CardBin
  | Radar_ValueList_ItemType_CardFingerprint
  | Radar_ValueList_ItemType_CaseSensitiveString
  | Radar_ValueList_ItemType_Country
  | Radar_ValueList_ItemType_Email
  | Radar_ValueList_ItemType_IpAddress
  | Radar_ValueList_ItemType_String
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON Radar_ValueList_ItemType where
  toJSON e = Text $ case e of
    Radar_ValueList_ItemType_CardBin -> "card_bin"
    Radar_ValueList_ItemType_CardFingerprint -> "card_fingerprint"
    Radar_ValueList_ItemType_CaseSensitiveString -> "case_sensitive_string"
    Radar_ValueList_ItemType_Country -> "country"
    Radar_ValueList_ItemType_Email -> "email"
    Radar_ValueList_ItemType_IpAddress -> "ip_address"
    Radar_ValueList_ItemType_String -> "string"

instance FromJSON Radar_ValueList_ItemType where
  parseJSON = withText "Radar_ValueList_ItemType" $ \case
    "card_bin" -> pure Radar_ValueList_ItemType_CardBin
    "card_fingerprint" -> pure Radar_ValueList_ItemType_CardFingerprint
    "case_sensitive_string" -> pure Radar_ValueList_ItemType_CaseSensitiveString
    "country" -> pure Radar_ValueList_ItemType_Country
    "email" -> pure Radar_ValueList_ItemType_Email
    "ip_address" -> pure Radar_ValueList_ItemType_IpAddress
    "string" -> pure Radar_ValueList_ItemType_String
    str -> fail (show str <> " is not a known valid option for Radar_ValueList_ItemType")

data Radar_ValueList_Object
  = Radar_ValueList_Object_Radar_ValueList
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON Radar_ValueList_Object where
  toJSON e = Text $ case e of
    Radar_ValueList_Object_Radar_ValueList -> "radar.value_list"

instance FromJSON Radar_ValueList_Object where
  parseJSON = withText "Radar_ValueList_Object" $ \case
    "radar.value_list" -> pure Radar_ValueList_Object_Radar_ValueList
    str -> fail (show str <> " is not a known valid option for Radar_ValueList_Object")

data Recipient_Object
  = Recipient_Object_Recipient
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON Recipient_Object where
  toJSON e = Text $ case e of
    Recipient_Object_Recipient -> "recipient"

instance FromJSON Recipient_Object where
  parseJSON = withText "Recipient_Object" $ \case
    "recipient" -> pure Recipient_Object_Recipient
    str -> fail (show str <> " is not a known valid option for Recipient_Object")

data Refund_Object
  = Refund_Object_Refund
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON Refund_Object where
  toJSON e = Text $ case e of
    Refund_Object_Refund -> "refund"

instance FromJSON Refund_Object where
  parseJSON = withText "Refund_Object" $ \case
    "refund" -> pure Refund_Object_Refund
    str -> fail (show str <> " is not a known valid option for Refund_Object")

data Reporting_ReportRun_Object
  = Reporting_ReportRun_Object_Reporting_ReportRun
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON Reporting_ReportRun_Object where
  toJSON e = Text $ case e of
    Reporting_ReportRun_Object_Reporting_ReportRun -> "reporting.report_run"

instance FromJSON Reporting_ReportRun_Object where
  parseJSON = withText "Reporting_ReportRun_Object" $ \case
    "reporting.report_run" -> pure Reporting_ReportRun_Object_Reporting_ReportRun
    str -> fail (show str <> " is not a known valid option for Reporting_ReportRun_Object")

data Reporting_ReportType_Object
  = Reporting_ReportType_Object_Reporting_ReportType
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON Reporting_ReportType_Object where
  toJSON e = Text $ case e of
    Reporting_ReportType_Object_Reporting_ReportType -> "reporting.report_type"

instance FromJSON Reporting_ReportType_Object where
  parseJSON = withText "Reporting_ReportType_Object" $ \case
    "reporting.report_type" -> pure Reporting_ReportType_Object_Reporting_ReportType
    str -> fail (show str <> " is not a known valid option for Reporting_ReportType_Object")

data ReserveTransaction_Object
  = ReserveTransaction_Object_ReserveTransaction
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON ReserveTransaction_Object where
  toJSON e = Text $ case e of
    ReserveTransaction_Object_ReserveTransaction -> "reserve_transaction"

instance FromJSON ReserveTransaction_Object where
  parseJSON = withText "ReserveTransaction_Object" $ \case
    "reserve_transaction" -> pure ReserveTransaction_Object_ReserveTransaction
    str -> fail (show str <> " is not a known valid option for ReserveTransaction_Object")

data Review_ClosedReason
  = Review_ClosedReason_Approved
  | Review_ClosedReason_Disputed
  | Review_ClosedReason_Refunded
  | Review_ClosedReason_RefundedAsFraud
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON Review_ClosedReason where
  toJSON e = Text $ case e of
    Review_ClosedReason_Approved -> "approved"
    Review_ClosedReason_Disputed -> "disputed"
    Review_ClosedReason_Refunded -> "refunded"
    Review_ClosedReason_RefundedAsFraud -> "refunded_as_fraud"

instance FromJSON Review_ClosedReason where
  parseJSON = withText "Review_ClosedReason" $ \case
    "approved" -> pure Review_ClosedReason_Approved
    "disputed" -> pure Review_ClosedReason_Disputed
    "refunded" -> pure Review_ClosedReason_Refunded
    "refunded_as_fraud" -> pure Review_ClosedReason_RefundedAsFraud
    str -> fail (show str <> " is not a known valid option for Review_ClosedReason")

data Review_Object
  = Review_Object_Review
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON Review_Object where
  toJSON e = Text $ case e of
    Review_Object_Review -> "review"

instance FromJSON Review_Object where
  parseJSON = withText "Review_Object" $ \case
    "review" -> pure Review_Object_Review
    str -> fail (show str <> " is not a known valid option for Review_Object")

data Review_OpenedReason
  = Review_OpenedReason_Manual
  | Review_OpenedReason_Rule
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON Review_OpenedReason where
  toJSON e = Text $ case e of
    Review_OpenedReason_Manual -> "manual"
    Review_OpenedReason_Rule -> "rule"

instance FromJSON Review_OpenedReason where
  parseJSON = withText "Review_OpenedReason" $ \case
    "manual" -> pure Review_OpenedReason_Manual
    "rule" -> pure Review_OpenedReason_Rule
    str -> fail (show str <> " is not a known valid option for Review_OpenedReason")

data ScheduledQueryRun_Object
  = ScheduledQueryRun_Object_ScheduledQueryRun
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON ScheduledQueryRun_Object where
  toJSON e = Text $ case e of
    ScheduledQueryRun_Object_ScheduledQueryRun -> "scheduled_query_run"

instance FromJSON ScheduledQueryRun_Object where
  parseJSON = withText "ScheduledQueryRun_Object" $ \case
    "scheduled_query_run" -> pure ScheduledQueryRun_Object_ScheduledQueryRun
    str -> fail (show str <> " is not a known valid option for ScheduledQueryRun_Object")

data SetupIntentPaymentMethodOptionsCard_RequestThreeDSecure
  = SetupIntentPaymentMethodOptionsCard_RequestThreeDSecure_Any
  | SetupIntentPaymentMethodOptionsCard_RequestThreeDSecure_Automatic
  | SetupIntentPaymentMethodOptionsCard_RequestThreeDSecure_ChallengeOnly
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON SetupIntentPaymentMethodOptionsCard_RequestThreeDSecure where
  toJSON e = Text $ case e of
    SetupIntentPaymentMethodOptionsCard_RequestThreeDSecure_Any -> "any"
    SetupIntentPaymentMethodOptionsCard_RequestThreeDSecure_Automatic -> "automatic"
    SetupIntentPaymentMethodOptionsCard_RequestThreeDSecure_ChallengeOnly -> "challenge_only"

instance FromJSON SetupIntentPaymentMethodOptionsCard_RequestThreeDSecure where
  parseJSON = withText "SetupIntentPaymentMethodOptionsCard_RequestThreeDSecure" $ \case
    "any" -> pure SetupIntentPaymentMethodOptionsCard_RequestThreeDSecure_Any
    "automatic" -> pure SetupIntentPaymentMethodOptionsCard_RequestThreeDSecure_Automatic
    "challenge_only" -> pure SetupIntentPaymentMethodOptionsCard_RequestThreeDSecure_ChallengeOnly
    str -> fail (show str <> " is not a known valid option for SetupIntentPaymentMethodOptionsCard_RequestThreeDSecure")

data SetupIntent_CancellationReason
  = SetupIntent_CancellationReason_Abandoned
  | SetupIntent_CancellationReason_Duplicate
  | SetupIntent_CancellationReason_RequestedByCustomer
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON SetupIntent_CancellationReason where
  toJSON e = Text $ case e of
    SetupIntent_CancellationReason_Abandoned -> "abandoned"
    SetupIntent_CancellationReason_Duplicate -> "duplicate"
    SetupIntent_CancellationReason_RequestedByCustomer -> "requested_by_customer"

instance FromJSON SetupIntent_CancellationReason where
  parseJSON = withText "SetupIntent_CancellationReason" $ \case
    "abandoned" -> pure SetupIntent_CancellationReason_Abandoned
    "duplicate" -> pure SetupIntent_CancellationReason_Duplicate
    "requested_by_customer" -> pure SetupIntent_CancellationReason_RequestedByCustomer
    str -> fail (show str <> " is not a known valid option for SetupIntent_CancellationReason")

data SetupIntent_Object
  = SetupIntent_Object_SetupIntent
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON SetupIntent_Object where
  toJSON e = Text $ case e of
    SetupIntent_Object_SetupIntent -> "setup_intent"

instance FromJSON SetupIntent_Object where
  parseJSON = withText "SetupIntent_Object" $ \case
    "setup_intent" -> pure SetupIntent_Object_SetupIntent
    str -> fail (show str <> " is not a known valid option for SetupIntent_Object")

data SetupIntent_Status
  = SetupIntent_Status_Canceled
  | SetupIntent_Status_Processing
  | SetupIntent_Status_RequiresAction
  | SetupIntent_Status_RequiresConfirmation
  | SetupIntent_Status_RequiresPaymentMethod
  | SetupIntent_Status_Succeeded
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON SetupIntent_Status where
  toJSON e = Text $ case e of
    SetupIntent_Status_Canceled -> "canceled"
    SetupIntent_Status_Processing -> "processing"
    SetupIntent_Status_RequiresAction -> "requires_action"
    SetupIntent_Status_RequiresConfirmation -> "requires_confirmation"
    SetupIntent_Status_RequiresPaymentMethod -> "requires_payment_method"
    SetupIntent_Status_Succeeded -> "succeeded"

instance FromJSON SetupIntent_Status where
  parseJSON = withText "SetupIntent_Status" $ \case
    "canceled" -> pure SetupIntent_Status_Canceled
    "processing" -> pure SetupIntent_Status_Processing
    "requires_action" -> pure SetupIntent_Status_RequiresAction
    "requires_confirmation" -> pure SetupIntent_Status_RequiresConfirmation
    "requires_payment_method" -> pure SetupIntent_Status_RequiresPaymentMethod
    "succeeded" -> pure SetupIntent_Status_Succeeded
    str -> fail (show str <> " is not a known valid option for SetupIntent_Status")

data Sku_Object
  = Sku_Object_Sku
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON Sku_Object where
  toJSON e = Text $ case e of
    Sku_Object_Sku -> "sku"

instance FromJSON Sku_Object where
  parseJSON = withText "Sku_Object" $ \case
    "sku" -> pure Sku_Object_Sku
    str -> fail (show str <> " is not a known valid option for Sku_Object")

data SourceMandateNotification_Object
  = SourceMandateNotification_Object_SourceMandateNotification
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON SourceMandateNotification_Object where
  toJSON e = Text $ case e of
    SourceMandateNotification_Object_SourceMandateNotification -> "source_mandate_notification"

instance FromJSON SourceMandateNotification_Object where
  parseJSON = withText "SourceMandateNotification_Object" $ \case
    "source_mandate_notification" -> pure SourceMandateNotification_Object_SourceMandateNotification
    str -> fail (show str <> " is not a known valid option for SourceMandateNotification_Object")

data SourceTransaction_Object
  = SourceTransaction_Object_SourceTransaction
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON SourceTransaction_Object where
  toJSON e = Text $ case e of
    SourceTransaction_Object_SourceTransaction -> "source_transaction"

instance FromJSON SourceTransaction_Object where
  parseJSON = withText "SourceTransaction_Object" $ \case
    "source_transaction" -> pure SourceTransaction_Object_SourceTransaction
    str -> fail (show str <> " is not a known valid option for SourceTransaction_Object")

data SourceTransaction_Type
  = SourceTransaction_Type_AchCreditTransfer
  | SourceTransaction_Type_AchDebit
  | SourceTransaction_Type_Alipay
  | SourceTransaction_Type_Bancontact
  | SourceTransaction_Type_Card
  | SourceTransaction_Type_CardPresent
  | SourceTransaction_Type_Eps
  | SourceTransaction_Type_Giropay
  | SourceTransaction_Type_Ideal
  | SourceTransaction_Type_Klarna
  | SourceTransaction_Type_Multibanco
  | SourceTransaction_Type_P24
  | SourceTransaction_Type_SepaDebit
  | SourceTransaction_Type_Sofort
  | SourceTransaction_Type_ThreeDSecure
  | SourceTransaction_Type_Wechat
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON SourceTransaction_Type where
  toJSON e = Text $ case e of
    SourceTransaction_Type_AchCreditTransfer -> "ach_credit_transfer"
    SourceTransaction_Type_AchDebit -> "ach_debit"
    SourceTransaction_Type_Alipay -> "alipay"
    SourceTransaction_Type_Bancontact -> "bancontact"
    SourceTransaction_Type_Card -> "card"
    SourceTransaction_Type_CardPresent -> "card_present"
    SourceTransaction_Type_Eps -> "eps"
    SourceTransaction_Type_Giropay -> "giropay"
    SourceTransaction_Type_Ideal -> "ideal"
    SourceTransaction_Type_Klarna -> "klarna"
    SourceTransaction_Type_Multibanco -> "multibanco"
    SourceTransaction_Type_P24 -> "p24"
    SourceTransaction_Type_SepaDebit -> "sepa_debit"
    SourceTransaction_Type_Sofort -> "sofort"
    SourceTransaction_Type_ThreeDSecure -> "three_d_secure"
    SourceTransaction_Type_Wechat -> "wechat"

instance FromJSON SourceTransaction_Type where
  parseJSON = withText "SourceTransaction_Type" $ \case
    "ach_credit_transfer" -> pure SourceTransaction_Type_AchCreditTransfer
    "ach_debit" -> pure SourceTransaction_Type_AchDebit
    "alipay" -> pure SourceTransaction_Type_Alipay
    "bancontact" -> pure SourceTransaction_Type_Bancontact
    "card" -> pure SourceTransaction_Type_Card
    "card_present" -> pure SourceTransaction_Type_CardPresent
    "eps" -> pure SourceTransaction_Type_Eps
    "giropay" -> pure SourceTransaction_Type_Giropay
    "ideal" -> pure SourceTransaction_Type_Ideal
    "klarna" -> pure SourceTransaction_Type_Klarna
    "multibanco" -> pure SourceTransaction_Type_Multibanco
    "p24" -> pure SourceTransaction_Type_P24
    "sepa_debit" -> pure SourceTransaction_Type_SepaDebit
    "sofort" -> pure SourceTransaction_Type_Sofort
    "three_d_secure" -> pure SourceTransaction_Type_ThreeDSecure
    "wechat" -> pure SourceTransaction_Type_Wechat
    str -> fail (show str <> " is not a known valid option for SourceTransaction_Type")

data Source_Object
  = Source_Object_Source
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON Source_Object where
  toJSON e = Text $ case e of
    Source_Object_Source -> "source"

instance FromJSON Source_Object where
  parseJSON = withText "Source_Object" $ \case
    "source" -> pure Source_Object_Source
    str -> fail (show str <> " is not a known valid option for Source_Object")

data Source_Type
  = Source_Type_AchCreditTransfer
  | Source_Type_AchDebit
  | Source_Type_Alipay
  | Source_Type_Bancontact
  | Source_Type_Card
  | Source_Type_CardPresent
  | Source_Type_Eps
  | Source_Type_Giropay
  | Source_Type_Ideal
  | Source_Type_Klarna
  | Source_Type_Multibanco
  | Source_Type_P24
  | Source_Type_SepaDebit
  | Source_Type_Sofort
  | Source_Type_ThreeDSecure
  | Source_Type_Wechat
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON Source_Type where
  toJSON e = Text $ case e of
    Source_Type_AchCreditTransfer -> "ach_credit_transfer"
    Source_Type_AchDebit -> "ach_debit"
    Source_Type_Alipay -> "alipay"
    Source_Type_Bancontact -> "bancontact"
    Source_Type_Card -> "card"
    Source_Type_CardPresent -> "card_present"
    Source_Type_Eps -> "eps"
    Source_Type_Giropay -> "giropay"
    Source_Type_Ideal -> "ideal"
    Source_Type_Klarna -> "klarna"
    Source_Type_Multibanco -> "multibanco"
    Source_Type_P24 -> "p24"
    Source_Type_SepaDebit -> "sepa_debit"
    Source_Type_Sofort -> "sofort"
    Source_Type_ThreeDSecure -> "three_d_secure"
    Source_Type_Wechat -> "wechat"

instance FromJSON Source_Type where
  parseJSON = withText "Source_Type" $ \case
    "ach_credit_transfer" -> pure Source_Type_AchCreditTransfer
    "ach_debit" -> pure Source_Type_AchDebit
    "alipay" -> pure Source_Type_Alipay
    "bancontact" -> pure Source_Type_Bancontact
    "card" -> pure Source_Type_Card
    "card_present" -> pure Source_Type_CardPresent
    "eps" -> pure Source_Type_Eps
    "giropay" -> pure Source_Type_Giropay
    "ideal" -> pure Source_Type_Ideal
    "klarna" -> pure Source_Type_Klarna
    "multibanco" -> pure Source_Type_Multibanco
    "p24" -> pure Source_Type_P24
    "sepa_debit" -> pure Source_Type_SepaDebit
    "sofort" -> pure Source_Type_Sofort
    "three_d_secure" -> pure Source_Type_ThreeDSecure
    "wechat" -> pure Source_Type_Wechat
    str -> fail (show str <> " is not a known valid option for Source_Type")

data Status
  = Status_Active
  | Status_All
  | Status_Canceled
  | Status_Ended
  | Status_Incomplete
  | Status_IncompleteExpired
  | Status_PastDue
  | Status_Trialing
  | Status_Unpaid
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON Status where
  toJSON e = Text $ case e of
    Status_Active -> "active"
    Status_All -> "all"
    Status_Canceled -> "canceled"
    Status_Ended -> "ended"
    Status_Incomplete -> "incomplete"
    Status_IncompleteExpired -> "incomplete_expired"
    Status_PastDue -> "past_due"
    Status_Trialing -> "trialing"
    Status_Unpaid -> "unpaid"

instance FromJSON Status where
  parseJSON = withText "Status" $ \case
    "active" -> pure Status_Active
    "all" -> pure Status_All
    "canceled" -> pure Status_Canceled
    "ended" -> pure Status_Ended
    "incomplete" -> pure Status_Incomplete
    "incomplete_expired" -> pure Status_IncompleteExpired
    "past_due" -> pure Status_PastDue
    "trialing" -> pure Status_Trialing
    "unpaid" -> pure Status_Unpaid
    str -> fail (show str <> " is not a known valid option for Status")

data Status
  = Status_Active
  | Status_Blocked
  | Status_Inactive
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON Status where
  toJSON e = Text $ case e of
    Status_Active -> "active"
    Status_Blocked -> "blocked"
    Status_Inactive -> "inactive"

instance FromJSON Status where
  parseJSON = withText "Status" $ \case
    "active" -> pure Status_Active
    "blocked" -> pure Status_Blocked
    "inactive" -> pure Status_Inactive
    str -> fail (show str <> " is not a known valid option for Status")

data Status
  = Status_Active
  | Status_Canceled
  | Status_Inactive
  | Status_Lost
  | Status_Stolen
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON Status where
  toJSON e = Text $ case e of
    Status_Active -> "active"
    Status_Canceled -> "canceled"
    Status_Inactive -> "inactive"
    Status_Lost -> "lost"
    Status_Stolen -> "stolen"

instance FromJSON Status where
  parseJSON = withText "Status" $ \case
    "active" -> pure Status_Active
    "canceled" -> pure Status_Canceled
    "inactive" -> pure Status_Inactive
    "lost" -> pure Status_Lost
    "stolen" -> pure Status_Stolen
    str -> fail (show str <> " is not a known valid option for Status")

data Status
  = Status_Canceled
  | Status_Failed
  | Status_Pending
  | Status_Succeeded
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON Status where
  toJSON e = Text $ case e of
    Status_Canceled -> "canceled"
    Status_Failed -> "failed"
    Status_Pending -> "pending"
    Status_Succeeded -> "succeeded"

instance FromJSON Status where
  parseJSON = withText "Status" $ \case
    "canceled" -> pure Status_Canceled
    "failed" -> pure Status_Failed
    "pending" -> pure Status_Pending
    "succeeded" -> pure Status_Succeeded
    str -> fail (show str <> " is not a known valid option for Status")

data Status
  = Status_Closed
  | Status_Pending
  | Status_Reversed
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON Status where
  toJSON e = Text $ case e of
    Status_Closed -> "closed"
    Status_Pending -> "pending"
    Status_Reversed -> "reversed"

instance FromJSON Status where
  parseJSON = withText "Status" $ \case
    "closed" -> pure Status_Closed
    "pending" -> pure Status_Pending
    "reversed" -> pure Status_Reversed
    str -> fail (show str <> " is not a known valid option for Status")

data Status
  = Status_Draft
  | Status_Open
  | Status_Paid
  | Status_Uncollectible
  | Status_Void
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON Status where
  toJSON e = Text $ case e of
    Status_Draft -> "draft"
    Status_Open -> "open"
    Status_Paid -> "paid"
    Status_Uncollectible -> "uncollectible"
    Status_Void -> "void"

instance FromJSON Status where
  parseJSON = withText "Status" $ \case
    "draft" -> pure Status_Draft
    "open" -> pure Status_Open
    "paid" -> pure Status_Paid
    "uncollectible" -> pure Status_Uncollectible
    "void" -> pure Status_Void
    str -> fail (show str <> " is not a known valid option for Status")

data Status
  = Status_Offline
  | Status_Online
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON Status where
  toJSON e = Text $ case e of
    Status_Offline -> "offline"
    Status_Online -> "online"

instance FromJSON Status where
  parseJSON = withText "Status" $ \case
    "offline" -> pure Status_Offline
    "online" -> pure Status_Online
    str -> fail (show str <> " is not a known valid option for Status")

data SubscriptionBillingCycleAnchor
  = SubscriptionBillingCycleAnchor_Now
  | SubscriptionBillingCycleAnchor_Unchanged
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON SubscriptionBillingCycleAnchor where
  toJSON e = Text $ case e of
    SubscriptionBillingCycleAnchor_Now -> "now"
    SubscriptionBillingCycleAnchor_Unchanged -> "unchanged"

instance FromJSON SubscriptionBillingCycleAnchor where
  parseJSON = withText "SubscriptionBillingCycleAnchor" $ \case
    "now" -> pure SubscriptionBillingCycleAnchor_Now
    "unchanged" -> pure SubscriptionBillingCycleAnchor_Unchanged
    str -> fail (show str <> " is not a known valid option for SubscriptionBillingCycleAnchor")

data SubscriptionCancelAt
  = SubscriptionCancelAt_
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON SubscriptionCancelAt where
  toJSON e = Text $ case e of
    SubscriptionCancelAt_ -> ""

instance FromJSON SubscriptionCancelAt where
  parseJSON = withText "SubscriptionCancelAt" $ \case
    "" -> pure SubscriptionCancelAt_
    str -> fail (show str <> " is not a known valid option for SubscriptionCancelAt")

data SubscriptionDefaultTaxRates
  = SubscriptionDefaultTaxRates_
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON SubscriptionDefaultTaxRates where
  toJSON e = Text $ case e of
    SubscriptionDefaultTaxRates_ -> ""

instance FromJSON SubscriptionDefaultTaxRates where
  parseJSON = withText "SubscriptionDefaultTaxRates" $ \case
    "" -> pure SubscriptionDefaultTaxRates_
    str -> fail (show str <> " is not a known valid option for SubscriptionDefaultTaxRates")

data SubscriptionItem_Object
  = SubscriptionItem_Object_SubscriptionItem
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON SubscriptionItem_Object where
  toJSON e = Text $ case e of
    SubscriptionItem_Object_SubscriptionItem -> "subscription_item"

instance FromJSON SubscriptionItem_Object where
  parseJSON = withText "SubscriptionItem_Object" $ \case
    "subscription_item" -> pure SubscriptionItem_Object_SubscriptionItem
    str -> fail (show str <> " is not a known valid option for SubscriptionItem_Object")

data SubscriptionSchedulePhaseConfiguration_CollectionMethod
  = SubscriptionSchedulePhaseConfiguration_CollectionMethod_ChargeAutomatically
  | SubscriptionSchedulePhaseConfiguration_CollectionMethod_SendInvoice
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON SubscriptionSchedulePhaseConfiguration_CollectionMethod where
  toJSON e = Text $ case e of
    SubscriptionSchedulePhaseConfiguration_CollectionMethod_ChargeAutomatically -> "charge_automatically"
    SubscriptionSchedulePhaseConfiguration_CollectionMethod_SendInvoice -> "send_invoice"

instance FromJSON SubscriptionSchedulePhaseConfiguration_CollectionMethod where
  parseJSON = withText "SubscriptionSchedulePhaseConfiguration_CollectionMethod" $ \case
    "charge_automatically" -> pure SubscriptionSchedulePhaseConfiguration_CollectionMethod_ChargeAutomatically
    "send_invoice" -> pure SubscriptionSchedulePhaseConfiguration_CollectionMethod_SendInvoice
    str -> fail (show str <> " is not a known valid option for SubscriptionSchedulePhaseConfiguration_CollectionMethod")

data SubscriptionScheduleRenewalInterval_Interval
  = SubscriptionScheduleRenewalInterval_Interval_Day
  | SubscriptionScheduleRenewalInterval_Interval_Month
  | SubscriptionScheduleRenewalInterval_Interval_Week
  | SubscriptionScheduleRenewalInterval_Interval_Year
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON SubscriptionScheduleRenewalInterval_Interval where
  toJSON e = Text $ case e of
    SubscriptionScheduleRenewalInterval_Interval_Day -> "day"
    SubscriptionScheduleRenewalInterval_Interval_Month -> "month"
    SubscriptionScheduleRenewalInterval_Interval_Week -> "week"
    SubscriptionScheduleRenewalInterval_Interval_Year -> "year"

instance FromJSON SubscriptionScheduleRenewalInterval_Interval where
  parseJSON = withText "SubscriptionScheduleRenewalInterval_Interval" $ \case
    "day" -> pure SubscriptionScheduleRenewalInterval_Interval_Day
    "month" -> pure SubscriptionScheduleRenewalInterval_Interval_Month
    "week" -> pure SubscriptionScheduleRenewalInterval_Interval_Week
    "year" -> pure SubscriptionScheduleRenewalInterval_Interval_Year
    str -> fail (show str <> " is not a known valid option for SubscriptionScheduleRenewalInterval_Interval")

data SubscriptionSchedule_Billing
  = SubscriptionSchedule_Billing_ChargeAutomatically
  | SubscriptionSchedule_Billing_SendInvoice
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON SubscriptionSchedule_Billing where
  toJSON e = Text $ case e of
    SubscriptionSchedule_Billing_ChargeAutomatically -> "charge_automatically"
    SubscriptionSchedule_Billing_SendInvoice -> "send_invoice"

instance FromJSON SubscriptionSchedule_Billing where
  parseJSON = withText "SubscriptionSchedule_Billing" $ \case
    "charge_automatically" -> pure SubscriptionSchedule_Billing_ChargeAutomatically
    "send_invoice" -> pure SubscriptionSchedule_Billing_SendInvoice
    str -> fail (show str <> " is not a known valid option for SubscriptionSchedule_Billing")

data SubscriptionSchedule_CollectionMethod
  = SubscriptionSchedule_CollectionMethod_ChargeAutomatically
  | SubscriptionSchedule_CollectionMethod_SendInvoice
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON SubscriptionSchedule_CollectionMethod where
  toJSON e = Text $ case e of
    SubscriptionSchedule_CollectionMethod_ChargeAutomatically -> "charge_automatically"
    SubscriptionSchedule_CollectionMethod_SendInvoice -> "send_invoice"

instance FromJSON SubscriptionSchedule_CollectionMethod where
  parseJSON = withText "SubscriptionSchedule_CollectionMethod" $ \case
    "charge_automatically" -> pure SubscriptionSchedule_CollectionMethod_ChargeAutomatically
    "send_invoice" -> pure SubscriptionSchedule_CollectionMethod_SendInvoice
    str -> fail (show str <> " is not a known valid option for SubscriptionSchedule_CollectionMethod")

data SubscriptionSchedule_EndBehavior
  = SubscriptionSchedule_EndBehavior_Cancel
  | SubscriptionSchedule_EndBehavior_Release
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON SubscriptionSchedule_EndBehavior where
  toJSON e = Text $ case e of
    SubscriptionSchedule_EndBehavior_Cancel -> "cancel"
    SubscriptionSchedule_EndBehavior_Release -> "release"

instance FromJSON SubscriptionSchedule_EndBehavior where
  parseJSON = withText "SubscriptionSchedule_EndBehavior" $ \case
    "cancel" -> pure SubscriptionSchedule_EndBehavior_Cancel
    "release" -> pure SubscriptionSchedule_EndBehavior_Release
    str -> fail (show str <> " is not a known valid option for SubscriptionSchedule_EndBehavior")

data SubscriptionSchedule_Object
  = SubscriptionSchedule_Object_SubscriptionSchedule
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON SubscriptionSchedule_Object where
  toJSON e = Text $ case e of
    SubscriptionSchedule_Object_SubscriptionSchedule -> "subscription_schedule"

instance FromJSON SubscriptionSchedule_Object where
  parseJSON = withText "SubscriptionSchedule_Object" $ \case
    "subscription_schedule" -> pure SubscriptionSchedule_Object_SubscriptionSchedule
    str -> fail (show str <> " is not a known valid option for SubscriptionSchedule_Object")

data SubscriptionSchedule_RenewalBehavior
  = SubscriptionSchedule_RenewalBehavior_Cancel
  | SubscriptionSchedule_RenewalBehavior_None
  | SubscriptionSchedule_RenewalBehavior_Release
  | SubscriptionSchedule_RenewalBehavior_Renew
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON SubscriptionSchedule_RenewalBehavior where
  toJSON e = Text $ case e of
    SubscriptionSchedule_RenewalBehavior_Cancel -> "cancel"
    SubscriptionSchedule_RenewalBehavior_None -> "none"
    SubscriptionSchedule_RenewalBehavior_Release -> "release"
    SubscriptionSchedule_RenewalBehavior_Renew -> "renew"

instance FromJSON SubscriptionSchedule_RenewalBehavior where
  parseJSON = withText "SubscriptionSchedule_RenewalBehavior" $ \case
    "cancel" -> pure SubscriptionSchedule_RenewalBehavior_Cancel
    "none" -> pure SubscriptionSchedule_RenewalBehavior_None
    "release" -> pure SubscriptionSchedule_RenewalBehavior_Release
    "renew" -> pure SubscriptionSchedule_RenewalBehavior_Renew
    str -> fail (show str <> " is not a known valid option for SubscriptionSchedule_RenewalBehavior")

data SubscriptionSchedule_Status
  = SubscriptionSchedule_Status_Active
  | SubscriptionSchedule_Status_Canceled
  | SubscriptionSchedule_Status_Completed
  | SubscriptionSchedule_Status_NotStarted
  | SubscriptionSchedule_Status_Released
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON SubscriptionSchedule_Status where
  toJSON e = Text $ case e of
    SubscriptionSchedule_Status_Active -> "active"
    SubscriptionSchedule_Status_Canceled -> "canceled"
    SubscriptionSchedule_Status_Completed -> "completed"
    SubscriptionSchedule_Status_NotStarted -> "not_started"
    SubscriptionSchedule_Status_Released -> "released"

instance FromJSON SubscriptionSchedule_Status where
  parseJSON = withText "SubscriptionSchedule_Status" $ \case
    "active" -> pure SubscriptionSchedule_Status_Active
    "canceled" -> pure SubscriptionSchedule_Status_Canceled
    "completed" -> pure SubscriptionSchedule_Status_Completed
    "not_started" -> pure SubscriptionSchedule_Status_NotStarted
    "released" -> pure SubscriptionSchedule_Status_Released
    str -> fail (show str <> " is not a known valid option for SubscriptionSchedule_Status")

data SubscriptionTrialEnd
  = SubscriptionTrialEnd_Now
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON SubscriptionTrialEnd where
  toJSON e = Text $ case e of
    SubscriptionTrialEnd_Now -> "now"

instance FromJSON SubscriptionTrialEnd where
  parseJSON = withText "SubscriptionTrialEnd" $ \case
    "now" -> pure SubscriptionTrialEnd_Now
    str -> fail (show str <> " is not a known valid option for SubscriptionTrialEnd")

data Subscription_Billing
  = Subscription_Billing_ChargeAutomatically
  | Subscription_Billing_SendInvoice
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON Subscription_Billing where
  toJSON e = Text $ case e of
    Subscription_Billing_ChargeAutomatically -> "charge_automatically"
    Subscription_Billing_SendInvoice -> "send_invoice"

instance FromJSON Subscription_Billing where
  parseJSON = withText "Subscription_Billing" $ \case
    "charge_automatically" -> pure Subscription_Billing_ChargeAutomatically
    "send_invoice" -> pure Subscription_Billing_SendInvoice
    str -> fail (show str <> " is not a known valid option for Subscription_Billing")

data Subscription_CollectionMethod
  = Subscription_CollectionMethod_ChargeAutomatically
  | Subscription_CollectionMethod_SendInvoice
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON Subscription_CollectionMethod where
  toJSON e = Text $ case e of
    Subscription_CollectionMethod_ChargeAutomatically -> "charge_automatically"
    Subscription_CollectionMethod_SendInvoice -> "send_invoice"

instance FromJSON Subscription_CollectionMethod where
  parseJSON = withText "Subscription_CollectionMethod" $ \case
    "charge_automatically" -> pure Subscription_CollectionMethod_ChargeAutomatically
    "send_invoice" -> pure Subscription_CollectionMethod_SendInvoice
    str -> fail (show str <> " is not a known valid option for Subscription_CollectionMethod")

data Subscription_Object
  = Subscription_Object_Subscription
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON Subscription_Object where
  toJSON e = Text $ case e of
    Subscription_Object_Subscription -> "subscription"

instance FromJSON Subscription_Object where
  parseJSON = withText "Subscription_Object" $ \case
    "subscription" -> pure Subscription_Object_Subscription
    str -> fail (show str <> " is not a known valid option for Subscription_Object")

data Subscription_Status
  = Subscription_Status_Active
  | Subscription_Status_Canceled
  | Subscription_Status_Incomplete
  | Subscription_Status_IncompleteExpired
  | Subscription_Status_PastDue
  | Subscription_Status_Trialing
  | Subscription_Status_Unpaid
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON Subscription_Status where
  toJSON e = Text $ case e of
    Subscription_Status_Active -> "active"
    Subscription_Status_Canceled -> "canceled"
    Subscription_Status_Incomplete -> "incomplete"
    Subscription_Status_IncompleteExpired -> "incomplete_expired"
    Subscription_Status_PastDue -> "past_due"
    Subscription_Status_Trialing -> "trialing"
    Subscription_Status_Unpaid -> "unpaid"

instance FromJSON Subscription_Status where
  parseJSON = withText "Subscription_Status" $ \case
    "active" -> pure Subscription_Status_Active
    "canceled" -> pure Subscription_Status_Canceled
    "incomplete" -> pure Subscription_Status_Incomplete
    "incomplete_expired" -> pure Subscription_Status_IncompleteExpired
    "past_due" -> pure Subscription_Status_PastDue
    "trialing" -> pure Subscription_Status_Trialing
    "unpaid" -> pure Subscription_Status_Unpaid
    str -> fail (show str <> " is not a known valid option for Subscription_Status")

data TaxIdVerification_Status
  = TaxIdVerification_Status_Pending
  | TaxIdVerification_Status_Unavailable
  | TaxIdVerification_Status_Unverified
  | TaxIdVerification_Status_Verified
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON TaxIdVerification_Status where
  toJSON e = Text $ case e of
    TaxIdVerification_Status_Pending -> "pending"
    TaxIdVerification_Status_Unavailable -> "unavailable"
    TaxIdVerification_Status_Unverified -> "unverified"
    TaxIdVerification_Status_Verified -> "verified"

instance FromJSON TaxIdVerification_Status where
  parseJSON = withText "TaxIdVerification_Status" $ \case
    "pending" -> pure TaxIdVerification_Status_Pending
    "unavailable" -> pure TaxIdVerification_Status_Unavailable
    "unverified" -> pure TaxIdVerification_Status_Unverified
    "verified" -> pure TaxIdVerification_Status_Verified
    str -> fail (show str <> " is not a known valid option for TaxIdVerification_Status")

data TaxId_Object
  = TaxId_Object_TaxId
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON TaxId_Object where
  toJSON e = Text $ case e of
    TaxId_Object_TaxId -> "tax_id"

instance FromJSON TaxId_Object where
  parseJSON = withText "TaxId_Object" $ \case
    "tax_id" -> pure TaxId_Object_TaxId
    str -> fail (show str <> " is not a known valid option for TaxId_Object")

data TaxId_Type
  = TaxId_Type_AuAbn
  | TaxId_Type_EuVat
  | TaxId_Type_InGst
  | TaxId_Type_NoVat
  | TaxId_Type_NzGst
  | TaxId_Type_Unknown
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON TaxId_Type where
  toJSON e = Text $ case e of
    TaxId_Type_AuAbn -> "au_abn"
    TaxId_Type_EuVat -> "eu_vat"
    TaxId_Type_InGst -> "in_gst"
    TaxId_Type_NoVat -> "no_vat"
    TaxId_Type_NzGst -> "nz_gst"
    TaxId_Type_Unknown -> "unknown"

instance FromJSON TaxId_Type where
  parseJSON = withText "TaxId_Type" $ \case
    "au_abn" -> pure TaxId_Type_AuAbn
    "eu_vat" -> pure TaxId_Type_EuVat
    "in_gst" -> pure TaxId_Type_InGst
    "no_vat" -> pure TaxId_Type_NoVat
    "nz_gst" -> pure TaxId_Type_NzGst
    "unknown" -> pure TaxId_Type_Unknown
    str -> fail (show str <> " is not a known valid option for TaxId_Type")

data TaxRate_Object
  = TaxRate_Object_TaxRate
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON TaxRate_Object where
  toJSON e = Text $ case e of
    TaxRate_Object_TaxRate -> "tax_rate"

instance FromJSON TaxRate_Object where
  parseJSON = withText "TaxRate_Object" $ \case
    "tax_rate" -> pure TaxRate_Object_TaxRate
    str -> fail (show str <> " is not a known valid option for TaxRate_Object")

data Terminal_ConnectionToken_Object
  = Terminal_ConnectionToken_Object_Terminal_ConnectionToken
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON Terminal_ConnectionToken_Object where
  toJSON e = Text $ case e of
    Terminal_ConnectionToken_Object_Terminal_ConnectionToken -> "terminal.connection_token"

instance FromJSON Terminal_ConnectionToken_Object where
  parseJSON = withText "Terminal_ConnectionToken_Object" $ \case
    "terminal.connection_token" -> pure Terminal_ConnectionToken_Object_Terminal_ConnectionToken
    str -> fail (show str <> " is not a known valid option for Terminal_ConnectionToken_Object")

data Terminal_Location_Object
  = Terminal_Location_Object_Terminal_Location
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON Terminal_Location_Object where
  toJSON e = Text $ case e of
    Terminal_Location_Object_Terminal_Location -> "terminal.location"

instance FromJSON Terminal_Location_Object where
  parseJSON = withText "Terminal_Location_Object" $ \case
    "terminal.location" -> pure Terminal_Location_Object_Terminal_Location
    str -> fail (show str <> " is not a known valid option for Terminal_Location_Object")

data Terminal_Reader_Object
  = Terminal_Reader_Object_Terminal_Reader
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON Terminal_Reader_Object where
  toJSON e = Text $ case e of
    Terminal_Reader_Object_Terminal_Reader -> "terminal.reader"

instance FromJSON Terminal_Reader_Object where
  parseJSON = withText "Terminal_Reader_Object" $ \case
    "terminal.reader" -> pure Terminal_Reader_Object_Terminal_Reader
    str -> fail (show str <> " is not a known valid option for Terminal_Reader_Object")

data ThreeDSecure_Object
  = ThreeDSecure_Object_ThreeDSecure
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON ThreeDSecure_Object where
  toJSON e = Text $ case e of
    ThreeDSecure_Object_ThreeDSecure -> "three_d_secure"

instance FromJSON ThreeDSecure_Object where
  parseJSON = withText "ThreeDSecure_Object" $ \case
    "three_d_secure" -> pure ThreeDSecure_Object_ThreeDSecure
    str -> fail (show str <> " is not a known valid option for ThreeDSecure_Object")

data Token_Object
  = Token_Object_Token
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON Token_Object where
  toJSON e = Text $ case e of
    Token_Object_Token -> "token"

instance FromJSON Token_Object where
  parseJSON = withText "Token_Object" $ \case
    "token" -> pure Token_Object_Token
    str -> fail (show str <> " is not a known valid option for Token_Object")

data Topup_Object
  = Topup_Object_Topup
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON Topup_Object where
  toJSON e = Text $ case e of
    Topup_Object_Topup -> "topup"

instance FromJSON Topup_Object where
  parseJSON = withText "Topup_Object" $ \case
    "topup" -> pure Topup_Object_Topup
    str -> fail (show str <> " is not a known valid option for Topup_Object")

data Topup_Status
  = Topup_Status_Canceled
  | Topup_Status_Failed
  | Topup_Status_Pending
  | Topup_Status_Reversed
  | Topup_Status_Succeeded
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON Topup_Status where
  toJSON e = Text $ case e of
    Topup_Status_Canceled -> "canceled"
    Topup_Status_Failed -> "failed"
    Topup_Status_Pending -> "pending"
    Topup_Status_Reversed -> "reversed"
    Topup_Status_Succeeded -> "succeeded"

instance FromJSON Topup_Status where
  parseJSON = withText "Topup_Status" $ \case
    "canceled" -> pure Topup_Status_Canceled
    "failed" -> pure Topup_Status_Failed
    "pending" -> pure Topup_Status_Pending
    "reversed" -> pure Topup_Status_Reversed
    "succeeded" -> pure Topup_Status_Succeeded
    str -> fail (show str <> " is not a known valid option for Topup_Status")

data TransferReversal_Object
  = TransferReversal_Object_TransferReversal
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON TransferReversal_Object where
  toJSON e = Text $ case e of
    TransferReversal_Object_TransferReversal -> "transfer_reversal"

instance FromJSON TransferReversal_Object where
  parseJSON = withText "TransferReversal_Object" $ \case
    "transfer_reversal" -> pure TransferReversal_Object_TransferReversal
    str -> fail (show str <> " is not a known valid option for TransferReversal_Object")

data Transfer_Object
  = Transfer_Object_Transfer
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON Transfer_Object where
  toJSON e = Text $ case e of
    Transfer_Object_Transfer -> "transfer"

instance FromJSON Transfer_Object where
  parseJSON = withText "Transfer_Object" $ \case
    "transfer" -> pure Transfer_Object_Transfer
    str -> fail (show str <> " is not a known valid option for Transfer_Object")

data TransformUsage_Round
  = TransformUsage_Round_Down
  | TransformUsage_Round_Up
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON TransformUsage_Round where
  toJSON e = Text $ case e of
    TransformUsage_Round_Down -> "down"
    TransformUsage_Round_Up -> "up"

instance FromJSON TransformUsage_Round where
  parseJSON = withText "TransformUsage_Round" $ \case
    "down" -> pure TransformUsage_Round_Down
    "up" -> pure TransformUsage_Round_Up
    str -> fail (show str <> " is not a known valid option for TransformUsage_Round")

data Type
  = Type_BusinessEntity
  | Type_Individual
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON Type where
  toJSON e = Text $ case e of
    Type_BusinessEntity -> "business_entity"
    Type_Individual -> "individual"

instance FromJSON Type where
  parseJSON = withText "Type" $ \case
    "business_entity" -> pure Type_BusinessEntity
    "individual" -> pure Type_Individual
    str -> fail (show str <> " is not a known valid option for Type")

data Type
  = Type_Card
  | Type_CardPresent
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON Type where
  toJSON e = Text $ case e of
    Type_Card -> "card"
    Type_CardPresent -> "card_present"

instance FromJSON Type where
  parseJSON = withText "Type" $ \case
    "card" -> pure Type_Card
    "card_present" -> pure Type_CardPresent
    str -> fail (show str <> " is not a known valid option for Type")

data Type
  = Type_Corporation
  | Type_Individual
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON Type where
  toJSON e = Text $ case e of
    Type_Corporation -> "corporation"
    Type_Individual -> "individual"

instance FromJSON Type where
  parseJSON = withText "Type" $ \case
    "corporation" -> pure Type_Corporation
    "individual" -> pure Type_Individual
    str -> fail (show str <> " is not a known valid option for Type")

data Type
  = Type_Good
  | Type_Service
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON Type where
  toJSON e = Text $ case e of
    Type_Good -> "good"
    Type_Service -> "service"

instance FromJSON Type where
  parseJSON = withText "Type" $ \case
    "good" -> pure Type_Good
    "service" -> pure Type_Service
    str -> fail (show str <> " is not a known valid option for Type")

data Type
  = Type_Physical
  | Type_Virtual
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON Type where
  toJSON e = Text $ case e of
    Type_Physical -> "physical"
    Type_Virtual -> "virtual"

instance FromJSON Type where
  parseJSON = withText "Type" $ \case
    "physical" -> pure Type_Physical
    "virtual" -> pure Type_Virtual
    str -> fail (show str <> " is not a known valid option for Type")

data UsageRecordSummary_Object
  = UsageRecordSummary_Object_UsageRecordSummary
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON UsageRecordSummary_Object where
  toJSON e = Text $ case e of
    UsageRecordSummary_Object_UsageRecordSummary -> "usage_record_summary"

instance FromJSON UsageRecordSummary_Object where
  parseJSON = withText "UsageRecordSummary_Object" $ \case
    "usage_record_summary" -> pure UsageRecordSummary_Object_UsageRecordSummary
    str -> fail (show str <> " is not a known valid option for UsageRecordSummary_Object")

data UsageRecord_Object
  = UsageRecord_Object_UsageRecord
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON UsageRecord_Object where
  toJSON e = Text $ case e of
    UsageRecord_Object_UsageRecord -> "usage_record"

instance FromJSON UsageRecord_Object where
  parseJSON = withText "UsageRecord_Object" $ \case
    "usage_record" -> pure UsageRecord_Object_UsageRecord
    str -> fail (show str <> " is not a known valid option for UsageRecord_Object")

data WebhookEndpoint_Object
  = WebhookEndpoint_Object_WebhookEndpoint
  deriving (Show, Eq, Ord, Enum, Bounded, Generic)

instance ToJSON WebhookEndpoint_Object where
  toJSON e = Text $ case e of
    WebhookEndpoint_Object_WebhookEndpoint -> "webhook_endpoint"

instance FromJSON WebhookEndpoint_Object where
  parseJSON = withText "WebhookEndpoint_Object" $ \case
    "webhook_endpoint" -> pure WebhookEndpoint_Object_WebhookEndpoint
    str -> fail (show str <> " is not a known valid option for WebhookEndpoint_Object")


-- Describes: "account"

data Account
  = Account
    { account__id :: (Id Account)
    {- ^ Unique identifier for the object. -}
    , account__object :: Account_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , account__capabilities :: AccountCapabilities
    , account__chargesEnabled :: Bool
    {- ^ Whether the account can create live charges. -}
    , account__company :: LegalEntityCompany
    , account__country :: Text
    {- ^ The account's country. -}
    , account__created :: POSIXTime
    {- ^ Time at which the object was created. Measured in seconds since the Unix epoch. -}
    , account__defaultCurrency :: Text
    {- ^ Three-letter ISO currency code representing the default currency for the account. This must be a currency that [Stripe supports in the account's country](https://stripe.com/docs/payouts). -}
    , account__detailsSubmitted :: Bool
    {- ^ Whether account details have been submitted. Standard accounts cannot receive payouts before this is true. -}
    , account__externalAccounts :: Object
    {- ^ External accounts (bank accounts and debit cards) currently attached to this account -}
    , account__individual :: Person
    , account__metadata :: Object
    {- ^ Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. -}
    , account__payoutsEnabled :: Bool
    {- ^ Whether Stripe can send payouts to this account. -}
    , account__requirements :: AccountRequirements
    , account__tosAcceptance :: AccountTosAcceptance
    , account__type :: Text
    {- ^ The Stripe account type. Can be `standard`, `express`, or `custom`. -}
    , account__businessProfile :: Maybe (Expandable '[Const (AccountBusinessProfile)])
    {- ^ Optional information related to the business. -}
    , account__businessType :: Maybe (Text)
    {- ^ The business type. Can be `individual` or `company`. -}
    , account__email :: Maybe (Text)
    {- ^ The primary user's email address. -}
    , account__settings :: Maybe (Expandable '[Const (AccountSettings)])
    {- ^ Options for customizing how the account functions within Stripe. -}
    } deriving (Show, Eq, Generic)

instance FromJSON Account where
  parseJSON = withObject "Account" parseCtors
    where
      parseCtors o = parseAccount o
      parseAccount o = do
        account__id <- o .: "id"
        account__object <- o .: "object"
        account__capabilities <- o .: "capabilities"
        account__chargesEnabled <- o .: "charges_enabled"
        account__company <- o .: "company"
        account__country <- o .: "country"
        account__created <- o .: "created"
        account__defaultCurrency <- o .: "default_currency"
        account__detailsSubmitted <- o .: "details_submitted"
        account__externalAccounts <- o .: "external_accounts"
        account__individual <- o .: "individual"
        account__metadata <- o .: "metadata"
        account__payoutsEnabled <- o .: "payouts_enabled"
        account__requirements <- o .: "requirements"
        account__tosAcceptance <- o .: "tos_acceptance"
        account__type <- o .: "type"
        account__businessProfile <- o .:? "business_profile"
        account__businessType <- o .:? "business_type"
        account__email <- o .:? "email"
        account__settings <- o .:? "settings"
        pure Account{..}

instance ToJSON Account where
  toJSON Account{..} = object
    (
      ("id" .= account__id) :
      ("object" .= account__object) :
      ("capabilities" .= account__capabilities) :
      ("charges_enabled" .= account__chargesEnabled) :
      ("company" .= account__company) :
      ("country" .= account__country) :
      ("created" .= account__created) :
      ("default_currency" .= account__defaultCurrency) :
      ("details_submitted" .= account__detailsSubmitted) :
      ("external_accounts" .= account__externalAccounts) :
      ("individual" .= account__individual) :
      ("metadata" .= account__metadata) :
      ("payouts_enabled" .= account__payoutsEnabled) :
      ("requirements" .= account__requirements) :
      ("tos_acceptance" .= account__tosAcceptance) :
      ("type" .= account__type) :
      (fmap ("business_profile" .=) account__businessProfile) >?>
      (fmap ("business_type" .=) account__businessType) >?>
      (fmap ("email" .=) account__email) >?>
      (fmap ("settings" .=) account__settings) >?>
      []
    )
  toEncoding Account{..} = pairs (
      "id" .= account__id <>
      "object" .= account__object <>
      "capabilities" .= account__capabilities <>
      "charges_enabled" .= account__chargesEnabled <>
      "company" .= account__company <>
      "country" .= account__country <>
      "created" .= account__created <>
      "default_currency" .= account__defaultCurrency <>
      "details_submitted" .= account__detailsSubmitted <>
      "external_accounts" .= account__externalAccounts <>
      "individual" .= account__individual <>
      "metadata" .= account__metadata <>
      "payouts_enabled" .= account__payoutsEnabled <>
      "requirements" .= account__requirements <>
      "tos_acceptance" .= account__tosAcceptance <>
      "type" .= account__type <>
      maybe mempty ("business_profile" .=) account__businessProfile <>
      maybe mempty ("business_type" .=) account__businessType <>
      maybe mempty ("email" .=) account__email <>
      maybe mempty ("settings" .=) account__settings
      )

-- Describes: "account_branding_settings"

data AccountBrandingSettings
  = AccountBrandingSettings
    { accountBrandingSettings__icon :: Maybe (Expandable '[Const (File)])
    {- ^ (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) An icon for the account. Must be square and at least 128px x 128px. -}
    , accountBrandingSettings__logo :: Maybe (Expandable '[Const (File)])
    {- ^ (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) A logo for the account that will be used in Checkout instead of the icon and without the account's name next to it if provided. Must be at least 128px x 128px. -}
    , accountBrandingSettings__primaryColor :: Maybe (Text)
    {- ^ A CSS hex color value representing the primary branding color for this account -}
    } deriving (Show, Eq, Generic)

instance FromJSON AccountBrandingSettings where
  parseJSON = withObject "AccountBrandingSettings" parseCtors
    where
      parseCtors o = parseAccountBrandingSettings o
      parseAccountBrandingSettings o = do
        accountBrandingSettings__icon <- o .:? "icon"
        accountBrandingSettings__logo <- o .:? "logo"
        accountBrandingSettings__primaryColor <- o .:? "primary_color"
        pure AccountBrandingSettings{..}

instance ToJSON AccountBrandingSettings where
  toJSON AccountBrandingSettings{..} = object
    (
      (fmap ("icon" .=) accountBrandingSettings__icon) >?>
      (fmap ("logo" .=) accountBrandingSettings__logo) >?>
      (fmap ("primary_color" .=) accountBrandingSettings__primaryColor) >?>
      []
    )
  toEncoding AccountBrandingSettings{..} = pairs (
      maybe mempty ("icon" .=) accountBrandingSettings__icon <>
      maybe mempty ("logo" .=) accountBrandingSettings__logo <>
      maybe mempty ("primary_color" .=) accountBrandingSettings__primaryColor
      )

-- Describes: "account_business_profile"

data AccountBusinessProfile
  = AccountBusinessProfile
    { accountBusinessProfile__mcc :: Maybe (Text)
    {- ^ The merchant category code for the account. MCCs are used to classify businesses based on the goods or services they provide. -}
    , accountBusinessProfile__name :: Maybe (Text)
    {- ^ The customer-facing business name. -}
    , accountBusinessProfile__productDescription :: Maybe (Text)
    {- ^ Internal-only description of the product sold or service provided by the business. It's used by Stripe for risk and underwriting purposes. -}
    , accountBusinessProfile__supportAddress :: Maybe (Expandable '[Const (Address)])
    {- ^ A publicly available mailing address for sending support issues to. -}
    , accountBusinessProfile__supportEmail :: Maybe (Text)
    {- ^ A publicly available email address for sending support issues to. -}
    , accountBusinessProfile__supportPhone :: Maybe (Text)
    {- ^ A publicly available phone number to call with support issues. -}
    , accountBusinessProfile__supportUrl :: Maybe (Text)
    {- ^ A publicly available website for handling support issues. -}
    , accountBusinessProfile__url :: Maybe (Text)
    {- ^ The business's publicly available website. -}
    } deriving (Show, Eq, Generic)

instance FromJSON AccountBusinessProfile where
  parseJSON = withObject "AccountBusinessProfile" parseCtors
    where
      parseCtors o = parseAccountBusinessProfile o
      parseAccountBusinessProfile o = do
        accountBusinessProfile__mcc <- o .:? "mcc"
        accountBusinessProfile__name <- o .:? "name"
        accountBusinessProfile__productDescription <- o .:? "product_description"
        accountBusinessProfile__supportAddress <- o .:? "support_address"
        accountBusinessProfile__supportEmail <- o .:? "support_email"
        accountBusinessProfile__supportPhone <- o .:? "support_phone"
        accountBusinessProfile__supportUrl <- o .:? "support_url"
        accountBusinessProfile__url <- o .:? "url"
        pure AccountBusinessProfile{..}

instance ToJSON AccountBusinessProfile where
  toJSON AccountBusinessProfile{..} = object
    (
      (fmap ("mcc" .=) accountBusinessProfile__mcc) >?>
      (fmap ("name" .=) accountBusinessProfile__name) >?>
      (fmap ("product_description" .=) accountBusinessProfile__productDescription) >?>
      (fmap ("support_address" .=) accountBusinessProfile__supportAddress) >?>
      (fmap ("support_email" .=) accountBusinessProfile__supportEmail) >?>
      (fmap ("support_phone" .=) accountBusinessProfile__supportPhone) >?>
      (fmap ("support_url" .=) accountBusinessProfile__supportUrl) >?>
      (fmap ("url" .=) accountBusinessProfile__url) >?>
      []
    )
  toEncoding AccountBusinessProfile{..} = pairs (
      maybe mempty ("mcc" .=) accountBusinessProfile__mcc <>
      maybe mempty ("name" .=) accountBusinessProfile__name <>
      maybe mempty ("product_description" .=) accountBusinessProfile__productDescription <>
      maybe mempty ("support_address" .=) accountBusinessProfile__supportAddress <>
      maybe mempty ("support_email" .=) accountBusinessProfile__supportEmail <>
      maybe mempty ("support_phone" .=) accountBusinessProfile__supportPhone <>
      maybe mempty ("support_url" .=) accountBusinessProfile__supportUrl <>
      maybe mempty ("url" .=) accountBusinessProfile__url
      )

-- Describes: "account_capabilities"

data AccountCapabilities
  = AccountCapabilities
    { accountCapabilities__cardPayments :: AccountCapabilities_CardPayments
    {- ^ The status of the card payments capability of the account, or whether the account can directly process credit and debit card charges. -}
    , accountCapabilities__legacyPayments :: AccountCapabilities_LegacyPayments
    {- ^ The status of the legacy payments capability of the account. -}
    , accountCapabilities__transfers :: AccountCapabilities_Transfers
    {- ^ The status of the transfers capability of the account, or whether your platform can transfer funds to the account. -}
    } deriving (Show, Eq, Generic)

instance FromJSON AccountCapabilities where
  parseJSON = withObject "AccountCapabilities" parseCtors
    where
      parseCtors o = parseAccountCapabilities o
      parseAccountCapabilities o = do
        accountCapabilities__cardPayments <- o .: "card_payments"
        accountCapabilities__legacyPayments <- o .: "legacy_payments"
        accountCapabilities__transfers <- o .: "transfers"
        pure AccountCapabilities{..}

instance ToJSON AccountCapabilities where
  toJSON AccountCapabilities{..} = object
    (
      ("card_payments" .= accountCapabilities__cardPayments) :
      ("legacy_payments" .= accountCapabilities__legacyPayments) :
      ("transfers" .= accountCapabilities__transfers) :
      []
    )
  toEncoding AccountCapabilities{..} = pairs (
      "card_payments" .= accountCapabilities__cardPayments <>
      "legacy_payments" .= accountCapabilities__legacyPayments <>
      "transfers" .= accountCapabilities__transfers
      )

-- Describes: "account_capability_requirements"

data AccountCapabilityRequirements
  = AccountCapabilityRequirements
    { accountCapabilityRequirements__currentlyDue :: Vector (Text)
    {- ^ The fields that need to be collected to keep the capability enabled. If not collected by the `current_deadline`, these fields appear in `past_due` as well, and the capability is disabled. -}
    , accountCapabilityRequirements__eventuallyDue :: Vector (Text)
    {- ^ The fields that need to be collected assuming all volume thresholds are reached. As they become required, these fields appear in `currently_due` as well, and the `current_deadline` is set. -}
    , accountCapabilityRequirements__pastDue :: Vector (Text)
    {- ^ The fields that weren't collected by the `current_deadline`. These fields need to be collected to enable the capability for the account. -}
    , accountCapabilityRequirements__pendingVerification :: Vector (Text)
    {- ^ Additional fields that may be required depending on the results of verification or review for provided requirements. If any of these fields become required, they appear in `currently_due` or `past_due`. -}
    , accountCapabilityRequirements__currentDeadline :: Maybe (POSIXTime)
    {- ^ The date the fields in `currently_due` must be collected by to keep the capability enabled for the account. -}
    , accountCapabilityRequirements__disabledReason :: Maybe (Text)
    {- ^ If the capability is disabled, this string describes why. Possible values are `requirement.fields_needed`, `pending.onboarding`, `pending.review`, `rejected_fraud`, or `rejected.other`. -}
    } deriving (Show, Eq, Generic)

instance FromJSON AccountCapabilityRequirements where
  parseJSON = withObject "AccountCapabilityRequirements" parseCtors
    where
      parseCtors o = parseAccountCapabilityRequirements o
      parseAccountCapabilityRequirements o = do
        accountCapabilityRequirements__currentlyDue <- o .: "currently_due"
        accountCapabilityRequirements__eventuallyDue <- o .: "eventually_due"
        accountCapabilityRequirements__pastDue <- o .: "past_due"
        accountCapabilityRequirements__pendingVerification <- o .: "pending_verification"
        accountCapabilityRequirements__currentDeadline <- o .:? "current_deadline"
        accountCapabilityRequirements__disabledReason <- o .:? "disabled_reason"
        pure AccountCapabilityRequirements{..}

instance ToJSON AccountCapabilityRequirements where
  toJSON AccountCapabilityRequirements{..} = object
    (
      ("currently_due" .= accountCapabilityRequirements__currentlyDue) :
      ("eventually_due" .= accountCapabilityRequirements__eventuallyDue) :
      ("past_due" .= accountCapabilityRequirements__pastDue) :
      ("pending_verification" .= accountCapabilityRequirements__pendingVerification) :
      (fmap ("current_deadline" .=) accountCapabilityRequirements__currentDeadline) >?>
      (fmap ("disabled_reason" .=) accountCapabilityRequirements__disabledReason) >?>
      []
    )
  toEncoding AccountCapabilityRequirements{..} = pairs (
      "currently_due" .= accountCapabilityRequirements__currentlyDue <>
      "eventually_due" .= accountCapabilityRequirements__eventuallyDue <>
      "past_due" .= accountCapabilityRequirements__pastDue <>
      "pending_verification" .= accountCapabilityRequirements__pendingVerification <>
      maybe mempty ("current_deadline" .=) accountCapabilityRequirements__currentDeadline <>
      maybe mempty ("disabled_reason" .=) accountCapabilityRequirements__disabledReason
      )

-- Describes: "account_card_payments_settings"

data AccountCardPaymentsSettings
  = AccountCardPaymentsSettings
    { accountCardPaymentsSettings__declineOn :: AccountDeclineChargeOn
    , accountCardPaymentsSettings__statementDescriptorPrefix :: Maybe (Text)
    {- ^ The default text that appears on credit card statements when a charge is made. This field prefixes any dynamic `statement_descriptor` specified on the charge. `statement_descriptor_prefix` is useful for maximizing descriptor space for the dynamic portion. -}
    } deriving (Show, Eq, Generic)

instance FromJSON AccountCardPaymentsSettings where
  parseJSON = withObject "AccountCardPaymentsSettings" parseCtors
    where
      parseCtors o = parseAccountCardPaymentsSettings o
      parseAccountCardPaymentsSettings o = do
        accountCardPaymentsSettings__declineOn <- o .: "decline_on"
        accountCardPaymentsSettings__statementDescriptorPrefix <- o .:? "statement_descriptor_prefix"
        pure AccountCardPaymentsSettings{..}

instance ToJSON AccountCardPaymentsSettings where
  toJSON AccountCardPaymentsSettings{..} = object
    (
      ("decline_on" .= accountCardPaymentsSettings__declineOn) :
      (fmap ("statement_descriptor_prefix" .=) accountCardPaymentsSettings__statementDescriptorPrefix) >?>
      []
    )
  toEncoding AccountCardPaymentsSettings{..} = pairs (
      "decline_on" .= accountCardPaymentsSettings__declineOn <>
      maybe mempty ("statement_descriptor_prefix" .=) accountCardPaymentsSettings__statementDescriptorPrefix
      )

-- Describes: "account_dashboard_settings"

data AccountDashboardSettings
  = AccountDashboardSettings
    { accountDashboardSettings__displayName :: Maybe (Text)
    {- ^ The display name for this account. This is used on the Stripe Dashboard to differentiate between accounts. -}
    , accountDashboardSettings__timezone :: Maybe (Text)
    {- ^ The timezone used in the Stripe Dashboard for this account. A list of possible time zone values is maintained at the [IANA Time Zone Database](http://www.iana.org/time-zones). -}
    } deriving (Show, Eq, Generic)

instance FromJSON AccountDashboardSettings where
  parseJSON = withObject "AccountDashboardSettings" parseCtors
    where
      parseCtors o = parseAccountDashboardSettings o
      parseAccountDashboardSettings o = do
        accountDashboardSettings__displayName <- o .:? "display_name"
        accountDashboardSettings__timezone <- o .:? "timezone"
        pure AccountDashboardSettings{..}

instance ToJSON AccountDashboardSettings where
  toJSON AccountDashboardSettings{..} = object
    (
      (fmap ("display_name" .=) accountDashboardSettings__displayName) >?>
      (fmap ("timezone" .=) accountDashboardSettings__timezone) >?>
      []
    )
  toEncoding AccountDashboardSettings{..} = pairs (
      maybe mempty ("display_name" .=) accountDashboardSettings__displayName <>
      maybe mempty ("timezone" .=) accountDashboardSettings__timezone
      )

-- Describes: "account_decline_charge_on"

data AccountDeclineChargeOn
  = AccountDeclineChargeOn
    { accountDeclineChargeOn__avsFailure :: Bool
    {- ^ Whether Stripe automatically declines charges with an incorrect ZIP or postal code. This setting only applies when a ZIP or postal code is provided and they fail bank verification. -}
    , accountDeclineChargeOn__cvcFailure :: Bool
    {- ^ Whether Stripe automatically declines charges with an incorrect CVC. This setting only applies when a CVC is provided and it fails bank verification. -}
    } deriving (Show, Eq, Generic)

instance FromJSON AccountDeclineChargeOn where
  parseJSON = withObject "AccountDeclineChargeOn" parseCtors
    where
      parseCtors o = parseAccountDeclineChargeOn o
      parseAccountDeclineChargeOn o = do
        accountDeclineChargeOn__avsFailure <- o .: "avs_failure"
        accountDeclineChargeOn__cvcFailure <- o .: "cvc_failure"
        pure AccountDeclineChargeOn{..}

instance ToJSON AccountDeclineChargeOn where
  toJSON AccountDeclineChargeOn{..} = object
    (
      ("avs_failure" .= accountDeclineChargeOn__avsFailure) :
      ("cvc_failure" .= accountDeclineChargeOn__cvcFailure) :
      []
    )
  toEncoding AccountDeclineChargeOn{..} = pairs (
      "avs_failure" .= accountDeclineChargeOn__avsFailure <>
      "cvc_failure" .= accountDeclineChargeOn__cvcFailure
      )

-- Describes: "account_link"

data AccountLink
  = AccountLink
    { accountLink__object :: AccountLink_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , accountLink__created :: POSIXTime
    {- ^ Time at which the object was created. Measured in seconds since the Unix epoch. -}
    , accountLink__expiresAt :: POSIXTime
    {- ^ The timestamp at which this account link will expire. -}
    , accountLink__url :: Text
    {- ^ The URL for the account link. -}
    } deriving (Show, Eq, Generic)

instance FromJSON AccountLink where
  parseJSON = withObject "AccountLink" parseCtors
    where
      parseCtors o = parseAccountLink o
      parseAccountLink o = do
        accountLink__object <- o .: "object"
        accountLink__created <- o .: "created"
        accountLink__expiresAt <- o .: "expires_at"
        accountLink__url <- o .: "url"
        pure AccountLink{..}

instance ToJSON AccountLink where
  toJSON AccountLink{..} = object
    (
      ("object" .= accountLink__object) :
      ("created" .= accountLink__created) :
      ("expires_at" .= accountLink__expiresAt) :
      ("url" .= accountLink__url) :
      []
    )
  toEncoding AccountLink{..} = pairs (
      "object" .= accountLink__object <>
      "created" .= accountLink__created <>
      "expires_at" .= accountLink__expiresAt <>
      "url" .= accountLink__url
      )

-- Describes: "account_payments_settings"

data AccountPaymentsSettings
  = AccountPaymentsSettings
    { accountPaymentsSettings__statementDescriptor :: Maybe (Text)
    {- ^ The default text that appears on credit card statements when a charge is made. This field prefixes any dynamic `statement_descriptor` specified on the charge. -}
    , accountPaymentsSettings__statementDescriptorKana :: Maybe (Text)
    {- ^ The Kana variation of the default text that appears on credit card statements when a charge is made (Japan only) -}
    , accountPaymentsSettings__statementDescriptorKanji :: Maybe (Text)
    {- ^ The Kanji variation of the default text that appears on credit card statements when a charge is made (Japan only) -}
    } deriving (Show, Eq, Generic)

instance FromJSON AccountPaymentsSettings where
  parseJSON = withObject "AccountPaymentsSettings" parseCtors
    where
      parseCtors o = parseAccountPaymentsSettings o
      parseAccountPaymentsSettings o = do
        accountPaymentsSettings__statementDescriptor <- o .:? "statement_descriptor"
        accountPaymentsSettings__statementDescriptorKana <- o .:? "statement_descriptor_kana"
        accountPaymentsSettings__statementDescriptorKanji <- o .:? "statement_descriptor_kanji"
        pure AccountPaymentsSettings{..}

instance ToJSON AccountPaymentsSettings where
  toJSON AccountPaymentsSettings{..} = object
    (
      (fmap ("statement_descriptor" .=) accountPaymentsSettings__statementDescriptor) >?>
      (fmap ("statement_descriptor_kana" .=) accountPaymentsSettings__statementDescriptorKana) >?>
      (fmap ("statement_descriptor_kanji" .=) accountPaymentsSettings__statementDescriptorKanji) >?>
      []
    )
  toEncoding AccountPaymentsSettings{..} = pairs (
      maybe mempty ("statement_descriptor" .=) accountPaymentsSettings__statementDescriptor <>
      maybe mempty ("statement_descriptor_kana" .=) accountPaymentsSettings__statementDescriptorKana <>
      maybe mempty ("statement_descriptor_kanji" .=) accountPaymentsSettings__statementDescriptorKanji
      )

-- Describes: "account_payout_settings"

data AccountPayoutSettings
  = AccountPayoutSettings
    { accountPayoutSettings__debitNegativeBalances :: Bool
    {- ^ A Boolean indicating if Stripe should try to reclaim negative balances from an attached bank account. See our [Understanding Connect Account Balances](https://stripe.com/docs/connect/account-balances) documentation for details. Default value is `true` for Express accounts and `false` for Custom accounts. -}
    , accountPayoutSettings__schedule :: TransferSchedule
    , accountPayoutSettings__statementDescriptor :: Maybe (Text)
    {- ^ The text that appears on the bank account statement for payouts. If not set, this defaults to the platform's bank descriptor as set in the Dashboard. -}
    } deriving (Show, Eq, Generic)

instance FromJSON AccountPayoutSettings where
  parseJSON = withObject "AccountPayoutSettings" parseCtors
    where
      parseCtors o = parseAccountPayoutSettings o
      parseAccountPayoutSettings o = do
        accountPayoutSettings__debitNegativeBalances <- o .: "debit_negative_balances"
        accountPayoutSettings__schedule <- o .: "schedule"
        accountPayoutSettings__statementDescriptor <- o .:? "statement_descriptor"
        pure AccountPayoutSettings{..}

instance ToJSON AccountPayoutSettings where
  toJSON AccountPayoutSettings{..} = object
    (
      ("debit_negative_balances" .= accountPayoutSettings__debitNegativeBalances) :
      ("schedule" .= accountPayoutSettings__schedule) :
      (fmap ("statement_descriptor" .=) accountPayoutSettings__statementDescriptor) >?>
      []
    )
  toEncoding AccountPayoutSettings{..} = pairs (
      "debit_negative_balances" .= accountPayoutSettings__debitNegativeBalances <>
      "schedule" .= accountPayoutSettings__schedule <>
      maybe mempty ("statement_descriptor" .=) accountPayoutSettings__statementDescriptor
      )

-- Describes: "account_requirements"

data AccountRequirements
  = AccountRequirements
    { accountRequirements__currentDeadline :: Maybe (POSIXTime)
    {- ^ The date the fields in `currently_due` must be collected by to keep payouts enabled for the account. These fields might block payouts sooner if the next threshold is reached before these fields are collected. -}
    , accountRequirements__currentlyDue :: Maybe (Vector (Text))
    {- ^ The fields that need to be collected to keep the account enabled. If not collected by the `current_deadline`, these fields appear in `past_due` as well, and the account is disabled. -}
    , accountRequirements__disabledReason :: Maybe (Text)
    {- ^ If the account is disabled, this string describes why the account can’t create charges or receive payouts. Can be `requirements.past_due`, `requirements.pending_verification`, `rejected.fraud`, `rejected.terms_of_service`, `rejected.listed`, `rejected.other`, `listed`, `under_review`, or `other`. -}
    , accountRequirements__eventuallyDue :: Maybe (Vector (Text))
    {- ^ The fields that need to be collected assuming all volume thresholds are reached. As they become required, these fields appear in `currently_due` as well, and the `current_deadline` is set. -}
    , accountRequirements__pastDue :: Maybe (Vector (Text))
    {- ^ The fields that weren't collected by the `current_deadline`. These fields need to be collected to re-enable the account. -}
    , accountRequirements__pendingVerification :: Maybe (Vector (Text))
    {- ^ Additional fields that may be required depending on the results of verification or review for provided requirements. If any of these fields become required, they appear in `currently_due` or `past_due`. -}
    } deriving (Show, Eq, Generic)

instance FromJSON AccountRequirements where
  parseJSON = withObject "AccountRequirements" parseCtors
    where
      parseCtors o = parseAccountRequirements o
      parseAccountRequirements o = do
        accountRequirements__currentDeadline <- o .:? "current_deadline"
        accountRequirements__currentlyDue <- o .:? "currently_due"
        accountRequirements__disabledReason <- o .:? "disabled_reason"
        accountRequirements__eventuallyDue <- o .:? "eventually_due"
        accountRequirements__pastDue <- o .:? "past_due"
        accountRequirements__pendingVerification <- o .:? "pending_verification"
        pure AccountRequirements{..}

instance ToJSON AccountRequirements where
  toJSON AccountRequirements{..} = object
    (
      (fmap ("current_deadline" .=) accountRequirements__currentDeadline) >?>
      (fmap ("currently_due" .=) accountRequirements__currentlyDue) >?>
      (fmap ("disabled_reason" .=) accountRequirements__disabledReason) >?>
      (fmap ("eventually_due" .=) accountRequirements__eventuallyDue) >?>
      (fmap ("past_due" .=) accountRequirements__pastDue) >?>
      (fmap ("pending_verification" .=) accountRequirements__pendingVerification) >?>
      []
    )
  toEncoding AccountRequirements{..} = pairs (
      maybe mempty ("current_deadline" .=) accountRequirements__currentDeadline <>
      maybe mempty ("currently_due" .=) accountRequirements__currentlyDue <>
      maybe mempty ("disabled_reason" .=) accountRequirements__disabledReason <>
      maybe mempty ("eventually_due" .=) accountRequirements__eventuallyDue <>
      maybe mempty ("past_due" .=) accountRequirements__pastDue <>
      maybe mempty ("pending_verification" .=) accountRequirements__pendingVerification
      )

-- Describes: "account_settings"

data AccountSettings
  = AccountSettings
    { accountSettings__branding :: AccountBrandingSettings
    , accountSettings__cardPayments :: AccountCardPaymentsSettings
    , accountSettings__dashboard :: AccountDashboardSettings
    , accountSettings__payments :: AccountPaymentsSettings
    , accountSettings__payouts :: AccountPayoutSettings
    } deriving (Show, Eq, Generic)

instance FromJSON AccountSettings where
  parseJSON = withObject "AccountSettings" parseCtors
    where
      parseCtors o = parseAccountSettings o
      parseAccountSettings o = do
        accountSettings__branding <- o .: "branding"
        accountSettings__cardPayments <- o .: "card_payments"
        accountSettings__dashboard <- o .: "dashboard"
        accountSettings__payments <- o .: "payments"
        accountSettings__payouts <- o .: "payouts"
        pure AccountSettings{..}

instance ToJSON AccountSettings where
  toJSON AccountSettings{..} = object
    (
      ("branding" .= accountSettings__branding) :
      ("card_payments" .= accountSettings__cardPayments) :
      ("dashboard" .= accountSettings__dashboard) :
      ("payments" .= accountSettings__payments) :
      ("payouts" .= accountSettings__payouts) :
      []
    )
  toEncoding AccountSettings{..} = pairs (
      "branding" .= accountSettings__branding <>
      "card_payments" .= accountSettings__cardPayments <>
      "dashboard" .= accountSettings__dashboard <>
      "payments" .= accountSettings__payments <>
      "payouts" .= accountSettings__payouts
      )

-- Describes: "account_tos_acceptance"

data AccountTosAcceptance
  = AccountTosAcceptance
    { accountTosAcceptance__date :: Maybe (POSIXTime)
    {- ^ The Unix timestamp marking when the Stripe Services Agreement was accepted by the account representative -}
    , accountTosAcceptance__ip :: Maybe (Text)
    {- ^ The IP address from which the Stripe Services Agreement was accepted by the account representative -}
    , accountTosAcceptance__userAgent :: Maybe (Text)
    {- ^ The user agent of the browser from which the Stripe Services Agreement was accepted by the account representative -}
    } deriving (Show, Eq, Generic)

instance FromJSON AccountTosAcceptance where
  parseJSON = withObject "AccountTosAcceptance" parseCtors
    where
      parseCtors o = parseAccountTosAcceptance o
      parseAccountTosAcceptance o = do
        accountTosAcceptance__date <- o .:? "date"
        accountTosAcceptance__ip <- o .:? "ip"
        accountTosAcceptance__userAgent <- o .:? "user_agent"
        pure AccountTosAcceptance{..}

instance ToJSON AccountTosAcceptance where
  toJSON AccountTosAcceptance{..} = object
    (
      (fmap ("date" .=) accountTosAcceptance__date) >?>
      (fmap ("ip" .=) accountTosAcceptance__ip) >?>
      (fmap ("user_agent" .=) accountTosAcceptance__userAgent) >?>
      []
    )
  toEncoding AccountTosAcceptance{..} = pairs (
      maybe mempty ("date" .=) accountTosAcceptance__date <>
      maybe mempty ("ip" .=) accountTosAcceptance__ip <>
      maybe mempty ("user_agent" .=) accountTosAcceptance__userAgent
      )

-- Describes: "address"

data Address
  = Address
    { address__city :: Maybe (Text)
    {- ^ City/District/Suburb/Town/Village. -}
    , address__country :: Maybe (Text)
    {- ^ 2-letter country code. -}
    , address__line1 :: Maybe (Text)
    {- ^ Address line 1 (Street address/PO Box/Company name). -}
    , address__line2 :: Maybe (Text)
    {- ^ Address line 2 (Apartment/Suite/Unit/Building). -}
    , address__postalCode :: Maybe (Text)
    {- ^ ZIP or postal code. -}
    , address__state :: Maybe (Text)
    {- ^ State/County/Province/Region. -}
    } deriving (Show, Eq, Generic)

instance FromJSON Address where
  parseJSON = withObject "Address" parseCtors
    where
      parseCtors o = parseAddress o
      parseAddress o = do
        address__city <- o .:? "city"
        address__country <- o .:? "country"
        address__line1 <- o .:? "line1"
        address__line2 <- o .:? "line2"
        address__postalCode <- o .:? "postal_code"
        address__state <- o .:? "state"
        pure Address{..}

instance ToJSON Address where
  toJSON Address{..} = object
    (
      (fmap ("city" .=) address__city) >?>
      (fmap ("country" .=) address__country) >?>
      (fmap ("line1" .=) address__line1) >?>
      (fmap ("line2" .=) address__line2) >?>
      (fmap ("postal_code" .=) address__postalCode) >?>
      (fmap ("state" .=) address__state) >?>
      []
    )
  toEncoding Address{..} = pairs (
      maybe mempty ("city" .=) address__city <>
      maybe mempty ("country" .=) address__country <>
      maybe mempty ("line1" .=) address__line1 <>
      maybe mempty ("line2" .=) address__line2 <>
      maybe mempty ("postal_code" .=) address__postalCode <>
      maybe mempty ("state" .=) address__state
      )

-- Describes: "alipay_account"

data AlipayAccount
  = AlipayAccount
    { alipayAccount__id :: (Id AlipayAccount)
    {- ^ Unique identifier for the object. -}
    , alipayAccount__object :: AlipayAccount_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , alipayAccount__livemode :: Bool
    {- ^ Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. -}
    , alipayAccount__created :: POSIXTime
    {- ^ Time at which the object was created. Measured in seconds since the Unix epoch. -}
    , alipayAccount__fingerprint :: Text
    {- ^ Uniquely identifies the account and will be the same across all Alipay account objects that are linked to the same Alipay account. -}
    , alipayAccount__metadata :: Object
    {- ^ Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. -}
    , alipayAccount__reusable :: Bool
    {- ^ True if you can create multiple payments using this account. If the account is reusable, then you can freely choose the amount of each payment. -}
    , alipayAccount__used :: Bool
    {- ^ Whether this Alipay account object has ever been used for a payment. -}
    , alipayAccount__username :: Text
    {- ^ The username for the Alipay account. -}
    , alipayAccount__customer :: Maybe (Expandable '[Const (Customer), Const (DeletedCustomer)])
    , alipayAccount__paymentAmount :: Maybe (Int)
    {- ^ If the Alipay account object is not reusable, the exact amount that you can create a charge for. -}
    , alipayAccount__paymentCurrency :: Maybe (Text)
    {- ^ If the Alipay account object is not reusable, the exact currency that you can create a charge for. -}
    } deriving (Show, Eq, Generic)

instance FromJSON AlipayAccount where
  parseJSON = withObject "AlipayAccount" parseCtors
    where
      parseCtors o = parseAlipayAccount o
      parseAlipayAccount o = do
        alipayAccount__id <- o .: "id"
        alipayAccount__object <- o .: "object"
        alipayAccount__livemode <- o .: "livemode"
        alipayAccount__created <- o .: "created"
        alipayAccount__fingerprint <- o .: "fingerprint"
        alipayAccount__metadata <- o .: "metadata"
        alipayAccount__reusable <- o .: "reusable"
        alipayAccount__used <- o .: "used"
        alipayAccount__username <- o .: "username"
        alipayAccount__customer <- o .:? "customer"
        alipayAccount__paymentAmount <- o .:? "payment_amount"
        alipayAccount__paymentCurrency <- o .:? "payment_currency"
        pure AlipayAccount{..}

instance ToJSON AlipayAccount where
  toJSON AlipayAccount{..} = object
    (
      ("id" .= alipayAccount__id) :
      ("object" .= alipayAccount__object) :
      ("livemode" .= alipayAccount__livemode) :
      ("created" .= alipayAccount__created) :
      ("fingerprint" .= alipayAccount__fingerprint) :
      ("metadata" .= alipayAccount__metadata) :
      ("reusable" .= alipayAccount__reusable) :
      ("used" .= alipayAccount__used) :
      ("username" .= alipayAccount__username) :
      (fmap ("customer" .=) alipayAccount__customer) >?>
      (fmap ("payment_amount" .=) alipayAccount__paymentAmount) >?>
      (fmap ("payment_currency" .=) alipayAccount__paymentCurrency) >?>
      []
    )
  toEncoding AlipayAccount{..} = pairs (
      "id" .= alipayAccount__id <>
      "object" .= alipayAccount__object <>
      "livemode" .= alipayAccount__livemode <>
      "created" .= alipayAccount__created <>
      "fingerprint" .= alipayAccount__fingerprint <>
      "metadata" .= alipayAccount__metadata <>
      "reusable" .= alipayAccount__reusable <>
      "used" .= alipayAccount__used <>
      "username" .= alipayAccount__username <>
      maybe mempty ("customer" .=) alipayAccount__customer <>
      maybe mempty ("payment_amount" .=) alipayAccount__paymentAmount <>
      maybe mempty ("payment_currency" .=) alipayAccount__paymentCurrency
      )

-- Describes: "api_errors"

data ApiErrors
  = ApiErrors
    { apiErrors__charge :: Text
    {- ^ For card errors, the ID of the failed charge. -}
    , apiErrors__code :: Text
    {- ^ For some errors that could be handled programmatically, a short string indicating the [error code](https://stripe.com/docs/error-codes) reported. -}
    , apiErrors__declineCode :: Text
    {- ^ For card errors resulting from a card issuer decline, a short string indicating the [card issuer's reason for the decline](https://stripe.com/docs/declines#issuer-declines) if they provide one. -}
    , apiErrors__docUrl :: Text
    {- ^ A URL to more information about the [error code](https://stripe.com/docs/error-codes) reported. -}
    , apiErrors__message :: Text
    {- ^ A human-readable message providing more details about the error. For card errors, these messages can be shown to your users. -}
    , apiErrors__param :: Text
    {- ^ If the error is parameter-specific, the parameter related to the error. For example, you can use this to display a message near the correct form field. -}
    , apiErrors__paymentIntent :: PaymentIntent
    , apiErrors__paymentMethod :: PaymentMethod
    , apiErrors__setupIntent :: SetupIntent
    , apiErrors__source :: Expandable '[Const (BankAccount), Const (Card), Const (Source)]
    {- ^ The source object for errors returned on a request involving a source. -}
    , apiErrors__type :: ApiErrors_Type
    {- ^ The type of error returned. One of `api_connection_error`, `api_error`, `authentication_error`, `card_error`, `idempotency_error`, `invalid_request_error`, or `rate_limit_error` -}
    } deriving (Show, Eq, Generic)

instance FromJSON ApiErrors where
  parseJSON = withObject "ApiErrors" parseCtors
    where
      parseCtors o = parseApiErrors o
      parseApiErrors o = do
        apiErrors__charge <- o .: "charge"
        apiErrors__code <- o .: "code"
        apiErrors__declineCode <- o .: "decline_code"
        apiErrors__docUrl <- o .: "doc_url"
        apiErrors__message <- o .: "message"
        apiErrors__param <- o .: "param"
        apiErrors__paymentIntent <- o .: "payment_intent"
        apiErrors__paymentMethod <- o .: "payment_method"
        apiErrors__setupIntent <- o .: "setup_intent"
        apiErrors__source <- o .: "source"
        apiErrors__type <- o .: "type"
        pure ApiErrors{..}

instance ToJSON ApiErrors where
  toJSON ApiErrors{..} = object
    (
      ("charge" .= apiErrors__charge) :
      ("code" .= apiErrors__code) :
      ("decline_code" .= apiErrors__declineCode) :
      ("doc_url" .= apiErrors__docUrl) :
      ("message" .= apiErrors__message) :
      ("param" .= apiErrors__param) :
      ("payment_intent" .= apiErrors__paymentIntent) :
      ("payment_method" .= apiErrors__paymentMethod) :
      ("setup_intent" .= apiErrors__setupIntent) :
      ("source" .= apiErrors__source) :
      ("type" .= apiErrors__type) :
      []
    )
  toEncoding ApiErrors{..} = pairs (
      "charge" .= apiErrors__charge <>
      "code" .= apiErrors__code <>
      "decline_code" .= apiErrors__declineCode <>
      "doc_url" .= apiErrors__docUrl <>
      "message" .= apiErrors__message <>
      "param" .= apiErrors__param <>
      "payment_intent" .= apiErrors__paymentIntent <>
      "payment_method" .= apiErrors__paymentMethod <>
      "setup_intent" .= apiErrors__setupIntent <>
      "source" .= apiErrors__source <>
      "type" .= apiErrors__type
      )

-- Describes: "apple_pay_domain"

data ApplePayDomain
  = ApplePayDomain
    { applePayDomain__id :: (Id ApplePayDomain)
    {- ^ Unique identifier for the object. -}
    , applePayDomain__object :: ApplePayDomain_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , applePayDomain__livemode :: Bool
    {- ^ Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. -}
    , applePayDomain__created :: POSIXTime
    {- ^ Time at which the object was created. Measured in seconds since the Unix epoch. -}
    , applePayDomain__domainName :: Text
    } deriving (Show, Eq, Generic)

instance FromJSON ApplePayDomain where
  parseJSON = withObject "ApplePayDomain" parseCtors
    where
      parseCtors o = parseApplePayDomain o
      parseApplePayDomain o = do
        applePayDomain__id <- o .: "id"
        applePayDomain__object <- o .: "object"
        applePayDomain__livemode <- o .: "livemode"
        applePayDomain__created <- o .: "created"
        applePayDomain__domainName <- o .: "domain_name"
        pure ApplePayDomain{..}

instance ToJSON ApplePayDomain where
  toJSON ApplePayDomain{..} = object
    (
      ("id" .= applePayDomain__id) :
      ("object" .= applePayDomain__object) :
      ("livemode" .= applePayDomain__livemode) :
      ("created" .= applePayDomain__created) :
      ("domain_name" .= applePayDomain__domainName) :
      []
    )
  toEncoding ApplePayDomain{..} = pairs (
      "id" .= applePayDomain__id <>
      "object" .= applePayDomain__object <>
      "livemode" .= applePayDomain__livemode <>
      "created" .= applePayDomain__created <>
      "domain_name" .= applePayDomain__domainName
      )

-- Describes: "application"

data Application
  = Application
    { application__id :: Text
    {- ^ Unique identifier for the object. -}
    , application__object :: Application_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , application__name :: Maybe (Text)
    {- ^ The name of the application. -}
    } deriving (Show, Eq, Generic)

instance FromJSON Application where
  parseJSON = withObject "Application" parseCtors
    where
      parseCtors o = parseApplication o
      parseApplication o = do
        application__id <- o .: "id"
        application__object <- o .: "object"
        application__name <- o .:? "name"
        pure Application{..}

instance ToJSON Application where
  toJSON Application{..} = object
    (
      ("id" .= application__id) :
      ("object" .= application__object) :
      (fmap ("name" .=) application__name) >?>
      []
    )
  toEncoding Application{..} = pairs (
      "id" .= application__id <>
      "object" .= application__object <>
      maybe mempty ("name" .=) application__name
      )

-- Describes: "application_fee"

data ApplicationFee
  = ApplicationFee
    { applicationFee__id :: (Id ApplicationFee)
    {- ^ Unique identifier for the object. -}
    , applicationFee__object :: ApplicationFee_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , applicationFee__livemode :: Bool
    {- ^ Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. -}
    , applicationFee__account :: Expandable '[Const (Account)]
    {- ^ ID of the Stripe account this fee was taken from. -}
    , applicationFee__amount :: Int
    {- ^ Amount earned, in %s. -}
    , applicationFee__amountRefunded :: Int
    {- ^ Amount in %s refunded (can be less than the amount attribute on the fee if a partial refund was issued) -}
    , applicationFee__application :: Expandable '[Const (Application)]
    {- ^ ID of the Connect application that earned the fee. -}
    , applicationFee__charge :: Expandable '[Const (Charge)]
    {- ^ ID of the charge that the application fee was taken from. -}
    , applicationFee__created :: POSIXTime
    {- ^ Time at which the object was created. Measured in seconds since the Unix epoch. -}
    , applicationFee__currency :: Text
    {- ^ Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). -}
    , applicationFee__refunded :: Bool
    {- ^ Whether the fee has been fully refunded. If the fee is only partially refunded, this attribute will still be false. -}
    , applicationFee__refunds :: Object
    {- ^ A list of refunds that have been applied to the fee. -}
    , applicationFee__balanceTransaction :: Maybe (Expandable '[Const (BalanceTransaction)])
    {- ^ Balance transaction that describes the impact of this collected application fee on your account balance (not including refunds). -}
    , applicationFee__originatingTransaction :: Maybe (Expandable '[Const (Charge)])
    {- ^ ID of the corresponding charge on the platform account, if this fee was the result of a charge using the `destination` parameter. -}
    } deriving (Show, Eq, Generic)

instance FromJSON ApplicationFee where
  parseJSON = withObject "ApplicationFee" parseCtors
    where
      parseCtors o = parseApplicationFee o
      parseApplicationFee o = do
        applicationFee__id <- o .: "id"
        applicationFee__object <- o .: "object"
        applicationFee__livemode <- o .: "livemode"
        applicationFee__account <- o .: "account"
        applicationFee__amount <- o .: "amount"
        applicationFee__amountRefunded <- o .: "amount_refunded"
        applicationFee__application <- o .: "application"
        applicationFee__charge <- o .: "charge"
        applicationFee__created <- o .: "created"
        applicationFee__currency <- o .: "currency"
        applicationFee__refunded <- o .: "refunded"
        applicationFee__refunds <- o .: "refunds"
        applicationFee__balanceTransaction <- o .:? "balance_transaction"
        applicationFee__originatingTransaction <- o .:? "originating_transaction"
        pure ApplicationFee{..}

instance ToJSON ApplicationFee where
  toJSON ApplicationFee{..} = object
    (
      ("id" .= applicationFee__id) :
      ("object" .= applicationFee__object) :
      ("livemode" .= applicationFee__livemode) :
      ("account" .= applicationFee__account) :
      ("amount" .= applicationFee__amount) :
      ("amount_refunded" .= applicationFee__amountRefunded) :
      ("application" .= applicationFee__application) :
      ("charge" .= applicationFee__charge) :
      ("created" .= applicationFee__created) :
      ("currency" .= applicationFee__currency) :
      ("refunded" .= applicationFee__refunded) :
      ("refunds" .= applicationFee__refunds) :
      (fmap ("balance_transaction" .=) applicationFee__balanceTransaction) >?>
      (fmap ("originating_transaction" .=) applicationFee__originatingTransaction) >?>
      []
    )
  toEncoding ApplicationFee{..} = pairs (
      "id" .= applicationFee__id <>
      "object" .= applicationFee__object <>
      "livemode" .= applicationFee__livemode <>
      "account" .= applicationFee__account <>
      "amount" .= applicationFee__amount <>
      "amount_refunded" .= applicationFee__amountRefunded <>
      "application" .= applicationFee__application <>
      "charge" .= applicationFee__charge <>
      "created" .= applicationFee__created <>
      "currency" .= applicationFee__currency <>
      "refunded" .= applicationFee__refunded <>
      "refunds" .= applicationFee__refunds <>
      maybe mempty ("balance_transaction" .=) applicationFee__balanceTransaction <>
      maybe mempty ("originating_transaction" .=) applicationFee__originatingTransaction
      )

-- Describes: "balance"

data Balance
  = Balance
    { balance__object :: Balance_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , balance__livemode :: Bool
    {- ^ Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. -}
    , balance__available :: Vector (BalanceAmount)
    {- ^ Funds that are available to be transferred or paid out, whether automatically by Stripe or explicitly via the [Transfers API](#transfers) or [Payouts API](#payouts). The available balance for each currency and payment type can be found in the `source_types` property. -}
    , balance__connectReserved :: Vector (BalanceAmount)
    {- ^ Funds held due to negative balances on connected Custom accounts. The connect reserve balance for each currency and payment type can be found in the `source_types` property. -}
    , balance__pending :: Vector (BalanceAmount)
    {- ^ Funds that are not yet available in the balance, due to the 7-day rolling pay cycle. The pending balance for each currency, and for each payment type, can be found in the `source_types` property. -}
    } deriving (Show, Eq, Generic)

instance FromJSON Balance where
  parseJSON = withObject "Balance" parseCtors
    where
      parseCtors o = parseBalance o
      parseBalance o = do
        balance__object <- o .: "object"
        balance__livemode <- o .: "livemode"
        balance__available <- o .: "available"
        balance__connectReserved <- o .: "connect_reserved"
        balance__pending <- o .: "pending"
        pure Balance{..}

instance ToJSON Balance where
  toJSON Balance{..} = object
    (
      ("object" .= balance__object) :
      ("livemode" .= balance__livemode) :
      ("available" .= balance__available) :
      ("connect_reserved" .= balance__connectReserved) :
      ("pending" .= balance__pending) :
      []
    )
  toEncoding Balance{..} = pairs (
      "object" .= balance__object <>
      "livemode" .= balance__livemode <>
      "available" .= balance__available <>
      "connect_reserved" .= balance__connectReserved <>
      "pending" .= balance__pending
      )

-- Describes: "balance_amount"

data BalanceAmount
  = BalanceAmount
    { balanceAmount__amount :: Int
    {- ^ Balance amount. -}
    , balanceAmount__currency :: Text
    {- ^ Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). -}
    , balanceAmount__sourceTypes :: BalanceAmountBySourceType
    } deriving (Show, Eq, Generic)

instance FromJSON BalanceAmount where
  parseJSON = withObject "BalanceAmount" parseCtors
    where
      parseCtors o = parseBalanceAmount o
      parseBalanceAmount o = do
        balanceAmount__amount <- o .: "amount"
        balanceAmount__currency <- o .: "currency"
        balanceAmount__sourceTypes <- o .: "source_types"
        pure BalanceAmount{..}

instance ToJSON BalanceAmount where
  toJSON BalanceAmount{..} = object
    (
      ("amount" .= balanceAmount__amount) :
      ("currency" .= balanceAmount__currency) :
      ("source_types" .= balanceAmount__sourceTypes) :
      []
    )
  toEncoding BalanceAmount{..} = pairs (
      "amount" .= balanceAmount__amount <>
      "currency" .= balanceAmount__currency <>
      "source_types" .= balanceAmount__sourceTypes
      )

-- Describes: "balance_amount_by_source_type"

data BalanceAmountBySourceType
  = BalanceAmountBySourceType
    { balanceAmountBySourceType__bankAccount :: Int
    {- ^ Amount for bank account. -}
    , balanceAmountBySourceType__card :: Int
    {- ^ Amount for card. -}
    } deriving (Show, Eq, Generic)

instance FromJSON BalanceAmountBySourceType where
  parseJSON = withObject "BalanceAmountBySourceType" parseCtors
    where
      parseCtors o = parseBalanceAmountBySourceType o
      parseBalanceAmountBySourceType o = do
        balanceAmountBySourceType__bankAccount <- o .: "bank_account"
        balanceAmountBySourceType__card <- o .: "card"
        pure BalanceAmountBySourceType{..}

instance ToJSON BalanceAmountBySourceType where
  toJSON BalanceAmountBySourceType{..} = object
    (
      ("bank_account" .= balanceAmountBySourceType__bankAccount) :
      ("card" .= balanceAmountBySourceType__card) :
      []
    )
  toEncoding BalanceAmountBySourceType{..} = pairs (
      "bank_account" .= balanceAmountBySourceType__bankAccount <>
      "card" .= balanceAmountBySourceType__card
      )

-- Describes: "balance_transaction"

data BalanceTransaction
  = BalanceTransaction
    { balanceTransaction__id :: (Id BalanceTransaction)
    {- ^ Unique identifier for the object. -}
    , balanceTransaction__object :: BalanceTransaction_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , balanceTransaction__amount :: Int
    {- ^ Gross amount of the transaction, in %s. -}
    , balanceTransaction__availableOn :: POSIXTime
    {- ^ The date the transaction's net funds will become available in the Stripe balance. -}
    , balanceTransaction__created :: POSIXTime
    {- ^ Time at which the object was created. Measured in seconds since the Unix epoch. -}
    , balanceTransaction__currency :: Text
    {- ^ Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). -}
    , balanceTransaction__fee :: Int
    {- ^ Fees (in %s) paid for this transaction. -}
    , balanceTransaction__feeDetails :: Vector (Fee)
    {- ^ Detailed breakdown of fees (in %s) paid for this transaction. -}
    , balanceTransaction__net :: Int
    {- ^ Net amount of the transaction, in %s. -}
    , balanceTransaction__status :: Text
    {- ^ If the transaction's net funds are available in the Stripe balance yet. Either `available` or `pending`. -}
    , balanceTransaction__type :: BalanceTransaction_Type
    {- ^ Transaction type: `adjustment`, `advance`, `advance_funding`, `application_fee`, `application_fee_refund`, `charge`, `connect_collection_transfer`, `issuing_authorization_hold`, `issuing_authorization_release`, `issuing_transaction`, `payment`, `payment_failure_refund`, `payment_refund`, `payout`, `payout_cancel`, `payout_failure`, `refund`, `refund_failure`, `reserve_transaction`, `reserved_funds`, `stripe_fee`, `stripe_fx_fee`, `tax_fee`, `topup`, `topup_reversal`, `transfer`, `transfer_cancel`, `transfer_failure`, or `transfer_refund`. [Learn more](https://stripe.com/docs/reports/balance-transaction-types) about balance transaction types and what they represent. -}
    , balanceTransaction__description :: Maybe (Text)
    {- ^ An arbitrary string attached to the object. Often useful for displaying to users. -}
    , balanceTransaction__exchangeRate :: Maybe (Scientific)
    , balanceTransaction__source :: Maybe (Expandable '[Const (ApplicationFee), Const (Charge), Const (ConnectCollectionTransfer), Const (Dispute), Const (FeeRefund), Const (Issuing_Authorization), Const (Issuing_Transaction), Const (Payout), Const (PlatformTaxFee), Const (Refund), Const (ReserveTransaction), Const (Topup), Const (Transfer), Const (TransferReversal)])
    {- ^ The Stripe object to which this transaction is related. -}
    } deriving (Show, Eq, Generic)

instance FromJSON BalanceTransaction where
  parseJSON = withObject "BalanceTransaction" parseCtors
    where
      parseCtors o = parseBalanceTransaction o
      parseBalanceTransaction o = do
        balanceTransaction__id <- o .: "id"
        balanceTransaction__object <- o .: "object"
        balanceTransaction__amount <- o .: "amount"
        balanceTransaction__availableOn <- o .: "available_on"
        balanceTransaction__created <- o .: "created"
        balanceTransaction__currency <- o .: "currency"
        balanceTransaction__fee <- o .: "fee"
        balanceTransaction__feeDetails <- o .: "fee_details"
        balanceTransaction__net <- o .: "net"
        balanceTransaction__status <- o .: "status"
        balanceTransaction__type <- o .: "type"
        balanceTransaction__description <- o .:? "description"
        balanceTransaction__exchangeRate <- o .:? "exchange_rate"
        balanceTransaction__source <- o .:? "source"
        pure BalanceTransaction{..}

instance ToJSON BalanceTransaction where
  toJSON BalanceTransaction{..} = object
    (
      ("id" .= balanceTransaction__id) :
      ("object" .= balanceTransaction__object) :
      ("amount" .= balanceTransaction__amount) :
      ("available_on" .= balanceTransaction__availableOn) :
      ("created" .= balanceTransaction__created) :
      ("currency" .= balanceTransaction__currency) :
      ("fee" .= balanceTransaction__fee) :
      ("fee_details" .= balanceTransaction__feeDetails) :
      ("net" .= balanceTransaction__net) :
      ("status" .= balanceTransaction__status) :
      ("type" .= balanceTransaction__type) :
      (fmap ("description" .=) balanceTransaction__description) >?>
      (fmap ("exchange_rate" .=) balanceTransaction__exchangeRate) >?>
      (fmap ("source" .=) balanceTransaction__source) >?>
      []
    )
  toEncoding BalanceTransaction{..} = pairs (
      "id" .= balanceTransaction__id <>
      "object" .= balanceTransaction__object <>
      "amount" .= balanceTransaction__amount <>
      "available_on" .= balanceTransaction__availableOn <>
      "created" .= balanceTransaction__created <>
      "currency" .= balanceTransaction__currency <>
      "fee" .= balanceTransaction__fee <>
      "fee_details" .= balanceTransaction__feeDetails <>
      "net" .= balanceTransaction__net <>
      "status" .= balanceTransaction__status <>
      "type" .= balanceTransaction__type <>
      maybe mempty ("description" .=) balanceTransaction__description <>
      maybe mempty ("exchange_rate" .=) balanceTransaction__exchangeRate <>
      maybe mempty ("source" .=) balanceTransaction__source
      )

-- Describes: "bank_account"

data BankAccount
  = BankAccount
    { bankAccount__id :: (Id BankAccount)
    {- ^ Unique identifier for the object. -}
    , bankAccount__object :: BankAccount_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , bankAccount__country :: Text
    {- ^ Two-letter ISO code representing the country the bank account is located in. -}
    , bankAccount__currency :: Text
    {- ^ Three-letter [ISO code for the currency](https://stripe.com/docs/payouts) paid out to the bank account. -}
    , bankAccount__last4 :: Text
    , bankAccount__status :: Text
    {- ^ For bank accounts, possible values are `new`, `validated`, `verified`, `verification_failed`, or `errored`. A bank account that hasn't had any activity or validation performed is `new`. If Stripe can determine that the bank account exists, its status will be `validated`. Note that there often isn’t enough information to know (e.g., for smaller credit unions), and the validation is not always run. If customer bank account verification has succeeded, the bank account status will be `verified`. If the verification failed for any reason, such as microdeposit failure, the status will be `verification_failed`. If a transfer sent to this bank account fails, we'll set the status to `errored` and will not continue to send transfers until the bank details are updated.

For external accounts, possible values are `new` and `errored`. Validations aren't run against external accounts because they're only used for payouts. This means the other statuses don't apply. If a transfer fails, the status is set to `errored` and transfers are stopped until account details are updated. -}
    , bankAccount__account :: Maybe (Expandable '[Const (Account)])
    , bankAccount__accountHolderName :: Maybe (Text)
    {- ^ The name of the person or business that owns the bank account. -}
    , bankAccount__accountHolderType :: Maybe (Text)
    {- ^ The type of entity that holds the account. This can be either `individual` or `company`. -}
    , bankAccount__bankName :: Maybe (Text)
    {- ^ Name of the bank associated with the routing number (e.g., `WELLS FARGO`). -}
    , bankAccount__customer :: Maybe (Expandable '[Const (Customer), Const (DeletedCustomer)])
    , bankAccount__defaultForCurrency :: Maybe (Bool)
    {- ^ Whether this bank account is the default external account for its currency. -}
    , bankAccount__fingerprint :: Maybe (Text)
    {- ^ Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. -}
    , bankAccount__metadata :: Maybe (Object)
    {- ^ Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. -}
    , bankAccount__routingNumber :: Maybe (Text)
    {- ^ The routing transit number for the bank account. -}
    } deriving (Show, Eq, Generic)

instance FromJSON BankAccount where
  parseJSON = withObject "BankAccount" parseCtors
    where
      parseCtors o = parseBankAccount o
      parseBankAccount o = do
        bankAccount__id <- o .: "id"
        bankAccount__object <- o .: "object"
        bankAccount__country <- o .: "country"
        bankAccount__currency <- o .: "currency"
        bankAccount__last4 <- o .: "last4"
        bankAccount__status <- o .: "status"
        bankAccount__account <- o .:? "account"
        bankAccount__accountHolderName <- o .:? "account_holder_name"
        bankAccount__accountHolderType <- o .:? "account_holder_type"
        bankAccount__bankName <- o .:? "bank_name"
        bankAccount__customer <- o .:? "customer"
        bankAccount__defaultForCurrency <- o .:? "default_for_currency"
        bankAccount__fingerprint <- o .:? "fingerprint"
        bankAccount__metadata <- o .:? "metadata"
        bankAccount__routingNumber <- o .:? "routing_number"
        pure BankAccount{..}

instance ToJSON BankAccount where
  toJSON BankAccount{..} = object
    (
      ("id" .= bankAccount__id) :
      ("object" .= bankAccount__object) :
      ("country" .= bankAccount__country) :
      ("currency" .= bankAccount__currency) :
      ("last4" .= bankAccount__last4) :
      ("status" .= bankAccount__status) :
      (fmap ("account" .=) bankAccount__account) >?>
      (fmap ("account_holder_name" .=) bankAccount__accountHolderName) >?>
      (fmap ("account_holder_type" .=) bankAccount__accountHolderType) >?>
      (fmap ("bank_name" .=) bankAccount__bankName) >?>
      (fmap ("customer" .=) bankAccount__customer) >?>
      (fmap ("default_for_currency" .=) bankAccount__defaultForCurrency) >?>
      (fmap ("fingerprint" .=) bankAccount__fingerprint) >?>
      (fmap ("metadata" .=) bankAccount__metadata) >?>
      (fmap ("routing_number" .=) bankAccount__routingNumber) >?>
      []
    )
  toEncoding BankAccount{..} = pairs (
      "id" .= bankAccount__id <>
      "object" .= bankAccount__object <>
      "country" .= bankAccount__country <>
      "currency" .= bankAccount__currency <>
      "last4" .= bankAccount__last4 <>
      "status" .= bankAccount__status <>
      maybe mempty ("account" .=) bankAccount__account <>
      maybe mempty ("account_holder_name" .=) bankAccount__accountHolderName <>
      maybe mempty ("account_holder_type" .=) bankAccount__accountHolderType <>
      maybe mempty ("bank_name" .=) bankAccount__bankName <>
      maybe mempty ("customer" .=) bankAccount__customer <>
      maybe mempty ("default_for_currency" .=) bankAccount__defaultForCurrency <>
      maybe mempty ("fingerprint" .=) bankAccount__fingerprint <>
      maybe mempty ("metadata" .=) bankAccount__metadata <>
      maybe mempty ("routing_number" .=) bankAccount__routingNumber
      )

-- Describes: "billing_details"

data BillingDetails
  = BillingDetails
    { billingDetails__address :: Maybe (Expandable '[Const (Address)])
    {- ^ Billing address. -}
    , billingDetails__email :: Maybe (Text)
    {- ^ Email address. -}
    , billingDetails__name :: Maybe (Text)
    {- ^ Full name. -}
    , billingDetails__phone :: Maybe (Text)
    {- ^ Billing phone number (including extension). -}
    } deriving (Show, Eq, Generic)

instance FromJSON BillingDetails where
  parseJSON = withObject "BillingDetails" parseCtors
    where
      parseCtors o = parseBillingDetails o
      parseBillingDetails o = do
        billingDetails__address <- o .:? "address"
        billingDetails__email <- o .:? "email"
        billingDetails__name <- o .:? "name"
        billingDetails__phone <- o .:? "phone"
        pure BillingDetails{..}

instance ToJSON BillingDetails where
  toJSON BillingDetails{..} = object
    (
      (fmap ("address" .=) billingDetails__address) >?>
      (fmap ("email" .=) billingDetails__email) >?>
      (fmap ("name" .=) billingDetails__name) >?>
      (fmap ("phone" .=) billingDetails__phone) >?>
      []
    )
  toEncoding BillingDetails{..} = pairs (
      maybe mempty ("address" .=) billingDetails__address <>
      maybe mempty ("email" .=) billingDetails__email <>
      maybe mempty ("name" .=) billingDetails__name <>
      maybe mempty ("phone" .=) billingDetails__phone
      )

-- Describes: "bitcoin_receiver"

data BitcoinReceiver
  = BitcoinReceiver
    { bitcoinReceiver__id :: (Id BitcoinReceiver)
    {- ^ Unique identifier for the object. -}
    , bitcoinReceiver__object :: BitcoinReceiver_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , bitcoinReceiver__livemode :: Bool
    {- ^ Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. -}
    , bitcoinReceiver__active :: Bool
    {- ^ True when this bitcoin receiver has received a non-zero amount of bitcoin. -}
    , bitcoinReceiver__amount :: Int
    {- ^ The amount of `currency` that you are collecting as payment. -}
    , bitcoinReceiver__amountReceived :: Int
    {- ^ The amount of `currency` to which `bitcoin_amount_received` has been converted. -}
    , bitcoinReceiver__bitcoinAmount :: Int
    {- ^ The amount of bitcoin that the customer should send to fill the receiver. The `bitcoin_amount` is denominated in Satoshi: there are 10^8 Satoshi in one bitcoin. -}
    , bitcoinReceiver__bitcoinAmountReceived :: Int
    {- ^ The amount of bitcoin that has been sent by the customer to this receiver. -}
    , bitcoinReceiver__bitcoinUri :: Text
    {- ^ This URI can be displayed to the customer as a clickable link (to activate their bitcoin client) or as a QR code (for mobile wallets). -}
    , bitcoinReceiver__created :: POSIXTime
    {- ^ Time at which the object was created. Measured in seconds since the Unix epoch. -}
    , bitcoinReceiver__currency :: Text
    {- ^ Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) to which the bitcoin will be converted. -}
    , bitcoinReceiver__filled :: Bool
    {- ^ This flag is initially false and updates to true when the customer sends the `bitcoin_amount` to this receiver. -}
    , bitcoinReceiver__inboundAddress :: Text
    {- ^ A bitcoin address that is specific to this receiver. The customer can send bitcoin to this address to fill the receiver. -}
    , bitcoinReceiver__metadata :: Object
    {- ^ Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. -}
    , bitcoinReceiver__transactions :: Object
    {- ^ A list with one entry for each time that the customer sent bitcoin to the receiver. Hidden when viewing the receiver with a publishable key. -}
    , bitcoinReceiver__uncapturedFunds :: Bool
    {- ^ This receiver contains uncaptured funds that can be used for a payment or refunded. -}
    , bitcoinReceiver__customer :: Maybe (Text)
    , bitcoinReceiver__description :: Maybe (Text)
    {- ^ An arbitrary string attached to the object. Often useful for displaying to users. -}
    , bitcoinReceiver__email :: Maybe (Text)
    {- ^ The customer's email address, set by the API call that creates the receiver. -}
    , bitcoinReceiver__payment :: Maybe (Text)
    {- ^ The ID of the payment created from the receiver, if any. Hidden when viewing the receiver with a publishable key. -}
    , bitcoinReceiver__refundAddress :: Maybe (Text)
    , bitcoinReceiver__usedForPayment :: Maybe (Bool)
    } deriving (Show, Eq, Generic)

instance FromJSON BitcoinReceiver where
  parseJSON = withObject "BitcoinReceiver" parseCtors
    where
      parseCtors o = parseBitcoinReceiver o
      parseBitcoinReceiver o = do
        bitcoinReceiver__id <- o .: "id"
        bitcoinReceiver__object <- o .: "object"
        bitcoinReceiver__livemode <- o .: "livemode"
        bitcoinReceiver__active <- o .: "active"
        bitcoinReceiver__amount <- o .: "amount"
        bitcoinReceiver__amountReceived <- o .: "amount_received"
        bitcoinReceiver__bitcoinAmount <- o .: "bitcoin_amount"
        bitcoinReceiver__bitcoinAmountReceived <- o .: "bitcoin_amount_received"
        bitcoinReceiver__bitcoinUri <- o .: "bitcoin_uri"
        bitcoinReceiver__created <- o .: "created"
        bitcoinReceiver__currency <- o .: "currency"
        bitcoinReceiver__filled <- o .: "filled"
        bitcoinReceiver__inboundAddress <- o .: "inbound_address"
        bitcoinReceiver__metadata <- o .: "metadata"
        bitcoinReceiver__transactions <- o .: "transactions"
        bitcoinReceiver__uncapturedFunds <- o .: "uncaptured_funds"
        bitcoinReceiver__customer <- o .:? "customer"
        bitcoinReceiver__description <- o .:? "description"
        bitcoinReceiver__email <- o .:? "email"
        bitcoinReceiver__payment <- o .:? "payment"
        bitcoinReceiver__refundAddress <- o .:? "refund_address"
        bitcoinReceiver__usedForPayment <- o .:? "used_for_payment"
        pure BitcoinReceiver{..}

instance ToJSON BitcoinReceiver where
  toJSON BitcoinReceiver{..} = object
    (
      ("id" .= bitcoinReceiver__id) :
      ("object" .= bitcoinReceiver__object) :
      ("livemode" .= bitcoinReceiver__livemode) :
      ("active" .= bitcoinReceiver__active) :
      ("amount" .= bitcoinReceiver__amount) :
      ("amount_received" .= bitcoinReceiver__amountReceived) :
      ("bitcoin_amount" .= bitcoinReceiver__bitcoinAmount) :
      ("bitcoin_amount_received" .= bitcoinReceiver__bitcoinAmountReceived) :
      ("bitcoin_uri" .= bitcoinReceiver__bitcoinUri) :
      ("created" .= bitcoinReceiver__created) :
      ("currency" .= bitcoinReceiver__currency) :
      ("filled" .= bitcoinReceiver__filled) :
      ("inbound_address" .= bitcoinReceiver__inboundAddress) :
      ("metadata" .= bitcoinReceiver__metadata) :
      ("transactions" .= bitcoinReceiver__transactions) :
      ("uncaptured_funds" .= bitcoinReceiver__uncapturedFunds) :
      (fmap ("customer" .=) bitcoinReceiver__customer) >?>
      (fmap ("description" .=) bitcoinReceiver__description) >?>
      (fmap ("email" .=) bitcoinReceiver__email) >?>
      (fmap ("payment" .=) bitcoinReceiver__payment) >?>
      (fmap ("refund_address" .=) bitcoinReceiver__refundAddress) >?>
      (fmap ("used_for_payment" .=) bitcoinReceiver__usedForPayment) >?>
      []
    )
  toEncoding BitcoinReceiver{..} = pairs (
      "id" .= bitcoinReceiver__id <>
      "object" .= bitcoinReceiver__object <>
      "livemode" .= bitcoinReceiver__livemode <>
      "active" .= bitcoinReceiver__active <>
      "amount" .= bitcoinReceiver__amount <>
      "amount_received" .= bitcoinReceiver__amountReceived <>
      "bitcoin_amount" .= bitcoinReceiver__bitcoinAmount <>
      "bitcoin_amount_received" .= bitcoinReceiver__bitcoinAmountReceived <>
      "bitcoin_uri" .= bitcoinReceiver__bitcoinUri <>
      "created" .= bitcoinReceiver__created <>
      "currency" .= bitcoinReceiver__currency <>
      "filled" .= bitcoinReceiver__filled <>
      "inbound_address" .= bitcoinReceiver__inboundAddress <>
      "metadata" .= bitcoinReceiver__metadata <>
      "transactions" .= bitcoinReceiver__transactions <>
      "uncaptured_funds" .= bitcoinReceiver__uncapturedFunds <>
      maybe mempty ("customer" .=) bitcoinReceiver__customer <>
      maybe mempty ("description" .=) bitcoinReceiver__description <>
      maybe mempty ("email" .=) bitcoinReceiver__email <>
      maybe mempty ("payment" .=) bitcoinReceiver__payment <>
      maybe mempty ("refund_address" .=) bitcoinReceiver__refundAddress <>
      maybe mempty ("used_for_payment" .=) bitcoinReceiver__usedForPayment
      )

-- Describes: "bitcoin_transaction"

data BitcoinTransaction
  = BitcoinTransaction
    { bitcoinTransaction__id :: (Id BitcoinTransaction)
    {- ^ Unique identifier for the object. -}
    , bitcoinTransaction__object :: BitcoinTransaction_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , bitcoinTransaction__amount :: Int
    {- ^ The amount of `currency` that the transaction was converted to in real-time. -}
    , bitcoinTransaction__bitcoinAmount :: Int
    {- ^ The amount of bitcoin contained in the transaction. -}
    , bitcoinTransaction__created :: POSIXTime
    {- ^ Time at which the object was created. Measured in seconds since the Unix epoch. -}
    , bitcoinTransaction__currency :: Text
    {- ^ Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) to which this transaction was converted. -}
    , bitcoinTransaction__receiver :: Text
    {- ^ The receiver to which this transaction was sent. -}
    } deriving (Show, Eq, Generic)

instance FromJSON BitcoinTransaction where
  parseJSON = withObject "BitcoinTransaction" parseCtors
    where
      parseCtors o = parseBitcoinTransaction o
      parseBitcoinTransaction o = do
        bitcoinTransaction__id <- o .: "id"
        bitcoinTransaction__object <- o .: "object"
        bitcoinTransaction__amount <- o .: "amount"
        bitcoinTransaction__bitcoinAmount <- o .: "bitcoin_amount"
        bitcoinTransaction__created <- o .: "created"
        bitcoinTransaction__currency <- o .: "currency"
        bitcoinTransaction__receiver <- o .: "receiver"
        pure BitcoinTransaction{..}

instance ToJSON BitcoinTransaction where
  toJSON BitcoinTransaction{..} = object
    (
      ("id" .= bitcoinTransaction__id) :
      ("object" .= bitcoinTransaction__object) :
      ("amount" .= bitcoinTransaction__amount) :
      ("bitcoin_amount" .= bitcoinTransaction__bitcoinAmount) :
      ("created" .= bitcoinTransaction__created) :
      ("currency" .= bitcoinTransaction__currency) :
      ("receiver" .= bitcoinTransaction__receiver) :
      []
    )
  toEncoding BitcoinTransaction{..} = pairs (
      "id" .= bitcoinTransaction__id <>
      "object" .= bitcoinTransaction__object <>
      "amount" .= bitcoinTransaction__amount <>
      "bitcoin_amount" .= bitcoinTransaction__bitcoinAmount <>
      "created" .= bitcoinTransaction__created <>
      "currency" .= bitcoinTransaction__currency <>
      "receiver" .= bitcoinTransaction__receiver
      )

-- Describes: "capability"

data Capability
  = Capability
    { capability__id :: (Id Capability)
    {- ^ The identifier for the capability. -}
    , capability__object :: Capability_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , capability__account :: Expandable '[Const (Account)]
    {- ^ The account for which the capability enables functionality. -}
    , capability__requested :: Bool
    {- ^ Whether the capability has been requested. -}
    , capability__requirements :: AccountCapabilityRequirements
    , capability__status :: Capability_Status
    {- ^ The status of the capability. Can be `active`, `inactive`, `pending`, or `unrequested`. -}
    , capability__requestedAt :: Maybe (POSIXTime)
    {- ^ Time at which the capability was requested. Measured in seconds since the Unix epoch. -}
    } deriving (Show, Eq, Generic)

instance FromJSON Capability where
  parseJSON = withObject "Capability" parseCtors
    where
      parseCtors o = parseCapability o
      parseCapability o = do
        capability__id <- o .: "id"
        capability__object <- o .: "object"
        capability__account <- o .: "account"
        capability__requested <- o .: "requested"
        capability__requirements <- o .: "requirements"
        capability__status <- o .: "status"
        capability__requestedAt <- o .:? "requested_at"
        pure Capability{..}

instance ToJSON Capability where
  toJSON Capability{..} = object
    (
      ("id" .= capability__id) :
      ("object" .= capability__object) :
      ("account" .= capability__account) :
      ("requested" .= capability__requested) :
      ("requirements" .= capability__requirements) :
      ("status" .= capability__status) :
      (fmap ("requested_at" .=) capability__requestedAt) >?>
      []
    )
  toEncoding Capability{..} = pairs (
      "id" .= capability__id <>
      "object" .= capability__object <>
      "account" .= capability__account <>
      "requested" .= capability__requested <>
      "requirements" .= capability__requirements <>
      "status" .= capability__status <>
      maybe mempty ("requested_at" .=) capability__requestedAt
      )

-- Describes: "card"

data Card
  = Card
    { card__id :: (Id Card)
    {- ^ Unique identifier for the object. -}
    , card__object :: Card_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , card__brand :: Text
    {- ^ Card brand. Can be `American Express`, `Diners Club`, `Discover`, `JCB`, `MasterCard`, `UnionPay`, `Visa`, or `Unknown`. -}
    , card__expMonth :: Int
    {- ^ Two-digit number representing the card's expiration month. -}
    , card__expYear :: Int
    {- ^ Four-digit number representing the card's expiration year. -}
    , card__funding :: Text
    {- ^ Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`. -}
    , card__last4 :: Text
    {- ^ The last four digits of the card. -}
    , card__metadata :: Object
    {- ^ Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. -}
    , card__account :: Maybe (Expandable '[Const (Account)])
    {- ^ The account this card belongs to. This attribute will not be in the card object if the card belongs to a customer or recipient instead. -}
    , card__addressCity :: Maybe (Text)
    {- ^ City/District/Suburb/Town/Village. -}
    , card__addressCountry :: Maybe (Text)
    {- ^ Billing address country, if provided when creating card. -}
    , card__addressLine1 :: Maybe (Text)
    {- ^ Address line 1 (Street address/PO Box/Company name). -}
    , card__addressLine1Check :: Maybe (Text)
    {- ^ If `address_line1` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`. -}
    , card__addressLine2 :: Maybe (Text)
    {- ^ Address line 2 (Apartment/Suite/Unit/Building). -}
    , card__addressState :: Maybe (Text)
    {- ^ State/County/Province/Region. -}
    , card__addressZip :: Maybe (Text)
    {- ^ ZIP or postal code. -}
    , card__addressZipCheck :: Maybe (Text)
    {- ^ If `address_zip` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`. -}
    , card__availablePayoutMethods :: Maybe (Vector (Card_AvailablePayoutMethods))
    {- ^ A set of available payout methods for this card. Will be either `["standard"]` or `["standard", "instant"]`. Only values from this set should be passed as the `method` when creating a transfer. -}
    , card__country :: Maybe (Text)
    {- ^ Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected. -}
    , card__currency :: Maybe (Text)
    , card__customer :: Maybe (Expandable '[Const (Customer), Const (DeletedCustomer)])
    {- ^ The customer that this card belongs to. This attribute will not be in the card object if the card belongs to an account or recipient instead. -}
    , card__cvcCheck :: Maybe (Text)
    {- ^ If a CVC was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`. -}
    , card__defaultForCurrency :: Maybe (Bool)
    {- ^ Whether this card is the default external account for its currency. -}
    , card__dynamicLast4 :: Maybe (Text)
    {- ^ (For tokenized numbers only.) The last four digits of the device account number. -}
    , card__fingerprint :: Maybe (Text)
    {- ^ Uniquely identifies this particular card number. You can use this attribute to check whether two customers who've signed up with you are using the same card number, for example. -}
    , card__name :: Maybe (Text)
    {- ^ Cardholder name. -}
    , card__recipient :: Maybe (Expandable '[Const (Recipient)])
    {- ^ The recipient that this card belongs to. This attribute will not be in the card object if the card belongs to a customer or account instead. -}
    , card__tokenizationMethod :: Maybe (Text)
    {- ^ If the card number is tokenized, this is the method that was used. Can be `apple_pay` or `google_pay`. -}
    } deriving (Show, Eq, Generic)

instance FromJSON Card where
  parseJSON = withObject "Card" parseCtors
    where
      parseCtors o = parseCard o
      parseCard o = do
        card__id <- o .: "id"
        card__object <- o .: "object"
        card__brand <- o .: "brand"
        card__expMonth <- o .: "exp_month"
        card__expYear <- o .: "exp_year"
        card__funding <- o .: "funding"
        card__last4 <- o .: "last4"
        card__metadata <- o .: "metadata"
        card__account <- o .:? "account"
        card__addressCity <- o .:? "address_city"
        card__addressCountry <- o .:? "address_country"
        card__addressLine1 <- o .:? "address_line1"
        card__addressLine1Check <- o .:? "address_line1_check"
        card__addressLine2 <- o .:? "address_line2"
        card__addressState <- o .:? "address_state"
        card__addressZip <- o .:? "address_zip"
        card__addressZipCheck <- o .:? "address_zip_check"
        card__availablePayoutMethods <- o .:? "available_payout_methods"
        card__country <- o .:? "country"
        card__currency <- o .:? "currency"
        card__customer <- o .:? "customer"
        card__cvcCheck <- o .:? "cvc_check"
        card__defaultForCurrency <- o .:? "default_for_currency"
        card__dynamicLast4 <- o .:? "dynamic_last4"
        card__fingerprint <- o .:? "fingerprint"
        card__name <- o .:? "name"
        card__recipient <- o .:? "recipient"
        card__tokenizationMethod <- o .:? "tokenization_method"
        pure Card{..}

instance ToJSON Card where
  toJSON Card{..} = object
    (
      ("id" .= card__id) :
      ("object" .= card__object) :
      ("brand" .= card__brand) :
      ("exp_month" .= card__expMonth) :
      ("exp_year" .= card__expYear) :
      ("funding" .= card__funding) :
      ("last4" .= card__last4) :
      ("metadata" .= card__metadata) :
      (fmap ("account" .=) card__account) >?>
      (fmap ("address_city" .=) card__addressCity) >?>
      (fmap ("address_country" .=) card__addressCountry) >?>
      (fmap ("address_line1" .=) card__addressLine1) >?>
      (fmap ("address_line1_check" .=) card__addressLine1Check) >?>
      (fmap ("address_line2" .=) card__addressLine2) >?>
      (fmap ("address_state" .=) card__addressState) >?>
      (fmap ("address_zip" .=) card__addressZip) >?>
      (fmap ("address_zip_check" .=) card__addressZipCheck) >?>
      (fmap ("available_payout_methods" .=) card__availablePayoutMethods) >?>
      (fmap ("country" .=) card__country) >?>
      (fmap ("currency" .=) card__currency) >?>
      (fmap ("customer" .=) card__customer) >?>
      (fmap ("cvc_check" .=) card__cvcCheck) >?>
      (fmap ("default_for_currency" .=) card__defaultForCurrency) >?>
      (fmap ("dynamic_last4" .=) card__dynamicLast4) >?>
      (fmap ("fingerprint" .=) card__fingerprint) >?>
      (fmap ("name" .=) card__name) >?>
      (fmap ("recipient" .=) card__recipient) >?>
      (fmap ("tokenization_method" .=) card__tokenizationMethod) >?>
      []
    )
  toEncoding Card{..} = pairs (
      "id" .= card__id <>
      "object" .= card__object <>
      "brand" .= card__brand <>
      "exp_month" .= card__expMonth <>
      "exp_year" .= card__expYear <>
      "funding" .= card__funding <>
      "last4" .= card__last4 <>
      "metadata" .= card__metadata <>
      maybe mempty ("account" .=) card__account <>
      maybe mempty ("address_city" .=) card__addressCity <>
      maybe mempty ("address_country" .=) card__addressCountry <>
      maybe mempty ("address_line1" .=) card__addressLine1 <>
      maybe mempty ("address_line1_check" .=) card__addressLine1Check <>
      maybe mempty ("address_line2" .=) card__addressLine2 <>
      maybe mempty ("address_state" .=) card__addressState <>
      maybe mempty ("address_zip" .=) card__addressZip <>
      maybe mempty ("address_zip_check" .=) card__addressZipCheck <>
      maybe mempty ("available_payout_methods" .=) card__availablePayoutMethods <>
      maybe mempty ("country" .=) card__country <>
      maybe mempty ("currency" .=) card__currency <>
      maybe mempty ("customer" .=) card__customer <>
      maybe mempty ("cvc_check" .=) card__cvcCheck <>
      maybe mempty ("default_for_currency" .=) card__defaultForCurrency <>
      maybe mempty ("dynamic_last4" .=) card__dynamicLast4 <>
      maybe mempty ("fingerprint" .=) card__fingerprint <>
      maybe mempty ("name" .=) card__name <>
      maybe mempty ("recipient" .=) card__recipient <>
      maybe mempty ("tokenization_method" .=) card__tokenizationMethod
      )

-- Describes: "charge"

data Charge
  = Charge
    { charge__id :: (Id Charge)
    {- ^ Unique identifier for the object. -}
    , charge__object :: Charge_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , charge__livemode :: Bool
    {- ^ Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. -}
    , charge__amount :: Int
    {- ^ A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99). -}
    , charge__amountRefunded :: Int
    {- ^ Amount in %s refunded (can be less than the amount attribute on the charge if a partial refund was issued). -}
    , charge__billingDetails :: BillingDetails
    , charge__captured :: Bool
    {- ^ If the charge was created without capturing, this Boolean represents whether it is still uncaptured or has since been captured. -}
    , charge__created :: POSIXTime
    {- ^ Time at which the object was created. Measured in seconds since the Unix epoch. -}
    , charge__currency :: Text
    {- ^ Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). -}
    , charge__metadata :: Object
    {- ^ Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. -}
    , charge__paid :: Bool
    {- ^ `true` if the charge succeeded, or was successfully authorized for later capture. -}
    , charge__receiptUrl :: Text
    {- ^ This is the URL to view the receipt for this charge. The receipt is kept up-to-date to the latest state of the charge, including any refunds. If the charge is for an Invoice, the receipt will be stylized as an Invoice receipt. -}
    , charge__refunded :: Bool
    {- ^ Whether the charge has been fully refunded. If the charge is only partially refunded, this attribute will still be false. -}
    , charge__refunds :: Object
    {- ^ A list of refunds that have been applied to the charge. -}
    , charge__status :: Text
    {- ^ The status of the payment is either `succeeded`, `pending`, or `failed`. -}
    , charge__transfer :: Expandable '[Const (Transfer)]
    {- ^ ID of the transfer to the `destination` account (only applicable if the charge was created using the `destination` parameter). -}
    , charge__application :: Maybe (Expandable '[Const (Application)])
    {- ^ ID of the Connect application that created the charge. -}
    , charge__applicationFee :: Maybe (Expandable '[Const (ApplicationFee)])
    {- ^ The application fee (if any) for the charge. [See the Connect documentation](https://stripe.com/docs/connect/direct-charges#collecting-fees) for details. -}
    , charge__applicationFeeAmount :: Maybe (Int)
    {- ^ The amount of the application fee (if any) for the charge. [See the Connect documentation](https://stripe.com/docs/connect/direct-charges#collecting-fees) for details. -}
    , charge__balanceTransaction :: Maybe (Expandable '[Const (BalanceTransaction)])
    {- ^ ID of the balance transaction that describes the impact of this charge on your account balance (not including refunds or disputes). -}
    , charge__customer :: Maybe (Expandable '[Const (Customer), Const (DeletedCustomer)])
    {- ^ ID of the customer this charge is for if one exists. -}
    , charge__description :: Maybe (Text)
    {- ^ An arbitrary string attached to the object. Often useful for displaying to users. -}
    , charge__dispute :: Maybe (Expandable '[Const (Dispute)])
    {- ^ Details about the dispute if the charge has been disputed. -}
    , charge__failureCode :: Maybe (Text)
    {- ^ Error code explaining reason for charge failure if available (see [the errors section](https://stripe.com/docs/api#errors) for a list of codes). -}
    , charge__failureMessage :: Maybe (Text)
    {- ^ Message to user further explaining reason for charge failure if available. -}
    , charge__fraudDetails :: Maybe (Expandable '[Const (ChargeFraudDetails)])
    {- ^ Information on fraud assessments for the charge. -}
    , charge__invoice :: Maybe (Expandable '[Const (Invoice)])
    {- ^ ID of the invoice this charge is for if one exists. -}
    , charge__onBehalfOf :: Maybe (Expandable '[Const (Account)])
    {- ^ The account (if any) the charge was made on behalf of without triggering an automatic transfer. See the [Connect documentation](https://stripe.com/docs/connect/charges-transfers) for details. -}
    , charge__order :: Maybe (Expandable '[Const (Order)])
    {- ^ ID of the order this charge is for if one exists. -}
    , charge__outcome :: Maybe (Expandable '[Const (ChargeOutcome)])
    {- ^ Details about whether the payment was accepted, and why. See [understanding declines](https://stripe.com/docs/declines) for details. -}
    , charge__paymentIntent :: Maybe (Text)
    {- ^ ID of the PaymentIntent associated with this charge, if one exists. -}
    , charge__paymentMethod :: Maybe (Text)
    {- ^ ID of the payment method used in this charge. -}
    , charge__paymentMethodDetails :: Maybe (Expandable '[Const (PaymentMethodDetails)])
    {- ^ Details about the payment method at the time of the transaction. -}
    , charge__receiptEmail :: Maybe (Text)
    {- ^ This is the email address that the receipt for this charge was sent to. -}
    , charge__receiptNumber :: Maybe (Text)
    {- ^ This is the transaction number that appears on email receipts sent for this charge. This attribute will be `null` until a receipt has been sent. -}
    , charge__review :: Maybe (Expandable '[Const (Review)])
    {- ^ ID of the review associated with this charge if one exists. -}
    , charge__shipping :: Maybe (Expandable '[Const (Shipping)])
    {- ^ Shipping information for the charge. -}
    , charge__sourceTransfer :: Maybe (Expandable '[Const (Transfer)])
    {- ^ The transfer ID which created this charge. Only present if the charge came from another Stripe account. [See the Connect documentation](https://stripe.com/docs/connect/destination-charges) for details. -}
    , charge__statementDescriptor :: Maybe (Text)
    {- ^ For card charges, use `statement_descriptor_suffix` instead. Otherwise, you can use this value as the complete description of a charge on your customers’ statements. Must contain at least one letter, maximum 22 characters. -}
    , charge__statementDescriptorSuffix :: Maybe (Text)
    {- ^ Provides information about the charge that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor. -}
    , charge__transferData :: Maybe (Expandable '[Const (ChargeTransferData)])
    {- ^ An optional dictionary including the account to automatically transfer to as part of a destination charge. [See the Connect documentation](https://stripe.com/docs/connect/destination-charges) for details. -}
    , charge__transferGroup :: Maybe (Text)
    {- ^ A string that identifies this transaction as part of a group. See the [Connect documentation](https://stripe.com/docs/connect/charges-transfers#grouping-transactions) for details. -}
    } deriving (Show, Eq, Generic)

instance FromJSON Charge where
  parseJSON = withObject "Charge" parseCtors
    where
      parseCtors o = parseCharge o
      parseCharge o = do
        charge__id <- o .: "id"
        charge__object <- o .: "object"
        charge__livemode <- o .: "livemode"
        charge__amount <- o .: "amount"
        charge__amountRefunded <- o .: "amount_refunded"
        charge__billingDetails <- o .: "billing_details"
        charge__captured <- o .: "captured"
        charge__created <- o .: "created"
        charge__currency <- o .: "currency"
        charge__metadata <- o .: "metadata"
        charge__paid <- o .: "paid"
        charge__receiptUrl <- o .: "receipt_url"
        charge__refunded <- o .: "refunded"
        charge__refunds <- o .: "refunds"
        charge__status <- o .: "status"
        charge__transfer <- o .: "transfer"
        charge__application <- o .:? "application"
        charge__applicationFee <- o .:? "application_fee"
        charge__applicationFeeAmount <- o .:? "application_fee_amount"
        charge__balanceTransaction <- o .:? "balance_transaction"
        charge__customer <- o .:? "customer"
        charge__description <- o .:? "description"
        charge__dispute <- o .:? "dispute"
        charge__failureCode <- o .:? "failure_code"
        charge__failureMessage <- o .:? "failure_message"
        charge__fraudDetails <- o .:? "fraud_details"
        charge__invoice <- o .:? "invoice"
        charge__onBehalfOf <- o .:? "on_behalf_of"
        charge__order <- o .:? "order"
        charge__outcome <- o .:? "outcome"
        charge__paymentIntent <- o .:? "payment_intent"
        charge__paymentMethod <- o .:? "payment_method"
        charge__paymentMethodDetails <- o .:? "payment_method_details"
        charge__receiptEmail <- o .:? "receipt_email"
        charge__receiptNumber <- o .:? "receipt_number"
        charge__review <- o .:? "review"
        charge__shipping <- o .:? "shipping"
        charge__sourceTransfer <- o .:? "source_transfer"
        charge__statementDescriptor <- o .:? "statement_descriptor"
        charge__statementDescriptorSuffix <- o .:? "statement_descriptor_suffix"
        charge__transferData <- o .:? "transfer_data"
        charge__transferGroup <- o .:? "transfer_group"
        pure Charge{..}

instance ToJSON Charge where
  toJSON Charge{..} = object
    (
      ("id" .= charge__id) :
      ("object" .= charge__object) :
      ("livemode" .= charge__livemode) :
      ("amount" .= charge__amount) :
      ("amount_refunded" .= charge__amountRefunded) :
      ("billing_details" .= charge__billingDetails) :
      ("captured" .= charge__captured) :
      ("created" .= charge__created) :
      ("currency" .= charge__currency) :
      ("metadata" .= charge__metadata) :
      ("paid" .= charge__paid) :
      ("receipt_url" .= charge__receiptUrl) :
      ("refunded" .= charge__refunded) :
      ("refunds" .= charge__refunds) :
      ("status" .= charge__status) :
      ("transfer" .= charge__transfer) :
      (fmap ("application" .=) charge__application) >?>
      (fmap ("application_fee" .=) charge__applicationFee) >?>
      (fmap ("application_fee_amount" .=) charge__applicationFeeAmount) >?>
      (fmap ("balance_transaction" .=) charge__balanceTransaction) >?>
      (fmap ("customer" .=) charge__customer) >?>
      (fmap ("description" .=) charge__description) >?>
      (fmap ("dispute" .=) charge__dispute) >?>
      (fmap ("failure_code" .=) charge__failureCode) >?>
      (fmap ("failure_message" .=) charge__failureMessage) >?>
      (fmap ("fraud_details" .=) charge__fraudDetails) >?>
      (fmap ("invoice" .=) charge__invoice) >?>
      (fmap ("on_behalf_of" .=) charge__onBehalfOf) >?>
      (fmap ("order" .=) charge__order) >?>
      (fmap ("outcome" .=) charge__outcome) >?>
      (fmap ("payment_intent" .=) charge__paymentIntent) >?>
      (fmap ("payment_method" .=) charge__paymentMethod) >?>
      (fmap ("payment_method_details" .=) charge__paymentMethodDetails) >?>
      (fmap ("receipt_email" .=) charge__receiptEmail) >?>
      (fmap ("receipt_number" .=) charge__receiptNumber) >?>
      (fmap ("review" .=) charge__review) >?>
      (fmap ("shipping" .=) charge__shipping) >?>
      (fmap ("source_transfer" .=) charge__sourceTransfer) >?>
      (fmap ("statement_descriptor" .=) charge__statementDescriptor) >?>
      (fmap ("statement_descriptor_suffix" .=) charge__statementDescriptorSuffix) >?>
      (fmap ("transfer_data" .=) charge__transferData) >?>
      (fmap ("transfer_group" .=) charge__transferGroup) >?>
      []
    )
  toEncoding Charge{..} = pairs (
      "id" .= charge__id <>
      "object" .= charge__object <>
      "livemode" .= charge__livemode <>
      "amount" .= charge__amount <>
      "amount_refunded" .= charge__amountRefunded <>
      "billing_details" .= charge__billingDetails <>
      "captured" .= charge__captured <>
      "created" .= charge__created <>
      "currency" .= charge__currency <>
      "metadata" .= charge__metadata <>
      "paid" .= charge__paid <>
      "receipt_url" .= charge__receiptUrl <>
      "refunded" .= charge__refunded <>
      "refunds" .= charge__refunds <>
      "status" .= charge__status <>
      "transfer" .= charge__transfer <>
      maybe mempty ("application" .=) charge__application <>
      maybe mempty ("application_fee" .=) charge__applicationFee <>
      maybe mempty ("application_fee_amount" .=) charge__applicationFeeAmount <>
      maybe mempty ("balance_transaction" .=) charge__balanceTransaction <>
      maybe mempty ("customer" .=) charge__customer <>
      maybe mempty ("description" .=) charge__description <>
      maybe mempty ("dispute" .=) charge__dispute <>
      maybe mempty ("failure_code" .=) charge__failureCode <>
      maybe mempty ("failure_message" .=) charge__failureMessage <>
      maybe mempty ("fraud_details" .=) charge__fraudDetails <>
      maybe mempty ("invoice" .=) charge__invoice <>
      maybe mempty ("on_behalf_of" .=) charge__onBehalfOf <>
      maybe mempty ("order" .=) charge__order <>
      maybe mempty ("outcome" .=) charge__outcome <>
      maybe mempty ("payment_intent" .=) charge__paymentIntent <>
      maybe mempty ("payment_method" .=) charge__paymentMethod <>
      maybe mempty ("payment_method_details" .=) charge__paymentMethodDetails <>
      maybe mempty ("receipt_email" .=) charge__receiptEmail <>
      maybe mempty ("receipt_number" .=) charge__receiptNumber <>
      maybe mempty ("review" .=) charge__review <>
      maybe mempty ("shipping" .=) charge__shipping <>
      maybe mempty ("source_transfer" .=) charge__sourceTransfer <>
      maybe mempty ("statement_descriptor" .=) charge__statementDescriptor <>
      maybe mempty ("statement_descriptor_suffix" .=) charge__statementDescriptorSuffix <>
      maybe mempty ("transfer_data" .=) charge__transferData <>
      maybe mempty ("transfer_group" .=) charge__transferGroup
      )

-- Describes: "charge_fraud_details"

data ChargeFraudDetails
  = ChargeFraudDetails
    { chargeFraudDetails__stripeReport :: Text
    {- ^ Assessments from Stripe. If set, the value is `fraudulent`. -}
    , chargeFraudDetails__userReport :: Text
    {- ^ Assessments reported by you. If set, possible values of are `safe` and `fraudulent`. -}
    } deriving (Show, Eq, Generic)

instance FromJSON ChargeFraudDetails where
  parseJSON = withObject "ChargeFraudDetails" parseCtors
    where
      parseCtors o = parseChargeFraudDetails o
      parseChargeFraudDetails o = do
        chargeFraudDetails__stripeReport <- o .: "stripe_report"
        chargeFraudDetails__userReport <- o .: "user_report"
        pure ChargeFraudDetails{..}

instance ToJSON ChargeFraudDetails where
  toJSON ChargeFraudDetails{..} = object
    (
      ("stripe_report" .= chargeFraudDetails__stripeReport) :
      ("user_report" .= chargeFraudDetails__userReport) :
      []
    )
  toEncoding ChargeFraudDetails{..} = pairs (
      "stripe_report" .= chargeFraudDetails__stripeReport <>
      "user_report" .= chargeFraudDetails__userReport
      )

-- Describes: "charge_outcome"

data ChargeOutcome
  = ChargeOutcome
    { chargeOutcome__riskLevel :: Text
    {- ^ Stripe's evaluation of the riskiness of the payment. Possible values for evaluated payments are `normal`, `elevated`, `highest`. For non-card payments, and card-based payments predating the public assignment of risk levels, this field will have the value `not_assessed`. In the event of an error in the evaluation, this field will have the value `unknown`. -}
    , chargeOutcome__riskScore :: Int
    {- ^ Stripe's evaluation of the riskiness of the payment. Possible values for evaluated payments are between 0 and 100. For non-card payments, card-based payments predating the public assignment of risk scores, or in the event of an error during evaluation, this field will not be present. This field is only available with Radar for Fraud Teams. -}
    , chargeOutcome__rule :: Expandable '[Const (Rule)]
    {- ^ The ID of the Radar rule that matched the payment, if applicable. -}
    , chargeOutcome__type :: Text
    {- ^ Possible values are `authorized`, `manual_review`, `issuer_declined`, `blocked`, and `invalid`. See [understanding declines](https://stripe.com/docs/declines) and [Radar reviews](radar/review) for details. -}
    , chargeOutcome__networkStatus :: Maybe (Text)
    {- ^ Possible values are `approved_by_network`, `declined_by_network`, `not_sent_to_network`, and `reversed_after_approval`. The value `reversed_after_approval` indicates the payment was [blocked by Stripe](https://stripe.com/docs/declines#blocked-payments) after bank authorization, and may temporarily appear as "pending" on a cardholder's statement. -}
    , chargeOutcome__reason :: Maybe (Text)
    {- ^ An enumerated value providing a more detailed explanation of the outcome's `type`. Charges blocked by Radar's default block rule have the value `highest_risk_level`. Charges placed in review by Radar's default review rule have the value `elevated_risk_level`. Charges authorized, blocked, or placed in review by custom rules have the value `rule`. See [understanding declines](https://stripe.com/docs/declines) for more details. -}
    , chargeOutcome__sellerMessage :: Maybe (Text)
    {- ^ A human-readable description of the outcome type and reason, designed for you (the recipient of the payment), not your customer. -}
    } deriving (Show, Eq, Generic)

instance FromJSON ChargeOutcome where
  parseJSON = withObject "ChargeOutcome" parseCtors
    where
      parseCtors o = parseChargeOutcome o
      parseChargeOutcome o = do
        chargeOutcome__riskLevel <- o .: "risk_level"
        chargeOutcome__riskScore <- o .: "risk_score"
        chargeOutcome__rule <- o .: "rule"
        chargeOutcome__type <- o .: "type"
        chargeOutcome__networkStatus <- o .:? "network_status"
        chargeOutcome__reason <- o .:? "reason"
        chargeOutcome__sellerMessage <- o .:? "seller_message"
        pure ChargeOutcome{..}

instance ToJSON ChargeOutcome where
  toJSON ChargeOutcome{..} = object
    (
      ("risk_level" .= chargeOutcome__riskLevel) :
      ("risk_score" .= chargeOutcome__riskScore) :
      ("rule" .= chargeOutcome__rule) :
      ("type" .= chargeOutcome__type) :
      (fmap ("network_status" .=) chargeOutcome__networkStatus) >?>
      (fmap ("reason" .=) chargeOutcome__reason) >?>
      (fmap ("seller_message" .=) chargeOutcome__sellerMessage) >?>
      []
    )
  toEncoding ChargeOutcome{..} = pairs (
      "risk_level" .= chargeOutcome__riskLevel <>
      "risk_score" .= chargeOutcome__riskScore <>
      "rule" .= chargeOutcome__rule <>
      "type" .= chargeOutcome__type <>
      maybe mempty ("network_status" .=) chargeOutcome__networkStatus <>
      maybe mempty ("reason" .=) chargeOutcome__reason <>
      maybe mempty ("seller_message" .=) chargeOutcome__sellerMessage
      )

-- Describes: "charge_transfer_data"

data ChargeTransferData
  = ChargeTransferData
    { chargeTransferData__destination :: Expandable '[Const (Account)]
    {- ^ ID of an existing, connected Stripe account to transfer funds to if `transfer_data` was specified in the charge request. -}
    , chargeTransferData__amount :: Maybe (Int)
    {- ^ The amount transferred to the destination account, if specified. By default, the entire charge amount is transferred to the destination account. -}
    } deriving (Show, Eq, Generic)

instance FromJSON ChargeTransferData where
  parseJSON = withObject "ChargeTransferData" parseCtors
    where
      parseCtors o = parseChargeTransferData o
      parseChargeTransferData o = do
        chargeTransferData__destination <- o .: "destination"
        chargeTransferData__amount <- o .:? "amount"
        pure ChargeTransferData{..}

instance ToJSON ChargeTransferData where
  toJSON ChargeTransferData{..} = object
    (
      ("destination" .= chargeTransferData__destination) :
      (fmap ("amount" .=) chargeTransferData__amount) >?>
      []
    )
  toEncoding ChargeTransferData{..} = pairs (
      "destination" .= chargeTransferData__destination <>
      maybe mempty ("amount" .=) chargeTransferData__amount
      )

-- Describes: "checkout.session"

data Checkout_Session
  = Checkout_Session
    { checkout_session__id :: (Id Checkout_Session)
    {- ^ Unique identifier for the object. Used to pass to `redirectToCheckout`
in Stripe.js. -}
    , checkout_session__object :: Checkout_Session_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , checkout_session__livemode :: Bool
    {- ^ Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. -}
    , checkout_session__cancelUrl :: Text
    {- ^ The URL the customer will be directed to if they decide to cancel payment and return to your website. -}
    , checkout_session__paymentMethodTypes :: Vector (Text)
    {- ^ A list of the types of payment methods (e.g. card) this Checkout
Session is allowed to accept. -}
    , checkout_session__successUrl :: Text
    {- ^ The URL the customer will be directed to after the payment or
subscription creation is successful. -}
    , checkout_session__billingAddressCollection :: Maybe (Text)
    {- ^ The value (`auto` or `required`) for whether Checkout collected the
customer's billing address. -}
    , checkout_session__clientReferenceId :: Maybe (Text)
    {- ^ A unique string to reference the Checkout Session. This can be a
customer ID, a cart ID, or similar, and can be used to reconcile the
session with your internal systems. -}
    , checkout_session__customer :: Maybe (Expandable '[Const (Customer)])
    {- ^ The ID of the customer for this session. A new customer will be created
unless an existing customer was provided in when the session was
created. -}
    , checkout_session__customerEmail :: Maybe (Text)
    {- ^ If provided, this value will be used when the Customer object is created.
If not provided, customers will be asked to enter their email address.
Use this parameter to prefill customer data if you already have an email
on file. To access information about the customer once a session is
complete, use the `customer` field. -}
    , checkout_session__displayItems :: Maybe (Vector (CheckoutSessionDisplayItem))
    {- ^ The line items, plans, or SKUs purchased by the customer. -}
    , checkout_session__locale :: Maybe (Checkout_Session_Locale)
    {- ^ The IETF language tag of the locale Checkout is displayed in. If blank
or `auto`, the browser's locale is used. -}
    , checkout_session__mode :: Maybe (Checkout_Session_Mode)
    {- ^ The mode of the Checkout Session, one of `payment`, `setup`, or `subscription`. -}
    , checkout_session__paymentIntent :: Maybe (Expandable '[Const (PaymentIntent)])
    {- ^ The ID of the PaymentIntent for `payment` mode. -}
    , checkout_session__setupIntent :: Maybe (Expandable '[Const (SetupIntent)])
    {- ^ The ID of the SetupIntent if mode was set to `setup`. -}
    , checkout_session__submitType :: Maybe (Checkout_Session_SubmitType)
    {- ^ Describes the type of transaction being performed by Checkout in order
to customize relevant text on the page, such as the submit button.
`submit_type` can only be specified on Checkout Sessions using line
items or a SKU, but not Checkout Sessions for subscriptions. Supported
values are
`auto`, `book`, `donate`, or `pay`. -}
    , checkout_session__subscription :: Maybe (Expandable '[Const (Subscription)])
    {- ^ The ID of the subscription created if one or more plans were provided. -}
    } deriving (Show, Eq, Generic)

instance FromJSON Checkout_Session where
  parseJSON = withObject "Checkout_Session" parseCtors
    where
      parseCtors o = parseCheckout_Session o
      parseCheckout_Session o = do
        checkout_session__id <- o .: "id"
        checkout_session__object <- o .: "object"
        checkout_session__livemode <- o .: "livemode"
        checkout_session__cancelUrl <- o .: "cancel_url"
        checkout_session__paymentMethodTypes <- o .: "payment_method_types"
        checkout_session__successUrl <- o .: "success_url"
        checkout_session__billingAddressCollection <- o .:? "billing_address_collection"
        checkout_session__clientReferenceId <- o .:? "client_reference_id"
        checkout_session__customer <- o .:? "customer"
        checkout_session__customerEmail <- o .:? "customer_email"
        checkout_session__displayItems <- o .:? "display_items"
        checkout_session__locale <- o .:? "locale"
        checkout_session__mode <- o .:? "mode"
        checkout_session__paymentIntent <- o .:? "payment_intent"
        checkout_session__setupIntent <- o .:? "setup_intent"
        checkout_session__submitType <- o .:? "submit_type"
        checkout_session__subscription <- o .:? "subscription"
        pure Checkout_Session{..}

instance ToJSON Checkout_Session where
  toJSON Checkout_Session{..} = object
    (
      ("id" .= checkout_session__id) :
      ("object" .= checkout_session__object) :
      ("livemode" .= checkout_session__livemode) :
      ("cancel_url" .= checkout_session__cancelUrl) :
      ("payment_method_types" .= checkout_session__paymentMethodTypes) :
      ("success_url" .= checkout_session__successUrl) :
      (fmap ("billing_address_collection" .=) checkout_session__billingAddressCollection) >?>
      (fmap ("client_reference_id" .=) checkout_session__clientReferenceId) >?>
      (fmap ("customer" .=) checkout_session__customer) >?>
      (fmap ("customer_email" .=) checkout_session__customerEmail) >?>
      (fmap ("display_items" .=) checkout_session__displayItems) >?>
      (fmap ("locale" .=) checkout_session__locale) >?>
      (fmap ("mode" .=) checkout_session__mode) >?>
      (fmap ("payment_intent" .=) checkout_session__paymentIntent) >?>
      (fmap ("setup_intent" .=) checkout_session__setupIntent) >?>
      (fmap ("submit_type" .=) checkout_session__submitType) >?>
      (fmap ("subscription" .=) checkout_session__subscription) >?>
      []
    )
  toEncoding Checkout_Session{..} = pairs (
      "id" .= checkout_session__id <>
      "object" .= checkout_session__object <>
      "livemode" .= checkout_session__livemode <>
      "cancel_url" .= checkout_session__cancelUrl <>
      "payment_method_types" .= checkout_session__paymentMethodTypes <>
      "success_url" .= checkout_session__successUrl <>
      maybe mempty ("billing_address_collection" .=) checkout_session__billingAddressCollection <>
      maybe mempty ("client_reference_id" .=) checkout_session__clientReferenceId <>
      maybe mempty ("customer" .=) checkout_session__customer <>
      maybe mempty ("customer_email" .=) checkout_session__customerEmail <>
      maybe mempty ("display_items" .=) checkout_session__displayItems <>
      maybe mempty ("locale" .=) checkout_session__locale <>
      maybe mempty ("mode" .=) checkout_session__mode <>
      maybe mempty ("payment_intent" .=) checkout_session__paymentIntent <>
      maybe mempty ("setup_intent" .=) checkout_session__setupIntent <>
      maybe mempty ("submit_type" .=) checkout_session__submitType <>
      maybe mempty ("subscription" .=) checkout_session__subscription
      )

-- Describes: "checkout_session_custom_display_item_description"

data CheckoutSessionCustomDisplayItemDescription
  = CheckoutSessionCustomDisplayItemDescription
    { checkoutSessionCustomDisplayItemDescription__name :: Text
    {- ^ The name of the line item. -}
    , checkoutSessionCustomDisplayItemDescription__description :: Maybe (Text)
    {- ^ The description of the line item. -}
    , checkoutSessionCustomDisplayItemDescription__images :: Maybe (Vector (Text))
    {- ^ The images of the line item. -}
    } deriving (Show, Eq, Generic)

instance FromJSON CheckoutSessionCustomDisplayItemDescription where
  parseJSON = withObject "CheckoutSessionCustomDisplayItemDescription" parseCtors
    where
      parseCtors o = parseCheckoutSessionCustomDisplayItemDescription o
      parseCheckoutSessionCustomDisplayItemDescription o = do
        checkoutSessionCustomDisplayItemDescription__name <- o .: "name"
        checkoutSessionCustomDisplayItemDescription__description <- o .:? "description"
        checkoutSessionCustomDisplayItemDescription__images <- o .:? "images"
        pure CheckoutSessionCustomDisplayItemDescription{..}

instance ToJSON CheckoutSessionCustomDisplayItemDescription where
  toJSON CheckoutSessionCustomDisplayItemDescription{..} = object
    (
      ("name" .= checkoutSessionCustomDisplayItemDescription__name) :
      (fmap ("description" .=) checkoutSessionCustomDisplayItemDescription__description) >?>
      (fmap ("images" .=) checkoutSessionCustomDisplayItemDescription__images) >?>
      []
    )
  toEncoding CheckoutSessionCustomDisplayItemDescription{..} = pairs (
      "name" .= checkoutSessionCustomDisplayItemDescription__name <>
      maybe mempty ("description" .=) checkoutSessionCustomDisplayItemDescription__description <>
      maybe mempty ("images" .=) checkoutSessionCustomDisplayItemDescription__images
      )

-- Describes: "checkout_session_display_item"

data CheckoutSessionDisplayItem
  = CheckoutSessionDisplayItem
    { checkoutSessionDisplayItem__amount :: Int
    {- ^ Amount for the display item. -}
    , checkoutSessionDisplayItem__currency :: Text
    {- ^ Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). -}
    , checkoutSessionDisplayItem__custom :: CheckoutSessionCustomDisplayItemDescription
    , checkoutSessionDisplayItem__plan :: Plan
    , checkoutSessionDisplayItem__quantity :: Int
    {- ^ Quantity of the display item being purchased. -}
    , checkoutSessionDisplayItem__sku :: Sku
    , checkoutSessionDisplayItem__type :: Text
    {- ^ The type of display item. One of `custom`, `plan` or `sku` -}
    } deriving (Show, Eq, Generic)

instance FromJSON CheckoutSessionDisplayItem where
  parseJSON = withObject "CheckoutSessionDisplayItem" parseCtors
    where
      parseCtors o = parseCheckoutSessionDisplayItem o
      parseCheckoutSessionDisplayItem o = do
        checkoutSessionDisplayItem__amount <- o .: "amount"
        checkoutSessionDisplayItem__currency <- o .: "currency"
        checkoutSessionDisplayItem__custom <- o .: "custom"
        checkoutSessionDisplayItem__plan <- o .: "plan"
        checkoutSessionDisplayItem__quantity <- o .: "quantity"
        checkoutSessionDisplayItem__sku <- o .: "sku"
        checkoutSessionDisplayItem__type <- o .: "type"
        pure CheckoutSessionDisplayItem{..}

instance ToJSON CheckoutSessionDisplayItem where
  toJSON CheckoutSessionDisplayItem{..} = object
    (
      ("amount" .= checkoutSessionDisplayItem__amount) :
      ("currency" .= checkoutSessionDisplayItem__currency) :
      ("custom" .= checkoutSessionDisplayItem__custom) :
      ("plan" .= checkoutSessionDisplayItem__plan) :
      ("quantity" .= checkoutSessionDisplayItem__quantity) :
      ("sku" .= checkoutSessionDisplayItem__sku) :
      ("type" .= checkoutSessionDisplayItem__type) :
      []
    )
  toEncoding CheckoutSessionDisplayItem{..} = pairs (
      "amount" .= checkoutSessionDisplayItem__amount <>
      "currency" .= checkoutSessionDisplayItem__currency <>
      "custom" .= checkoutSessionDisplayItem__custom <>
      "plan" .= checkoutSessionDisplayItem__plan <>
      "quantity" .= checkoutSessionDisplayItem__quantity <>
      "sku" .= checkoutSessionDisplayItem__sku <>
      "type" .= checkoutSessionDisplayItem__type
      )

-- Describes: "connect_collection_transfer"

data ConnectCollectionTransfer
  = ConnectCollectionTransfer
    { connectCollectionTransfer__id :: Text
    {- ^ Unique identifier for the object. -}
    , connectCollectionTransfer__object :: ConnectCollectionTransfer_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , connectCollectionTransfer__livemode :: Bool
    {- ^ Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. -}
    , connectCollectionTransfer__amount :: Int
    {- ^ Amount transferred, in %s. -}
    , connectCollectionTransfer__currency :: Text
    {- ^ Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). -}
    , connectCollectionTransfer__destination :: Expandable '[Const (Account)]
    {- ^ ID of the account that funds are being collected for. -}
    } deriving (Show, Eq, Generic)

instance FromJSON ConnectCollectionTransfer where
  parseJSON = withObject "ConnectCollectionTransfer" parseCtors
    where
      parseCtors o = parseConnectCollectionTransfer o
      parseConnectCollectionTransfer o = do
        connectCollectionTransfer__id <- o .: "id"
        connectCollectionTransfer__object <- o .: "object"
        connectCollectionTransfer__livemode <- o .: "livemode"
        connectCollectionTransfer__amount <- o .: "amount"
        connectCollectionTransfer__currency <- o .: "currency"
        connectCollectionTransfer__destination <- o .: "destination"
        pure ConnectCollectionTransfer{..}

instance ToJSON ConnectCollectionTransfer where
  toJSON ConnectCollectionTransfer{..} = object
    (
      ("id" .= connectCollectionTransfer__id) :
      ("object" .= connectCollectionTransfer__object) :
      ("livemode" .= connectCollectionTransfer__livemode) :
      ("amount" .= connectCollectionTransfer__amount) :
      ("currency" .= connectCollectionTransfer__currency) :
      ("destination" .= connectCollectionTransfer__destination) :
      []
    )
  toEncoding ConnectCollectionTransfer{..} = pairs (
      "id" .= connectCollectionTransfer__id <>
      "object" .= connectCollectionTransfer__object <>
      "livemode" .= connectCollectionTransfer__livemode <>
      "amount" .= connectCollectionTransfer__amount <>
      "currency" .= connectCollectionTransfer__currency <>
      "destination" .= connectCollectionTransfer__destination
      )

-- Describes: "country_spec"

data CountrySpec
  = CountrySpec
    { countrySpec__id :: (Id CountrySpec)
    {- ^ Unique identifier for the object. Represented as the ISO country code for this country. -}
    , countrySpec__object :: CountrySpec_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , countrySpec__defaultCurrency :: Text
    {- ^ The default currency for this country. This applies to both payment methods and bank accounts. -}
    , countrySpec__supportedBankAccountCurrencies :: Object
    {- ^ Currencies that can be accepted in the specific country (for transfers). -}
    , countrySpec__supportedPaymentCurrencies :: Vector (Text)
    {- ^ Currencies that can be accepted in the specified country (for payments). -}
    , countrySpec__supportedPaymentMethods :: Vector (Text)
    {- ^ Payment methods available in the specified country. You may need to enable some payment methods (e.g., [ACH](https://stripe.com/docs/ach)) on your account before they appear in this list. The `stripe` payment method refers to [charging through your platform](https://stripe.com/docs/connect/destination-charges). -}
    , countrySpec__supportedTransferCountries :: Vector (Text)
    {- ^ Countries that can accept transfers from the specified country. -}
    , countrySpec__verificationFields :: CountrySpecVerificationFields
    } deriving (Show, Eq, Generic)

instance FromJSON CountrySpec where
  parseJSON = withObject "CountrySpec" parseCtors
    where
      parseCtors o = parseCountrySpec o
      parseCountrySpec o = do
        countrySpec__id <- o .: "id"
        countrySpec__object <- o .: "object"
        countrySpec__defaultCurrency <- o .: "default_currency"
        countrySpec__supportedBankAccountCurrencies <- o .: "supported_bank_account_currencies"
        countrySpec__supportedPaymentCurrencies <- o .: "supported_payment_currencies"
        countrySpec__supportedPaymentMethods <- o .: "supported_payment_methods"
        countrySpec__supportedTransferCountries <- o .: "supported_transfer_countries"
        countrySpec__verificationFields <- o .: "verification_fields"
        pure CountrySpec{..}

instance ToJSON CountrySpec where
  toJSON CountrySpec{..} = object
    (
      ("id" .= countrySpec__id) :
      ("object" .= countrySpec__object) :
      ("default_currency" .= countrySpec__defaultCurrency) :
      ("supported_bank_account_currencies" .= countrySpec__supportedBankAccountCurrencies) :
      ("supported_payment_currencies" .= countrySpec__supportedPaymentCurrencies) :
      ("supported_payment_methods" .= countrySpec__supportedPaymentMethods) :
      ("supported_transfer_countries" .= countrySpec__supportedTransferCountries) :
      ("verification_fields" .= countrySpec__verificationFields) :
      []
    )
  toEncoding CountrySpec{..} = pairs (
      "id" .= countrySpec__id <>
      "object" .= countrySpec__object <>
      "default_currency" .= countrySpec__defaultCurrency <>
      "supported_bank_account_currencies" .= countrySpec__supportedBankAccountCurrencies <>
      "supported_payment_currencies" .= countrySpec__supportedPaymentCurrencies <>
      "supported_payment_methods" .= countrySpec__supportedPaymentMethods <>
      "supported_transfer_countries" .= countrySpec__supportedTransferCountries <>
      "verification_fields" .= countrySpec__verificationFields
      )

-- Describes: "country_spec_verification_field_details"

data CountrySpecVerificationFieldDetails
  = CountrySpecVerificationFieldDetails
    { countrySpecVerificationFieldDetails__additional :: Vector (Text)
    {- ^ Additional fields which are only required for some users. -}
    , countrySpecVerificationFieldDetails__minimum :: Vector (Text)
    {- ^ Fields which every account must eventually provide. -}
    } deriving (Show, Eq, Generic)

instance FromJSON CountrySpecVerificationFieldDetails where
  parseJSON = withObject "CountrySpecVerificationFieldDetails" parseCtors
    where
      parseCtors o = parseCountrySpecVerificationFieldDetails o
      parseCountrySpecVerificationFieldDetails o = do
        countrySpecVerificationFieldDetails__additional <- o .: "additional"
        countrySpecVerificationFieldDetails__minimum <- o .: "minimum"
        pure CountrySpecVerificationFieldDetails{..}

instance ToJSON CountrySpecVerificationFieldDetails where
  toJSON CountrySpecVerificationFieldDetails{..} = object
    (
      ("additional" .= countrySpecVerificationFieldDetails__additional) :
      ("minimum" .= countrySpecVerificationFieldDetails__minimum) :
      []
    )
  toEncoding CountrySpecVerificationFieldDetails{..} = pairs (
      "additional" .= countrySpecVerificationFieldDetails__additional <>
      "minimum" .= countrySpecVerificationFieldDetails__minimum
      )

-- Describes: "country_spec_verification_fields"

data CountrySpecVerificationFields
  = CountrySpecVerificationFields
    { countrySpecVerificationFields__company :: CountrySpecVerificationFieldDetails
    , countrySpecVerificationFields__individual :: CountrySpecVerificationFieldDetails
    } deriving (Show, Eq, Generic)

instance FromJSON CountrySpecVerificationFields where
  parseJSON = withObject "CountrySpecVerificationFields" parseCtors
    where
      parseCtors o = parseCountrySpecVerificationFields o
      parseCountrySpecVerificationFields o = do
        countrySpecVerificationFields__company <- o .: "company"
        countrySpecVerificationFields__individual <- o .: "individual"
        pure CountrySpecVerificationFields{..}

instance ToJSON CountrySpecVerificationFields where
  toJSON CountrySpecVerificationFields{..} = object
    (
      ("company" .= countrySpecVerificationFields__company) :
      ("individual" .= countrySpecVerificationFields__individual) :
      []
    )
  toEncoding CountrySpecVerificationFields{..} = pairs (
      "company" .= countrySpecVerificationFields__company <>
      "individual" .= countrySpecVerificationFields__individual
      )

-- Describes: "coupon"

data Coupon
  = Coupon
    { coupon__id :: (Id Coupon)
    {- ^ Unique identifier for the object. -}
    , coupon__object :: Coupon_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , coupon__livemode :: Bool
    {- ^ Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. -}
    , coupon__created :: POSIXTime
    {- ^ Time at which the object was created. Measured in seconds since the Unix epoch. -}
    , coupon__duration :: Coupon_Duration
    {- ^ One of `forever`, `once`, and `repeating`. Describes how long a customer who applies this coupon will get the discount. -}
    , coupon__metadata :: Object
    {- ^ Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. -}
    , coupon__timesRedeemed :: Int
    {- ^ Number of times this coupon has been applied to a customer. -}
    , coupon__valid :: Bool
    {- ^ Taking account of the above properties, whether this coupon can still be applied to a customer. -}
    , coupon__amountOff :: Maybe (Int)
    {- ^ Amount (in the `currency` specified) that will be taken off the subtotal of any invoices for this customer. -}
    , coupon__currency :: Maybe (Text)
    {- ^ If `amount_off` has been set, the three-letter [ISO code for the currency](https://stripe.com/docs/currencies) of the amount to take off. -}
    , coupon__durationInMonths :: Maybe (Int)
    {- ^ If `duration` is `repeating`, the number of months the coupon applies. Null if coupon `duration` is `forever` or `once`. -}
    , coupon__maxRedemptions :: Maybe (Int)
    {- ^ Maximum number of times this coupon can be redeemed, in total, across all customers, before it is no longer valid. -}
    , coupon__name :: Maybe (Text)
    {- ^ Name of the coupon displayed to customers on for instance invoices or receipts. -}
    , coupon__percentOff :: Maybe (Scientific)
    {- ^ Percent that will be taken off the subtotal of any invoices for this customer for the duration of the coupon. For example, a coupon with percent_off of 50 will make a %s100 invoice %s50 instead. -}
    , coupon__redeemBy :: Maybe (POSIXTime)
    {- ^ Date after which the coupon can no longer be redeemed. -}
    } deriving (Show, Eq, Generic)

instance FromJSON Coupon where
  parseJSON = withObject "Coupon" parseCtors
    where
      parseCtors o = parseCoupon o
      parseCoupon o = do
        coupon__id <- o .: "id"
        coupon__object <- o .: "object"
        coupon__livemode <- o .: "livemode"
        coupon__created <- o .: "created"
        coupon__duration <- o .: "duration"
        coupon__metadata <- o .: "metadata"
        coupon__timesRedeemed <- o .: "times_redeemed"
        coupon__valid <- o .: "valid"
        coupon__amountOff <- o .:? "amount_off"
        coupon__currency <- o .:? "currency"
        coupon__durationInMonths <- o .:? "duration_in_months"
        coupon__maxRedemptions <- o .:? "max_redemptions"
        coupon__name <- o .:? "name"
        coupon__percentOff <- o .:? "percent_off"
        coupon__redeemBy <- o .:? "redeem_by"
        pure Coupon{..}

instance ToJSON Coupon where
  toJSON Coupon{..} = object
    (
      ("id" .= coupon__id) :
      ("object" .= coupon__object) :
      ("livemode" .= coupon__livemode) :
      ("created" .= coupon__created) :
      ("duration" .= coupon__duration) :
      ("metadata" .= coupon__metadata) :
      ("times_redeemed" .= coupon__timesRedeemed) :
      ("valid" .= coupon__valid) :
      (fmap ("amount_off" .=) coupon__amountOff) >?>
      (fmap ("currency" .=) coupon__currency) >?>
      (fmap ("duration_in_months" .=) coupon__durationInMonths) >?>
      (fmap ("max_redemptions" .=) coupon__maxRedemptions) >?>
      (fmap ("name" .=) coupon__name) >?>
      (fmap ("percent_off" .=) coupon__percentOff) >?>
      (fmap ("redeem_by" .=) coupon__redeemBy) >?>
      []
    )
  toEncoding Coupon{..} = pairs (
      "id" .= coupon__id <>
      "object" .= coupon__object <>
      "livemode" .= coupon__livemode <>
      "created" .= coupon__created <>
      "duration" .= coupon__duration <>
      "metadata" .= coupon__metadata <>
      "times_redeemed" .= coupon__timesRedeemed <>
      "valid" .= coupon__valid <>
      maybe mempty ("amount_off" .=) coupon__amountOff <>
      maybe mempty ("currency" .=) coupon__currency <>
      maybe mempty ("duration_in_months" .=) coupon__durationInMonths <>
      maybe mempty ("max_redemptions" .=) coupon__maxRedemptions <>
      maybe mempty ("name" .=) coupon__name <>
      maybe mempty ("percent_off" .=) coupon__percentOff <>
      maybe mempty ("redeem_by" .=) coupon__redeemBy
      )

-- Describes: "credit_note"

data CreditNote
  = CreditNote
    { creditNote__id :: (Id CreditNote)
    {- ^ Unique identifier for the object. -}
    , creditNote__object :: CreditNote_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , creditNote__livemode :: Bool
    {- ^ Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. -}
    , creditNote__amount :: Int
    {- ^ The integer amount in **%s** representing the total amount of the credit note, including tax. -}
    , creditNote__created :: POSIXTime
    {- ^ Time at which the object was created. Measured in seconds since the Unix epoch. -}
    , creditNote__currency :: Text
    {- ^ Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). -}
    , creditNote__customer :: Expandable '[Const (Customer)]
    {- ^ ID of the customer. -}
    , creditNote__invoice :: Expandable '[Const (Invoice)]
    {- ^ ID of the invoice. -}
    , creditNote__metadata :: Object
    {- ^ Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. -}
    , creditNote__number :: Text
    {- ^ A unique number that identifies this particular credit note and appears on the PDF of the credit note and its associated invoice. -}
    , creditNote__pdf :: Text
    {- ^ The link to download the PDF of the credit note. -}
    , creditNote__status :: CreditNote_Status
    {- ^ Status of this credit note, one of `issued` or `void`. Learn more about [voiding credit notes](https://stripe.com/docs/billing/invoices/credit-notes#voiding). -}
    , creditNote__type :: CreditNote_Type
    {- ^ Type of this credit note, one of `post_payment` or `pre_payment`. A `pre_payment` credit note means it was issued when the invoice was open. A `post_payment` credit note means it was issued when the invoice was paid. -}
    , creditNote__customerBalanceTransaction :: Maybe (Expandable '[Const (CustomerBalanceTransaction)])
    {- ^ Customer balance transaction related to this credit note. -}
    , creditNote__memo :: Maybe (Text)
    {- ^ Customer-facing text that appears on the credit note PDF. -}
    , creditNote__reason :: Maybe (CreditNote_Reason)
    {- ^ Reason for issuing this credit note, one of `duplicate`, `fraudulent`, `order_change`, or `product_unsatisfactory` -}
    , creditNote__refund :: Maybe (Expandable '[Const (Refund)])
    {- ^ Refund related to this credit note. -}
    , creditNote__voidedAt :: Maybe (POSIXTime)
    {- ^ The time that the credit note was voided. -}
    } deriving (Show, Eq, Generic)

instance FromJSON CreditNote where
  parseJSON = withObject "CreditNote" parseCtors
    where
      parseCtors o = parseCreditNote o
      parseCreditNote o = do
        creditNote__id <- o .: "id"
        creditNote__object <- o .: "object"
        creditNote__livemode <- o .: "livemode"
        creditNote__amount <- o .: "amount"
        creditNote__created <- o .: "created"
        creditNote__currency <- o .: "currency"
        creditNote__customer <- o .: "customer"
        creditNote__invoice <- o .: "invoice"
        creditNote__metadata <- o .: "metadata"
        creditNote__number <- o .: "number"
        creditNote__pdf <- o .: "pdf"
        creditNote__status <- o .: "status"
        creditNote__type <- o .: "type"
        creditNote__customerBalanceTransaction <- o .:? "customer_balance_transaction"
        creditNote__memo <- o .:? "memo"
        creditNote__reason <- o .:? "reason"
        creditNote__refund <- o .:? "refund"
        creditNote__voidedAt <- o .:? "voided_at"
        pure CreditNote{..}

instance ToJSON CreditNote where
  toJSON CreditNote{..} = object
    (
      ("id" .= creditNote__id) :
      ("object" .= creditNote__object) :
      ("livemode" .= creditNote__livemode) :
      ("amount" .= creditNote__amount) :
      ("created" .= creditNote__created) :
      ("currency" .= creditNote__currency) :
      ("customer" .= creditNote__customer) :
      ("invoice" .= creditNote__invoice) :
      ("metadata" .= creditNote__metadata) :
      ("number" .= creditNote__number) :
      ("pdf" .= creditNote__pdf) :
      ("status" .= creditNote__status) :
      ("type" .= creditNote__type) :
      (fmap ("customer_balance_transaction" .=) creditNote__customerBalanceTransaction) >?>
      (fmap ("memo" .=) creditNote__memo) >?>
      (fmap ("reason" .=) creditNote__reason) >?>
      (fmap ("refund" .=) creditNote__refund) >?>
      (fmap ("voided_at" .=) creditNote__voidedAt) >?>
      []
    )
  toEncoding CreditNote{..} = pairs (
      "id" .= creditNote__id <>
      "object" .= creditNote__object <>
      "livemode" .= creditNote__livemode <>
      "amount" .= creditNote__amount <>
      "created" .= creditNote__created <>
      "currency" .= creditNote__currency <>
      "customer" .= creditNote__customer <>
      "invoice" .= creditNote__invoice <>
      "metadata" .= creditNote__metadata <>
      "number" .= creditNote__number <>
      "pdf" .= creditNote__pdf <>
      "status" .= creditNote__status <>
      "type" .= creditNote__type <>
      maybe mempty ("customer_balance_transaction" .=) creditNote__customerBalanceTransaction <>
      maybe mempty ("memo" .=) creditNote__memo <>
      maybe mempty ("reason" .=) creditNote__reason <>
      maybe mempty ("refund" .=) creditNote__refund <>
      maybe mempty ("voided_at" .=) creditNote__voidedAt
      )

-- Describes: "customer"

data Customer
  = Customer
    { customer__id :: (Id Customer)
    {- ^ Unique identifier for the object. -}
    , customer__object :: Customer_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , customer__livemode :: Bool
    {- ^ Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. -}
    , customer__accountBalance :: Int
    {- ^ This field has been renamed to `balance` and will be removed in a future API version. -}
    , customer__created :: POSIXTime
    {- ^ Time at which the object was created. Measured in seconds since the Unix epoch. -}
    , customer__invoiceSettings :: InvoiceSettingCustomerSetting
    , customer__metadata :: Object
    {- ^ Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. -}
    , customer__sources :: Object
    {- ^ The customer's payment sources, if any. -}
    , customer__subscriptions :: Object
    {- ^ The customer's current subscriptions, if any. -}
    , customer__taxIds :: Object
    {- ^ The customer's tax IDs. -}
    , customer__address :: Maybe (Expandable '[Const (Address)])
    {- ^ The customer's address. -}
    , customer__balance :: Maybe (Int)
    {- ^ Current balance, if any, being stored on the customer. If negative, the customer has credit to apply to their next invoice. If positive, the customer has an amount owed that will be added to their next invoice. The balance does not refer to any unpaid invoices; it solely takes into account amounts that have yet to be successfully applied to any invoice. This balance is only taken into account as invoices are finalized. -}
    , customer__currency :: Maybe (Text)
    {- ^ Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) the customer can be charged in for recurring billing purposes. -}
    , customer__defaultSource :: Maybe (Expandable '[Const (AlipayAccount), Const (BankAccount), Const (BitcoinReceiver), Const (Card), Const (Source)])
    {- ^ ID of the default payment source for the customer. -}
    , customer__delinquent :: Maybe (Bool)
    {- ^ When the customer's latest invoice is billed by charging automatically, delinquent is true if the invoice's latest charge is failed. When the customer's latest invoice is billed by sending an invoice, delinquent is true if the invoice is not paid by its due date. -}
    , customer__description :: Maybe (Text)
    {- ^ An arbitrary string attached to the object. Often useful for displaying to users. -}
    , customer__discount :: Maybe (Expandable '[Const (Discount)])
    {- ^ Describes the current discount active on the customer, if there is one. -}
    , customer__email :: Maybe (Text)
    {- ^ The customer's email address. -}
    , customer__invoicePrefix :: Maybe (Text)
    {- ^ The prefix for the customer used to generate unique invoice numbers. -}
    , customer__name :: Maybe (Text)
    {- ^ The customer's full name or business name. -}
    , customer__phone :: Maybe (Text)
    {- ^ The customer's phone number. -}
    , customer__preferredLocales :: Maybe (Vector (Text))
    {- ^ The customer's preferred locales (languages), ordered by preference. -}
    , customer__shipping :: Maybe (Expandable '[Const (Shipping)])
    {- ^ Mailing and shipping address for the customer. Appears on invoices emailed to this customer. -}
    , customer__taxExempt :: Maybe (Customer_TaxExempt)
    {- ^ Describes the customer's tax exemption status. One of `none`, `exempt`, or `reverse`. When set to `reverse`, invoice and receipt PDFs include the text **"Reverse charge"**. -}
    , customer__taxInfo :: Maybe (Expandable '[Const (TaxInfo)])
    {- ^ The customer's tax information. Appears on invoices emailed to this customer. This field has been deprecated and will be removed in a future API version, for further information view the [migration guide](https://stripe.com/docs/billing/migration/taxes#moving-from-taxinfo-to-customer-tax-ids). -}
    , customer__taxInfoVerification :: Maybe (Expandable '[Const (TaxInfoVerification)])
    {- ^ Describes the status of looking up the tax ID provided in `tax_info`. This field has been deprecated and will be removed in a future API version, for further information view the [migration guide](https://stripe.com/docs/billing/migration/taxes#moving-from-taxinfo-to-customer-tax-ids). -}
    } deriving (Show, Eq, Generic)

instance FromJSON Customer where
  parseJSON = withObject "Customer" parseCtors
    where
      parseCtors o = parseCustomer o
      parseCustomer o = do
        customer__id <- o .: "id"
        customer__object <- o .: "object"
        customer__livemode <- o .: "livemode"
        customer__accountBalance <- o .: "account_balance"
        customer__created <- o .: "created"
        customer__invoiceSettings <- o .: "invoice_settings"
        customer__metadata <- o .: "metadata"
        customer__sources <- o .: "sources"
        customer__subscriptions <- o .: "subscriptions"
        customer__taxIds <- o .: "tax_ids"
        customer__address <- o .:? "address"
        customer__balance <- o .:? "balance"
        customer__currency <- o .:? "currency"
        customer__defaultSource <- o .:? "default_source"
        customer__delinquent <- o .:? "delinquent"
        customer__description <- o .:? "description"
        customer__discount <- o .:? "discount"
        customer__email <- o .:? "email"
        customer__invoicePrefix <- o .:? "invoice_prefix"
        customer__name <- o .:? "name"
        customer__phone <- o .:? "phone"
        customer__preferredLocales <- o .:? "preferred_locales"
        customer__shipping <- o .:? "shipping"
        customer__taxExempt <- o .:? "tax_exempt"
        customer__taxInfo <- o .:? "tax_info"
        customer__taxInfoVerification <- o .:? "tax_info_verification"
        pure Customer{..}

instance ToJSON Customer where
  toJSON Customer{..} = object
    (
      ("id" .= customer__id) :
      ("object" .= customer__object) :
      ("livemode" .= customer__livemode) :
      ("account_balance" .= customer__accountBalance) :
      ("created" .= customer__created) :
      ("invoice_settings" .= customer__invoiceSettings) :
      ("metadata" .= customer__metadata) :
      ("sources" .= customer__sources) :
      ("subscriptions" .= customer__subscriptions) :
      ("tax_ids" .= customer__taxIds) :
      (fmap ("address" .=) customer__address) >?>
      (fmap ("balance" .=) customer__balance) >?>
      (fmap ("currency" .=) customer__currency) >?>
      (fmap ("default_source" .=) customer__defaultSource) >?>
      (fmap ("delinquent" .=) customer__delinquent) >?>
      (fmap ("description" .=) customer__description) >?>
      (fmap ("discount" .=) customer__discount) >?>
      (fmap ("email" .=) customer__email) >?>
      (fmap ("invoice_prefix" .=) customer__invoicePrefix) >?>
      (fmap ("name" .=) customer__name) >?>
      (fmap ("phone" .=) customer__phone) >?>
      (fmap ("preferred_locales" .=) customer__preferredLocales) >?>
      (fmap ("shipping" .=) customer__shipping) >?>
      (fmap ("tax_exempt" .=) customer__taxExempt) >?>
      (fmap ("tax_info" .=) customer__taxInfo) >?>
      (fmap ("tax_info_verification" .=) customer__taxInfoVerification) >?>
      []
    )
  toEncoding Customer{..} = pairs (
      "id" .= customer__id <>
      "object" .= customer__object <>
      "livemode" .= customer__livemode <>
      "account_balance" .= customer__accountBalance <>
      "created" .= customer__created <>
      "invoice_settings" .= customer__invoiceSettings <>
      "metadata" .= customer__metadata <>
      "sources" .= customer__sources <>
      "subscriptions" .= customer__subscriptions <>
      "tax_ids" .= customer__taxIds <>
      maybe mempty ("address" .=) customer__address <>
      maybe mempty ("balance" .=) customer__balance <>
      maybe mempty ("currency" .=) customer__currency <>
      maybe mempty ("default_source" .=) customer__defaultSource <>
      maybe mempty ("delinquent" .=) customer__delinquent <>
      maybe mempty ("description" .=) customer__description <>
      maybe mempty ("discount" .=) customer__discount <>
      maybe mempty ("email" .=) customer__email <>
      maybe mempty ("invoice_prefix" .=) customer__invoicePrefix <>
      maybe mempty ("name" .=) customer__name <>
      maybe mempty ("phone" .=) customer__phone <>
      maybe mempty ("preferred_locales" .=) customer__preferredLocales <>
      maybe mempty ("shipping" .=) customer__shipping <>
      maybe mempty ("tax_exempt" .=) customer__taxExempt <>
      maybe mempty ("tax_info" .=) customer__taxInfo <>
      maybe mempty ("tax_info_verification" .=) customer__taxInfoVerification
      )

-- Describes: "customer_balance_transaction"

data CustomerBalanceTransaction
  = CustomerBalanceTransaction
    { customerBalanceTransaction__id :: (Id CustomerBalanceTransaction)
    {- ^ Unique identifier for the object. -}
    , customerBalanceTransaction__object :: CustomerBalanceTransaction_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , customerBalanceTransaction__livemode :: Bool
    {- ^ Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. -}
    , customerBalanceTransaction__amount :: Int
    {- ^ The amount of the transaction. A negative value is a credit for the customer's balance, and a positive value is a debit to the customer's `balance`. -}
    , customerBalanceTransaction__created :: POSIXTime
    {- ^ Time at which the object was created. Measured in seconds since the Unix epoch. -}
    , customerBalanceTransaction__currency :: Text
    {- ^ Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). -}
    , customerBalanceTransaction__customer :: Expandable '[Const (Customer)]
    {- ^ The ID of the customer the transaction belongs to. -}
    , customerBalanceTransaction__endingBalance :: Int
    {- ^ The customer's `balance` after the transaction was applied. A negative value decreases the amount due on the customer's next invoice. A positive value increases the amount due on the customer's next invoice. -}
    , customerBalanceTransaction__type :: CustomerBalanceTransaction_Type
    {- ^ Transaction type: `adjustment`, `applied_to_invoice`, `credit_note`, `initial`, `invoice_too_large`, `invoice_too_small`, or `unspent_receiver_credit`. See the [Customer Balance page](https://stripe.com/docs/billing/customer/balance#types) to learn more about transaction types. -}
    , customerBalanceTransaction__creditNote :: Maybe (Expandable '[Const (CreditNote)])
    {- ^ The ID of the credit note (if any) related to the transaction. -}
    , customerBalanceTransaction__description :: Maybe (Text)
    {- ^ An arbitrary string attached to the object. Often useful for displaying to users. -}
    , customerBalanceTransaction__invoice :: Maybe (Expandable '[Const (Invoice)])
    {- ^ The ID of the invoice (if any) related to the transaction. -}
    , customerBalanceTransaction__metadata :: Maybe (Object)
    {- ^ Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. -}
    } deriving (Show, Eq, Generic)

instance FromJSON CustomerBalanceTransaction where
  parseJSON = withObject "CustomerBalanceTransaction" parseCtors
    where
      parseCtors o = parseCustomerBalanceTransaction o
      parseCustomerBalanceTransaction o = do
        customerBalanceTransaction__id <- o .: "id"
        customerBalanceTransaction__object <- o .: "object"
        customerBalanceTransaction__livemode <- o .: "livemode"
        customerBalanceTransaction__amount <- o .: "amount"
        customerBalanceTransaction__created <- o .: "created"
        customerBalanceTransaction__currency <- o .: "currency"
        customerBalanceTransaction__customer <- o .: "customer"
        customerBalanceTransaction__endingBalance <- o .: "ending_balance"
        customerBalanceTransaction__type <- o .: "type"
        customerBalanceTransaction__creditNote <- o .:? "credit_note"
        customerBalanceTransaction__description <- o .:? "description"
        customerBalanceTransaction__invoice <- o .:? "invoice"
        customerBalanceTransaction__metadata <- o .:? "metadata"
        pure CustomerBalanceTransaction{..}

instance ToJSON CustomerBalanceTransaction where
  toJSON CustomerBalanceTransaction{..} = object
    (
      ("id" .= customerBalanceTransaction__id) :
      ("object" .= customerBalanceTransaction__object) :
      ("livemode" .= customerBalanceTransaction__livemode) :
      ("amount" .= customerBalanceTransaction__amount) :
      ("created" .= customerBalanceTransaction__created) :
      ("currency" .= customerBalanceTransaction__currency) :
      ("customer" .= customerBalanceTransaction__customer) :
      ("ending_balance" .= customerBalanceTransaction__endingBalance) :
      ("type" .= customerBalanceTransaction__type) :
      (fmap ("credit_note" .=) customerBalanceTransaction__creditNote) >?>
      (fmap ("description" .=) customerBalanceTransaction__description) >?>
      (fmap ("invoice" .=) customerBalanceTransaction__invoice) >?>
      (fmap ("metadata" .=) customerBalanceTransaction__metadata) >?>
      []
    )
  toEncoding CustomerBalanceTransaction{..} = pairs (
      "id" .= customerBalanceTransaction__id <>
      "object" .= customerBalanceTransaction__object <>
      "livemode" .= customerBalanceTransaction__livemode <>
      "amount" .= customerBalanceTransaction__amount <>
      "created" .= customerBalanceTransaction__created <>
      "currency" .= customerBalanceTransaction__currency <>
      "customer" .= customerBalanceTransaction__customer <>
      "ending_balance" .= customerBalanceTransaction__endingBalance <>
      "type" .= customerBalanceTransaction__type <>
      maybe mempty ("credit_note" .=) customerBalanceTransaction__creditNote <>
      maybe mempty ("description" .=) customerBalanceTransaction__description <>
      maybe mempty ("invoice" .=) customerBalanceTransaction__invoice <>
      maybe mempty ("metadata" .=) customerBalanceTransaction__metadata
      )

-- Describes: "deleted_account"

data DeletedAccount
  = DeletedAccount
    { deletedAccount__id :: (Id DeletedAccount)
    {- ^ Unique identifier for the object. -}
    , deletedAccount__object :: DeletedAccount_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , deletedAccount__deleted :: Bool
    {- ^ Always true for a deleted object -}
    } deriving (Show, Eq, Generic)

instance FromJSON DeletedAccount where
  parseJSON = withObject "DeletedAccount" parseCtors
    where
      parseCtors o = parseDeletedAccount o
      parseDeletedAccount o = do
        deletedAccount__id <- o .: "id"
        deletedAccount__object <- o .: "object"
        deletedAccount__deleted <- o .: "deleted"
        pure DeletedAccount{..}

instance ToJSON DeletedAccount where
  toJSON DeletedAccount{..} = object
    (
      ("id" .= deletedAccount__id) :
      ("object" .= deletedAccount__object) :
      ("deleted" .= deletedAccount__deleted) :
      []
    )
  toEncoding DeletedAccount{..} = pairs (
      "id" .= deletedAccount__id <>
      "object" .= deletedAccount__object <>
      "deleted" .= deletedAccount__deleted
      )

-- Describes: "deleted_alipay_account"

data DeletedAlipayAccount
  = DeletedAlipayAccount
    { deletedAlipayAccount__id :: Text
    {- ^ Unique identifier for the object. -}
    , deletedAlipayAccount__object :: DeletedAlipayAccount_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , deletedAlipayAccount__deleted :: Bool
    {- ^ Always true for a deleted object -}
    } deriving (Show, Eq, Generic)

instance FromJSON DeletedAlipayAccount where
  parseJSON = withObject "DeletedAlipayAccount" parseCtors
    where
      parseCtors o = parseDeletedAlipayAccount o
      parseDeletedAlipayAccount o = do
        deletedAlipayAccount__id <- o .: "id"
        deletedAlipayAccount__object <- o .: "object"
        deletedAlipayAccount__deleted <- o .: "deleted"
        pure DeletedAlipayAccount{..}

instance ToJSON DeletedAlipayAccount where
  toJSON DeletedAlipayAccount{..} = object
    (
      ("id" .= deletedAlipayAccount__id) :
      ("object" .= deletedAlipayAccount__object) :
      ("deleted" .= deletedAlipayAccount__deleted) :
      []
    )
  toEncoding DeletedAlipayAccount{..} = pairs (
      "id" .= deletedAlipayAccount__id <>
      "object" .= deletedAlipayAccount__object <>
      "deleted" .= deletedAlipayAccount__deleted
      )

-- Describes: "deleted_apple_pay_domain"

data DeletedApplePayDomain
  = DeletedApplePayDomain
    { deletedApplePayDomain__id :: (Id DeletedApplePayDomain)
    {- ^ Unique identifier for the object. -}
    , deletedApplePayDomain__object :: DeletedApplePayDomain_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , deletedApplePayDomain__deleted :: Bool
    {- ^ Always true for a deleted object -}
    } deriving (Show, Eq, Generic)

instance FromJSON DeletedApplePayDomain where
  parseJSON = withObject "DeletedApplePayDomain" parseCtors
    where
      parseCtors o = parseDeletedApplePayDomain o
      parseDeletedApplePayDomain o = do
        deletedApplePayDomain__id <- o .: "id"
        deletedApplePayDomain__object <- o .: "object"
        deletedApplePayDomain__deleted <- o .: "deleted"
        pure DeletedApplePayDomain{..}

instance ToJSON DeletedApplePayDomain where
  toJSON DeletedApplePayDomain{..} = object
    (
      ("id" .= deletedApplePayDomain__id) :
      ("object" .= deletedApplePayDomain__object) :
      ("deleted" .= deletedApplePayDomain__deleted) :
      []
    )
  toEncoding DeletedApplePayDomain{..} = pairs (
      "id" .= deletedApplePayDomain__id <>
      "object" .= deletedApplePayDomain__object <>
      "deleted" .= deletedApplePayDomain__deleted
      )

-- Describes: "deleted_bank_account"

data DeletedBankAccount
  = DeletedBankAccount
    { deletedBankAccount__id :: Text
    {- ^ Unique identifier for the object. -}
    , deletedBankAccount__object :: DeletedBankAccount_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , deletedBankAccount__deleted :: Bool
    {- ^ Always true for a deleted object -}
    , deletedBankAccount__currency :: Maybe (Text)
    {- ^ Three-letter [ISO code for the currency](https://stripe.com/docs/payouts) paid out to the bank account. -}
    } deriving (Show, Eq, Generic)

instance FromJSON DeletedBankAccount where
  parseJSON = withObject "DeletedBankAccount" parseCtors
    where
      parseCtors o = parseDeletedBankAccount o
      parseDeletedBankAccount o = do
        deletedBankAccount__id <- o .: "id"
        deletedBankAccount__object <- o .: "object"
        deletedBankAccount__deleted <- o .: "deleted"
        deletedBankAccount__currency <- o .:? "currency"
        pure DeletedBankAccount{..}

instance ToJSON DeletedBankAccount where
  toJSON DeletedBankAccount{..} = object
    (
      ("id" .= deletedBankAccount__id) :
      ("object" .= deletedBankAccount__object) :
      ("deleted" .= deletedBankAccount__deleted) :
      (fmap ("currency" .=) deletedBankAccount__currency) >?>
      []
    )
  toEncoding DeletedBankAccount{..} = pairs (
      "id" .= deletedBankAccount__id <>
      "object" .= deletedBankAccount__object <>
      "deleted" .= deletedBankAccount__deleted <>
      maybe mempty ("currency" .=) deletedBankAccount__currency
      )

-- Describes: "deleted_bitcoin_receiver"

data DeletedBitcoinReceiver
  = DeletedBitcoinReceiver
    { deletedBitcoinReceiver__id :: Text
    {- ^ Unique identifier for the object. -}
    , deletedBitcoinReceiver__object :: DeletedBitcoinReceiver_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , deletedBitcoinReceiver__deleted :: Bool
    {- ^ Always true for a deleted object -}
    } deriving (Show, Eq, Generic)

instance FromJSON DeletedBitcoinReceiver where
  parseJSON = withObject "DeletedBitcoinReceiver" parseCtors
    where
      parseCtors o = parseDeletedBitcoinReceiver o
      parseDeletedBitcoinReceiver o = do
        deletedBitcoinReceiver__id <- o .: "id"
        deletedBitcoinReceiver__object <- o .: "object"
        deletedBitcoinReceiver__deleted <- o .: "deleted"
        pure DeletedBitcoinReceiver{..}

instance ToJSON DeletedBitcoinReceiver where
  toJSON DeletedBitcoinReceiver{..} = object
    (
      ("id" .= deletedBitcoinReceiver__id) :
      ("object" .= deletedBitcoinReceiver__object) :
      ("deleted" .= deletedBitcoinReceiver__deleted) :
      []
    )
  toEncoding DeletedBitcoinReceiver{..} = pairs (
      "id" .= deletedBitcoinReceiver__id <>
      "object" .= deletedBitcoinReceiver__object <>
      "deleted" .= deletedBitcoinReceiver__deleted
      )

-- Describes: "deleted_card"

data DeletedCard
  = DeletedCard
    { deletedCard__id :: Text
    {- ^ Unique identifier for the object. -}
    , deletedCard__object :: DeletedCard_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , deletedCard__deleted :: Bool
    {- ^ Always true for a deleted object -}
    , deletedCard__currency :: Maybe (Text)
    {- ^ Three-letter [ISO code for the currency](https://stripe.com/docs/payouts) paid out to the bank account. -}
    } deriving (Show, Eq, Generic)

instance FromJSON DeletedCard where
  parseJSON = withObject "DeletedCard" parseCtors
    where
      parseCtors o = parseDeletedCard o
      parseDeletedCard o = do
        deletedCard__id <- o .: "id"
        deletedCard__object <- o .: "object"
        deletedCard__deleted <- o .: "deleted"
        deletedCard__currency <- o .:? "currency"
        pure DeletedCard{..}

instance ToJSON DeletedCard where
  toJSON DeletedCard{..} = object
    (
      ("id" .= deletedCard__id) :
      ("object" .= deletedCard__object) :
      ("deleted" .= deletedCard__deleted) :
      (fmap ("currency" .=) deletedCard__currency) >?>
      []
    )
  toEncoding DeletedCard{..} = pairs (
      "id" .= deletedCard__id <>
      "object" .= deletedCard__object <>
      "deleted" .= deletedCard__deleted <>
      maybe mempty ("currency" .=) deletedCard__currency
      )

-- Describes: "deleted_coupon"

data DeletedCoupon
  = DeletedCoupon
    { deletedCoupon__id :: (Id DeletedCoupon)
    {- ^ Unique identifier for the object. -}
    , deletedCoupon__object :: DeletedCoupon_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , deletedCoupon__deleted :: Bool
    {- ^ Always true for a deleted object -}
    } deriving (Show, Eq, Generic)

instance FromJSON DeletedCoupon where
  parseJSON = withObject "DeletedCoupon" parseCtors
    where
      parseCtors o = parseDeletedCoupon o
      parseDeletedCoupon o = do
        deletedCoupon__id <- o .: "id"
        deletedCoupon__object <- o .: "object"
        deletedCoupon__deleted <- o .: "deleted"
        pure DeletedCoupon{..}

instance ToJSON DeletedCoupon where
  toJSON DeletedCoupon{..} = object
    (
      ("id" .= deletedCoupon__id) :
      ("object" .= deletedCoupon__object) :
      ("deleted" .= deletedCoupon__deleted) :
      []
    )
  toEncoding DeletedCoupon{..} = pairs (
      "id" .= deletedCoupon__id <>
      "object" .= deletedCoupon__object <>
      "deleted" .= deletedCoupon__deleted
      )

-- Describes: "deleted_customer"

data DeletedCustomer
  = DeletedCustomer
    { deletedCustomer__id :: (Id DeletedCustomer)
    {- ^ Unique identifier for the object. -}
    , deletedCustomer__object :: DeletedCustomer_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , deletedCustomer__deleted :: Bool
    {- ^ Always true for a deleted object -}
    } deriving (Show, Eq, Generic)

instance FromJSON DeletedCustomer where
  parseJSON = withObject "DeletedCustomer" parseCtors
    where
      parseCtors o = parseDeletedCustomer o
      parseDeletedCustomer o = do
        deletedCustomer__id <- o .: "id"
        deletedCustomer__object <- o .: "object"
        deletedCustomer__deleted <- o .: "deleted"
        pure DeletedCustomer{..}

instance ToJSON DeletedCustomer where
  toJSON DeletedCustomer{..} = object
    (
      ("id" .= deletedCustomer__id) :
      ("object" .= deletedCustomer__object) :
      ("deleted" .= deletedCustomer__deleted) :
      []
    )
  toEncoding DeletedCustomer{..} = pairs (
      "id" .= deletedCustomer__id <>
      "object" .= deletedCustomer__object <>
      "deleted" .= deletedCustomer__deleted
      )

-- Describes: "deleted_discount"

data DeletedDiscount
  = DeletedDiscount
    { deletedDiscount__object :: DeletedDiscount_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , deletedDiscount__deleted :: Bool
    {- ^ Always true for a deleted object -}
    } deriving (Show, Eq, Generic)

instance FromJSON DeletedDiscount where
  parseJSON = withObject "DeletedDiscount" parseCtors
    where
      parseCtors o = parseDeletedDiscount o
      parseDeletedDiscount o = do
        deletedDiscount__object <- o .: "object"
        deletedDiscount__deleted <- o .: "deleted"
        pure DeletedDiscount{..}

instance ToJSON DeletedDiscount where
  toJSON DeletedDiscount{..} = object
    (
      ("object" .= deletedDiscount__object) :
      ("deleted" .= deletedDiscount__deleted) :
      []
    )
  toEncoding DeletedDiscount{..} = pairs (
      "object" .= deletedDiscount__object <>
      "deleted" .= deletedDiscount__deleted
      )

-- Describes: "deleted_external_account"

data DeletedExternalAccount
  = DeletedExternalAccount
    {
    } deriving (Show, Eq, Generic)

instance FromJSON DeletedExternalAccount where
  parseJSON = withObject "DeletedExternalAccount" parseCtors
    where
      parseCtors o = parseDeletedExternalAccount o
      parseDeletedExternalAccount o = do
        pure DeletedExternalAccount

instance ToJSON DeletedExternalAccount where
  toJSON DeletedExternalAccount = object
    (
      []
    )
  toEncoding DeletedExternalAccount = pairs (
      mempty
      )

-- Describes: "deleted_invoice"

data DeletedInvoice
  = DeletedInvoice
    { deletedInvoice__id :: (Id DeletedInvoice)
    {- ^ Unique identifier for the object. -}
    , deletedInvoice__object :: DeletedInvoice_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , deletedInvoice__deleted :: Bool
    {- ^ Always true for a deleted object -}
    } deriving (Show, Eq, Generic)

instance FromJSON DeletedInvoice where
  parseJSON = withObject "DeletedInvoice" parseCtors
    where
      parseCtors o = parseDeletedInvoice o
      parseDeletedInvoice o = do
        deletedInvoice__id <- o .: "id"
        deletedInvoice__object <- o .: "object"
        deletedInvoice__deleted <- o .: "deleted"
        pure DeletedInvoice{..}

instance ToJSON DeletedInvoice where
  toJSON DeletedInvoice{..} = object
    (
      ("id" .= deletedInvoice__id) :
      ("object" .= deletedInvoice__object) :
      ("deleted" .= deletedInvoice__deleted) :
      []
    )
  toEncoding DeletedInvoice{..} = pairs (
      "id" .= deletedInvoice__id <>
      "object" .= deletedInvoice__object <>
      "deleted" .= deletedInvoice__deleted
      )

-- Describes: "deleted_invoiceitem"

data DeletedInvoiceitem
  = DeletedInvoiceitem
    { deletedInvoiceitem__id :: (Id DeletedInvoiceitem)
    {- ^ Unique identifier for the object. -}
    , deletedInvoiceitem__object :: DeletedInvoiceitem_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , deletedInvoiceitem__deleted :: Bool
    {- ^ Always true for a deleted object -}
    } deriving (Show, Eq, Generic)

instance FromJSON DeletedInvoiceitem where
  parseJSON = withObject "DeletedInvoiceitem" parseCtors
    where
      parseCtors o = parseDeletedInvoiceitem o
      parseDeletedInvoiceitem o = do
        deletedInvoiceitem__id <- o .: "id"
        deletedInvoiceitem__object <- o .: "object"
        deletedInvoiceitem__deleted <- o .: "deleted"
        pure DeletedInvoiceitem{..}

instance ToJSON DeletedInvoiceitem where
  toJSON DeletedInvoiceitem{..} = object
    (
      ("id" .= deletedInvoiceitem__id) :
      ("object" .= deletedInvoiceitem__object) :
      ("deleted" .= deletedInvoiceitem__deleted) :
      []
    )
  toEncoding DeletedInvoiceitem{..} = pairs (
      "id" .= deletedInvoiceitem__id <>
      "object" .= deletedInvoiceitem__object <>
      "deleted" .= deletedInvoiceitem__deleted
      )

-- Describes: "deleted_payment_source"

data DeletedPaymentSource
  = DeletedPaymentSource
    {
    } deriving (Show, Eq, Generic)

instance FromJSON DeletedPaymentSource where
  parseJSON = withObject "DeletedPaymentSource" parseCtors
    where
      parseCtors o = parseDeletedPaymentSource o
      parseDeletedPaymentSource o = do
        pure DeletedPaymentSource

instance ToJSON DeletedPaymentSource where
  toJSON DeletedPaymentSource = object
    (
      []
    )
  toEncoding DeletedPaymentSource = pairs (
      mempty
      )

-- Describes: "deleted_person"

data DeletedPerson
  = DeletedPerson
    { deletedPerson__id :: (Id DeletedPerson)
    {- ^ Unique identifier for the object. -}
    , deletedPerson__object :: DeletedPerson_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , deletedPerson__deleted :: Bool
    {- ^ Always true for a deleted object -}
    } deriving (Show, Eq, Generic)

instance FromJSON DeletedPerson where
  parseJSON = withObject "DeletedPerson" parseCtors
    where
      parseCtors o = parseDeletedPerson o
      parseDeletedPerson o = do
        deletedPerson__id <- o .: "id"
        deletedPerson__object <- o .: "object"
        deletedPerson__deleted <- o .: "deleted"
        pure DeletedPerson{..}

instance ToJSON DeletedPerson where
  toJSON DeletedPerson{..} = object
    (
      ("id" .= deletedPerson__id) :
      ("object" .= deletedPerson__object) :
      ("deleted" .= deletedPerson__deleted) :
      []
    )
  toEncoding DeletedPerson{..} = pairs (
      "id" .= deletedPerson__id <>
      "object" .= deletedPerson__object <>
      "deleted" .= deletedPerson__deleted
      )

-- Describes: "deleted_plan"

data DeletedPlan
  = DeletedPlan
    { deletedPlan__id :: (Id DeletedPlan)
    {- ^ Unique identifier for the object. -}
    , deletedPlan__object :: DeletedPlan_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , deletedPlan__deleted :: Bool
    {- ^ Always true for a deleted object -}
    } deriving (Show, Eq, Generic)

instance FromJSON DeletedPlan where
  parseJSON = withObject "DeletedPlan" parseCtors
    where
      parseCtors o = parseDeletedPlan o
      parseDeletedPlan o = do
        deletedPlan__id <- o .: "id"
        deletedPlan__object <- o .: "object"
        deletedPlan__deleted <- o .: "deleted"
        pure DeletedPlan{..}

instance ToJSON DeletedPlan where
  toJSON DeletedPlan{..} = object
    (
      ("id" .= deletedPlan__id) :
      ("object" .= deletedPlan__object) :
      ("deleted" .= deletedPlan__deleted) :
      []
    )
  toEncoding DeletedPlan{..} = pairs (
      "id" .= deletedPlan__id <>
      "object" .= deletedPlan__object <>
      "deleted" .= deletedPlan__deleted
      )

-- Describes: "deleted_product"

data DeletedProduct
  = DeletedProduct
    { deletedProduct__id :: (Id DeletedProduct)
    {- ^ Unique identifier for the object. -}
    , deletedProduct__object :: DeletedProduct_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , deletedProduct__deleted :: Bool
    {- ^ Always true for a deleted object -}
    } deriving (Show, Eq, Generic)

instance FromJSON DeletedProduct where
  parseJSON = withObject "DeletedProduct" parseCtors
    where
      parseCtors o = parseDeletedProduct o
      parseDeletedProduct o = do
        deletedProduct__id <- o .: "id"
        deletedProduct__object <- o .: "object"
        deletedProduct__deleted <- o .: "deleted"
        pure DeletedProduct{..}

instance ToJSON DeletedProduct where
  toJSON DeletedProduct{..} = object
    (
      ("id" .= deletedProduct__id) :
      ("object" .= deletedProduct__object) :
      ("deleted" .= deletedProduct__deleted) :
      []
    )
  toEncoding DeletedProduct{..} = pairs (
      "id" .= deletedProduct__id <>
      "object" .= deletedProduct__object <>
      "deleted" .= deletedProduct__deleted
      )

-- Describes: "deleted_radar.value_list"

data DeletedRadar_ValueList
  = DeletedRadar_ValueList
    { deletedRadar_valueList__id :: (Id DeletedRadar_ValueList)
    {- ^ Unique identifier for the object. -}
    , deletedRadar_valueList__object :: DeletedRadar_ValueList_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , deletedRadar_valueList__deleted :: Bool
    {- ^ Always true for a deleted object -}
    } deriving (Show, Eq, Generic)

instance FromJSON DeletedRadar_ValueList where
  parseJSON = withObject "DeletedRadar_ValueList" parseCtors
    where
      parseCtors o = parseDeletedRadar_ValueList o
      parseDeletedRadar_ValueList o = do
        deletedRadar_valueList__id <- o .: "id"
        deletedRadar_valueList__object <- o .: "object"
        deletedRadar_valueList__deleted <- o .: "deleted"
        pure DeletedRadar_ValueList{..}

instance ToJSON DeletedRadar_ValueList where
  toJSON DeletedRadar_ValueList{..} = object
    (
      ("id" .= deletedRadar_valueList__id) :
      ("object" .= deletedRadar_valueList__object) :
      ("deleted" .= deletedRadar_valueList__deleted) :
      []
    )
  toEncoding DeletedRadar_ValueList{..} = pairs (
      "id" .= deletedRadar_valueList__id <>
      "object" .= deletedRadar_valueList__object <>
      "deleted" .= deletedRadar_valueList__deleted
      )

-- Describes: "deleted_radar.value_list_item"

data DeletedRadar_ValueListItem
  = DeletedRadar_ValueListItem
    { deletedRadar_valueListItem__id :: (Id DeletedRadar_ValueListItem)
    {- ^ Unique identifier for the object. -}
    , deletedRadar_valueListItem__object :: DeletedRadar_ValueListItem_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , deletedRadar_valueListItem__deleted :: Bool
    {- ^ Always true for a deleted object -}
    } deriving (Show, Eq, Generic)

instance FromJSON DeletedRadar_ValueListItem where
  parseJSON = withObject "DeletedRadar_ValueListItem" parseCtors
    where
      parseCtors o = parseDeletedRadar_ValueListItem o
      parseDeletedRadar_ValueListItem o = do
        deletedRadar_valueListItem__id <- o .: "id"
        deletedRadar_valueListItem__object <- o .: "object"
        deletedRadar_valueListItem__deleted <- o .: "deleted"
        pure DeletedRadar_ValueListItem{..}

instance ToJSON DeletedRadar_ValueListItem where
  toJSON DeletedRadar_ValueListItem{..} = object
    (
      ("id" .= deletedRadar_valueListItem__id) :
      ("object" .= deletedRadar_valueListItem__object) :
      ("deleted" .= deletedRadar_valueListItem__deleted) :
      []
    )
  toEncoding DeletedRadar_ValueListItem{..} = pairs (
      "id" .= deletedRadar_valueListItem__id <>
      "object" .= deletedRadar_valueListItem__object <>
      "deleted" .= deletedRadar_valueListItem__deleted
      )

-- Describes: "deleted_recipient"

data DeletedRecipient
  = DeletedRecipient
    { deletedRecipient__id :: (Id DeletedRecipient)
    {- ^ Unique identifier for the object. -}
    , deletedRecipient__object :: DeletedRecipient_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , deletedRecipient__deleted :: Bool
    {- ^ Always true for a deleted object -}
    } deriving (Show, Eq, Generic)

instance FromJSON DeletedRecipient where
  parseJSON = withObject "DeletedRecipient" parseCtors
    where
      parseCtors o = parseDeletedRecipient o
      parseDeletedRecipient o = do
        deletedRecipient__id <- o .: "id"
        deletedRecipient__object <- o .: "object"
        deletedRecipient__deleted <- o .: "deleted"
        pure DeletedRecipient{..}

instance ToJSON DeletedRecipient where
  toJSON DeletedRecipient{..} = object
    (
      ("id" .= deletedRecipient__id) :
      ("object" .= deletedRecipient__object) :
      ("deleted" .= deletedRecipient__deleted) :
      []
    )
  toEncoding DeletedRecipient{..} = pairs (
      "id" .= deletedRecipient__id <>
      "object" .= deletedRecipient__object <>
      "deleted" .= deletedRecipient__deleted
      )

-- Describes: "deleted_sku"

data DeletedSku
  = DeletedSku
    { deletedSku__id :: (Id DeletedSku)
    {- ^ Unique identifier for the object. -}
    , deletedSku__object :: DeletedSku_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , deletedSku__deleted :: Bool
    {- ^ Always true for a deleted object -}
    } deriving (Show, Eq, Generic)

instance FromJSON DeletedSku where
  parseJSON = withObject "DeletedSku" parseCtors
    where
      parseCtors o = parseDeletedSku o
      parseDeletedSku o = do
        deletedSku__id <- o .: "id"
        deletedSku__object <- o .: "object"
        deletedSku__deleted <- o .: "deleted"
        pure DeletedSku{..}

instance ToJSON DeletedSku where
  toJSON DeletedSku{..} = object
    (
      ("id" .= deletedSku__id) :
      ("object" .= deletedSku__object) :
      ("deleted" .= deletedSku__deleted) :
      []
    )
  toEncoding DeletedSku{..} = pairs (
      "id" .= deletedSku__id <>
      "object" .= deletedSku__object <>
      "deleted" .= deletedSku__deleted
      )

-- Describes: "deleted_subscription_item"

data DeletedSubscriptionItem
  = DeletedSubscriptionItem
    { deletedSubscriptionItem__id :: (Id DeletedSubscriptionItem)
    {- ^ Unique identifier for the object. -}
    , deletedSubscriptionItem__object :: DeletedSubscriptionItem_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , deletedSubscriptionItem__deleted :: Bool
    {- ^ Always true for a deleted object -}
    } deriving (Show, Eq, Generic)

instance FromJSON DeletedSubscriptionItem where
  parseJSON = withObject "DeletedSubscriptionItem" parseCtors
    where
      parseCtors o = parseDeletedSubscriptionItem o
      parseDeletedSubscriptionItem o = do
        deletedSubscriptionItem__id <- o .: "id"
        deletedSubscriptionItem__object <- o .: "object"
        deletedSubscriptionItem__deleted <- o .: "deleted"
        pure DeletedSubscriptionItem{..}

instance ToJSON DeletedSubscriptionItem where
  toJSON DeletedSubscriptionItem{..} = object
    (
      ("id" .= deletedSubscriptionItem__id) :
      ("object" .= deletedSubscriptionItem__object) :
      ("deleted" .= deletedSubscriptionItem__deleted) :
      []
    )
  toEncoding DeletedSubscriptionItem{..} = pairs (
      "id" .= deletedSubscriptionItem__id <>
      "object" .= deletedSubscriptionItem__object <>
      "deleted" .= deletedSubscriptionItem__deleted
      )

-- Describes: "deleted_tax_id"

data DeletedTaxId
  = DeletedTaxId
    { deletedTaxId__id :: (Id DeletedTaxId)
    {- ^ Unique identifier for the object. -}
    , deletedTaxId__object :: DeletedTaxId_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , deletedTaxId__deleted :: Bool
    {- ^ Always true for a deleted object -}
    } deriving (Show, Eq, Generic)

instance FromJSON DeletedTaxId where
  parseJSON = withObject "DeletedTaxId" parseCtors
    where
      parseCtors o = parseDeletedTaxId o
      parseDeletedTaxId o = do
        deletedTaxId__id <- o .: "id"
        deletedTaxId__object <- o .: "object"
        deletedTaxId__deleted <- o .: "deleted"
        pure DeletedTaxId{..}

instance ToJSON DeletedTaxId where
  toJSON DeletedTaxId{..} = object
    (
      ("id" .= deletedTaxId__id) :
      ("object" .= deletedTaxId__object) :
      ("deleted" .= deletedTaxId__deleted) :
      []
    )
  toEncoding DeletedTaxId{..} = pairs (
      "id" .= deletedTaxId__id <>
      "object" .= deletedTaxId__object <>
      "deleted" .= deletedTaxId__deleted
      )

-- Describes: "deleted_terminal.location"

data DeletedTerminal_Location
  = DeletedTerminal_Location
    { deletedTerminal_location__id :: (Id DeletedTerminal_Location)
    {- ^ Unique identifier for the object. -}
    , deletedTerminal_location__object :: DeletedTerminal_Location_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , deletedTerminal_location__deleted :: Bool
    {- ^ Always true for a deleted object -}
    } deriving (Show, Eq, Generic)

instance FromJSON DeletedTerminal_Location where
  parseJSON = withObject "DeletedTerminal_Location" parseCtors
    where
      parseCtors o = parseDeletedTerminal_Location o
      parseDeletedTerminal_Location o = do
        deletedTerminal_location__id <- o .: "id"
        deletedTerminal_location__object <- o .: "object"
        deletedTerminal_location__deleted <- o .: "deleted"
        pure DeletedTerminal_Location{..}

instance ToJSON DeletedTerminal_Location where
  toJSON DeletedTerminal_Location{..} = object
    (
      ("id" .= deletedTerminal_location__id) :
      ("object" .= deletedTerminal_location__object) :
      ("deleted" .= deletedTerminal_location__deleted) :
      []
    )
  toEncoding DeletedTerminal_Location{..} = pairs (
      "id" .= deletedTerminal_location__id <>
      "object" .= deletedTerminal_location__object <>
      "deleted" .= deletedTerminal_location__deleted
      )

-- Describes: "deleted_terminal.reader"

data DeletedTerminal_Reader
  = DeletedTerminal_Reader
    { deletedTerminal_reader__id :: (Id DeletedTerminal_Reader)
    {- ^ Unique identifier for the object. -}
    , deletedTerminal_reader__object :: DeletedTerminal_Reader_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , deletedTerminal_reader__deleted :: Bool
    {- ^ Always true for a deleted object -}
    } deriving (Show, Eq, Generic)

instance FromJSON DeletedTerminal_Reader where
  parseJSON = withObject "DeletedTerminal_Reader" parseCtors
    where
      parseCtors o = parseDeletedTerminal_Reader o
      parseDeletedTerminal_Reader o = do
        deletedTerminal_reader__id <- o .: "id"
        deletedTerminal_reader__object <- o .: "object"
        deletedTerminal_reader__deleted <- o .: "deleted"
        pure DeletedTerminal_Reader{..}

instance ToJSON DeletedTerminal_Reader where
  toJSON DeletedTerminal_Reader{..} = object
    (
      ("id" .= deletedTerminal_reader__id) :
      ("object" .= deletedTerminal_reader__object) :
      ("deleted" .= deletedTerminal_reader__deleted) :
      []
    )
  toEncoding DeletedTerminal_Reader{..} = pairs (
      "id" .= deletedTerminal_reader__id <>
      "object" .= deletedTerminal_reader__object <>
      "deleted" .= deletedTerminal_reader__deleted
      )

-- Describes: "deleted_webhook_endpoint"

data DeletedWebhookEndpoint
  = DeletedWebhookEndpoint
    { deletedWebhookEndpoint__id :: (Id DeletedWebhookEndpoint)
    {- ^ Unique identifier for the object. -}
    , deletedWebhookEndpoint__object :: DeletedWebhookEndpoint_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , deletedWebhookEndpoint__deleted :: Bool
    {- ^ Always true for a deleted object -}
    } deriving (Show, Eq, Generic)

instance FromJSON DeletedWebhookEndpoint where
  parseJSON = withObject "DeletedWebhookEndpoint" parseCtors
    where
      parseCtors o = parseDeletedWebhookEndpoint o
      parseDeletedWebhookEndpoint o = do
        deletedWebhookEndpoint__id <- o .: "id"
        deletedWebhookEndpoint__object <- o .: "object"
        deletedWebhookEndpoint__deleted <- o .: "deleted"
        pure DeletedWebhookEndpoint{..}

instance ToJSON DeletedWebhookEndpoint where
  toJSON DeletedWebhookEndpoint{..} = object
    (
      ("id" .= deletedWebhookEndpoint__id) :
      ("object" .= deletedWebhookEndpoint__object) :
      ("deleted" .= deletedWebhookEndpoint__deleted) :
      []
    )
  toEncoding DeletedWebhookEndpoint{..} = pairs (
      "id" .= deletedWebhookEndpoint__id <>
      "object" .= deletedWebhookEndpoint__object <>
      "deleted" .= deletedWebhookEndpoint__deleted
      )

-- Describes: "delivery_estimate"

data DeliveryEstimate
  = DeliveryEstimate
    { deliveryEstimate__date :: Text
    {- ^ If `type` is `"exact"`, `date` will be the expected delivery date in the format YYYY-MM-DD. -}
    , deliveryEstimate__earliest :: Text
    {- ^ If `type` is `"range"`, `earliest` will be be the earliest delivery date in the format YYYY-MM-DD. -}
    , deliveryEstimate__latest :: Text
    {- ^ If `type` is `"range"`, `latest` will be the latest delivery date in the format YYYY-MM-DD. -}
    , deliveryEstimate__type :: Text
    {- ^ The type of estimate. Must be either `"range"` or `"exact"`. -}
    } deriving (Show, Eq, Generic)

instance FromJSON DeliveryEstimate where
  parseJSON = withObject "DeliveryEstimate" parseCtors
    where
      parseCtors o = parseDeliveryEstimate o
      parseDeliveryEstimate o = do
        deliveryEstimate__date <- o .: "date"
        deliveryEstimate__earliest <- o .: "earliest"
        deliveryEstimate__latest <- o .: "latest"
        deliveryEstimate__type <- o .: "type"
        pure DeliveryEstimate{..}

instance ToJSON DeliveryEstimate where
  toJSON DeliveryEstimate{..} = object
    (
      ("date" .= deliveryEstimate__date) :
      ("earliest" .= deliveryEstimate__earliest) :
      ("latest" .= deliveryEstimate__latest) :
      ("type" .= deliveryEstimate__type) :
      []
    )
  toEncoding DeliveryEstimate{..} = pairs (
      "date" .= deliveryEstimate__date <>
      "earliest" .= deliveryEstimate__earliest <>
      "latest" .= deliveryEstimate__latest <>
      "type" .= deliveryEstimate__type
      )

-- Describes: "discount"

data Discount
  = Discount
    { discount__object :: Discount_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , discount__coupon :: Coupon
    , discount__start :: POSIXTime
    {- ^ Date that the coupon was applied. -}
    , discount__customer :: Maybe (Expandable '[Const (Customer), Const (DeletedCustomer)])
    , discount__end :: Maybe (POSIXTime)
    {- ^ If the coupon has a duration of `repeating`, the date that this discount will end. If the coupon has a duration of `once` or `forever`, this attribute will be null. -}
    , discount__subscription :: Maybe (Text)
    {- ^ The subscription that this coupon is applied to, if it is applied to a particular subscription. -}
    } deriving (Show, Eq, Generic)

instance FromJSON Discount where
  parseJSON = withObject "Discount" parseCtors
    where
      parseCtors o = parseDiscount o
      parseDiscount o = do
        discount__object <- o .: "object"
        discount__coupon <- o .: "coupon"
        discount__start <- o .: "start"
        discount__customer <- o .:? "customer"
        discount__end <- o .:? "end"
        discount__subscription <- o .:? "subscription"
        pure Discount{..}

instance ToJSON Discount where
  toJSON Discount{..} = object
    (
      ("object" .= discount__object) :
      ("coupon" .= discount__coupon) :
      ("start" .= discount__start) :
      (fmap ("customer" .=) discount__customer) >?>
      (fmap ("end" .=) discount__end) >?>
      (fmap ("subscription" .=) discount__subscription) >?>
      []
    )
  toEncoding Discount{..} = pairs (
      "object" .= discount__object <>
      "coupon" .= discount__coupon <>
      "start" .= discount__start <>
      maybe mempty ("customer" .=) discount__customer <>
      maybe mempty ("end" .=) discount__end <>
      maybe mempty ("subscription" .=) discount__subscription
      )

-- Describes: "dispute"

data Dispute
  = Dispute
    { dispute__id :: (Id Dispute)
    {- ^ Unique identifier for the object. -}
    , dispute__object :: Dispute_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , dispute__livemode :: Bool
    {- ^ Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. -}
    , dispute__amount :: Int
    {- ^ Disputed amount. Usually the amount of the charge, but can differ (usually because of currency fluctuation or because only part of the order is disputed). -}
    , dispute__balanceTransactions :: Vector (BalanceTransaction)
    {- ^ List of zero, one, or two balance transactions that show funds withdrawn and reinstated to your Stripe account as a result of this dispute. -}
    , dispute__charge :: Expandable '[Const (Charge)]
    {- ^ ID of the charge that was disputed. -}
    , dispute__created :: POSIXTime
    {- ^ Time at which the object was created. Measured in seconds since the Unix epoch. -}
    , dispute__currency :: Text
    {- ^ Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). -}
    , dispute__evidence :: DisputeEvidence
    , dispute__evidenceDetails :: DisputeEvidenceDetails
    , dispute__isChargeRefundable :: Bool
    {- ^ If true, it is still possible to refund the disputed payment. Once the payment has been fully refunded, no further funds will be withdrawn from your Stripe account as a result of this dispute. -}
    , dispute__metadata :: Object
    {- ^ Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. -}
    , dispute__reason :: Text
    {- ^ Reason given by cardholder for dispute. Possible values are `bank_cannot_process`, `check_returned`, `credit_not_processed`, `customer_initiated`, `debit_not_authorized`, `duplicate`, `fraudulent`, `general`, `incorrect_account_details`, `insufficient_funds`, `product_not_received`, `product_unacceptable`, `subscription_canceled`, or `unrecognized`. Read more about [dispute reasons](https://stripe.com/docs/disputes/categories). -}
    , dispute__status :: Dispute_Status
    {- ^ Current status of dispute. Possible values are `warning_needs_response`, `warning_under_review`, `warning_closed`, `needs_response`, `under_review`, `charge_refunded`, `won`, or `lost`. -}
    } deriving (Show, Eq, Generic)

instance FromJSON Dispute where
  parseJSON = withObject "Dispute" parseCtors
    where
      parseCtors o = parseDispute o
      parseDispute o = do
        dispute__id <- o .: "id"
        dispute__object <- o .: "object"
        dispute__livemode <- o .: "livemode"
        dispute__amount <- o .: "amount"
        dispute__balanceTransactions <- o .: "balance_transactions"
        dispute__charge <- o .: "charge"
        dispute__created <- o .: "created"
        dispute__currency <- o .: "currency"
        dispute__evidence <- o .: "evidence"
        dispute__evidenceDetails <- o .: "evidence_details"
        dispute__isChargeRefundable <- o .: "is_charge_refundable"
        dispute__metadata <- o .: "metadata"
        dispute__reason <- o .: "reason"
        dispute__status <- o .: "status"
        pure Dispute{..}

instance ToJSON Dispute where
  toJSON Dispute{..} = object
    (
      ("id" .= dispute__id) :
      ("object" .= dispute__object) :
      ("livemode" .= dispute__livemode) :
      ("amount" .= dispute__amount) :
      ("balance_transactions" .= dispute__balanceTransactions) :
      ("charge" .= dispute__charge) :
      ("created" .= dispute__created) :
      ("currency" .= dispute__currency) :
      ("evidence" .= dispute__evidence) :
      ("evidence_details" .= dispute__evidenceDetails) :
      ("is_charge_refundable" .= dispute__isChargeRefundable) :
      ("metadata" .= dispute__metadata) :
      ("reason" .= dispute__reason) :
      ("status" .= dispute__status) :
      []
    )
  toEncoding Dispute{..} = pairs (
      "id" .= dispute__id <>
      "object" .= dispute__object <>
      "livemode" .= dispute__livemode <>
      "amount" .= dispute__amount <>
      "balance_transactions" .= dispute__balanceTransactions <>
      "charge" .= dispute__charge <>
      "created" .= dispute__created <>
      "currency" .= dispute__currency <>
      "evidence" .= dispute__evidence <>
      "evidence_details" .= dispute__evidenceDetails <>
      "is_charge_refundable" .= dispute__isChargeRefundable <>
      "metadata" .= dispute__metadata <>
      "reason" .= dispute__reason <>
      "status" .= dispute__status
      )

-- Describes: "dispute_evidence"

data DisputeEvidence
  = DisputeEvidence
    { disputeEvidence__accessActivityLog :: Maybe (Text)
    {- ^ Any server or activity logs showing proof that the customer accessed or downloaded the purchased digital product. This information should include IP addresses, corresponding timestamps, and any detailed recorded activity. -}
    , disputeEvidence__billingAddress :: Maybe (Text)
    {- ^ The billing address provided by the customer. -}
    , disputeEvidence__cancellationPolicy :: Maybe (Expandable '[Const (File)])
    {- ^ (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Your subscription cancellation policy, as shown to the customer. -}
    , disputeEvidence__cancellationPolicyDisclosure :: Maybe (Text)
    {- ^ An explanation of how and when the customer was shown your refund policy prior to purchase. -}
    , disputeEvidence__cancellationRebuttal :: Maybe (Text)
    {- ^ A justification for why the customer's subscription was not canceled. -}
    , disputeEvidence__customerCommunication :: Maybe (Expandable '[Const (File)])
    {- ^ (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Any communication with the customer that you feel is relevant to your case. Examples include emails proving that the customer received the product or service, or demonstrating their use of or satisfaction with the product or service. -}
    , disputeEvidence__customerEmailAddress :: Maybe (Text)
    {- ^ The email address of the customer. -}
    , disputeEvidence__customerName :: Maybe (Text)
    {- ^ The name of the customer. -}
    , disputeEvidence__customerPurchaseIp :: Maybe (Text)
    {- ^ The IP address that the customer used when making the purchase. -}
    , disputeEvidence__customerSignature :: Maybe (Expandable '[Const (File)])
    {- ^ (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) A relevant document or contract showing the customer's signature. -}
    , disputeEvidence__duplicateChargeDocumentation :: Maybe (Expandable '[Const (File)])
    {- ^ (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Documentation for the prior charge that can uniquely identify the charge, such as a receipt, shipping label, work order, etc. This document should be paired with a similar document from the disputed payment that proves the two payments are separate. -}
    , disputeEvidence__duplicateChargeExplanation :: Maybe (Text)
    {- ^ An explanation of the difference between the disputed charge versus the prior charge that appears to be a duplicate. -}
    , disputeEvidence__duplicateChargeId :: Maybe (Text)
    {- ^ The Stripe ID for the prior charge which appears to be a duplicate of the disputed charge. -}
    , disputeEvidence__productDescription :: Maybe (Text)
    {- ^ A description of the product or service that was sold. -}
    , disputeEvidence__receipt :: Maybe (Expandable '[Const (File)])
    {- ^ (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Any receipt or message sent to the customer notifying them of the charge. -}
    , disputeEvidence__refundPolicy :: Maybe (Expandable '[Const (File)])
    {- ^ (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Your refund policy, as shown to the customer. -}
    , disputeEvidence__refundPolicyDisclosure :: Maybe (Text)
    {- ^ Documentation demonstrating that the customer was shown your refund policy prior to purchase. -}
    , disputeEvidence__refundRefusalExplanation :: Maybe (Text)
    {- ^ A justification for why the customer is not entitled to a refund. -}
    , disputeEvidence__serviceDate :: Maybe (Text)
    {- ^ The date on which the customer received or began receiving the purchased service, in a clear human-readable format. -}
    , disputeEvidence__serviceDocumentation :: Maybe (Expandable '[Const (File)])
    {- ^ (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Documentation showing proof that a service was provided to the customer. This could include a copy of a signed contract, work order, or other form of written agreement. -}
    , disputeEvidence__shippingAddress :: Maybe (Text)
    {- ^ The address to which a physical product was shipped. You should try to include as complete address information as possible. -}
    , disputeEvidence__shippingCarrier :: Maybe (Text)
    {- ^ The delivery service that shipped a physical product, such as Fedex, UPS, USPS, etc. If multiple carriers were used for this purchase, please separate them with commas. -}
    , disputeEvidence__shippingDate :: Maybe (Text)
    {- ^ The date on which a physical product began its route to the shipping address, in a clear human-readable format. -}
    , disputeEvidence__shippingDocumentation :: Maybe (Expandable '[Const (File)])
    {- ^ (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Documentation showing proof that a product was shipped to the customer at the same address the customer provided to you. This could include a copy of the shipment receipt, shipping label, etc. It should show the customer's full shipping address, if possible. -}
    , disputeEvidence__shippingTrackingNumber :: Maybe (Text)
    {- ^ The tracking number for a physical product, obtained from the delivery service. If multiple tracking numbers were generated for this purchase, please separate them with commas. -}
    , disputeEvidence__uncategorizedFile :: Maybe (Expandable '[Const (File)])
    {- ^ (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Any additional evidence or statements. -}
    , disputeEvidence__uncategorizedText :: Maybe (Text)
    {- ^ Any additional evidence or statements. -}
    } deriving (Show, Eq, Generic)

instance FromJSON DisputeEvidence where
  parseJSON = withObject "DisputeEvidence" parseCtors
    where
      parseCtors o = parseDisputeEvidence o
      parseDisputeEvidence o = do
        disputeEvidence__accessActivityLog <- o .:? "access_activity_log"
        disputeEvidence__billingAddress <- o .:? "billing_address"
        disputeEvidence__cancellationPolicy <- o .:? "cancellation_policy"
        disputeEvidence__cancellationPolicyDisclosure <- o .:? "cancellation_policy_disclosure"
        disputeEvidence__cancellationRebuttal <- o .:? "cancellation_rebuttal"
        disputeEvidence__customerCommunication <- o .:? "customer_communication"
        disputeEvidence__customerEmailAddress <- o .:? "customer_email_address"
        disputeEvidence__customerName <- o .:? "customer_name"
        disputeEvidence__customerPurchaseIp <- o .:? "customer_purchase_ip"
        disputeEvidence__customerSignature <- o .:? "customer_signature"
        disputeEvidence__duplicateChargeDocumentation <- o .:? "duplicate_charge_documentation"
        disputeEvidence__duplicateChargeExplanation <- o .:? "duplicate_charge_explanation"
        disputeEvidence__duplicateChargeId <- o .:? "duplicate_charge_id"
        disputeEvidence__productDescription <- o .:? "product_description"
        disputeEvidence__receipt <- o .:? "receipt"
        disputeEvidence__refundPolicy <- o .:? "refund_policy"
        disputeEvidence__refundPolicyDisclosure <- o .:? "refund_policy_disclosure"
        disputeEvidence__refundRefusalExplanation <- o .:? "refund_refusal_explanation"
        disputeEvidence__serviceDate <- o .:? "service_date"
        disputeEvidence__serviceDocumentation <- o .:? "service_documentation"
        disputeEvidence__shippingAddress <- o .:? "shipping_address"
        disputeEvidence__shippingCarrier <- o .:? "shipping_carrier"
        disputeEvidence__shippingDate <- o .:? "shipping_date"
        disputeEvidence__shippingDocumentation <- o .:? "shipping_documentation"
        disputeEvidence__shippingTrackingNumber <- o .:? "shipping_tracking_number"
        disputeEvidence__uncategorizedFile <- o .:? "uncategorized_file"
        disputeEvidence__uncategorizedText <- o .:? "uncategorized_text"
        pure DisputeEvidence{..}

instance ToJSON DisputeEvidence where
  toJSON DisputeEvidence{..} = object
    (
      (fmap ("access_activity_log" .=) disputeEvidence__accessActivityLog) >?>
      (fmap ("billing_address" .=) disputeEvidence__billingAddress) >?>
      (fmap ("cancellation_policy" .=) disputeEvidence__cancellationPolicy) >?>
      (fmap ("cancellation_policy_disclosure" .=) disputeEvidence__cancellationPolicyDisclosure) >?>
      (fmap ("cancellation_rebuttal" .=) disputeEvidence__cancellationRebuttal) >?>
      (fmap ("customer_communication" .=) disputeEvidence__customerCommunication) >?>
      (fmap ("customer_email_address" .=) disputeEvidence__customerEmailAddress) >?>
      (fmap ("customer_name" .=) disputeEvidence__customerName) >?>
      (fmap ("customer_purchase_ip" .=) disputeEvidence__customerPurchaseIp) >?>
      (fmap ("customer_signature" .=) disputeEvidence__customerSignature) >?>
      (fmap ("duplicate_charge_documentation" .=) disputeEvidence__duplicateChargeDocumentation) >?>
      (fmap ("duplicate_charge_explanation" .=) disputeEvidence__duplicateChargeExplanation) >?>
      (fmap ("duplicate_charge_id" .=) disputeEvidence__duplicateChargeId) >?>
      (fmap ("product_description" .=) disputeEvidence__productDescription) >?>
      (fmap ("receipt" .=) disputeEvidence__receipt) >?>
      (fmap ("refund_policy" .=) disputeEvidence__refundPolicy) >?>
      (fmap ("refund_policy_disclosure" .=) disputeEvidence__refundPolicyDisclosure) >?>
      (fmap ("refund_refusal_explanation" .=) disputeEvidence__refundRefusalExplanation) >?>
      (fmap ("service_date" .=) disputeEvidence__serviceDate) >?>
      (fmap ("service_documentation" .=) disputeEvidence__serviceDocumentation) >?>
      (fmap ("shipping_address" .=) disputeEvidence__shippingAddress) >?>
      (fmap ("shipping_carrier" .=) disputeEvidence__shippingCarrier) >?>
      (fmap ("shipping_date" .=) disputeEvidence__shippingDate) >?>
      (fmap ("shipping_documentation" .=) disputeEvidence__shippingDocumentation) >?>
      (fmap ("shipping_tracking_number" .=) disputeEvidence__shippingTrackingNumber) >?>
      (fmap ("uncategorized_file" .=) disputeEvidence__uncategorizedFile) >?>
      (fmap ("uncategorized_text" .=) disputeEvidence__uncategorizedText) >?>
      []
    )
  toEncoding DisputeEvidence{..} = pairs (
      maybe mempty ("access_activity_log" .=) disputeEvidence__accessActivityLog <>
      maybe mempty ("billing_address" .=) disputeEvidence__billingAddress <>
      maybe mempty ("cancellation_policy" .=) disputeEvidence__cancellationPolicy <>
      maybe mempty ("cancellation_policy_disclosure" .=) disputeEvidence__cancellationPolicyDisclosure <>
      maybe mempty ("cancellation_rebuttal" .=) disputeEvidence__cancellationRebuttal <>
      maybe mempty ("customer_communication" .=) disputeEvidence__customerCommunication <>
      maybe mempty ("customer_email_address" .=) disputeEvidence__customerEmailAddress <>
      maybe mempty ("customer_name" .=) disputeEvidence__customerName <>
      maybe mempty ("customer_purchase_ip" .=) disputeEvidence__customerPurchaseIp <>
      maybe mempty ("customer_signature" .=) disputeEvidence__customerSignature <>
      maybe mempty ("duplicate_charge_documentation" .=) disputeEvidence__duplicateChargeDocumentation <>
      maybe mempty ("duplicate_charge_explanation" .=) disputeEvidence__duplicateChargeExplanation <>
      maybe mempty ("duplicate_charge_id" .=) disputeEvidence__duplicateChargeId <>
      maybe mempty ("product_description" .=) disputeEvidence__productDescription <>
      maybe mempty ("receipt" .=) disputeEvidence__receipt <>
      maybe mempty ("refund_policy" .=) disputeEvidence__refundPolicy <>
      maybe mempty ("refund_policy_disclosure" .=) disputeEvidence__refundPolicyDisclosure <>
      maybe mempty ("refund_refusal_explanation" .=) disputeEvidence__refundRefusalExplanation <>
      maybe mempty ("service_date" .=) disputeEvidence__serviceDate <>
      maybe mempty ("service_documentation" .=) disputeEvidence__serviceDocumentation <>
      maybe mempty ("shipping_address" .=) disputeEvidence__shippingAddress <>
      maybe mempty ("shipping_carrier" .=) disputeEvidence__shippingCarrier <>
      maybe mempty ("shipping_date" .=) disputeEvidence__shippingDate <>
      maybe mempty ("shipping_documentation" .=) disputeEvidence__shippingDocumentation <>
      maybe mempty ("shipping_tracking_number" .=) disputeEvidence__shippingTrackingNumber <>
      maybe mempty ("uncategorized_file" .=) disputeEvidence__uncategorizedFile <>
      maybe mempty ("uncategorized_text" .=) disputeEvidence__uncategorizedText
      )

-- Describes: "dispute_evidence_details"

data DisputeEvidenceDetails
  = DisputeEvidenceDetails
    { disputeEvidenceDetails__hasEvidence :: Bool
    {- ^ Whether evidence has been staged for this dispute. -}
    , disputeEvidenceDetails__pastDue :: Bool
    {- ^ Whether the last evidence submission was submitted past the due date. Defaults to `false` if no evidence submissions have occurred. If `true`, then delivery of the latest evidence is *not* guaranteed. -}
    , disputeEvidenceDetails__submissionCount :: Int
    {- ^ The number of times evidence has been submitted. Typically, you may only submit evidence once. -}
    , disputeEvidenceDetails__dueBy :: Maybe (POSIXTime)
    {- ^ Date by which evidence must be submitted in order to successfully challenge dispute. Will be null if the customer's bank or credit card company doesn't allow a response for this particular dispute. -}
    } deriving (Show, Eq, Generic)

instance FromJSON DisputeEvidenceDetails where
  parseJSON = withObject "DisputeEvidenceDetails" parseCtors
    where
      parseCtors o = parseDisputeEvidenceDetails o
      parseDisputeEvidenceDetails o = do
        disputeEvidenceDetails__hasEvidence <- o .: "has_evidence"
        disputeEvidenceDetails__pastDue <- o .: "past_due"
        disputeEvidenceDetails__submissionCount <- o .: "submission_count"
        disputeEvidenceDetails__dueBy <- o .:? "due_by"
        pure DisputeEvidenceDetails{..}

instance ToJSON DisputeEvidenceDetails where
  toJSON DisputeEvidenceDetails{..} = object
    (
      ("has_evidence" .= disputeEvidenceDetails__hasEvidence) :
      ("past_due" .= disputeEvidenceDetails__pastDue) :
      ("submission_count" .= disputeEvidenceDetails__submissionCount) :
      (fmap ("due_by" .=) disputeEvidenceDetails__dueBy) >?>
      []
    )
  toEncoding DisputeEvidenceDetails{..} = pairs (
      "has_evidence" .= disputeEvidenceDetails__hasEvidence <>
      "past_due" .= disputeEvidenceDetails__pastDue <>
      "submission_count" .= disputeEvidenceDetails__submissionCount <>
      maybe mempty ("due_by" .=) disputeEvidenceDetails__dueBy
      )

-- Describes: "ephemeral_key"

data EphemeralKey
  = EphemeralKey
    { ephemeralKey__id :: (Id EphemeralKey)
    {- ^ Unique identifier for the object. -}
    , ephemeralKey__object :: EphemeralKey_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , ephemeralKey__livemode :: Bool
    {- ^ Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. -}
    , ephemeralKey__created :: POSIXTime
    {- ^ Time at which the object was created. Measured in seconds since the Unix epoch. -}
    , ephemeralKey__expires :: POSIXTime
    {- ^ Time at which the key will expire. Measured in seconds since the Unix epoch. -}
    , ephemeralKey__secret :: Text
    {- ^ The key's secret. You can use this value to make authorized requests to the Stripe API. -}
    } deriving (Show, Eq, Generic)

instance FromJSON EphemeralKey where
  parseJSON = withObject "EphemeralKey" parseCtors
    where
      parseCtors o = parseEphemeralKey o
      parseEphemeralKey o = do
        ephemeralKey__id <- o .: "id"
        ephemeralKey__object <- o .: "object"
        ephemeralKey__livemode <- o .: "livemode"
        ephemeralKey__created <- o .: "created"
        ephemeralKey__expires <- o .: "expires"
        ephemeralKey__secret <- o .: "secret"
        pure EphemeralKey{..}

instance ToJSON EphemeralKey where
  toJSON EphemeralKey{..} = object
    (
      ("id" .= ephemeralKey__id) :
      ("object" .= ephemeralKey__object) :
      ("livemode" .= ephemeralKey__livemode) :
      ("created" .= ephemeralKey__created) :
      ("expires" .= ephemeralKey__expires) :
      ("secret" .= ephemeralKey__secret) :
      []
    )
  toEncoding EphemeralKey{..} = pairs (
      "id" .= ephemeralKey__id <>
      "object" .= ephemeralKey__object <>
      "livemode" .= ephemeralKey__livemode <>
      "created" .= ephemeralKey__created <>
      "expires" .= ephemeralKey__expires <>
      "secret" .= ephemeralKey__secret
      )

-- Describes: "error"
{- | An error response from the Stripe API -}
data Error
  = Error
    { error__error :: ApiErrors
    } deriving (Show, Eq, Generic)

instance FromJSON Error where
  parseJSON = withObject "Error" parseCtors
    where
      parseCtors o = parseError o
      parseError o = do
        error__error <- o .: "error"
        pure Error{..}

instance ToJSON Error where
  toJSON Error{..} = object
    (
      ("error" .= error__error) :
      []
    )
  toEncoding Error{..} = pairs (
      "error" .= error__error
      )

-- Describes: "event"

data Event
  = Event
    { event__id :: (Id Event)
    {- ^ Unique identifier for the object. -}
    , event__object :: Event_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , event__livemode :: Bool
    {- ^ Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. -}
    , event__created :: POSIXTime
    {- ^ Time at which the object was created. Measured in seconds since the Unix epoch. -}
    , event__data :: NotificationEventData
    , event__pendingWebhooks :: Int
    {- ^ Number of webhooks that have yet to be successfully delivered (i.e., to return a 20x response) to the URLs you've specified. -}
    , event__type :: Text
    {- ^ Description of the event (e.g., `invoice.created` or `charge.refunded`). -}
    , event__apiVersion :: Maybe (Text)
    {- ^ The Stripe API version used to render `data`. *Note: This property is populated only for events on or after October 31, 2014*. -}
    , event__request :: Maybe (Expandable '[Const (NotificationEventRequest)])
    {- ^ Information on the API request that instigated the event. -}
    } deriving (Show, Eq, Generic)

instance FromJSON Event where
  parseJSON = withObject "Event" parseCtors
    where
      parseCtors o = parseEvent o
      parseEvent o = do
        event__id <- o .: "id"
        event__object <- o .: "object"
        event__livemode <- o .: "livemode"
        event__created <- o .: "created"
        event__data <- o .: "data"
        event__pendingWebhooks <- o .: "pending_webhooks"
        event__type <- o .: "type"
        event__apiVersion <- o .:? "api_version"
        event__request <- o .:? "request"
        pure Event{..}

instance ToJSON Event where
  toJSON Event{..} = object
    (
      ("id" .= event__id) :
      ("object" .= event__object) :
      ("livemode" .= event__livemode) :
      ("created" .= event__created) :
      ("data" .= event__data) :
      ("pending_webhooks" .= event__pendingWebhooks) :
      ("type" .= event__type) :
      (fmap ("api_version" .=) event__apiVersion) >?>
      (fmap ("request" .=) event__request) >?>
      []
    )
  toEncoding Event{..} = pairs (
      "id" .= event__id <>
      "object" .= event__object <>
      "livemode" .= event__livemode <>
      "created" .= event__created <>
      "data" .= event__data <>
      "pending_webhooks" .= event__pendingWebhooks <>
      "type" .= event__type <>
      maybe mempty ("api_version" .=) event__apiVersion <>
      maybe mempty ("request" .=) event__request
      )

-- Describes: "exchange_rate"

data ExchangeRate
  = ExchangeRate
    { exchangeRate__id :: (Id ExchangeRate)
    {- ^ Unique identifier for the object. Represented as the three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html) in lowercase. -}
    , exchangeRate__object :: ExchangeRate_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , exchangeRate__rates :: Object
    {- ^ Hash where the keys are supported currencies and the values are the exchange rate at which the base id currency converts to the key currency. -}
    } deriving (Show, Eq, Generic)

instance FromJSON ExchangeRate where
  parseJSON = withObject "ExchangeRate" parseCtors
    where
      parseCtors o = parseExchangeRate o
      parseExchangeRate o = do
        exchangeRate__id <- o .: "id"
        exchangeRate__object <- o .: "object"
        exchangeRate__rates <- o .: "rates"
        pure ExchangeRate{..}

instance ToJSON ExchangeRate where
  toJSON ExchangeRate{..} = object
    (
      ("id" .= exchangeRate__id) :
      ("object" .= exchangeRate__object) :
      ("rates" .= exchangeRate__rates) :
      []
    )
  toEncoding ExchangeRate{..} = pairs (
      "id" .= exchangeRate__id <>
      "object" .= exchangeRate__object <>
      "rates" .= exchangeRate__rates
      )

-- Describes: "external_account"

data ExternalAccount
  = ExternalAccount
    {
    } deriving (Show, Eq, Generic)

instance FromJSON ExternalAccount where
  parseJSON = withObject "ExternalAccount" parseCtors
    where
      parseCtors o = parseExternalAccount o
      parseExternalAccount o = do
        pure ExternalAccount

instance ToJSON ExternalAccount where
  toJSON ExternalAccount = object
    (
      []
    )
  toEncoding ExternalAccount = pairs (
      mempty
      )

-- Describes: "fee"

data Fee
  = Fee
    { fee__amount :: Int
    {- ^ Amount of the fee, in cents. -}
    , fee__currency :: Text
    {- ^ Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). -}
    , fee__type :: Text
    {- ^ Type of the fee, one of: `application_fee`, `stripe_fee` or `tax`. -}
    , fee__application :: Maybe (Text)
    , fee__description :: Maybe (Text)
    {- ^ An arbitrary string attached to the object. Often useful for displaying to users. -}
    } deriving (Show, Eq, Generic)

instance FromJSON Fee where
  parseJSON = withObject "Fee" parseCtors
    where
      parseCtors o = parseFee o
      parseFee o = do
        fee__amount <- o .: "amount"
        fee__currency <- o .: "currency"
        fee__type <- o .: "type"
        fee__application <- o .:? "application"
        fee__description <- o .:? "description"
        pure Fee{..}

instance ToJSON Fee where
  toJSON Fee{..} = object
    (
      ("amount" .= fee__amount) :
      ("currency" .= fee__currency) :
      ("type" .= fee__type) :
      (fmap ("application" .=) fee__application) >?>
      (fmap ("description" .=) fee__description) >?>
      []
    )
  toEncoding Fee{..} = pairs (
      "amount" .= fee__amount <>
      "currency" .= fee__currency <>
      "type" .= fee__type <>
      maybe mempty ("application" .=) fee__application <>
      maybe mempty ("description" .=) fee__description
      )

-- Describes: "fee_refund"

data FeeRefund
  = FeeRefund
    { feeRefund__id :: (Id FeeRefund)
    {- ^ Unique identifier for the object. -}
    , feeRefund__object :: FeeRefund_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , feeRefund__amount :: Int
    {- ^ Amount, in %s. -}
    , feeRefund__created :: POSIXTime
    {- ^ Time at which the object was created. Measured in seconds since the Unix epoch. -}
    , feeRefund__currency :: Text
    {- ^ Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). -}
    , feeRefund__fee :: Expandable '[Const (ApplicationFee)]
    {- ^ ID of the application fee that was refunded. -}
    , feeRefund__metadata :: Object
    {- ^ Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. -}
    , feeRefund__balanceTransaction :: Maybe (Expandable '[Const (BalanceTransaction)])
    {- ^ Balance transaction that describes the impact on your account balance. -}
    } deriving (Show, Eq, Generic)

instance FromJSON FeeRefund where
  parseJSON = withObject "FeeRefund" parseCtors
    where
      parseCtors o = parseFeeRefund o
      parseFeeRefund o = do
        feeRefund__id <- o .: "id"
        feeRefund__object <- o .: "object"
        feeRefund__amount <- o .: "amount"
        feeRefund__created <- o .: "created"
        feeRefund__currency <- o .: "currency"
        feeRefund__fee <- o .: "fee"
        feeRefund__metadata <- o .: "metadata"
        feeRefund__balanceTransaction <- o .:? "balance_transaction"
        pure FeeRefund{..}

instance ToJSON FeeRefund where
  toJSON FeeRefund{..} = object
    (
      ("id" .= feeRefund__id) :
      ("object" .= feeRefund__object) :
      ("amount" .= feeRefund__amount) :
      ("created" .= feeRefund__created) :
      ("currency" .= feeRefund__currency) :
      ("fee" .= feeRefund__fee) :
      ("metadata" .= feeRefund__metadata) :
      (fmap ("balance_transaction" .=) feeRefund__balanceTransaction) >?>
      []
    )
  toEncoding FeeRefund{..} = pairs (
      "id" .= feeRefund__id <>
      "object" .= feeRefund__object <>
      "amount" .= feeRefund__amount <>
      "created" .= feeRefund__created <>
      "currency" .= feeRefund__currency <>
      "fee" .= feeRefund__fee <>
      "metadata" .= feeRefund__metadata <>
      maybe mempty ("balance_transaction" .=) feeRefund__balanceTransaction
      )

-- Describes: "file"

data File
  = File
    { file__id :: (Id File)
    {- ^ Unique identifier for the object. -}
    , file__object :: File_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , file__created :: POSIXTime
    {- ^ Time at which the object was created. Measured in seconds since the Unix epoch. -}
    , file__purpose :: Text
    {- ^ The purpose of the file. Possible values are `business_icon`, `business_logo`, `customer_signature`, `dispute_evidence`, `finance_report_run`, `identity_document`, `pci_document`, `sigma_scheduled_query`, or `tax_document_user_upload`. -}
    , file__size :: Int
    {- ^ The size in bytes of the file object. -}
    , file__filename :: Maybe (Text)
    {- ^ A filename for the file, suitable for saving to a filesystem. -}
    , file__links :: Maybe (Object)
    , file__title :: Maybe (Text)
    {- ^ A user friendly title for the document. -}
    , file__type :: Maybe (Text)
    {- ^ The type of the file returned (e.g., `csv`, `pdf`, `jpg`, or `png`). -}
    , file__url :: Maybe (Text)
    {- ^ The URL from which the file can be downloaded using your live secret API key. -}
    } deriving (Show, Eq, Generic)

instance FromJSON File where
  parseJSON = withObject "File" parseCtors
    where
      parseCtors o = parseFile o
      parseFile o = do
        file__id <- o .: "id"
        file__object <- o .: "object"
        file__created <- o .: "created"
        file__purpose <- o .: "purpose"
        file__size <- o .: "size"
        file__filename <- o .:? "filename"
        file__links <- o .:? "links"
        file__title <- o .:? "title"
        file__type <- o .:? "type"
        file__url <- o .:? "url"
        pure File{..}

instance ToJSON File where
  toJSON File{..} = object
    (
      ("id" .= file__id) :
      ("object" .= file__object) :
      ("created" .= file__created) :
      ("purpose" .= file__purpose) :
      ("size" .= file__size) :
      (fmap ("filename" .=) file__filename) >?>
      (fmap ("links" .=) file__links) >?>
      (fmap ("title" .=) file__title) >?>
      (fmap ("type" .=) file__type) >?>
      (fmap ("url" .=) file__url) >?>
      []
    )
  toEncoding File{..} = pairs (
      "id" .= file__id <>
      "object" .= file__object <>
      "created" .= file__created <>
      "purpose" .= file__purpose <>
      "size" .= file__size <>
      maybe mempty ("filename" .=) file__filename <>
      maybe mempty ("links" .=) file__links <>
      maybe mempty ("title" .=) file__title <>
      maybe mempty ("type" .=) file__type <>
      maybe mempty ("url" .=) file__url
      )

-- Describes: "file_link"

data FileLink
  = FileLink
    { fileLink__id :: (Id FileLink)
    {- ^ Unique identifier for the object. -}
    , fileLink__object :: FileLink_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , fileLink__livemode :: Bool
    {- ^ Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. -}
    , fileLink__created :: POSIXTime
    {- ^ Time at which the object was created. Measured in seconds since the Unix epoch. -}
    , fileLink__expired :: Bool
    {- ^ Whether this link is already expired. -}
    , fileLink__file :: Expandable '[Const (File)]
    {- ^ The file object this link points to. -}
    , fileLink__metadata :: Object
    {- ^ Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. -}
    , fileLink__expiresAt :: Maybe (POSIXTime)
    {- ^ Time at which the link expires. -}
    , fileLink__url :: Maybe (Text)
    {- ^ The publicly accessible URL to download the file. -}
    } deriving (Show, Eq, Generic)

instance FromJSON FileLink where
  parseJSON = withObject "FileLink" parseCtors
    where
      parseCtors o = parseFileLink o
      parseFileLink o = do
        fileLink__id <- o .: "id"
        fileLink__object <- o .: "object"
        fileLink__livemode <- o .: "livemode"
        fileLink__created <- o .: "created"
        fileLink__expired <- o .: "expired"
        fileLink__file <- o .: "file"
        fileLink__metadata <- o .: "metadata"
        fileLink__expiresAt <- o .:? "expires_at"
        fileLink__url <- o .:? "url"
        pure FileLink{..}

instance ToJSON FileLink where
  toJSON FileLink{..} = object
    (
      ("id" .= fileLink__id) :
      ("object" .= fileLink__object) :
      ("livemode" .= fileLink__livemode) :
      ("created" .= fileLink__created) :
      ("expired" .= fileLink__expired) :
      ("file" .= fileLink__file) :
      ("metadata" .= fileLink__metadata) :
      (fmap ("expires_at" .=) fileLink__expiresAt) >?>
      (fmap ("url" .=) fileLink__url) >?>
      []
    )
  toEncoding FileLink{..} = pairs (
      "id" .= fileLink__id <>
      "object" .= fileLink__object <>
      "livemode" .= fileLink__livemode <>
      "created" .= fileLink__created <>
      "expired" .= fileLink__expired <>
      "file" .= fileLink__file <>
      "metadata" .= fileLink__metadata <>
      maybe mempty ("expires_at" .=) fileLink__expiresAt <>
      maybe mempty ("url" .=) fileLink__url
      )

-- Describes: "financial_reporting_finance_report_run_run_parameters"

data FinancialReportingFinanceReportRunRunParameters
  = FinancialReportingFinanceReportRunRunParameters
    { financialReportingFinanceReportRunRunParameters__columns :: Vector (Text)
    {- ^ The set of output columns requested for inclusion in the report run. -}
    , financialReportingFinanceReportRunRunParameters__connectedAccount :: Text
    {- ^ Connected account ID by which to filter the report run. -}
    , financialReportingFinanceReportRunRunParameters__currency :: Text
    {- ^ Currency of objects to be included in the report run. -}
    , financialReportingFinanceReportRunRunParameters__intervalEnd :: POSIXTime
    {- ^ Ending timestamp of data to be included in the report run (exclusive). -}
    , financialReportingFinanceReportRunRunParameters__intervalStart :: POSIXTime
    {- ^ Starting timestamp of data to be included in the report run. -}
    , financialReportingFinanceReportRunRunParameters__payout :: Text
    {- ^ Payout ID by which to filter the report run. -}
    , financialReportingFinanceReportRunRunParameters__reportingCategory :: Text
    {- ^ Category of balance transactions to be included in the report run. -}
    } deriving (Show, Eq, Generic)

instance FromJSON FinancialReportingFinanceReportRunRunParameters where
  parseJSON = withObject "FinancialReportingFinanceReportRunRunParameters" parseCtors
    where
      parseCtors o = parseFinancialReportingFinanceReportRunRunParameters o
      parseFinancialReportingFinanceReportRunRunParameters o = do
        financialReportingFinanceReportRunRunParameters__columns <- o .: "columns"
        financialReportingFinanceReportRunRunParameters__connectedAccount <- o .: "connected_account"
        financialReportingFinanceReportRunRunParameters__currency <- o .: "currency"
        financialReportingFinanceReportRunRunParameters__intervalEnd <- o .: "interval_end"
        financialReportingFinanceReportRunRunParameters__intervalStart <- o .: "interval_start"
        financialReportingFinanceReportRunRunParameters__payout <- o .: "payout"
        financialReportingFinanceReportRunRunParameters__reportingCategory <- o .: "reporting_category"
        pure FinancialReportingFinanceReportRunRunParameters{..}

instance ToJSON FinancialReportingFinanceReportRunRunParameters where
  toJSON FinancialReportingFinanceReportRunRunParameters{..} = object
    (
      ("columns" .= financialReportingFinanceReportRunRunParameters__columns) :
      ("connected_account" .= financialReportingFinanceReportRunRunParameters__connectedAccount) :
      ("currency" .= financialReportingFinanceReportRunRunParameters__currency) :
      ("interval_end" .= financialReportingFinanceReportRunRunParameters__intervalEnd) :
      ("interval_start" .= financialReportingFinanceReportRunRunParameters__intervalStart) :
      ("payout" .= financialReportingFinanceReportRunRunParameters__payout) :
      ("reporting_category" .= financialReportingFinanceReportRunRunParameters__reportingCategory) :
      []
    )
  toEncoding FinancialReportingFinanceReportRunRunParameters{..} = pairs (
      "columns" .= financialReportingFinanceReportRunRunParameters__columns <>
      "connected_account" .= financialReportingFinanceReportRunRunParameters__connectedAccount <>
      "currency" .= financialReportingFinanceReportRunRunParameters__currency <>
      "interval_end" .= financialReportingFinanceReportRunRunParameters__intervalEnd <>
      "interval_start" .= financialReportingFinanceReportRunRunParameters__intervalStart <>
      "payout" .= financialReportingFinanceReportRunRunParameters__payout <>
      "reporting_category" .= financialReportingFinanceReportRunRunParameters__reportingCategory
      )

-- Describes: "inventory"

data Inventory
  = Inventory
    { inventory__type :: Text
    {- ^ Inventory type. Possible values are `finite`, `bucket` (not quantified), and `infinite`. -}
    , inventory__quantity :: Maybe (Int)
    {- ^ The count of inventory available. Will be present if and only if `type` is `finite`. -}
    , inventory__value :: Maybe (Text)
    {- ^ An indicator of the inventory available. Possible values are `in_stock`, `limited`, and `out_of_stock`. Will be present if and only if `type` is `bucket`. -}
    } deriving (Show, Eq, Generic)

instance FromJSON Inventory where
  parseJSON = withObject "Inventory" parseCtors
    where
      parseCtors o = parseInventory o
      parseInventory o = do
        inventory__type <- o .: "type"
        inventory__quantity <- o .:? "quantity"
        inventory__value <- o .:? "value"
        pure Inventory{..}

instance ToJSON Inventory where
  toJSON Inventory{..} = object
    (
      ("type" .= inventory__type) :
      (fmap ("quantity" .=) inventory__quantity) >?>
      (fmap ("value" .=) inventory__value) >?>
      []
    )
  toEncoding Inventory{..} = pairs (
      "type" .= inventory__type <>
      maybe mempty ("quantity" .=) inventory__quantity <>
      maybe mempty ("value" .=) inventory__value
      )

-- Describes: "invoice"

data Invoice
  = Invoice
    { invoice__id :: (Id Invoice)
    {- ^ Unique identifier for the object. -}
    , invoice__object :: Invoice_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , invoice__livemode :: Bool
    {- ^ Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. -}
    , invoice__amountDue :: Int
    {- ^ Final amount due at this time for this invoice. If the invoice's total is smaller than the minimum charge amount, for example, or if there is account credit that can be applied to the invoice, the `amount_due` may be 0. If there is a positive `starting_balance` for the invoice (the customer owes money), the `amount_due` will also take that into account. The charge that gets generated for the invoice will be for the amount specified in `amount_due`. -}
    , invoice__amountPaid :: Int
    {- ^ The amount, in %s, that was paid. -}
    , invoice__amountRemaining :: Int
    {- ^ The amount remaining, in %s, that is due. -}
    , invoice__attemptCount :: Int
    {- ^ Number of payment attempts made for this invoice, from the perspective of the payment retry schedule. Any payment attempt counts as the first attempt, and subsequently only automatic retries increment the attempt count. In other words, manual payment attempts after the first attempt do not affect the retry schedule. -}
    , invoice__attempted :: Bool
    {- ^ Whether an attempt has been made to pay the invoice. An invoice is not attempted until 1 hour after the `invoice.created` webhook, for example, so you might not want to display that invoice as unpaid to your users. -}
    , invoice__autoAdvance :: Bool
    {- ^ Controls whether Stripe will perform [automatic collection](https://stripe.com/docs/billing/invoices/workflow/#auto_advance) of the invoice. When `false`, the invoice's state will not automatically advance without an explicit action. -}
    , invoice__created :: POSIXTime
    {- ^ Time at which the object was created. Measured in seconds since the Unix epoch. -}
    , invoice__currency :: Text
    {- ^ Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). -}
    , invoice__customer :: Expandable '[Const (Customer), Const (DeletedCustomer)]
    , invoice__lines :: Object
    {- ^ The individual line items that make up the invoice. `lines` is sorted as follows: invoice items in reverse chronological order, followed by the subscription, if any. -}
    , invoice__paid :: Bool
    {- ^ Whether payment was successfully collected for this invoice. An invoice can be paid (most commonly) with a charge or with credit from the customer's account balance. -}
    , invoice__periodEnd :: POSIXTime
    {- ^ End of the usage period during which invoice items were added to this invoice. -}
    , invoice__periodStart :: POSIXTime
    {- ^ Start of the usage period during which invoice items were added to this invoice. -}
    , invoice__postPaymentCreditNotesAmount :: Int
    {- ^ Total amount of all post-payment credit notes issued for this invoice. -}
    , invoice__prePaymentCreditNotesAmount :: Int
    {- ^ Total amount of all pre-payment credit notes issued for this invoice. -}
    , invoice__startingBalance :: Int
    {- ^ Starting customer balance before the invoice is finalized. If the invoice has not been finalized yet, this will be the current customer balance. -}
    , invoice__statusTransitions :: InvoicesStatusTransitions
    , invoice__subscriptionProrationDate :: Int
    {- ^ Only set for upcoming invoices that preview prorations. The time used to calculate prorations. -}
    , invoice__subtotal :: Int
    {- ^ Total of all subscriptions, invoice items, and prorations on the invoice before any discount or tax is applied. -}
    , invoice__thresholdReason :: InvoiceThresholdReason
    , invoice__total :: Int
    {- ^ Total after discounts and taxes. -}
    , invoice__accountCountry :: Maybe (Text)
    {- ^ The country of the business associated with this invoice, most often the business creating the invoice. -}
    , invoice__accountName :: Maybe (Text)
    {- ^ The public name of the business associated with this invoice, most often the business creating the invoice. -}
    , invoice__applicationFeeAmount :: Maybe (Int)
    {- ^ The fee in %s that will be applied to the invoice and transferred to the application owner's Stripe account when the invoice is paid. -}
    , invoice__billing :: Maybe (Invoice_Billing)
    {- ^ This field has been renamed to `collection_method` and will be removed in a future API version. -}
    , invoice__billingReason :: Maybe (Invoice_BillingReason)
    {- ^ Indicates the reason why the invoice was created. `subscription_cycle` indicates an invoice created by a subscription advancing into a new period. `subscription_create` indicates an invoice created due to creating a subscription. `subscription_update` indicates an invoice created due to updating a subscription. `subscription` is set for all old invoices to indicate either a change to a subscription or a period advancement. `manual` is set for all invoices unrelated to a subscription (for example: created via the invoice editor). The `upcoming` value is reserved for simulated invoices per the upcoming invoice endpoint. `subscription_threshold` indicates an invoice created due to a billing threshold being reached. -}
    , invoice__charge :: Maybe (Expandable '[Const (Charge)])
    {- ^ ID of the latest charge generated for this invoice, if any. -}
    , invoice__collectionMethod :: Maybe (Invoice_CollectionMethod)
    {- ^ Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this invoice using the default source attached to the customer. When sending an invoice, Stripe will email this invoice to the customer with payment instructions. -}
    , invoice__customFields :: Maybe (Vector (InvoiceSettingCustomField))
    {- ^ Custom fields displayed on the invoice. -}
    , invoice__customerAddress :: Maybe (Expandable '[Const (Address)])
    {- ^ The customer's address. Until the invoice is finalized, this field will equal `customer.address`. Once the invoice is finalized, this field will no longer be updated. -}
    , invoice__customerEmail :: Maybe (Text)
    {- ^ The customer's email. Until the invoice is finalized, this field will equal `customer.email`. Once the invoice is finalized, this field will no longer be updated. -}
    , invoice__customerName :: Maybe (Text)
    {- ^ The customer's name. Until the invoice is finalized, this field will equal `customer.name`. Once the invoice is finalized, this field will no longer be updated. -}
    , invoice__customerPhone :: Maybe (Text)
    {- ^ The customer's phone number. Until the invoice is finalized, this field will equal `customer.phone`. Once the invoice is finalized, this field will no longer be updated. -}
    , invoice__customerShipping :: Maybe (Expandable '[Const (Shipping)])
    {- ^ The customer's shipping information. Until the invoice is finalized, this field will equal `customer.shipping`. Once the invoice is finalized, this field will no longer be updated. -}
    , invoice__customerTaxExempt :: Maybe (Invoice_CustomerTaxExempt)
    {- ^ The customer's tax exempt status. Until the invoice is finalized, this field will equal `customer.tax_exempt`. Once the invoice is finalized, this field will no longer be updated. -}
    , invoice__customerTaxIds :: Maybe (Vector (InvoicesResourceInvoiceTaxId))
    {- ^ The customer's tax IDs. Until the invoice is finalized, this field will contain the same tax IDs as `customer.tax_ids`. Once the invoice is finalized, this field will no longer be updated. -}
    , invoice__defaultPaymentMethod :: Maybe (Expandable '[Const (PaymentMethod)])
    {- ^ ID of the default payment method for the invoice. It must belong to the customer associated with the invoice. If not set, defaults to the subscription's default payment method, if any, or to the default payment method in the customer's invoice settings. -}
    , invoice__defaultSource :: Maybe (Expandable '[Const (AlipayAccount), Const (BankAccount), Const (BitcoinReceiver), Const (Card), Const (Source)])
    {- ^ ID of the default payment source for the invoice. It must belong to the customer associated with the invoice and be in a chargeable state. If not set, defaults to the subscription's default source, if any, or to the customer's default source. -}
    , invoice__defaultTaxRates :: Maybe (Vector (TaxRate))
    {- ^ The tax rates applied to this invoice, if any. -}
    , invoice__description :: Maybe (Text)
    {- ^ An arbitrary string attached to the object. Often useful for displaying to users. Referenced as 'memo' in the Dashboard. -}
    , invoice__discount :: Maybe (Expandable '[Const (Discount)])
    , invoice__dueDate :: Maybe (POSIXTime)
    {- ^ The date on which payment for this invoice is due. This value will be `null` for invoices where `collection_method=charge_automatically`. -}
    , invoice__endingBalance :: Maybe (Int)
    {- ^ Ending customer balance after the invoice is finalized. Invoices are finalized approximately an hour after successful webhook delivery or when payment collection is attempted for the invoice. If the invoice has not been finalized yet, this will be null. -}
    , invoice__footer :: Maybe (Text)
    {- ^ Footer displayed on the invoice. -}
    , invoice__hostedInvoiceUrl :: Maybe (Text)
    {- ^ The URL for the hosted invoice page, which allows customers to view and pay an invoice. If the invoice has not been finalized yet, this will be null. -}
    , invoice__invoicePdf :: Maybe (Text)
    {- ^ The link to download the PDF for the invoice. If the invoice has not been finalized yet, this will be null. -}
    , invoice__metadata :: Maybe (Object)
    {- ^ Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. -}
    , invoice__nextPaymentAttempt :: Maybe (POSIXTime)
    {- ^ The time at which payment will next be attempted. This value will be `null` for invoices where `collection_method=send_invoice`. -}
    , invoice__number :: Maybe (Text)
    {- ^ A unique, identifying string that appears on emails sent to the customer for this invoice. This starts with the customer's unique invoice_prefix if it is specified. -}
    , invoice__paymentIntent :: Maybe (Expandable '[Const (PaymentIntent)])
    {- ^ The PaymentIntent associated with this invoice. The PaymentIntent is generated when the invoice is finalized, and can then be used to pay the invoice. Note that voiding an invoice will cancel the PaymentIntent. -}
    , invoice__receiptNumber :: Maybe (Text)
    {- ^ This is the transaction number that appears on email receipts sent for this invoice. -}
    , invoice__statementDescriptor :: Maybe (Text)
    {- ^ Extra information about an invoice for the customer's credit card statement. -}
    , invoice__status :: Maybe (Invoice_Status)
    {- ^ The status of the invoice, one of `draft`, `open`, `paid`, `uncollectible`, or `void`. [Learn more](https://stripe.com/docs/billing/invoices/workflow#workflow-overview) -}
    , invoice__subscription :: Maybe (Expandable '[Const (Subscription)])
    {- ^ The subscription that this invoice was prepared for, if any. -}
    , invoice__tax :: Maybe (Int)
    {- ^ The amount of tax on this invoice. This is the sum of all the tax amounts on this invoice. -}
    , invoice__taxPercent :: Maybe (Scientific)
    {- ^ This percentage of the subtotal has been added to the total amount of the invoice, including invoice line items and discounts. This field is inherited from the subscription's `tax_percent` field, but can be changed before the invoice is paid. This field defaults to null. -}
    , invoice__totalTaxAmounts :: Maybe (Vector (InvoiceTaxAmount))
    {- ^ The aggregate amounts calculated per tax rate for all line items. -}
    , invoice__webhooksDeliveredAt :: Maybe (POSIXTime)
    {- ^ The time at which webhooks for this invoice were successfully delivered (if the invoice had no webhooks to deliver, this will match `created`). Invoice payment is delayed until webhooks are delivered, or until all webhook delivery attempts have been exhausted. -}
    } deriving (Show, Eq, Generic)

instance FromJSON Invoice where
  parseJSON = withObject "Invoice" parseCtors
    where
      parseCtors o = parseInvoice o
      parseInvoice o = do
        invoice__id <- o .: "id"
        invoice__object <- o .: "object"
        invoice__livemode <- o .: "livemode"
        invoice__amountDue <- o .: "amount_due"
        invoice__amountPaid <- o .: "amount_paid"
        invoice__amountRemaining <- o .: "amount_remaining"
        invoice__attemptCount <- o .: "attempt_count"
        invoice__attempted <- o .: "attempted"
        invoice__autoAdvance <- o .: "auto_advance"
        invoice__created <- o .: "created"
        invoice__currency <- o .: "currency"
        invoice__customer <- o .: "customer"
        invoice__lines <- o .: "lines"
        invoice__paid <- o .: "paid"
        invoice__periodEnd <- o .: "period_end"
        invoice__periodStart <- o .: "period_start"
        invoice__postPaymentCreditNotesAmount <- o .: "post_payment_credit_notes_amount"
        invoice__prePaymentCreditNotesAmount <- o .: "pre_payment_credit_notes_amount"
        invoice__startingBalance <- o .: "starting_balance"
        invoice__statusTransitions <- o .: "status_transitions"
        invoice__subscriptionProrationDate <- o .: "subscription_proration_date"
        invoice__subtotal <- o .: "subtotal"
        invoice__thresholdReason <- o .: "threshold_reason"
        invoice__total <- o .: "total"
        invoice__accountCountry <- o .:? "account_country"
        invoice__accountName <- o .:? "account_name"
        invoice__applicationFeeAmount <- o .:? "application_fee_amount"
        invoice__billing <- o .:? "billing"
        invoice__billingReason <- o .:? "billing_reason"
        invoice__charge <- o .:? "charge"
        invoice__collectionMethod <- o .:? "collection_method"
        invoice__customFields <- o .:? "custom_fields"
        invoice__customerAddress <- o .:? "customer_address"
        invoice__customerEmail <- o .:? "customer_email"
        invoice__customerName <- o .:? "customer_name"
        invoice__customerPhone <- o .:? "customer_phone"
        invoice__customerShipping <- o .:? "customer_shipping"
        invoice__customerTaxExempt <- o .:? "customer_tax_exempt"
        invoice__customerTaxIds <- o .:? "customer_tax_ids"
        invoice__defaultPaymentMethod <- o .:? "default_payment_method"
        invoice__defaultSource <- o .:? "default_source"
        invoice__defaultTaxRates <- o .:? "default_tax_rates"
        invoice__description <- o .:? "description"
        invoice__discount <- o .:? "discount"
        invoice__dueDate <- o .:? "due_date"
        invoice__endingBalance <- o .:? "ending_balance"
        invoice__footer <- o .:? "footer"
        invoice__hostedInvoiceUrl <- o .:? "hosted_invoice_url"
        invoice__invoicePdf <- o .:? "invoice_pdf"
        invoice__metadata <- o .:? "metadata"
        invoice__nextPaymentAttempt <- o .:? "next_payment_attempt"
        invoice__number <- o .:? "number"
        invoice__paymentIntent <- o .:? "payment_intent"
        invoice__receiptNumber <- o .:? "receipt_number"
        invoice__statementDescriptor <- o .:? "statement_descriptor"
        invoice__status <- o .:? "status"
        invoice__subscription <- o .:? "subscription"
        invoice__tax <- o .:? "tax"
        invoice__taxPercent <- o .:? "tax_percent"
        invoice__totalTaxAmounts <- o .:? "total_tax_amounts"
        invoice__webhooksDeliveredAt <- o .:? "webhooks_delivered_at"
        pure Invoice{..}

instance ToJSON Invoice where
  toJSON Invoice{..} = object
    (
      ("id" .= invoice__id) :
      ("object" .= invoice__object) :
      ("livemode" .= invoice__livemode) :
      ("amount_due" .= invoice__amountDue) :
      ("amount_paid" .= invoice__amountPaid) :
      ("amount_remaining" .= invoice__amountRemaining) :
      ("attempt_count" .= invoice__attemptCount) :
      ("attempted" .= invoice__attempted) :
      ("auto_advance" .= invoice__autoAdvance) :
      ("created" .= invoice__created) :
      ("currency" .= invoice__currency) :
      ("customer" .= invoice__customer) :
      ("lines" .= invoice__lines) :
      ("paid" .= invoice__paid) :
      ("period_end" .= invoice__periodEnd) :
      ("period_start" .= invoice__periodStart) :
      ("post_payment_credit_notes_amount" .= invoice__postPaymentCreditNotesAmount) :
      ("pre_payment_credit_notes_amount" .= invoice__prePaymentCreditNotesAmount) :
      ("starting_balance" .= invoice__startingBalance) :
      ("status_transitions" .= invoice__statusTransitions) :
      ("subscription_proration_date" .= invoice__subscriptionProrationDate) :
      ("subtotal" .= invoice__subtotal) :
      ("threshold_reason" .= invoice__thresholdReason) :
      ("total" .= invoice__total) :
      (fmap ("account_country" .=) invoice__accountCountry) >?>
      (fmap ("account_name" .=) invoice__accountName) >?>
      (fmap ("application_fee_amount" .=) invoice__applicationFeeAmount) >?>
      (fmap ("billing" .=) invoice__billing) >?>
      (fmap ("billing_reason" .=) invoice__billingReason) >?>
      (fmap ("charge" .=) invoice__charge) >?>
      (fmap ("collection_method" .=) invoice__collectionMethod) >?>
      (fmap ("custom_fields" .=) invoice__customFields) >?>
      (fmap ("customer_address" .=) invoice__customerAddress) >?>
      (fmap ("customer_email" .=) invoice__customerEmail) >?>
      (fmap ("customer_name" .=) invoice__customerName) >?>
      (fmap ("customer_phone" .=) invoice__customerPhone) >?>
      (fmap ("customer_shipping" .=) invoice__customerShipping) >?>
      (fmap ("customer_tax_exempt" .=) invoice__customerTaxExempt) >?>
      (fmap ("customer_tax_ids" .=) invoice__customerTaxIds) >?>
      (fmap ("default_payment_method" .=) invoice__defaultPaymentMethod) >?>
      (fmap ("default_source" .=) invoice__defaultSource) >?>
      (fmap ("default_tax_rates" .=) invoice__defaultTaxRates) >?>
      (fmap ("description" .=) invoice__description) >?>
      (fmap ("discount" .=) invoice__discount) >?>
      (fmap ("due_date" .=) invoice__dueDate) >?>
      (fmap ("ending_balance" .=) invoice__endingBalance) >?>
      (fmap ("footer" .=) invoice__footer) >?>
      (fmap ("hosted_invoice_url" .=) invoice__hostedInvoiceUrl) >?>
      (fmap ("invoice_pdf" .=) invoice__invoicePdf) >?>
      (fmap ("metadata" .=) invoice__metadata) >?>
      (fmap ("next_payment_attempt" .=) invoice__nextPaymentAttempt) >?>
      (fmap ("number" .=) invoice__number) >?>
      (fmap ("payment_intent" .=) invoice__paymentIntent) >?>
      (fmap ("receipt_number" .=) invoice__receiptNumber) >?>
      (fmap ("statement_descriptor" .=) invoice__statementDescriptor) >?>
      (fmap ("status" .=) invoice__status) >?>
      (fmap ("subscription" .=) invoice__subscription) >?>
      (fmap ("tax" .=) invoice__tax) >?>
      (fmap ("tax_percent" .=) invoice__taxPercent) >?>
      (fmap ("total_tax_amounts" .=) invoice__totalTaxAmounts) >?>
      (fmap ("webhooks_delivered_at" .=) invoice__webhooksDeliveredAt) >?>
      []
    )
  toEncoding Invoice{..} = pairs (
      "id" .= invoice__id <>
      "object" .= invoice__object <>
      "livemode" .= invoice__livemode <>
      "amount_due" .= invoice__amountDue <>
      "amount_paid" .= invoice__amountPaid <>
      "amount_remaining" .= invoice__amountRemaining <>
      "attempt_count" .= invoice__attemptCount <>
      "attempted" .= invoice__attempted <>
      "auto_advance" .= invoice__autoAdvance <>
      "created" .= invoice__created <>
      "currency" .= invoice__currency <>
      "customer" .= invoice__customer <>
      "lines" .= invoice__lines <>
      "paid" .= invoice__paid <>
      "period_end" .= invoice__periodEnd <>
      "period_start" .= invoice__periodStart <>
      "post_payment_credit_notes_amount" .= invoice__postPaymentCreditNotesAmount <>
      "pre_payment_credit_notes_amount" .= invoice__prePaymentCreditNotesAmount <>
      "starting_balance" .= invoice__startingBalance <>
      "status_transitions" .= invoice__statusTransitions <>
      "subscription_proration_date" .= invoice__subscriptionProrationDate <>
      "subtotal" .= invoice__subtotal <>
      "threshold_reason" .= invoice__thresholdReason <>
      "total" .= invoice__total <>
      maybe mempty ("account_country" .=) invoice__accountCountry <>
      maybe mempty ("account_name" .=) invoice__accountName <>
      maybe mempty ("application_fee_amount" .=) invoice__applicationFeeAmount <>
      maybe mempty ("billing" .=) invoice__billing <>
      maybe mempty ("billing_reason" .=) invoice__billingReason <>
      maybe mempty ("charge" .=) invoice__charge <>
      maybe mempty ("collection_method" .=) invoice__collectionMethod <>
      maybe mempty ("custom_fields" .=) invoice__customFields <>
      maybe mempty ("customer_address" .=) invoice__customerAddress <>
      maybe mempty ("customer_email" .=) invoice__customerEmail <>
      maybe mempty ("customer_name" .=) invoice__customerName <>
      maybe mempty ("customer_phone" .=) invoice__customerPhone <>
      maybe mempty ("customer_shipping" .=) invoice__customerShipping <>
      maybe mempty ("customer_tax_exempt" .=) invoice__customerTaxExempt <>
      maybe mempty ("customer_tax_ids" .=) invoice__customerTaxIds <>
      maybe mempty ("default_payment_method" .=) invoice__defaultPaymentMethod <>
      maybe mempty ("default_source" .=) invoice__defaultSource <>
      maybe mempty ("default_tax_rates" .=) invoice__defaultTaxRates <>
      maybe mempty ("description" .=) invoice__description <>
      maybe mempty ("discount" .=) invoice__discount <>
      maybe mempty ("due_date" .=) invoice__dueDate <>
      maybe mempty ("ending_balance" .=) invoice__endingBalance <>
      maybe mempty ("footer" .=) invoice__footer <>
      maybe mempty ("hosted_invoice_url" .=) invoice__hostedInvoiceUrl <>
      maybe mempty ("invoice_pdf" .=) invoice__invoicePdf <>
      maybe mempty ("metadata" .=) invoice__metadata <>
      maybe mempty ("next_payment_attempt" .=) invoice__nextPaymentAttempt <>
      maybe mempty ("number" .=) invoice__number <>
      maybe mempty ("payment_intent" .=) invoice__paymentIntent <>
      maybe mempty ("receipt_number" .=) invoice__receiptNumber <>
      maybe mempty ("statement_descriptor" .=) invoice__statementDescriptor <>
      maybe mempty ("status" .=) invoice__status <>
      maybe mempty ("subscription" .=) invoice__subscription <>
      maybe mempty ("tax" .=) invoice__tax <>
      maybe mempty ("tax_percent" .=) invoice__taxPercent <>
      maybe mempty ("total_tax_amounts" .=) invoice__totalTaxAmounts <>
      maybe mempty ("webhooks_delivered_at" .=) invoice__webhooksDeliveredAt
      )

-- Describes: "invoice_item_threshold_reason"

data InvoiceItemThresholdReason
  = InvoiceItemThresholdReason
    { invoiceItemThresholdReason__lineItemIds :: Vector (Text)
    {- ^ The IDs of the line items that triggered the threshold invoice. -}
    , invoiceItemThresholdReason__usageGte :: Int
    {- ^ The quantity threshold boundary that applied to the given line item. -}
    } deriving (Show, Eq, Generic)

instance FromJSON InvoiceItemThresholdReason where
  parseJSON = withObject "InvoiceItemThresholdReason" parseCtors
    where
      parseCtors o = parseInvoiceItemThresholdReason o
      parseInvoiceItemThresholdReason o = do
        invoiceItemThresholdReason__lineItemIds <- o .: "line_item_ids"
        invoiceItemThresholdReason__usageGte <- o .: "usage_gte"
        pure InvoiceItemThresholdReason{..}

instance ToJSON InvoiceItemThresholdReason where
  toJSON InvoiceItemThresholdReason{..} = object
    (
      ("line_item_ids" .= invoiceItemThresholdReason__lineItemIds) :
      ("usage_gte" .= invoiceItemThresholdReason__usageGte) :
      []
    )
  toEncoding InvoiceItemThresholdReason{..} = pairs (
      "line_item_ids" .= invoiceItemThresholdReason__lineItemIds <>
      "usage_gte" .= invoiceItemThresholdReason__usageGte
      )

-- Describes: "invoice_line_item_period"

data InvoiceLineItemPeriod
  = InvoiceLineItemPeriod
    { invoiceLineItemPeriod__end :: Int
    {- ^ End of the line item's billing period -}
    , invoiceLineItemPeriod__start :: Int
    {- ^ Start of the line item's billing period -}
    } deriving (Show, Eq, Generic)

instance FromJSON InvoiceLineItemPeriod where
  parseJSON = withObject "InvoiceLineItemPeriod" parseCtors
    where
      parseCtors o = parseInvoiceLineItemPeriod o
      parseInvoiceLineItemPeriod o = do
        invoiceLineItemPeriod__end <- o .: "end"
        invoiceLineItemPeriod__start <- o .: "start"
        pure InvoiceLineItemPeriod{..}

instance ToJSON InvoiceLineItemPeriod where
  toJSON InvoiceLineItemPeriod{..} = object
    (
      ("end" .= invoiceLineItemPeriod__end) :
      ("start" .= invoiceLineItemPeriod__start) :
      []
    )
  toEncoding InvoiceLineItemPeriod{..} = pairs (
      "end" .= invoiceLineItemPeriod__end <>
      "start" .= invoiceLineItemPeriod__start
      )

-- Describes: "invoice_setting_custom_field"

data InvoiceSettingCustomField
  = InvoiceSettingCustomField
    { invoiceSettingCustomField__name :: Text
    {- ^ The name of the custom field. -}
    , invoiceSettingCustomField__value :: Text
    {- ^ The value of the custom field. -}
    } deriving (Show, Eq, Generic)

instance FromJSON InvoiceSettingCustomField where
  parseJSON = withObject "InvoiceSettingCustomField" parseCtors
    where
      parseCtors o = parseInvoiceSettingCustomField o
      parseInvoiceSettingCustomField o = do
        invoiceSettingCustomField__name <- o .: "name"
        invoiceSettingCustomField__value <- o .: "value"
        pure InvoiceSettingCustomField{..}

instance ToJSON InvoiceSettingCustomField where
  toJSON InvoiceSettingCustomField{..} = object
    (
      ("name" .= invoiceSettingCustomField__name) :
      ("value" .= invoiceSettingCustomField__value) :
      []
    )
  toEncoding InvoiceSettingCustomField{..} = pairs (
      "name" .= invoiceSettingCustomField__name <>
      "value" .= invoiceSettingCustomField__value
      )

-- Describes: "invoice_setting_customer_setting"

data InvoiceSettingCustomerSetting
  = InvoiceSettingCustomerSetting
    { invoiceSettingCustomerSetting__customFields :: Maybe (Vector (InvoiceSettingCustomField))
    {- ^ Default custom fields to be displayed on invoices for this customer. -}
    , invoiceSettingCustomerSetting__defaultPaymentMethod :: Maybe (Expandable '[Const (PaymentMethod)])
    {- ^ ID of the default payment method used for subscriptions and invoices for the customer. -}
    , invoiceSettingCustomerSetting__footer :: Maybe (Text)
    {- ^ Default footer to be displayed on invoices for this customer. -}
    } deriving (Show, Eq, Generic)

instance FromJSON InvoiceSettingCustomerSetting where
  parseJSON = withObject "InvoiceSettingCustomerSetting" parseCtors
    where
      parseCtors o = parseInvoiceSettingCustomerSetting o
      parseInvoiceSettingCustomerSetting o = do
        invoiceSettingCustomerSetting__customFields <- o .:? "custom_fields"
        invoiceSettingCustomerSetting__defaultPaymentMethod <- o .:? "default_payment_method"
        invoiceSettingCustomerSetting__footer <- o .:? "footer"
        pure InvoiceSettingCustomerSetting{..}

instance ToJSON InvoiceSettingCustomerSetting where
  toJSON InvoiceSettingCustomerSetting{..} = object
    (
      (fmap ("custom_fields" .=) invoiceSettingCustomerSetting__customFields) >?>
      (fmap ("default_payment_method" .=) invoiceSettingCustomerSetting__defaultPaymentMethod) >?>
      (fmap ("footer" .=) invoiceSettingCustomerSetting__footer) >?>
      []
    )
  toEncoding InvoiceSettingCustomerSetting{..} = pairs (
      maybe mempty ("custom_fields" .=) invoiceSettingCustomerSetting__customFields <>
      maybe mempty ("default_payment_method" .=) invoiceSettingCustomerSetting__defaultPaymentMethod <>
      maybe mempty ("footer" .=) invoiceSettingCustomerSetting__footer
      )

-- Describes: "invoice_setting_subscription_schedule_setting"

data InvoiceSettingSubscriptionScheduleSetting
  = InvoiceSettingSubscriptionScheduleSetting
    { invoiceSettingSubscriptionScheduleSetting__daysUntilDue :: Maybe (Int)
    {- ^ Number of days within which a customer must pay invoices generated by this subscription schedule. This value will be `null` for subscription schedules where `billing=charge_automatically`. -}
    } deriving (Show, Eq, Generic)

instance FromJSON InvoiceSettingSubscriptionScheduleSetting where
  parseJSON = withObject "InvoiceSettingSubscriptionScheduleSetting" parseCtors
    where
      parseCtors o = parseInvoiceSettingSubscriptionScheduleSetting o
      parseInvoiceSettingSubscriptionScheduleSetting o = do
        invoiceSettingSubscriptionScheduleSetting__daysUntilDue <- o .:? "days_until_due"
        pure InvoiceSettingSubscriptionScheduleSetting{..}

instance ToJSON InvoiceSettingSubscriptionScheduleSetting where
  toJSON InvoiceSettingSubscriptionScheduleSetting{..} = object
    (
      (fmap ("days_until_due" .=) invoiceSettingSubscriptionScheduleSetting__daysUntilDue) >?>
      []
    )
  toEncoding InvoiceSettingSubscriptionScheduleSetting{..} = pairs (
      maybe mempty ("days_until_due" .=) invoiceSettingSubscriptionScheduleSetting__daysUntilDue
      )

-- Describes: "invoice_tax_amount"

data InvoiceTaxAmount
  = InvoiceTaxAmount
    { invoiceTaxAmount__amount :: Int
    {- ^ The amount, in %s, of the tax. -}
    , invoiceTaxAmount__inclusive :: Bool
    {- ^ Whether this tax amount is inclusive or exclusive. -}
    , invoiceTaxAmount__taxRate :: Expandable '[Const (TaxRate)]
    {- ^ The tax rate that was applied to get this tax amount. -}
    } deriving (Show, Eq, Generic)

instance FromJSON InvoiceTaxAmount where
  parseJSON = withObject "InvoiceTaxAmount" parseCtors
    where
      parseCtors o = parseInvoiceTaxAmount o
      parseInvoiceTaxAmount o = do
        invoiceTaxAmount__amount <- o .: "amount"
        invoiceTaxAmount__inclusive <- o .: "inclusive"
        invoiceTaxAmount__taxRate <- o .: "tax_rate"
        pure InvoiceTaxAmount{..}

instance ToJSON InvoiceTaxAmount where
  toJSON InvoiceTaxAmount{..} = object
    (
      ("amount" .= invoiceTaxAmount__amount) :
      ("inclusive" .= invoiceTaxAmount__inclusive) :
      ("tax_rate" .= invoiceTaxAmount__taxRate) :
      []
    )
  toEncoding InvoiceTaxAmount{..} = pairs (
      "amount" .= invoiceTaxAmount__amount <>
      "inclusive" .= invoiceTaxAmount__inclusive <>
      "tax_rate" .= invoiceTaxAmount__taxRate
      )

-- Describes: "invoice_threshold_reason"

data InvoiceThresholdReason
  = InvoiceThresholdReason
    { invoiceThresholdReason__itemReasons :: Vector (InvoiceItemThresholdReason)
    {- ^ Indicates which line items triggered a threshold invoice. -}
    , invoiceThresholdReason__amountGte :: Maybe (Int)
    {- ^ The total invoice amount threshold boundary if it triggered the threshold invoice. -}
    } deriving (Show, Eq, Generic)

instance FromJSON InvoiceThresholdReason where
  parseJSON = withObject "InvoiceThresholdReason" parseCtors
    where
      parseCtors o = parseInvoiceThresholdReason o
      parseInvoiceThresholdReason o = do
        invoiceThresholdReason__itemReasons <- o .: "item_reasons"
        invoiceThresholdReason__amountGte <- o .:? "amount_gte"
        pure InvoiceThresholdReason{..}

instance ToJSON InvoiceThresholdReason where
  toJSON InvoiceThresholdReason{..} = object
    (
      ("item_reasons" .= invoiceThresholdReason__itemReasons) :
      (fmap ("amount_gte" .=) invoiceThresholdReason__amountGte) >?>
      []
    )
  toEncoding InvoiceThresholdReason{..} = pairs (
      "item_reasons" .= invoiceThresholdReason__itemReasons <>
      maybe mempty ("amount_gte" .=) invoiceThresholdReason__amountGte
      )

-- Describes: "invoiceitem"

data Invoiceitem
  = Invoiceitem
    { invoiceitem__id :: (Id Invoiceitem)
    {- ^ Unique identifier for the object. -}
    , invoiceitem__object :: Invoiceitem_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , invoiceitem__livemode :: Bool
    {- ^ Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. -}
    , invoiceitem__amount :: Int
    {- ^ Amount (in the `currency` specified) of the invoice item. This should always be equal to `unit_amount * quantity`. -}
    , invoiceitem__currency :: Text
    {- ^ Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). -}
    , invoiceitem__customer :: Expandable '[Const (Customer), Const (DeletedCustomer)]
    {- ^ The ID of the customer who will be billed when this invoice item is billed. -}
    , invoiceitem__date :: POSIXTime
    {- ^ Time at which the object was created. Measured in seconds since the Unix epoch. -}
    , invoiceitem__discountable :: Bool
    {- ^ If true, discounts will apply to this invoice item. Always false for prorations. -}
    , invoiceitem__metadata :: Object
    {- ^ Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. -}
    , invoiceitem__period :: InvoiceLineItemPeriod
    , invoiceitem__proration :: Bool
    {- ^ Whether the invoice item was created automatically as a proration adjustment when the customer switched plans. -}
    , invoiceitem__quantity :: Int
    {- ^ Quantity of units for the invoice item. If the invoice item is a proration, the quantity of the subscription that the proration was computed for. -}
    , invoiceitem__subscriptionItem :: Text
    {- ^ The subscription item that this invoice item has been created for, if any. -}
    , invoiceitem__unifiedProration :: Bool
    {- ^ For prorations this indicates whether Stripe automatically grouped multiple related debit and credit line items into a single combined line item. -}
    , invoiceitem__description :: Maybe (Text)
    {- ^ An arbitrary string attached to the object. Often useful for displaying to users. -}
    , invoiceitem__invoice :: Maybe (Expandable '[Const (Invoice)])
    {- ^ The ID of the invoice this invoice item belongs to. -}
    , invoiceitem__plan :: Maybe (Expandable '[Const (Plan)])
    {- ^ If the invoice item is a proration, the plan of the subscription that the proration was computed for. -}
    , invoiceitem__subscription :: Maybe (Expandable '[Const (Subscription)])
    {- ^ The subscription that this invoice item has been created for, if any. -}
    , invoiceitem__taxRates :: Maybe (Vector (TaxRate))
    {- ^ The tax rates which apply to the invoice item. When set, the `default_tax_rates` on the invoice do not apply to this invoice item. -}
    , invoiceitem__unitAmount :: Maybe (Int)
    {- ^ Unit Amount (in the `currency` specified) of the invoice item. -}
    , invoiceitem__unitAmountDecimal :: Maybe (Scientific)
    {- ^ Same as `unit_amount`, but contains a decimal value with at most 12 decimal places. -}
    } deriving (Show, Eq, Generic)

instance FromJSON Invoiceitem where
  parseJSON = withObject "Invoiceitem" parseCtors
    where
      parseCtors o = parseInvoiceitem o
      parseInvoiceitem o = do
        invoiceitem__id <- o .: "id"
        invoiceitem__object <- o .: "object"
        invoiceitem__livemode <- o .: "livemode"
        invoiceitem__amount <- o .: "amount"
        invoiceitem__currency <- o .: "currency"
        invoiceitem__customer <- o .: "customer"
        invoiceitem__date <- o .: "date"
        invoiceitem__discountable <- o .: "discountable"
        invoiceitem__metadata <- o .: "metadata"
        invoiceitem__period <- o .: "period"
        invoiceitem__proration <- o .: "proration"
        invoiceitem__quantity <- o .: "quantity"
        invoiceitem__subscriptionItem <- o .: "subscription_item"
        invoiceitem__unifiedProration <- o .: "unified_proration"
        invoiceitem__description <- o .:? "description"
        invoiceitem__invoice <- o .:? "invoice"
        invoiceitem__plan <- o .:? "plan"
        invoiceitem__subscription <- o .:? "subscription"
        invoiceitem__taxRates <- o .:? "tax_rates"
        invoiceitem__unitAmount <- o .:? "unit_amount"
        invoiceitem__unitAmountDecimal <- o .:? "unit_amount_decimal"
        pure Invoiceitem{..}

instance ToJSON Invoiceitem where
  toJSON Invoiceitem{..} = object
    (
      ("id" .= invoiceitem__id) :
      ("object" .= invoiceitem__object) :
      ("livemode" .= invoiceitem__livemode) :
      ("amount" .= invoiceitem__amount) :
      ("currency" .= invoiceitem__currency) :
      ("customer" .= invoiceitem__customer) :
      ("date" .= invoiceitem__date) :
      ("discountable" .= invoiceitem__discountable) :
      ("metadata" .= invoiceitem__metadata) :
      ("period" .= invoiceitem__period) :
      ("proration" .= invoiceitem__proration) :
      ("quantity" .= invoiceitem__quantity) :
      ("subscription_item" .= invoiceitem__subscriptionItem) :
      ("unified_proration" .= invoiceitem__unifiedProration) :
      (fmap ("description" .=) invoiceitem__description) >?>
      (fmap ("invoice" .=) invoiceitem__invoice) >?>
      (fmap ("plan" .=) invoiceitem__plan) >?>
      (fmap ("subscription" .=) invoiceitem__subscription) >?>
      (fmap ("tax_rates" .=) invoiceitem__taxRates) >?>
      (fmap ("unit_amount" .=) invoiceitem__unitAmount) >?>
      (fmap ("unit_amount_decimal" .=) invoiceitem__unitAmountDecimal) >?>
      []
    )
  toEncoding Invoiceitem{..} = pairs (
      "id" .= invoiceitem__id <>
      "object" .= invoiceitem__object <>
      "livemode" .= invoiceitem__livemode <>
      "amount" .= invoiceitem__amount <>
      "currency" .= invoiceitem__currency <>
      "customer" .= invoiceitem__customer <>
      "date" .= invoiceitem__date <>
      "discountable" .= invoiceitem__discountable <>
      "metadata" .= invoiceitem__metadata <>
      "period" .= invoiceitem__period <>
      "proration" .= invoiceitem__proration <>
      "quantity" .= invoiceitem__quantity <>
      "subscription_item" .= invoiceitem__subscriptionItem <>
      "unified_proration" .= invoiceitem__unifiedProration <>
      maybe mempty ("description" .=) invoiceitem__description <>
      maybe mempty ("invoice" .=) invoiceitem__invoice <>
      maybe mempty ("plan" .=) invoiceitem__plan <>
      maybe mempty ("subscription" .=) invoiceitem__subscription <>
      maybe mempty ("tax_rates" .=) invoiceitem__taxRates <>
      maybe mempty ("unit_amount" .=) invoiceitem__unitAmount <>
      maybe mempty ("unit_amount_decimal" .=) invoiceitem__unitAmountDecimal
      )

-- Describes: "invoices_resource_invoice_tax_id"

data InvoicesResourceInvoiceTaxId
  = InvoicesResourceInvoiceTaxId
    { invoicesResourceInvoiceTaxId__type :: InvoicesResourceInvoiceTaxId_Type
    {- ^ The type of the tax ID, one of `au_abn`, `eu_vat`, `in_gst`, `no_vat`, `nz_gst`, or `unknown` -}
    , invoicesResourceInvoiceTaxId__value :: Maybe (Text)
    {- ^ The value of the tax ID. -}
    } deriving (Show, Eq, Generic)

instance FromJSON InvoicesResourceInvoiceTaxId where
  parseJSON = withObject "InvoicesResourceInvoiceTaxId" parseCtors
    where
      parseCtors o = parseInvoicesResourceInvoiceTaxId o
      parseInvoicesResourceInvoiceTaxId o = do
        invoicesResourceInvoiceTaxId__type <- o .: "type"
        invoicesResourceInvoiceTaxId__value <- o .:? "value"
        pure InvoicesResourceInvoiceTaxId{..}

instance ToJSON InvoicesResourceInvoiceTaxId where
  toJSON InvoicesResourceInvoiceTaxId{..} = object
    (
      ("type" .= invoicesResourceInvoiceTaxId__type) :
      (fmap ("value" .=) invoicesResourceInvoiceTaxId__value) >?>
      []
    )
  toEncoding InvoicesResourceInvoiceTaxId{..} = pairs (
      "type" .= invoicesResourceInvoiceTaxId__type <>
      maybe mempty ("value" .=) invoicesResourceInvoiceTaxId__value
      )

-- Describes: "invoices_status_transitions"

data InvoicesStatusTransitions
  = InvoicesStatusTransitions
    { invoicesStatusTransitions__finalizedAt :: Maybe (POSIXTime)
    {- ^ The time that the invoice draft was finalized. -}
    , invoicesStatusTransitions__markedUncollectibleAt :: Maybe (POSIXTime)
    {- ^ The time that the invoice was marked uncollectible. -}
    , invoicesStatusTransitions__paidAt :: Maybe (POSIXTime)
    {- ^ The time that the invoice was paid. -}
    , invoicesStatusTransitions__voidedAt :: Maybe (POSIXTime)
    {- ^ The time that the invoice was voided. -}
    } deriving (Show, Eq, Generic)

instance FromJSON InvoicesStatusTransitions where
  parseJSON = withObject "InvoicesStatusTransitions" parseCtors
    where
      parseCtors o = parseInvoicesStatusTransitions o
      parseInvoicesStatusTransitions o = do
        invoicesStatusTransitions__finalizedAt <- o .:? "finalized_at"
        invoicesStatusTransitions__markedUncollectibleAt <- o .:? "marked_uncollectible_at"
        invoicesStatusTransitions__paidAt <- o .:? "paid_at"
        invoicesStatusTransitions__voidedAt <- o .:? "voided_at"
        pure InvoicesStatusTransitions{..}

instance ToJSON InvoicesStatusTransitions where
  toJSON InvoicesStatusTransitions{..} = object
    (
      (fmap ("finalized_at" .=) invoicesStatusTransitions__finalizedAt) >?>
      (fmap ("marked_uncollectible_at" .=) invoicesStatusTransitions__markedUncollectibleAt) >?>
      (fmap ("paid_at" .=) invoicesStatusTransitions__paidAt) >?>
      (fmap ("voided_at" .=) invoicesStatusTransitions__voidedAt) >?>
      []
    )
  toEncoding InvoicesStatusTransitions{..} = pairs (
      maybe mempty ("finalized_at" .=) invoicesStatusTransitions__finalizedAt <>
      maybe mempty ("marked_uncollectible_at" .=) invoicesStatusTransitions__markedUncollectibleAt <>
      maybe mempty ("paid_at" .=) invoicesStatusTransitions__paidAt <>
      maybe mempty ("voided_at" .=) invoicesStatusTransitions__voidedAt
      )

-- Describes: "issuer_fraud_record"

data IssuerFraudRecord
  = IssuerFraudRecord
    { issuerFraudRecord__id :: (Id IssuerFraudRecord)
    {- ^ Unique identifier for the object. -}
    , issuerFraudRecord__object :: IssuerFraudRecord_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , issuerFraudRecord__livemode :: Bool
    {- ^ Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. -}
    , issuerFraudRecord__actionable :: Bool
    {- ^ An IFR is actionable if it has not received a dispute and has not been fully refunded. You may wish to proactively refund a charge that receives an IFR, in order to avoid receiving a dispute later. -}
    , issuerFraudRecord__charge :: Expandable '[Const (Charge)]
    {- ^ ID of the charge this issuer fraud record is for, optionally expanded. -}
    , issuerFraudRecord__created :: POSIXTime
    {- ^ Time at which the object was created. Measured in seconds since the Unix epoch. -}
    , issuerFraudRecord__fraudType :: Text
    {- ^ The type of fraud labelled by the issuer. One of `card_never_received`, `fraudulent_card_application`, `made_with_counterfeit_card`, `made_with_lost_card`, `made_with_stolen_card`, `misc`, `unauthorized_use_of_card`. -}
    , issuerFraudRecord__hasLiabilityShift :: Bool
    {- ^ If true, the associated charge is subject to [liability shift](https://stripe.com/docs/sources/three-d-secure#disputed-payments). -}
    , issuerFraudRecord__postDate :: Int
    {- ^ The timestamp at which the card issuer posted the issuer fraud record. -}
    } deriving (Show, Eq, Generic)

instance FromJSON IssuerFraudRecord where
  parseJSON = withObject "IssuerFraudRecord" parseCtors
    where
      parseCtors o = parseIssuerFraudRecord o
      parseIssuerFraudRecord o = do
        issuerFraudRecord__id <- o .: "id"
        issuerFraudRecord__object <- o .: "object"
        issuerFraudRecord__livemode <- o .: "livemode"
        issuerFraudRecord__actionable <- o .: "actionable"
        issuerFraudRecord__charge <- o .: "charge"
        issuerFraudRecord__created <- o .: "created"
        issuerFraudRecord__fraudType <- o .: "fraud_type"
        issuerFraudRecord__hasLiabilityShift <- o .: "has_liability_shift"
        issuerFraudRecord__postDate <- o .: "post_date"
        pure IssuerFraudRecord{..}

instance ToJSON IssuerFraudRecord where
  toJSON IssuerFraudRecord{..} = object
    (
      ("id" .= issuerFraudRecord__id) :
      ("object" .= issuerFraudRecord__object) :
      ("livemode" .= issuerFraudRecord__livemode) :
      ("actionable" .= issuerFraudRecord__actionable) :
      ("charge" .= issuerFraudRecord__charge) :
      ("created" .= issuerFraudRecord__created) :
      ("fraud_type" .= issuerFraudRecord__fraudType) :
      ("has_liability_shift" .= issuerFraudRecord__hasLiabilityShift) :
      ("post_date" .= issuerFraudRecord__postDate) :
      []
    )
  toEncoding IssuerFraudRecord{..} = pairs (
      "id" .= issuerFraudRecord__id <>
      "object" .= issuerFraudRecord__object <>
      "livemode" .= issuerFraudRecord__livemode <>
      "actionable" .= issuerFraudRecord__actionable <>
      "charge" .= issuerFraudRecord__charge <>
      "created" .= issuerFraudRecord__created <>
      "fraud_type" .= issuerFraudRecord__fraudType <>
      "has_liability_shift" .= issuerFraudRecord__hasLiabilityShift <>
      "post_date" .= issuerFraudRecord__postDate
      )

-- Describes: "issuing.authorization"

data Issuing_Authorization
  = Issuing_Authorization
    { issuing_authorization__id :: (Id Issuing_Authorization)
    {- ^ Unique identifier for the object. -}
    , issuing_authorization__object :: Issuing_Authorization_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , issuing_authorization__livemode :: Bool
    {- ^ Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. -}
    , issuing_authorization__approved :: Bool
    {- ^ Whether the authorization has been approved. -}
    , issuing_authorization__authorizationMethod :: Text
    {- ^ How the card details were provided. One of `chip`, `contactless`, `keyed_in`, `online`, or `swipe`. -}
    , issuing_authorization__authorizedAmount :: Int
    {- ^ The amount that has been authorized. This will be `0` when the object is created, and increase after it has been approved. -}
    , issuing_authorization__authorizedCurrency :: Text
    {- ^ The currency that was presented to the cardholder for the authorization. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). -}
    , issuing_authorization__balanceTransactions :: Vector (BalanceTransaction)
    , issuing_authorization__card :: Issuing_Card
    , issuing_authorization__created :: POSIXTime
    {- ^ Time at which the object was created. Measured in seconds since the Unix epoch. -}
    , issuing_authorization__heldAmount :: Int
    {- ^ The amount the authorization is expected to be in `held_currency`. When Stripe holds funds from you, this is the amount reserved for the authorization. This will be `0` when the object is created, and increase after it has been approved. For multi-currency transactions, `held_amount` can be used to determine the expected exchange rate. -}
    , issuing_authorization__heldCurrency :: Text
    {- ^ The currency of the [held amount](https://stripe.com/docs/api#issuing_authorization_object-held_amount). This will always be the card currency. -}
    , issuing_authorization__isHeldAmountControllable :: Bool
    , issuing_authorization__merchantData :: IssuingAuthorizationMerchantData
    , issuing_authorization__metadata :: Object
    {- ^ Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. -}
    , issuing_authorization__pendingAuthorizedAmount :: Int
    {- ^ The amount the user is requesting to be authorized. This field will only be non-zero during an `issuing.authorization.request` webhook. -}
    , issuing_authorization__pendingHeldAmount :: Int
    {- ^ The additional amount Stripe will hold if the authorization is approved. This field will only be non-zero during an `issuing.authorization.request` webhook. -}
    , issuing_authorization__requestHistory :: Vector (IssuingAuthorizationRequest)
    , issuing_authorization__status :: Text
    {- ^ One of `pending`, `reversed`, or `closed`. -}
    , issuing_authorization__transactions :: Vector (Issuing_Transaction)
    , issuing_authorization__verificationData :: IssuingAuthorizationVerificationData
    , issuing_authorization__cardholder :: Maybe (Expandable '[Const (Issuing_Cardholder)])
    {- ^ The cardholder to whom this authorization belongs. -}
    , issuing_authorization__walletProvider :: Maybe (Text)
    {- ^ What, if any, digital wallet was used for this authorization. One of `apple_pay`, `google_pay`, or `samsung_pay`. -}
    } deriving (Show, Eq, Generic)

instance FromJSON Issuing_Authorization where
  parseJSON = withObject "Issuing_Authorization" parseCtors
    where
      parseCtors o = parseIssuing_Authorization o
      parseIssuing_Authorization o = do
        issuing_authorization__id <- o .: "id"
        issuing_authorization__object <- o .: "object"
        issuing_authorization__livemode <- o .: "livemode"
        issuing_authorization__approved <- o .: "approved"
        issuing_authorization__authorizationMethod <- o .: "authorization_method"
        issuing_authorization__authorizedAmount <- o .: "authorized_amount"
        issuing_authorization__authorizedCurrency <- o .: "authorized_currency"
        issuing_authorization__balanceTransactions <- o .: "balance_transactions"
        issuing_authorization__card <- o .: "card"
        issuing_authorization__created <- o .: "created"
        issuing_authorization__heldAmount <- o .: "held_amount"
        issuing_authorization__heldCurrency <- o .: "held_currency"
        issuing_authorization__isHeldAmountControllable <- o .: "is_held_amount_controllable"
        issuing_authorization__merchantData <- o .: "merchant_data"
        issuing_authorization__metadata <- o .: "metadata"
        issuing_authorization__pendingAuthorizedAmount <- o .: "pending_authorized_amount"
        issuing_authorization__pendingHeldAmount <- o .: "pending_held_amount"
        issuing_authorization__requestHistory <- o .: "request_history"
        issuing_authorization__status <- o .: "status"
        issuing_authorization__transactions <- o .: "transactions"
        issuing_authorization__verificationData <- o .: "verification_data"
        issuing_authorization__cardholder <- o .:? "cardholder"
        issuing_authorization__walletProvider <- o .:? "wallet_provider"
        pure Issuing_Authorization{..}

instance ToJSON Issuing_Authorization where
  toJSON Issuing_Authorization{..} = object
    (
      ("id" .= issuing_authorization__id) :
      ("object" .= issuing_authorization__object) :
      ("livemode" .= issuing_authorization__livemode) :
      ("approved" .= issuing_authorization__approved) :
      ("authorization_method" .= issuing_authorization__authorizationMethod) :
      ("authorized_amount" .= issuing_authorization__authorizedAmount) :
      ("authorized_currency" .= issuing_authorization__authorizedCurrency) :
      ("balance_transactions" .= issuing_authorization__balanceTransactions) :
      ("card" .= issuing_authorization__card) :
      ("created" .= issuing_authorization__created) :
      ("held_amount" .= issuing_authorization__heldAmount) :
      ("held_currency" .= issuing_authorization__heldCurrency) :
      ("is_held_amount_controllable" .= issuing_authorization__isHeldAmountControllable) :
      ("merchant_data" .= issuing_authorization__merchantData) :
      ("metadata" .= issuing_authorization__metadata) :
      ("pending_authorized_amount" .= issuing_authorization__pendingAuthorizedAmount) :
      ("pending_held_amount" .= issuing_authorization__pendingHeldAmount) :
      ("request_history" .= issuing_authorization__requestHistory) :
      ("status" .= issuing_authorization__status) :
      ("transactions" .= issuing_authorization__transactions) :
      ("verification_data" .= issuing_authorization__verificationData) :
      (fmap ("cardholder" .=) issuing_authorization__cardholder) >?>
      (fmap ("wallet_provider" .=) issuing_authorization__walletProvider) >?>
      []
    )
  toEncoding Issuing_Authorization{..} = pairs (
      "id" .= issuing_authorization__id <>
      "object" .= issuing_authorization__object <>
      "livemode" .= issuing_authorization__livemode <>
      "approved" .= issuing_authorization__approved <>
      "authorization_method" .= issuing_authorization__authorizationMethod <>
      "authorized_amount" .= issuing_authorization__authorizedAmount <>
      "authorized_currency" .= issuing_authorization__authorizedCurrency <>
      "balance_transactions" .= issuing_authorization__balanceTransactions <>
      "card" .= issuing_authorization__card <>
      "created" .= issuing_authorization__created <>
      "held_amount" .= issuing_authorization__heldAmount <>
      "held_currency" .= issuing_authorization__heldCurrency <>
      "is_held_amount_controllable" .= issuing_authorization__isHeldAmountControllable <>
      "merchant_data" .= issuing_authorization__merchantData <>
      "metadata" .= issuing_authorization__metadata <>
      "pending_authorized_amount" .= issuing_authorization__pendingAuthorizedAmount <>
      "pending_held_amount" .= issuing_authorization__pendingHeldAmount <>
      "request_history" .= issuing_authorization__requestHistory <>
      "status" .= issuing_authorization__status <>
      "transactions" .= issuing_authorization__transactions <>
      "verification_data" .= issuing_authorization__verificationData <>
      maybe mempty ("cardholder" .=) issuing_authorization__cardholder <>
      maybe mempty ("wallet_provider" .=) issuing_authorization__walletProvider
      )

-- Describes: "issuing.card"

data Issuing_Card
  = Issuing_Card
    { issuing_card__id :: (Id Issuing_Card)
    {- ^ Unique identifier for the object. -}
    , issuing_card__object :: Issuing_Card_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , issuing_card__livemode :: Bool
    {- ^ Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. -}
    , issuing_card__authorizationControls :: IssuingCardAuthorizationControls
    , issuing_card__brand :: Text
    {- ^ The brand of the card. -}
    , issuing_card__created :: POSIXTime
    {- ^ Time at which the object was created. Measured in seconds since the Unix epoch. -}
    , issuing_card__currency :: Text
    {- ^ Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). -}
    , issuing_card__expMonth :: Int
    {- ^ The expiration month of the card. -}
    , issuing_card__expYear :: Int
    {- ^ The expiration year of the card. -}
    , issuing_card__last4 :: Text
    {- ^ The last 4 digits of the card number. -}
    , issuing_card__metadata :: Object
    {- ^ Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. -}
    , issuing_card__name :: Text
    {- ^ The name of the cardholder, printed on the card. -}
    , issuing_card__status :: Issuing_Card_Status
    {- ^ One of `active`, `inactive`, `canceled`, `lost`, `stolen`, or `pending`. -}
    , issuing_card__type :: Text
    {- ^ One of `virtual` or `physical`. -}
    , issuing_card__cardholder :: Maybe (Expandable '[Const (Issuing_Cardholder)])
    {- ^ The [Cardholder](https://stripe.com/docs/api#issuing_cardholder_object) object to which the card belongs. -}
    , issuing_card__pin :: Maybe (Expandable '[Const (IssuingCardPin)])
    {- ^ Metadata about the PIN on the card. -}
    , issuing_card__replacementFor :: Maybe (Expandable '[Const (Issuing_Card)])
    {- ^ The card this card replaces, if any. -}
    , issuing_card__replacementReason :: Maybe (Issuing_Card_ReplacementReason)
    {- ^ Why the card that this card replaces (if any) needed to be replaced. One of `damage`, `expiration`, `loss`, or `theft`. -}
    , issuing_card__shipping :: Maybe (Expandable '[Const (IssuingCardShipping)])
    {- ^ Where and how the card will be shipped. -}
    } deriving (Show, Eq, Generic)

instance FromJSON Issuing_Card where
  parseJSON = withObject "Issuing_Card" parseCtors
    where
      parseCtors o = parseIssuing_Card o
      parseIssuing_Card o = do
        issuing_card__id <- o .: "id"
        issuing_card__object <- o .: "object"
        issuing_card__livemode <- o .: "livemode"
        issuing_card__authorizationControls <- o .: "authorization_controls"
        issuing_card__brand <- o .: "brand"
        issuing_card__created <- o .: "created"
        issuing_card__currency <- o .: "currency"
        issuing_card__expMonth <- o .: "exp_month"
        issuing_card__expYear <- o .: "exp_year"
        issuing_card__last4 <- o .: "last4"
        issuing_card__metadata <- o .: "metadata"
        issuing_card__name <- o .: "name"
        issuing_card__status <- o .: "status"
        issuing_card__type <- o .: "type"
        issuing_card__cardholder <- o .:? "cardholder"
        issuing_card__pin <- o .:? "pin"
        issuing_card__replacementFor <- o .:? "replacement_for"
        issuing_card__replacementReason <- o .:? "replacement_reason"
        issuing_card__shipping <- o .:? "shipping"
        pure Issuing_Card{..}

instance ToJSON Issuing_Card where
  toJSON Issuing_Card{..} = object
    (
      ("id" .= issuing_card__id) :
      ("object" .= issuing_card__object) :
      ("livemode" .= issuing_card__livemode) :
      ("authorization_controls" .= issuing_card__authorizationControls) :
      ("brand" .= issuing_card__brand) :
      ("created" .= issuing_card__created) :
      ("currency" .= issuing_card__currency) :
      ("exp_month" .= issuing_card__expMonth) :
      ("exp_year" .= issuing_card__expYear) :
      ("last4" .= issuing_card__last4) :
      ("metadata" .= issuing_card__metadata) :
      ("name" .= issuing_card__name) :
      ("status" .= issuing_card__status) :
      ("type" .= issuing_card__type) :
      (fmap ("cardholder" .=) issuing_card__cardholder) >?>
      (fmap ("pin" .=) issuing_card__pin) >?>
      (fmap ("replacement_for" .=) issuing_card__replacementFor) >?>
      (fmap ("replacement_reason" .=) issuing_card__replacementReason) >?>
      (fmap ("shipping" .=) issuing_card__shipping) >?>
      []
    )
  toEncoding Issuing_Card{..} = pairs (
      "id" .= issuing_card__id <>
      "object" .= issuing_card__object <>
      "livemode" .= issuing_card__livemode <>
      "authorization_controls" .= issuing_card__authorizationControls <>
      "brand" .= issuing_card__brand <>
      "created" .= issuing_card__created <>
      "currency" .= issuing_card__currency <>
      "exp_month" .= issuing_card__expMonth <>
      "exp_year" .= issuing_card__expYear <>
      "last4" .= issuing_card__last4 <>
      "metadata" .= issuing_card__metadata <>
      "name" .= issuing_card__name <>
      "status" .= issuing_card__status <>
      "type" .= issuing_card__type <>
      maybe mempty ("cardholder" .=) issuing_card__cardholder <>
      maybe mempty ("pin" .=) issuing_card__pin <>
      maybe mempty ("replacement_for" .=) issuing_card__replacementFor <>
      maybe mempty ("replacement_reason" .=) issuing_card__replacementReason <>
      maybe mempty ("shipping" .=) issuing_card__shipping
      )

-- Describes: "issuing.card_details"

data Issuing_CardDetails
  = Issuing_CardDetails
    { issuing_cardDetails__object :: Issuing_CardDetails_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , issuing_cardDetails__card :: Issuing_Card
    , issuing_cardDetails__cvc :: Text
    {- ^ The CVC number for the card. -}
    , issuing_cardDetails__expMonth :: Int
    {- ^ The expiration month of the card. -}
    , issuing_cardDetails__expYear :: Int
    {- ^ The expiration year of the card. -}
    , issuing_cardDetails__number :: Text
    {- ^ The card number. -}
    } deriving (Show, Eq, Generic)

instance FromJSON Issuing_CardDetails where
  parseJSON = withObject "Issuing_CardDetails" parseCtors
    where
      parseCtors o = parseIssuing_CardDetails o
      parseIssuing_CardDetails o = do
        issuing_cardDetails__object <- o .: "object"
        issuing_cardDetails__card <- o .: "card"
        issuing_cardDetails__cvc <- o .: "cvc"
        issuing_cardDetails__expMonth <- o .: "exp_month"
        issuing_cardDetails__expYear <- o .: "exp_year"
        issuing_cardDetails__number <- o .: "number"
        pure Issuing_CardDetails{..}

instance ToJSON Issuing_CardDetails where
  toJSON Issuing_CardDetails{..} = object
    (
      ("object" .= issuing_cardDetails__object) :
      ("card" .= issuing_cardDetails__card) :
      ("cvc" .= issuing_cardDetails__cvc) :
      ("exp_month" .= issuing_cardDetails__expMonth) :
      ("exp_year" .= issuing_cardDetails__expYear) :
      ("number" .= issuing_cardDetails__number) :
      []
    )
  toEncoding Issuing_CardDetails{..} = pairs (
      "object" .= issuing_cardDetails__object <>
      "card" .= issuing_cardDetails__card <>
      "cvc" .= issuing_cardDetails__cvc <>
      "exp_month" .= issuing_cardDetails__expMonth <>
      "exp_year" .= issuing_cardDetails__expYear <>
      "number" .= issuing_cardDetails__number
      )

-- Describes: "issuing.card_pin"

data Issuing_CardPin
  = Issuing_CardPin
    { issuing_cardPin__object :: Issuing_CardPin_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , issuing_cardPin__card :: Issuing_Card
    , issuing_cardPin__pin :: Maybe (Text)
    {- ^ The PIN (4 digits number) -}
    } deriving (Show, Eq, Generic)

instance FromJSON Issuing_CardPin where
  parseJSON = withObject "Issuing_CardPin" parseCtors
    where
      parseCtors o = parseIssuing_CardPin o
      parseIssuing_CardPin o = do
        issuing_cardPin__object <- o .: "object"
        issuing_cardPin__card <- o .: "card"
        issuing_cardPin__pin <- o .:? "pin"
        pure Issuing_CardPin{..}

instance ToJSON Issuing_CardPin where
  toJSON Issuing_CardPin{..} = object
    (
      ("object" .= issuing_cardPin__object) :
      ("card" .= issuing_cardPin__card) :
      (fmap ("pin" .=) issuing_cardPin__pin) >?>
      []
    )
  toEncoding Issuing_CardPin{..} = pairs (
      "object" .= issuing_cardPin__object <>
      "card" .= issuing_cardPin__card <>
      maybe mempty ("pin" .=) issuing_cardPin__pin
      )

-- Describes: "issuing.cardholder"

data Issuing_Cardholder
  = Issuing_Cardholder
    { issuing_cardholder__id :: (Id Issuing_Cardholder)
    {- ^ Unique identifier for the object. -}
    , issuing_cardholder__object :: Issuing_Cardholder_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , issuing_cardholder__livemode :: Bool
    {- ^ Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. -}
    , issuing_cardholder__billing :: IssuingCardholderAddress
    , issuing_cardholder__created :: POSIXTime
    {- ^ Time at which the object was created. Measured in seconds since the Unix epoch. -}
    , issuing_cardholder__isDefault :: Bool
    {- ^ Whether or not this cardholder is the default cardholder. -}
    , issuing_cardholder__metadata :: Object
    {- ^ Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. -}
    , issuing_cardholder__name :: Text
    {- ^ The cardholder's name. This will be printed on cards issued to them. -}
    , issuing_cardholder__status :: Issuing_Cardholder_Status
    {- ^ One of `active`, `inactive`, `blocked`, or `pending`. -}
    , issuing_cardholder__type :: Issuing_Cardholder_Type
    {- ^ One of `individual` or `business_entity`. -}
    , issuing_cardholder__authorizationControls :: Maybe (Expandable '[Const (IssuingCardholderAuthorizationControls)])
    , issuing_cardholder__email :: Maybe (Text)
    {- ^ The cardholder's email address. -}
    , issuing_cardholder__phoneNumber :: Maybe (Text)
    {- ^ The cardholder's phone number. -}
    } deriving (Show, Eq, Generic)

instance FromJSON Issuing_Cardholder where
  parseJSON = withObject "Issuing_Cardholder" parseCtors
    where
      parseCtors o = parseIssuing_Cardholder o
      parseIssuing_Cardholder o = do
        issuing_cardholder__id <- o .: "id"
        issuing_cardholder__object <- o .: "object"
        issuing_cardholder__livemode <- o .: "livemode"
        issuing_cardholder__billing <- o .: "billing"
        issuing_cardholder__created <- o .: "created"
        issuing_cardholder__isDefault <- o .: "is_default"
        issuing_cardholder__metadata <- o .: "metadata"
        issuing_cardholder__name <- o .: "name"
        issuing_cardholder__status <- o .: "status"
        issuing_cardholder__type <- o .: "type"
        issuing_cardholder__authorizationControls <- o .:? "authorization_controls"
        issuing_cardholder__email <- o .:? "email"
        issuing_cardholder__phoneNumber <- o .:? "phone_number"
        pure Issuing_Cardholder{..}

instance ToJSON Issuing_Cardholder where
  toJSON Issuing_Cardholder{..} = object
    (
      ("id" .= issuing_cardholder__id) :
      ("object" .= issuing_cardholder__object) :
      ("livemode" .= issuing_cardholder__livemode) :
      ("billing" .= issuing_cardholder__billing) :
      ("created" .= issuing_cardholder__created) :
      ("is_default" .= issuing_cardholder__isDefault) :
      ("metadata" .= issuing_cardholder__metadata) :
      ("name" .= issuing_cardholder__name) :
      ("status" .= issuing_cardholder__status) :
      ("type" .= issuing_cardholder__type) :
      (fmap ("authorization_controls" .=) issuing_cardholder__authorizationControls) >?>
      (fmap ("email" .=) issuing_cardholder__email) >?>
      (fmap ("phone_number" .=) issuing_cardholder__phoneNumber) >?>
      []
    )
  toEncoding Issuing_Cardholder{..} = pairs (
      "id" .= issuing_cardholder__id <>
      "object" .= issuing_cardholder__object <>
      "livemode" .= issuing_cardholder__livemode <>
      "billing" .= issuing_cardholder__billing <>
      "created" .= issuing_cardholder__created <>
      "is_default" .= issuing_cardholder__isDefault <>
      "metadata" .= issuing_cardholder__metadata <>
      "name" .= issuing_cardholder__name <>
      "status" .= issuing_cardholder__status <>
      "type" .= issuing_cardholder__type <>
      maybe mempty ("authorization_controls" .=) issuing_cardholder__authorizationControls <>
      maybe mempty ("email" .=) issuing_cardholder__email <>
      maybe mempty ("phone_number" .=) issuing_cardholder__phoneNumber
      )

-- Describes: "issuing.dispute"

data Issuing_Dispute
  = Issuing_Dispute
    { issuing_dispute__id :: (Id Issuing_Dispute)
    {- ^ Unique identifier for the object. -}
    , issuing_dispute__object :: Issuing_Dispute_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , issuing_dispute__livemode :: Bool
    {- ^ Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. -}
    , issuing_dispute__amount :: Int
    {- ^ Disputed amount. Usually the amount of the `disputed_transaction`, but can differ (usually because of currency fluctuation or because only part of the order is disputed). -}
    , issuing_dispute__created :: POSIXTime
    {- ^ Time at which the object was created. Measured in seconds since the Unix epoch. -}
    , issuing_dispute__currency :: Text
    {- ^ The currency the `disputed_transaction` was made in. -}
    , issuing_dispute__disputedTransaction :: Expandable '[Const (Issuing_Transaction)]
    {- ^ The transaction being disputed. -}
    , issuing_dispute__evidence :: IssuingDisputeEvidence
    , issuing_dispute__metadata :: Object
    {- ^ Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. -}
    , issuing_dispute__reason :: Text
    {- ^ Reason for this dispute. One of `other` or `fraudulent`. -}
    , issuing_dispute__status :: Text
    {- ^ Current status of dispute. One of `unsubmitted`, `under_review`, `won`, or `lost`. -}
    } deriving (Show, Eq, Generic)

instance FromJSON Issuing_Dispute where
  parseJSON = withObject "Issuing_Dispute" parseCtors
    where
      parseCtors o = parseIssuing_Dispute o
      parseIssuing_Dispute o = do
        issuing_dispute__id <- o .: "id"
        issuing_dispute__object <- o .: "object"
        issuing_dispute__livemode <- o .: "livemode"
        issuing_dispute__amount <- o .: "amount"
        issuing_dispute__created <- o .: "created"
        issuing_dispute__currency <- o .: "currency"
        issuing_dispute__disputedTransaction <- o .: "disputed_transaction"
        issuing_dispute__evidence <- o .: "evidence"
        issuing_dispute__metadata <- o .: "metadata"
        issuing_dispute__reason <- o .: "reason"
        issuing_dispute__status <- o .: "status"
        pure Issuing_Dispute{..}

instance ToJSON Issuing_Dispute where
  toJSON Issuing_Dispute{..} = object
    (
      ("id" .= issuing_dispute__id) :
      ("object" .= issuing_dispute__object) :
      ("livemode" .= issuing_dispute__livemode) :
      ("amount" .= issuing_dispute__amount) :
      ("created" .= issuing_dispute__created) :
      ("currency" .= issuing_dispute__currency) :
      ("disputed_transaction" .= issuing_dispute__disputedTransaction) :
      ("evidence" .= issuing_dispute__evidence) :
      ("metadata" .= issuing_dispute__metadata) :
      ("reason" .= issuing_dispute__reason) :
      ("status" .= issuing_dispute__status) :
      []
    )
  toEncoding Issuing_Dispute{..} = pairs (
      "id" .= issuing_dispute__id <>
      "object" .= issuing_dispute__object <>
      "livemode" .= issuing_dispute__livemode <>
      "amount" .= issuing_dispute__amount <>
      "created" .= issuing_dispute__created <>
      "currency" .= issuing_dispute__currency <>
      "disputed_transaction" .= issuing_dispute__disputedTransaction <>
      "evidence" .= issuing_dispute__evidence <>
      "metadata" .= issuing_dispute__metadata <>
      "reason" .= issuing_dispute__reason <>
      "status" .= issuing_dispute__status
      )

-- Describes: "issuing.settlement"

data Issuing_Settlement
  = Issuing_Settlement
    { issuing_settlement__id :: (Id Issuing_Settlement)
    {- ^ Unique identifier for the object. -}
    , issuing_settlement__object :: Issuing_Settlement_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , issuing_settlement__livemode :: Bool
    {- ^ Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. -}
    , issuing_settlement__bin :: Text
    {- ^ The Bank Identification Number reflecting this settlement record. -}
    , issuing_settlement__clearingDate :: Int
    {- ^ The date that the transactions are cleared and posted to user's accounts. -}
    , issuing_settlement__created :: POSIXTime
    {- ^ Time at which the object was created. Measured in seconds since the Unix epoch. -}
    , issuing_settlement__currency :: Text
    {- ^ Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). -}
    , issuing_settlement__interchangeFees :: Int
    {- ^ The total interchange received as reimbursement for the transactions. -}
    , issuing_settlement__metadata :: Object
    {- ^ Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. -}
    , issuing_settlement__netTotal :: Int
    {- ^ The total net amount required to settle with the network. -}
    , issuing_settlement__networkFees :: Int
    {- ^ The total amount of fees owed to the network. -}
    , issuing_settlement__networkSettlementIdentifier :: Text
    {- ^ The Settlement Identification Number assigned by the network. -}
    , issuing_settlement__settlementService :: Text
    {- ^ One of `international` or `uk_national_net`. -}
    , issuing_settlement__transactionCount :: Int
    {- ^ The total number of transactions reflected in this settlement. -}
    , issuing_settlement__transactionVolume :: Int
    {- ^ The total transaction amount reflected in this settlement. -}
    } deriving (Show, Eq, Generic)

instance FromJSON Issuing_Settlement where
  parseJSON = withObject "Issuing_Settlement" parseCtors
    where
      parseCtors o = parseIssuing_Settlement o
      parseIssuing_Settlement o = do
        issuing_settlement__id <- o .: "id"
        issuing_settlement__object <- o .: "object"
        issuing_settlement__livemode <- o .: "livemode"
        issuing_settlement__bin <- o .: "bin"
        issuing_settlement__clearingDate <- o .: "clearing_date"
        issuing_settlement__created <- o .: "created"
        issuing_settlement__currency <- o .: "currency"
        issuing_settlement__interchangeFees <- o .: "interchange_fees"
        issuing_settlement__metadata <- o .: "metadata"
        issuing_settlement__netTotal <- o .: "net_total"
        issuing_settlement__networkFees <- o .: "network_fees"
        issuing_settlement__networkSettlementIdentifier <- o .: "network_settlement_identifier"
        issuing_settlement__settlementService <- o .: "settlement_service"
        issuing_settlement__transactionCount <- o .: "transaction_count"
        issuing_settlement__transactionVolume <- o .: "transaction_volume"
        pure Issuing_Settlement{..}

instance ToJSON Issuing_Settlement where
  toJSON Issuing_Settlement{..} = object
    (
      ("id" .= issuing_settlement__id) :
      ("object" .= issuing_settlement__object) :
      ("livemode" .= issuing_settlement__livemode) :
      ("bin" .= issuing_settlement__bin) :
      ("clearing_date" .= issuing_settlement__clearingDate) :
      ("created" .= issuing_settlement__created) :
      ("currency" .= issuing_settlement__currency) :
      ("interchange_fees" .= issuing_settlement__interchangeFees) :
      ("metadata" .= issuing_settlement__metadata) :
      ("net_total" .= issuing_settlement__netTotal) :
      ("network_fees" .= issuing_settlement__networkFees) :
      ("network_settlement_identifier" .= issuing_settlement__networkSettlementIdentifier) :
      ("settlement_service" .= issuing_settlement__settlementService) :
      ("transaction_count" .= issuing_settlement__transactionCount) :
      ("transaction_volume" .= issuing_settlement__transactionVolume) :
      []
    )
  toEncoding Issuing_Settlement{..} = pairs (
      "id" .= issuing_settlement__id <>
      "object" .= issuing_settlement__object <>
      "livemode" .= issuing_settlement__livemode <>
      "bin" .= issuing_settlement__bin <>
      "clearing_date" .= issuing_settlement__clearingDate <>
      "created" .= issuing_settlement__created <>
      "currency" .= issuing_settlement__currency <>
      "interchange_fees" .= issuing_settlement__interchangeFees <>
      "metadata" .= issuing_settlement__metadata <>
      "net_total" .= issuing_settlement__netTotal <>
      "network_fees" .= issuing_settlement__networkFees <>
      "network_settlement_identifier" .= issuing_settlement__networkSettlementIdentifier <>
      "settlement_service" .= issuing_settlement__settlementService <>
      "transaction_count" .= issuing_settlement__transactionCount <>
      "transaction_volume" .= issuing_settlement__transactionVolume
      )

-- Describes: "issuing.transaction"

data Issuing_Transaction
  = Issuing_Transaction
    { issuing_transaction__id :: (Id Issuing_Transaction)
    {- ^ Unique identifier for the object. -}
    , issuing_transaction__object :: Issuing_Transaction_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , issuing_transaction__livemode :: Bool
    {- ^ Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. -}
    , issuing_transaction__amount :: Int
    , issuing_transaction__card :: Expandable '[Const (Issuing_Card)]
    {- ^ The card used to make this transaction. -}
    , issuing_transaction__created :: POSIXTime
    {- ^ Time at which the object was created. Measured in seconds since the Unix epoch. -}
    , issuing_transaction__currency :: Text
    {- ^ Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). -}
    , issuing_transaction__merchantAmount :: Int
    , issuing_transaction__merchantCurrency :: Text
    , issuing_transaction__merchantData :: IssuingAuthorizationMerchantData
    , issuing_transaction__metadata :: Object
    {- ^ Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. -}
    , issuing_transaction__type :: Text
    {- ^ One of `capture`, `refund`, `cash_withdrawal`, `refund_reversal`, `dispute`, or `dispute_loss`. -}
    , issuing_transaction__authorization :: Maybe (Expandable '[Const (Issuing_Authorization)])
    {- ^ The `Authorization` object that led to this transaction. -}
    , issuing_transaction__balanceTransaction :: Maybe (Expandable '[Const (BalanceTransaction)])
    , issuing_transaction__cardholder :: Maybe (Expandable '[Const (Issuing_Cardholder)])
    {- ^ The cardholder to whom this transaction belongs. -}
    , issuing_transaction__dispute :: Maybe (Expandable '[Const (Issuing_Dispute)])
    } deriving (Show, Eq, Generic)

instance FromJSON Issuing_Transaction where
  parseJSON = withObject "Issuing_Transaction" parseCtors
    where
      parseCtors o = parseIssuing_Transaction o
      parseIssuing_Transaction o = do
        issuing_transaction__id <- o .: "id"
        issuing_transaction__object <- o .: "object"
        issuing_transaction__livemode <- o .: "livemode"
        issuing_transaction__amount <- o .: "amount"
        issuing_transaction__card <- o .: "card"
        issuing_transaction__created <- o .: "created"
        issuing_transaction__currency <- o .: "currency"
        issuing_transaction__merchantAmount <- o .: "merchant_amount"
        issuing_transaction__merchantCurrency <- o .: "merchant_currency"
        issuing_transaction__merchantData <- o .: "merchant_data"
        issuing_transaction__metadata <- o .: "metadata"
        issuing_transaction__type <- o .: "type"
        issuing_transaction__authorization <- o .:? "authorization"
        issuing_transaction__balanceTransaction <- o .:? "balance_transaction"
        issuing_transaction__cardholder <- o .:? "cardholder"
        issuing_transaction__dispute <- o .:? "dispute"
        pure Issuing_Transaction{..}

instance ToJSON Issuing_Transaction where
  toJSON Issuing_Transaction{..} = object
    (
      ("id" .= issuing_transaction__id) :
      ("object" .= issuing_transaction__object) :
      ("livemode" .= issuing_transaction__livemode) :
      ("amount" .= issuing_transaction__amount) :
      ("card" .= issuing_transaction__card) :
      ("created" .= issuing_transaction__created) :
      ("currency" .= issuing_transaction__currency) :
      ("merchant_amount" .= issuing_transaction__merchantAmount) :
      ("merchant_currency" .= issuing_transaction__merchantCurrency) :
      ("merchant_data" .= issuing_transaction__merchantData) :
      ("metadata" .= issuing_transaction__metadata) :
      ("type" .= issuing_transaction__type) :
      (fmap ("authorization" .=) issuing_transaction__authorization) >?>
      (fmap ("balance_transaction" .=) issuing_transaction__balanceTransaction) >?>
      (fmap ("cardholder" .=) issuing_transaction__cardholder) >?>
      (fmap ("dispute" .=) issuing_transaction__dispute) >?>
      []
    )
  toEncoding Issuing_Transaction{..} = pairs (
      "id" .= issuing_transaction__id <>
      "object" .= issuing_transaction__object <>
      "livemode" .= issuing_transaction__livemode <>
      "amount" .= issuing_transaction__amount <>
      "card" .= issuing_transaction__card <>
      "created" .= issuing_transaction__created <>
      "currency" .= issuing_transaction__currency <>
      "merchant_amount" .= issuing_transaction__merchantAmount <>
      "merchant_currency" .= issuing_transaction__merchantCurrency <>
      "merchant_data" .= issuing_transaction__merchantData <>
      "metadata" .= issuing_transaction__metadata <>
      "type" .= issuing_transaction__type <>
      maybe mempty ("authorization" .=) issuing_transaction__authorization <>
      maybe mempty ("balance_transaction" .=) issuing_transaction__balanceTransaction <>
      maybe mempty ("cardholder" .=) issuing_transaction__cardholder <>
      maybe mempty ("dispute" .=) issuing_transaction__dispute
      )

-- Describes: "issuing.verification"

data Issuing_Verification
  = Issuing_Verification
    { issuing_verification__id :: (Id Issuing_Verification)
    {- ^ Unique identifier for the object. -}
    , issuing_verification__object :: Issuing_Verification_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , issuing_verification__card :: Text
    {- ^ The id of the `Card` on which the verification was requested -}
    , issuing_verification__created :: POSIXTime
    {- ^ Time at which the object was created. Measured in seconds since the Unix epoch. -}
    , issuing_verification__expiresAt :: POSIXTime
    {- ^ Timestamp of the expiry for that verification -}
    , issuing_verification__scope :: Issuing_Verification_Scope
    {- ^ The scope of the verification (one of `card_pin_retrieve` or `card_pin_update`) -}
    , issuing_verification__verificationMethod :: Issuing_Verification_VerificationMethod
    {- ^ The method by which the cardholder will be sent a one-time code (one of `email` or `sms`) -}
    } deriving (Show, Eq, Generic)

instance FromJSON Issuing_Verification where
  parseJSON = withObject "Issuing_Verification" parseCtors
    where
      parseCtors o = parseIssuing_Verification o
      parseIssuing_Verification o = do
        issuing_verification__id <- o .: "id"
        issuing_verification__object <- o .: "object"
        issuing_verification__card <- o .: "card"
        issuing_verification__created <- o .: "created"
        issuing_verification__expiresAt <- o .: "expires_at"
        issuing_verification__scope <- o .: "scope"
        issuing_verification__verificationMethod <- o .: "verification_method"
        pure Issuing_Verification{..}

instance ToJSON Issuing_Verification where
  toJSON Issuing_Verification{..} = object
    (
      ("id" .= issuing_verification__id) :
      ("object" .= issuing_verification__object) :
      ("card" .= issuing_verification__card) :
      ("created" .= issuing_verification__created) :
      ("expires_at" .= issuing_verification__expiresAt) :
      ("scope" .= issuing_verification__scope) :
      ("verification_method" .= issuing_verification__verificationMethod) :
      []
    )
  toEncoding Issuing_Verification{..} = pairs (
      "id" .= issuing_verification__id <>
      "object" .= issuing_verification__object <>
      "card" .= issuing_verification__card <>
      "created" .= issuing_verification__created <>
      "expires_at" .= issuing_verification__expiresAt <>
      "scope" .= issuing_verification__scope <>
      "verification_method" .= issuing_verification__verificationMethod
      )

-- Describes: "issuing_authorization_merchant_data"

data IssuingAuthorizationMerchantData
  = IssuingAuthorizationMerchantData
    { issuingAuthorizationMerchantData__category :: Text
    {- ^ A categorization of the seller's type of business. See our [merchant categories guide](https://stripe.com/docs/issuing/merchant-categories) for a list of possible values. -}
    , issuingAuthorizationMerchantData__networkId :: Text
    {- ^ Identifier assigned to the seller by the card brand -}
    , issuingAuthorizationMerchantData__city :: Maybe (Text)
    {- ^ City where the seller is located -}
    , issuingAuthorizationMerchantData__country :: Maybe (Text)
    {- ^ Country where the seller is located -}
    , issuingAuthorizationMerchantData__name :: Maybe (Text)
    {- ^ Name of the seller -}
    , issuingAuthorizationMerchantData__postalCode :: Maybe (Text)
    {- ^ Postal code where the seller is located -}
    , issuingAuthorizationMerchantData__state :: Maybe (Text)
    {- ^ State where the seller is located -}
    , issuingAuthorizationMerchantData__url :: Maybe (Text)
    {- ^ The url an online purchase was made from -}
    } deriving (Show, Eq, Generic)

instance FromJSON IssuingAuthorizationMerchantData where
  parseJSON = withObject "IssuingAuthorizationMerchantData" parseCtors
    where
      parseCtors o = parseIssuingAuthorizationMerchantData o
      parseIssuingAuthorizationMerchantData o = do
        issuingAuthorizationMerchantData__category <- o .: "category"
        issuingAuthorizationMerchantData__networkId <- o .: "network_id"
        issuingAuthorizationMerchantData__city <- o .:? "city"
        issuingAuthorizationMerchantData__country <- o .:? "country"
        issuingAuthorizationMerchantData__name <- o .:? "name"
        issuingAuthorizationMerchantData__postalCode <- o .:? "postal_code"
        issuingAuthorizationMerchantData__state <- o .:? "state"
        issuingAuthorizationMerchantData__url <- o .:? "url"
        pure IssuingAuthorizationMerchantData{..}

instance ToJSON IssuingAuthorizationMerchantData where
  toJSON IssuingAuthorizationMerchantData{..} = object
    (
      ("category" .= issuingAuthorizationMerchantData__category) :
      ("network_id" .= issuingAuthorizationMerchantData__networkId) :
      (fmap ("city" .=) issuingAuthorizationMerchantData__city) >?>
      (fmap ("country" .=) issuingAuthorizationMerchantData__country) >?>
      (fmap ("name" .=) issuingAuthorizationMerchantData__name) >?>
      (fmap ("postal_code" .=) issuingAuthorizationMerchantData__postalCode) >?>
      (fmap ("state" .=) issuingAuthorizationMerchantData__state) >?>
      (fmap ("url" .=) issuingAuthorizationMerchantData__url) >?>
      []
    )
  toEncoding IssuingAuthorizationMerchantData{..} = pairs (
      "category" .= issuingAuthorizationMerchantData__category <>
      "network_id" .= issuingAuthorizationMerchantData__networkId <>
      maybe mempty ("city" .=) issuingAuthorizationMerchantData__city <>
      maybe mempty ("country" .=) issuingAuthorizationMerchantData__country <>
      maybe mempty ("name" .=) issuingAuthorizationMerchantData__name <>
      maybe mempty ("postal_code" .=) issuingAuthorizationMerchantData__postalCode <>
      maybe mempty ("state" .=) issuingAuthorizationMerchantData__state <>
      maybe mempty ("url" .=) issuingAuthorizationMerchantData__url
      )

-- Describes: "issuing_authorization_request"

data IssuingAuthorizationRequest
  = IssuingAuthorizationRequest
    { issuingAuthorizationRequest__approved :: Bool
    {- ^ Whether this request was approved. -}
    , issuingAuthorizationRequest__authorizedAmount :: Int
    {- ^ The amount that was authorized at the time of this request -}
    , issuingAuthorizationRequest__authorizedCurrency :: Text
    {- ^ The currency that was presented to the cardholder for the authorization. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). -}
    , issuingAuthorizationRequest__created :: POSIXTime
    {- ^ Time at which the object was created. Measured in seconds since the Unix epoch. -}
    , issuingAuthorizationRequest__heldAmount :: Int
    {- ^ The amount Stripe held from your account to fund the authorization, if the request was approved -}
    , issuingAuthorizationRequest__heldCurrency :: Text
    {- ^ The currency of the [held amount](https://stripe.com/docs/api#issuing_authorization_object-held_amount) -}
    , issuingAuthorizationRequest__reason :: Text
    {- ^ One of `authentication_failed`, `authorization_controls`, `card_active`, `card_inactive`, `insufficient_funds`, `account_compliance_disabled`, `account_inactive`, `suspected_fraud`, `webhook_approved`, `webhook_declined`, or `webhook_timeout`. -}
    } deriving (Show, Eq, Generic)

instance FromJSON IssuingAuthorizationRequest where
  parseJSON = withObject "IssuingAuthorizationRequest" parseCtors
    where
      parseCtors o = parseIssuingAuthorizationRequest o
      parseIssuingAuthorizationRequest o = do
        issuingAuthorizationRequest__approved <- o .: "approved"
        issuingAuthorizationRequest__authorizedAmount <- o .: "authorized_amount"
        issuingAuthorizationRequest__authorizedCurrency <- o .: "authorized_currency"
        issuingAuthorizationRequest__created <- o .: "created"
        issuingAuthorizationRequest__heldAmount <- o .: "held_amount"
        issuingAuthorizationRequest__heldCurrency <- o .: "held_currency"
        issuingAuthorizationRequest__reason <- o .: "reason"
        pure IssuingAuthorizationRequest{..}

instance ToJSON IssuingAuthorizationRequest where
  toJSON IssuingAuthorizationRequest{..} = object
    (
      ("approved" .= issuingAuthorizationRequest__approved) :
      ("authorized_amount" .= issuingAuthorizationRequest__authorizedAmount) :
      ("authorized_currency" .= issuingAuthorizationRequest__authorizedCurrency) :
      ("created" .= issuingAuthorizationRequest__created) :
      ("held_amount" .= issuingAuthorizationRequest__heldAmount) :
      ("held_currency" .= issuingAuthorizationRequest__heldCurrency) :
      ("reason" .= issuingAuthorizationRequest__reason) :
      []
    )
  toEncoding IssuingAuthorizationRequest{..} = pairs (
      "approved" .= issuingAuthorizationRequest__approved <>
      "authorized_amount" .= issuingAuthorizationRequest__authorizedAmount <>
      "authorized_currency" .= issuingAuthorizationRequest__authorizedCurrency <>
      "created" .= issuingAuthorizationRequest__created <>
      "held_amount" .= issuingAuthorizationRequest__heldAmount <>
      "held_currency" .= issuingAuthorizationRequest__heldCurrency <>
      "reason" .= issuingAuthorizationRequest__reason
      )

-- Describes: "issuing_authorization_verification_data"

data IssuingAuthorizationVerificationData
  = IssuingAuthorizationVerificationData
    { issuingAuthorizationVerificationData__addressLine1Check :: Text
    {- ^ One of `match`, `mismatch`, or `not_provided`. -}
    , issuingAuthorizationVerificationData__addressZipCheck :: Text
    {- ^ One of `match`, `mismatch`, or `not_provided`. -}
    , issuingAuthorizationVerificationData__authentication :: Text
    {- ^ One of `success`, `failure`, `exempt`, or `none`. -}
    , issuingAuthorizationVerificationData__cvcCheck :: Text
    {- ^ One of `match`, `mismatch`, or `not_provided`. -}
    } deriving (Show, Eq, Generic)

instance FromJSON IssuingAuthorizationVerificationData where
  parseJSON = withObject "IssuingAuthorizationVerificationData" parseCtors
    where
      parseCtors o = parseIssuingAuthorizationVerificationData o
      parseIssuingAuthorizationVerificationData o = do
        issuingAuthorizationVerificationData__addressLine1Check <- o .: "address_line1_check"
        issuingAuthorizationVerificationData__addressZipCheck <- o .: "address_zip_check"
        issuingAuthorizationVerificationData__authentication <- o .: "authentication"
        issuingAuthorizationVerificationData__cvcCheck <- o .: "cvc_check"
        pure IssuingAuthorizationVerificationData{..}

instance ToJSON IssuingAuthorizationVerificationData where
  toJSON IssuingAuthorizationVerificationData{..} = object
    (
      ("address_line1_check" .= issuingAuthorizationVerificationData__addressLine1Check) :
      ("address_zip_check" .= issuingAuthorizationVerificationData__addressZipCheck) :
      ("authentication" .= issuingAuthorizationVerificationData__authentication) :
      ("cvc_check" .= issuingAuthorizationVerificationData__cvcCheck) :
      []
    )
  toEncoding IssuingAuthorizationVerificationData{..} = pairs (
      "address_line1_check" .= issuingAuthorizationVerificationData__addressLine1Check <>
      "address_zip_check" .= issuingAuthorizationVerificationData__addressZipCheck <>
      "authentication" .= issuingAuthorizationVerificationData__authentication <>
      "cvc_check" .= issuingAuthorizationVerificationData__cvcCheck
      )

-- Describes: "issuing_card_authorization_controls"

data IssuingCardAuthorizationControls
  = IssuingCardAuthorizationControls
    { issuingCardAuthorizationControls__allowedCategories :: Maybe (Vector (IssuingCardAuthorizationControls_AllowedCategories))
    {- ^ Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations permitted on this card. -}
    , issuingCardAuthorizationControls__blockedCategories :: Maybe (Vector (IssuingCardAuthorizationControls_BlockedCategories))
    {- ^ Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations to always decline on this card. -}
    , issuingCardAuthorizationControls__currency :: Maybe (Text)
    {- ^ The currency of the card. See [max_amount](https://stripe.com/docs/api#issuing_card_object-authorization_controls-max_amount) -}
    , issuingCardAuthorizationControls__maxAmount :: Maybe (Int)
    {- ^ Maximum amount allowed per authorization on this card, in the currency of the card. Authorization amounts in a different currency will be converted to the card's currency when evaluating this control. -}
    , issuingCardAuthorizationControls__maxApprovals :: Maybe (Int)
    {- ^ Maximum count of approved authorizations on this card. Counts all authorizations retroactively. -}
    , issuingCardAuthorizationControls__spendingLimits :: Maybe (Vector (IssuingCardSpendingLimit))
    {- ^ Limit the spending with rules based on time intervals and categories. -}
    , issuingCardAuthorizationControls__spendingLimitsCurrency :: Maybe (Text)
    {- ^ Currency for the amounts within spending_limits. Locked to the currency of the card. -}
    } deriving (Show, Eq, Generic)

instance FromJSON IssuingCardAuthorizationControls where
  parseJSON = withObject "IssuingCardAuthorizationControls" parseCtors
    where
      parseCtors o = parseIssuingCardAuthorizationControls o
      parseIssuingCardAuthorizationControls o = do
        issuingCardAuthorizationControls__allowedCategories <- o .:? "allowed_categories"
        issuingCardAuthorizationControls__blockedCategories <- o .:? "blocked_categories"
        issuingCardAuthorizationControls__currency <- o .:? "currency"
        issuingCardAuthorizationControls__maxAmount <- o .:? "max_amount"
        issuingCardAuthorizationControls__maxApprovals <- o .:? "max_approvals"
        issuingCardAuthorizationControls__spendingLimits <- o .:? "spending_limits"
        issuingCardAuthorizationControls__spendingLimitsCurrency <- o .:? "spending_limits_currency"
        pure IssuingCardAuthorizationControls{..}

instance ToJSON IssuingCardAuthorizationControls where
  toJSON IssuingCardAuthorizationControls{..} = object
    (
      (fmap ("allowed_categories" .=) issuingCardAuthorizationControls__allowedCategories) >?>
      (fmap ("blocked_categories" .=) issuingCardAuthorizationControls__blockedCategories) >?>
      (fmap ("currency" .=) issuingCardAuthorizationControls__currency) >?>
      (fmap ("max_amount" .=) issuingCardAuthorizationControls__maxAmount) >?>
      (fmap ("max_approvals" .=) issuingCardAuthorizationControls__maxApprovals) >?>
      (fmap ("spending_limits" .=) issuingCardAuthorizationControls__spendingLimits) >?>
      (fmap ("spending_limits_currency" .=) issuingCardAuthorizationControls__spendingLimitsCurrency) >?>
      []
    )
  toEncoding IssuingCardAuthorizationControls{..} = pairs (
      maybe mempty ("allowed_categories" .=) issuingCardAuthorizationControls__allowedCategories <>
      maybe mempty ("blocked_categories" .=) issuingCardAuthorizationControls__blockedCategories <>
      maybe mempty ("currency" .=) issuingCardAuthorizationControls__currency <>
      maybe mempty ("max_amount" .=) issuingCardAuthorizationControls__maxAmount <>
      maybe mempty ("max_approvals" .=) issuingCardAuthorizationControls__maxApprovals <>
      maybe mempty ("spending_limits" .=) issuingCardAuthorizationControls__spendingLimits <>
      maybe mempty ("spending_limits_currency" .=) issuingCardAuthorizationControls__spendingLimitsCurrency
      )

-- Describes: "issuing_card_pin"

data IssuingCardPin
  = IssuingCardPin
    { issuingCardPin__status :: Text
    {- ^ The status of the pin. One of `blocked` or `active`. -}
    } deriving (Show, Eq, Generic)

instance FromJSON IssuingCardPin where
  parseJSON = withObject "IssuingCardPin" parseCtors
    where
      parseCtors o = parseIssuingCardPin o
      parseIssuingCardPin o = do
        issuingCardPin__status <- o .: "status"
        pure IssuingCardPin{..}

instance ToJSON IssuingCardPin where
  toJSON IssuingCardPin{..} = object
    (
      ("status" .= issuingCardPin__status) :
      []
    )
  toEncoding IssuingCardPin{..} = pairs (
      "status" .= issuingCardPin__status
      )

-- Describes: "issuing_card_shipping"

data IssuingCardShipping
  = IssuingCardShipping
    { issuingCardShipping__address :: Address
    , issuingCardShipping__name :: Text
    {- ^ Recipient name. -}
    , issuingCardShipping__type :: Text
    {- ^ One of `bulk` or `individual`. Bulk shipments will be grouped and mailed together, while individual ones will not. -}
    , issuingCardShipping__carrier :: Maybe (Text)
    {- ^ The delivery service that shipped a physical product, such as Fedex, UPS, USPS, etc. -}
    , issuingCardShipping__eta :: Maybe (POSIXTime)
    {- ^ A unix timestamp representing a best estimate of when the card will be delivered. -}
    , issuingCardShipping__status :: Maybe (Text)
    {- ^ The delivery status of the card. One of `pending`, `shipped`, `delivered`, `returned`, `failure`, or `canceled`. -}
    , issuingCardShipping__trackingNumber :: Maybe (Text)
    {- ^ A tracking number for a card shipment. -}
    , issuingCardShipping__trackingUrl :: Maybe (Text)
    {- ^ A link to the shipping carrier's site where you can view detailed information about a card shipment. -}
    } deriving (Show, Eq, Generic)

instance FromJSON IssuingCardShipping where
  parseJSON = withObject "IssuingCardShipping" parseCtors
    where
      parseCtors o = parseIssuingCardShipping o
      parseIssuingCardShipping o = do
        issuingCardShipping__address <- o .: "address"
        issuingCardShipping__name <- o .: "name"
        issuingCardShipping__type <- o .: "type"
        issuingCardShipping__carrier <- o .:? "carrier"
        issuingCardShipping__eta <- o .:? "eta"
        issuingCardShipping__status <- o .:? "status"
        issuingCardShipping__trackingNumber <- o .:? "tracking_number"
        issuingCardShipping__trackingUrl <- o .:? "tracking_url"
        pure IssuingCardShipping{..}

instance ToJSON IssuingCardShipping where
  toJSON IssuingCardShipping{..} = object
    (
      ("address" .= issuingCardShipping__address) :
      ("name" .= issuingCardShipping__name) :
      ("type" .= issuingCardShipping__type) :
      (fmap ("carrier" .=) issuingCardShipping__carrier) >?>
      (fmap ("eta" .=) issuingCardShipping__eta) >?>
      (fmap ("status" .=) issuingCardShipping__status) >?>
      (fmap ("tracking_number" .=) issuingCardShipping__trackingNumber) >?>
      (fmap ("tracking_url" .=) issuingCardShipping__trackingUrl) >?>
      []
    )
  toEncoding IssuingCardShipping{..} = pairs (
      "address" .= issuingCardShipping__address <>
      "name" .= issuingCardShipping__name <>
      "type" .= issuingCardShipping__type <>
      maybe mempty ("carrier" .=) issuingCardShipping__carrier <>
      maybe mempty ("eta" .=) issuingCardShipping__eta <>
      maybe mempty ("status" .=) issuingCardShipping__status <>
      maybe mempty ("tracking_number" .=) issuingCardShipping__trackingNumber <>
      maybe mempty ("tracking_url" .=) issuingCardShipping__trackingUrl
      )

-- Describes: "issuing_card_spending_limit"

data IssuingCardSpendingLimit
  = IssuingCardSpendingLimit
    { issuingCardSpendingLimit__amount :: Int
    {- ^ Maximum amount allowed to spend per time interval. -}
    , issuingCardSpendingLimit__interval :: IssuingCardSpendingLimit_Interval
    {- ^ The time interval with which to apply this spending limit towards. Allowed values are `per_authorization`, `daily`, `weekly`, `monthly`, `yearly`, or `all_time`. -}
    , issuingCardSpendingLimit__categories :: Maybe (Vector (IssuingCardSpendingLimit_Categories))
    {- ^ Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) on which to apply the spending limit. Leave this blank to limit all charges. -}
    } deriving (Show, Eq, Generic)

instance FromJSON IssuingCardSpendingLimit where
  parseJSON = withObject "IssuingCardSpendingLimit" parseCtors
    where
      parseCtors o = parseIssuingCardSpendingLimit o
      parseIssuingCardSpendingLimit o = do
        issuingCardSpendingLimit__amount <- o .: "amount"
        issuingCardSpendingLimit__interval <- o .: "interval"
        issuingCardSpendingLimit__categories <- o .:? "categories"
        pure IssuingCardSpendingLimit{..}

instance ToJSON IssuingCardSpendingLimit where
  toJSON IssuingCardSpendingLimit{..} = object
    (
      ("amount" .= issuingCardSpendingLimit__amount) :
      ("interval" .= issuingCardSpendingLimit__interval) :
      (fmap ("categories" .=) issuingCardSpendingLimit__categories) >?>
      []
    )
  toEncoding IssuingCardSpendingLimit{..} = pairs (
      "amount" .= issuingCardSpendingLimit__amount <>
      "interval" .= issuingCardSpendingLimit__interval <>
      maybe mempty ("categories" .=) issuingCardSpendingLimit__categories
      )

-- Describes: "issuing_cardholder_address"

data IssuingCardholderAddress
  = IssuingCardholderAddress
    { issuingCardholderAddress__address :: Address
    , issuingCardholderAddress__name :: Maybe (Text)
    } deriving (Show, Eq, Generic)

instance FromJSON IssuingCardholderAddress where
  parseJSON = withObject "IssuingCardholderAddress" parseCtors
    where
      parseCtors o = parseIssuingCardholderAddress o
      parseIssuingCardholderAddress o = do
        issuingCardholderAddress__address <- o .: "address"
        issuingCardholderAddress__name <- o .:? "name"
        pure IssuingCardholderAddress{..}

instance ToJSON IssuingCardholderAddress where
  toJSON IssuingCardholderAddress{..} = object
    (
      ("address" .= issuingCardholderAddress__address) :
      (fmap ("name" .=) issuingCardholderAddress__name) >?>
      []
    )
  toEncoding IssuingCardholderAddress{..} = pairs (
      "address" .= issuingCardholderAddress__address <>
      maybe mempty ("name" .=) issuingCardholderAddress__name
      )

-- Describes: "issuing_cardholder_authorization_controls"

data IssuingCardholderAuthorizationControls
  = IssuingCardholderAuthorizationControls
    { issuingCardholderAuthorizationControls__allowedCategories :: Maybe (Vector (IssuingCardholderAuthorizationControls_AllowedCategories))
    {- ^ Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations permitted on this card. -}
    , issuingCardholderAuthorizationControls__blockedCategories :: Maybe (Vector (IssuingCardholderAuthorizationControls_BlockedCategories))
    {- ^ Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations to always decline on this card. -}
    , issuingCardholderAuthorizationControls__spendingLimits :: Maybe (Vector (IssuingCardholderSpendingLimit))
    {- ^ Limit the spending with rules based on time intervals and categories. -}
    , issuingCardholderAuthorizationControls__spendingLimitsCurrency :: Maybe (Text)
    {- ^ Currency for the amounts within spending_limits. -}
    } deriving (Show, Eq, Generic)

instance FromJSON IssuingCardholderAuthorizationControls where
  parseJSON = withObject "IssuingCardholderAuthorizationControls" parseCtors
    where
      parseCtors o = parseIssuingCardholderAuthorizationControls o
      parseIssuingCardholderAuthorizationControls o = do
        issuingCardholderAuthorizationControls__allowedCategories <- o .:? "allowed_categories"
        issuingCardholderAuthorizationControls__blockedCategories <- o .:? "blocked_categories"
        issuingCardholderAuthorizationControls__spendingLimits <- o .:? "spending_limits"
        issuingCardholderAuthorizationControls__spendingLimitsCurrency <- o .:? "spending_limits_currency"
        pure IssuingCardholderAuthorizationControls{..}

instance ToJSON IssuingCardholderAuthorizationControls where
  toJSON IssuingCardholderAuthorizationControls{..} = object
    (
      (fmap ("allowed_categories" .=) issuingCardholderAuthorizationControls__allowedCategories) >?>
      (fmap ("blocked_categories" .=) issuingCardholderAuthorizationControls__blockedCategories) >?>
      (fmap ("spending_limits" .=) issuingCardholderAuthorizationControls__spendingLimits) >?>
      (fmap ("spending_limits_currency" .=) issuingCardholderAuthorizationControls__spendingLimitsCurrency) >?>
      []
    )
  toEncoding IssuingCardholderAuthorizationControls{..} = pairs (
      maybe mempty ("allowed_categories" .=) issuingCardholderAuthorizationControls__allowedCategories <>
      maybe mempty ("blocked_categories" .=) issuingCardholderAuthorizationControls__blockedCategories <>
      maybe mempty ("spending_limits" .=) issuingCardholderAuthorizationControls__spendingLimits <>
      maybe mempty ("spending_limits_currency" .=) issuingCardholderAuthorizationControls__spendingLimitsCurrency
      )

-- Describes: "issuing_cardholder_spending_limit"

data IssuingCardholderSpendingLimit
  = IssuingCardholderSpendingLimit
    { issuingCardholderSpendingLimit__amount :: Int
    {- ^ Maximum amount allowed to spend per time interval. -}
    , issuingCardholderSpendingLimit__interval :: IssuingCardholderSpendingLimit_Interval
    {- ^ The time interval with which to apply this spending limit towards. Allowed values are `per_authorization`, `daily`, `weekly`, `monthly`, `yearly`, or `all_time`. -}
    , issuingCardholderSpendingLimit__categories :: Maybe (Vector (IssuingCardholderSpendingLimit_Categories))
    {- ^ Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) on which to apply the spending limit. Leave this blank to limit all charges. -}
    } deriving (Show, Eq, Generic)

instance FromJSON IssuingCardholderSpendingLimit where
  parseJSON = withObject "IssuingCardholderSpendingLimit" parseCtors
    where
      parseCtors o = parseIssuingCardholderSpendingLimit o
      parseIssuingCardholderSpendingLimit o = do
        issuingCardholderSpendingLimit__amount <- o .: "amount"
        issuingCardholderSpendingLimit__interval <- o .: "interval"
        issuingCardholderSpendingLimit__categories <- o .:? "categories"
        pure IssuingCardholderSpendingLimit{..}

instance ToJSON IssuingCardholderSpendingLimit where
  toJSON IssuingCardholderSpendingLimit{..} = object
    (
      ("amount" .= issuingCardholderSpendingLimit__amount) :
      ("interval" .= issuingCardholderSpendingLimit__interval) :
      (fmap ("categories" .=) issuingCardholderSpendingLimit__categories) >?>
      []
    )
  toEncoding IssuingCardholderSpendingLimit{..} = pairs (
      "amount" .= issuingCardholderSpendingLimit__amount <>
      "interval" .= issuingCardholderSpendingLimit__interval <>
      maybe mempty ("categories" .=) issuingCardholderSpendingLimit__categories
      )

-- Describes: "issuing_dispute_evidence"

data IssuingDisputeEvidence
  = IssuingDisputeEvidence
    { issuingDisputeEvidence__fraudulent :: Maybe (Expandable '[Const (IssuingDisputeFraudulentEvidence)])
    {- ^ Evidence to support a fraudulent dispute. This will only be present if your dispute's `reason` is `fraudulent`. -}
    , issuingDisputeEvidence__other :: Maybe (Expandable '[Const (IssuingDisputeOtherEvidence)])
    {- ^ Evidence to support an uncategorized dispute. This will only be present if your dispute's `reason` is `other`. -}
    } deriving (Show, Eq, Generic)

instance FromJSON IssuingDisputeEvidence where
  parseJSON = withObject "IssuingDisputeEvidence" parseCtors
    where
      parseCtors o = parseIssuingDisputeEvidence o
      parseIssuingDisputeEvidence o = do
        issuingDisputeEvidence__fraudulent <- o .:? "fraudulent"
        issuingDisputeEvidence__other <- o .:? "other"
        pure IssuingDisputeEvidence{..}

instance ToJSON IssuingDisputeEvidence where
  toJSON IssuingDisputeEvidence{..} = object
    (
      (fmap ("fraudulent" .=) issuingDisputeEvidence__fraudulent) >?>
      (fmap ("other" .=) issuingDisputeEvidence__other) >?>
      []
    )
  toEncoding IssuingDisputeEvidence{..} = pairs (
      maybe mempty ("fraudulent" .=) issuingDisputeEvidence__fraudulent <>
      maybe mempty ("other" .=) issuingDisputeEvidence__other
      )

-- Describes: "issuing_dispute_fraudulent_evidence"

data IssuingDisputeFraudulentEvidence
  = IssuingDisputeFraudulentEvidence
    { issuingDisputeFraudulentEvidence__disputeExplanation :: Maybe (Text)
    {- ^ Brief freeform text explaining why you are disputing this transaction. -}
    , issuingDisputeFraudulentEvidence__uncategorizedFile :: Maybe (Expandable '[Const (File)])
    {- ^ (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional file evidence supporting your dispute. -}
    } deriving (Show, Eq, Generic)

instance FromJSON IssuingDisputeFraudulentEvidence where
  parseJSON = withObject "IssuingDisputeFraudulentEvidence" parseCtors
    where
      parseCtors o = parseIssuingDisputeFraudulentEvidence o
      parseIssuingDisputeFraudulentEvidence o = do
        issuingDisputeFraudulentEvidence__disputeExplanation <- o .:? "dispute_explanation"
        issuingDisputeFraudulentEvidence__uncategorizedFile <- o .:? "uncategorized_file"
        pure IssuingDisputeFraudulentEvidence{..}

instance ToJSON IssuingDisputeFraudulentEvidence where
  toJSON IssuingDisputeFraudulentEvidence{..} = object
    (
      (fmap ("dispute_explanation" .=) issuingDisputeFraudulentEvidence__disputeExplanation) >?>
      (fmap ("uncategorized_file" .=) issuingDisputeFraudulentEvidence__uncategorizedFile) >?>
      []
    )
  toEncoding IssuingDisputeFraudulentEvidence{..} = pairs (
      maybe mempty ("dispute_explanation" .=) issuingDisputeFraudulentEvidence__disputeExplanation <>
      maybe mempty ("uncategorized_file" .=) issuingDisputeFraudulentEvidence__uncategorizedFile
      )

-- Describes: "issuing_dispute_other_evidence"

data IssuingDisputeOtherEvidence
  = IssuingDisputeOtherEvidence
    { issuingDisputeOtherEvidence__disputeExplanation :: Text
    {- ^ Brief freeform text explaining why you are disputing this transaction. -}
    , issuingDisputeOtherEvidence__uncategorizedFile :: Maybe (Expandable '[Const (File)])
    {- ^ (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional file evidence supporting your dispute. -}
    } deriving (Show, Eq, Generic)

instance FromJSON IssuingDisputeOtherEvidence where
  parseJSON = withObject "IssuingDisputeOtherEvidence" parseCtors
    where
      parseCtors o = parseIssuingDisputeOtherEvidence o
      parseIssuingDisputeOtherEvidence o = do
        issuingDisputeOtherEvidence__disputeExplanation <- o .: "dispute_explanation"
        issuingDisputeOtherEvidence__uncategorizedFile <- o .:? "uncategorized_file"
        pure IssuingDisputeOtherEvidence{..}

instance ToJSON IssuingDisputeOtherEvidence where
  toJSON IssuingDisputeOtherEvidence{..} = object
    (
      ("dispute_explanation" .= issuingDisputeOtherEvidence__disputeExplanation) :
      (fmap ("uncategorized_file" .=) issuingDisputeOtherEvidence__uncategorizedFile) >?>
      []
    )
  toEncoding IssuingDisputeOtherEvidence{..} = pairs (
      "dispute_explanation" .= issuingDisputeOtherEvidence__disputeExplanation <>
      maybe mempty ("uncategorized_file" .=) issuingDisputeOtherEvidence__uncategorizedFile
      )

-- Describes: "legal_entity_company"

data LegalEntityCompany
  = LegalEntityCompany
    { legalEntityCompany__address :: Address
    , legalEntityCompany__directorsProvided :: Bool
    {- ^ Whether the company's directors have been provided. This Boolean will be `true` if you've manually indicated that all directors are provided via [the `directors_provided` parameter](https://stripe.com/docs/api/accounts/update#update_account-company-directors_provided). -}
    , legalEntityCompany__ownersProvided :: Bool
    {- ^ Whether the company's owners have been provided. This Boolean will be `true` if you've manually indicated that all owners are provided via [the `owners_provided` parameter](https://stripe.com/docs/api/accounts/update#update_account-company-owners_provided), or if Stripe determined that all owners were provided. Stripe determines ownership requirements using both the number of owners provided and their total percent ownership (calculated by adding the `percent_ownership` of each owner together). -}
    , legalEntityCompany__taxIdProvided :: Bool
    {- ^ Whether the company's business ID number was provided. -}
    , legalEntityCompany__taxIdRegistrar :: Text
    {- ^ The jurisdiction in which the `tax_id` is registered (Germany-based companies only). -}
    , legalEntityCompany__vatIdProvided :: Bool
    {- ^ Whether the company's business VAT number was provided. -}
    , legalEntityCompany__addressKana :: Maybe (Expandable '[Const (LegalEntityJapanAddress)])
    {- ^ The Kana variation of the company's primary address (Japan only). -}
    , legalEntityCompany__addressKanji :: Maybe (Expandable '[Const (LegalEntityJapanAddress)])
    {- ^ The Kanji variation of the company's primary address (Japan only). -}
    , legalEntityCompany__name :: Maybe (Text)
    {- ^ The company's legal name. -}
    , legalEntityCompany__nameKana :: Maybe (Text)
    {- ^ The Kana variation of the company's legal name (Japan only). -}
    , legalEntityCompany__nameKanji :: Maybe (Text)
    {- ^ The Kanji variation of the company's legal name (Japan only). -}
    , legalEntityCompany__phone :: Maybe (Text)
    {- ^ The company's phone number (used for verification). -}
    , legalEntityCompany__verification :: Maybe (Expandable '[Const (LegalEntityCompanyVerification)])
    {- ^ Information on the verification state of the company. -}
    } deriving (Show, Eq, Generic)

instance FromJSON LegalEntityCompany where
  parseJSON = withObject "LegalEntityCompany" parseCtors
    where
      parseCtors o = parseLegalEntityCompany o
      parseLegalEntityCompany o = do
        legalEntityCompany__address <- o .: "address"
        legalEntityCompany__directorsProvided <- o .: "directors_provided"
        legalEntityCompany__ownersProvided <- o .: "owners_provided"
        legalEntityCompany__taxIdProvided <- o .: "tax_id_provided"
        legalEntityCompany__taxIdRegistrar <- o .: "tax_id_registrar"
        legalEntityCompany__vatIdProvided <- o .: "vat_id_provided"
        legalEntityCompany__addressKana <- o .:? "address_kana"
        legalEntityCompany__addressKanji <- o .:? "address_kanji"
        legalEntityCompany__name <- o .:? "name"
        legalEntityCompany__nameKana <- o .:? "name_kana"
        legalEntityCompany__nameKanji <- o .:? "name_kanji"
        legalEntityCompany__phone <- o .:? "phone"
        legalEntityCompany__verification <- o .:? "verification"
        pure LegalEntityCompany{..}

instance ToJSON LegalEntityCompany where
  toJSON LegalEntityCompany{..} = object
    (
      ("address" .= legalEntityCompany__address) :
      ("directors_provided" .= legalEntityCompany__directorsProvided) :
      ("owners_provided" .= legalEntityCompany__ownersProvided) :
      ("tax_id_provided" .= legalEntityCompany__taxIdProvided) :
      ("tax_id_registrar" .= legalEntityCompany__taxIdRegistrar) :
      ("vat_id_provided" .= legalEntityCompany__vatIdProvided) :
      (fmap ("address_kana" .=) legalEntityCompany__addressKana) >?>
      (fmap ("address_kanji" .=) legalEntityCompany__addressKanji) >?>
      (fmap ("name" .=) legalEntityCompany__name) >?>
      (fmap ("name_kana" .=) legalEntityCompany__nameKana) >?>
      (fmap ("name_kanji" .=) legalEntityCompany__nameKanji) >?>
      (fmap ("phone" .=) legalEntityCompany__phone) >?>
      (fmap ("verification" .=) legalEntityCompany__verification) >?>
      []
    )
  toEncoding LegalEntityCompany{..} = pairs (
      "address" .= legalEntityCompany__address <>
      "directors_provided" .= legalEntityCompany__directorsProvided <>
      "owners_provided" .= legalEntityCompany__ownersProvided <>
      "tax_id_provided" .= legalEntityCompany__taxIdProvided <>
      "tax_id_registrar" .= legalEntityCompany__taxIdRegistrar <>
      "vat_id_provided" .= legalEntityCompany__vatIdProvided <>
      maybe mempty ("address_kana" .=) legalEntityCompany__addressKana <>
      maybe mempty ("address_kanji" .=) legalEntityCompany__addressKanji <>
      maybe mempty ("name" .=) legalEntityCompany__name <>
      maybe mempty ("name_kana" .=) legalEntityCompany__nameKana <>
      maybe mempty ("name_kanji" .=) legalEntityCompany__nameKanji <>
      maybe mempty ("phone" .=) legalEntityCompany__phone <>
      maybe mempty ("verification" .=) legalEntityCompany__verification
      )

-- Describes: "legal_entity_company_verification"

data LegalEntityCompanyVerification
  = LegalEntityCompanyVerification
    { legalEntityCompanyVerification__document :: LegalEntityCompanyVerificationDocument
    } deriving (Show, Eq, Generic)

instance FromJSON LegalEntityCompanyVerification where
  parseJSON = withObject "LegalEntityCompanyVerification" parseCtors
    where
      parseCtors o = parseLegalEntityCompanyVerification o
      parseLegalEntityCompanyVerification o = do
        legalEntityCompanyVerification__document <- o .: "document"
        pure LegalEntityCompanyVerification{..}

instance ToJSON LegalEntityCompanyVerification where
  toJSON LegalEntityCompanyVerification{..} = object
    (
      ("document" .= legalEntityCompanyVerification__document) :
      []
    )
  toEncoding LegalEntityCompanyVerification{..} = pairs (
      "document" .= legalEntityCompanyVerification__document
      )

-- Describes: "legal_entity_company_verification_document"

data LegalEntityCompanyVerificationDocument
  = LegalEntityCompanyVerificationDocument
    { legalEntityCompanyVerificationDocument__back :: Maybe (Expandable '[Const (File)])
    {- ^ The back of a document returned by a [file upload](#create_file) with a `purpose` value of `additional_verification`. -}
    , legalEntityCompanyVerificationDocument__details :: Maybe (Text)
    {- ^ A user-displayable string describing the verification state of this document. -}
    , legalEntityCompanyVerificationDocument__detailsCode :: Maybe (Text)
    {- ^ One of `document_corrupt`, `document_expired`, `document_failed_copy`, `document_failed_greyscale`, `document_failed_other`, `document_failed_test_mode`, `document_fraudulent`, `document_incomplete`, `document_invalid`, `document_manipulated`, `document_not_readable`, `document_not_uploaded`, `document_type_not_supported`, or `document_too_large`. A machine-readable code specifying the verification state for this document. -}
    , legalEntityCompanyVerificationDocument__front :: Maybe (Expandable '[Const (File)])
    {- ^ The front of a document returned by a [file upload](#create_file) with a `purpose` value of `additional_verification`. -}
    } deriving (Show, Eq, Generic)

instance FromJSON LegalEntityCompanyVerificationDocument where
  parseJSON = withObject "LegalEntityCompanyVerificationDocument" parseCtors
    where
      parseCtors o = parseLegalEntityCompanyVerificationDocument o
      parseLegalEntityCompanyVerificationDocument o = do
        legalEntityCompanyVerificationDocument__back <- o .:? "back"
        legalEntityCompanyVerificationDocument__details <- o .:? "details"
        legalEntityCompanyVerificationDocument__detailsCode <- o .:? "details_code"
        legalEntityCompanyVerificationDocument__front <- o .:? "front"
        pure LegalEntityCompanyVerificationDocument{..}

instance ToJSON LegalEntityCompanyVerificationDocument where
  toJSON LegalEntityCompanyVerificationDocument{..} = object
    (
      (fmap ("back" .=) legalEntityCompanyVerificationDocument__back) >?>
      (fmap ("details" .=) legalEntityCompanyVerificationDocument__details) >?>
      (fmap ("details_code" .=) legalEntityCompanyVerificationDocument__detailsCode) >?>
      (fmap ("front" .=) legalEntityCompanyVerificationDocument__front) >?>
      []
    )
  toEncoding LegalEntityCompanyVerificationDocument{..} = pairs (
      maybe mempty ("back" .=) legalEntityCompanyVerificationDocument__back <>
      maybe mempty ("details" .=) legalEntityCompanyVerificationDocument__details <>
      maybe mempty ("details_code" .=) legalEntityCompanyVerificationDocument__detailsCode <>
      maybe mempty ("front" .=) legalEntityCompanyVerificationDocument__front
      )

-- Describes: "legal_entity_dob"

data LegalEntityDob
  = LegalEntityDob
    { legalEntityDob__day :: Maybe (Int)
    {- ^ The day of birth, between 1 and 31. -}
    , legalEntityDob__month :: Maybe (Int)
    {- ^ The month of birth, between 1 and 12. -}
    , legalEntityDob__year :: Maybe (Int)
    {- ^ The four-digit year of birth. -}
    } deriving (Show, Eq, Generic)

instance FromJSON LegalEntityDob where
  parseJSON = withObject "LegalEntityDob" parseCtors
    where
      parseCtors o = parseLegalEntityDob o
      parseLegalEntityDob o = do
        legalEntityDob__day <- o .:? "day"
        legalEntityDob__month <- o .:? "month"
        legalEntityDob__year <- o .:? "year"
        pure LegalEntityDob{..}

instance ToJSON LegalEntityDob where
  toJSON LegalEntityDob{..} = object
    (
      (fmap ("day" .=) legalEntityDob__day) >?>
      (fmap ("month" .=) legalEntityDob__month) >?>
      (fmap ("year" .=) legalEntityDob__year) >?>
      []
    )
  toEncoding LegalEntityDob{..} = pairs (
      maybe mempty ("day" .=) legalEntityDob__day <>
      maybe mempty ("month" .=) legalEntityDob__month <>
      maybe mempty ("year" .=) legalEntityDob__year
      )

-- Describes: "legal_entity_japan_address"

data LegalEntityJapanAddress
  = LegalEntityJapanAddress
    { legalEntityJapanAddress__city :: Maybe (Text)
    {- ^ City/Ward. -}
    , legalEntityJapanAddress__country :: Maybe (Text)
    {- ^ Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)). -}
    , legalEntityJapanAddress__line1 :: Maybe (Text)
    {- ^ Block/Building number. -}
    , legalEntityJapanAddress__line2 :: Maybe (Text)
    {- ^ Building details. -}
    , legalEntityJapanAddress__postalCode :: Maybe (Text)
    {- ^ Zip/Postal Code. -}
    , legalEntityJapanAddress__state :: Maybe (Text)
    {- ^ Prefecture. -}
    , legalEntityJapanAddress__town :: Maybe (Text)
    {- ^ Town/cho-me. -}
    } deriving (Show, Eq, Generic)

instance FromJSON LegalEntityJapanAddress where
  parseJSON = withObject "LegalEntityJapanAddress" parseCtors
    where
      parseCtors o = parseLegalEntityJapanAddress o
      parseLegalEntityJapanAddress o = do
        legalEntityJapanAddress__city <- o .:? "city"
        legalEntityJapanAddress__country <- o .:? "country"
        legalEntityJapanAddress__line1 <- o .:? "line1"
        legalEntityJapanAddress__line2 <- o .:? "line2"
        legalEntityJapanAddress__postalCode <- o .:? "postal_code"
        legalEntityJapanAddress__state <- o .:? "state"
        legalEntityJapanAddress__town <- o .:? "town"
        pure LegalEntityJapanAddress{..}

instance ToJSON LegalEntityJapanAddress where
  toJSON LegalEntityJapanAddress{..} = object
    (
      (fmap ("city" .=) legalEntityJapanAddress__city) >?>
      (fmap ("country" .=) legalEntityJapanAddress__country) >?>
      (fmap ("line1" .=) legalEntityJapanAddress__line1) >?>
      (fmap ("line2" .=) legalEntityJapanAddress__line2) >?>
      (fmap ("postal_code" .=) legalEntityJapanAddress__postalCode) >?>
      (fmap ("state" .=) legalEntityJapanAddress__state) >?>
      (fmap ("town" .=) legalEntityJapanAddress__town) >?>
      []
    )
  toEncoding LegalEntityJapanAddress{..} = pairs (
      maybe mempty ("city" .=) legalEntityJapanAddress__city <>
      maybe mempty ("country" .=) legalEntityJapanAddress__country <>
      maybe mempty ("line1" .=) legalEntityJapanAddress__line1 <>
      maybe mempty ("line2" .=) legalEntityJapanAddress__line2 <>
      maybe mempty ("postal_code" .=) legalEntityJapanAddress__postalCode <>
      maybe mempty ("state" .=) legalEntityJapanAddress__state <>
      maybe mempty ("town" .=) legalEntityJapanAddress__town
      )

-- Describes: "legal_entity_person_verification"

data LegalEntityPersonVerification
  = LegalEntityPersonVerification
    { legalEntityPersonVerification__document :: LegalEntityPersonVerificationDocument
    , legalEntityPersonVerification__status :: Text
    {- ^ The state of verification for the person. Possible values are `unverified`, `pending`, or `verified`. -}
    , legalEntityPersonVerification__additionalDocument :: Maybe (Expandable '[Const (LegalEntityPersonVerificationDocument)])
    {- ^ A document showing address, either a passport, local ID card, or utility bill from a well-known utility company. -}
    , legalEntityPersonVerification__details :: Maybe (Text)
    {- ^ A user-displayable string describing the verification state for the person. For example, this may say "Provided identity information could not be verified". -}
    , legalEntityPersonVerification__detailsCode :: Maybe (Text)
    {- ^ One of `scan_name_mismatch`, `failed_keyed_identity`, or `failed_other`. A machine-readable code specifying the verification state for the person. -}
    } deriving (Show, Eq, Generic)

instance FromJSON LegalEntityPersonVerification where
  parseJSON = withObject "LegalEntityPersonVerification" parseCtors
    where
      parseCtors o = parseLegalEntityPersonVerification o
      parseLegalEntityPersonVerification o = do
        legalEntityPersonVerification__document <- o .: "document"
        legalEntityPersonVerification__status <- o .: "status"
        legalEntityPersonVerification__additionalDocument <- o .:? "additional_document"
        legalEntityPersonVerification__details <- o .:? "details"
        legalEntityPersonVerification__detailsCode <- o .:? "details_code"
        pure LegalEntityPersonVerification{..}

instance ToJSON LegalEntityPersonVerification where
  toJSON LegalEntityPersonVerification{..} = object
    (
      ("document" .= legalEntityPersonVerification__document) :
      ("status" .= legalEntityPersonVerification__status) :
      (fmap ("additional_document" .=) legalEntityPersonVerification__additionalDocument) >?>
      (fmap ("details" .=) legalEntityPersonVerification__details) >?>
      (fmap ("details_code" .=) legalEntityPersonVerification__detailsCode) >?>
      []
    )
  toEncoding LegalEntityPersonVerification{..} = pairs (
      "document" .= legalEntityPersonVerification__document <>
      "status" .= legalEntityPersonVerification__status <>
      maybe mempty ("additional_document" .=) legalEntityPersonVerification__additionalDocument <>
      maybe mempty ("details" .=) legalEntityPersonVerification__details <>
      maybe mempty ("details_code" .=) legalEntityPersonVerification__detailsCode
      )

-- Describes: "legal_entity_person_verification_document"

data LegalEntityPersonVerificationDocument
  = LegalEntityPersonVerificationDocument
    { legalEntityPersonVerificationDocument__back :: Maybe (Expandable '[Const (File)])
    {- ^ The back of an ID returned by a [file upload](#create_file) with a `purpose` value of `identity_document`. -}
    , legalEntityPersonVerificationDocument__details :: Maybe (Text)
    {- ^ A user-displayable string describing the verification state of this document. For example, if a document is uploaded and the picture is too fuzzy, this may say "Identity document is too unclear to read". -}
    , legalEntityPersonVerificationDocument__detailsCode :: Maybe (Text)
    {- ^ One of `document_corrupt`, `document_failed_copy`, `document_not_readable`, `document_failed_greyscale`, `document_not_uploaded`, `document_id_type_not_supported`, `document_id_country_not_supported`, `document_failed_other`, `document_fraudulent`, `document_invalid`, `document_manipulated`, `document_missing_back`, `document_missing_front`, `document_photo_mismatch`, `document_too_large`, or `document_failed_test_mode`. A machine-readable code specifying the verification state for this document. -}
    , legalEntityPersonVerificationDocument__front :: Maybe (Expandable '[Const (File)])
    {- ^ The front of an ID returned by a [file upload](#create_file) with a `purpose` value of `identity_document`. -}
    } deriving (Show, Eq, Generic)

instance FromJSON LegalEntityPersonVerificationDocument where
  parseJSON = withObject "LegalEntityPersonVerificationDocument" parseCtors
    where
      parseCtors o = parseLegalEntityPersonVerificationDocument o
      parseLegalEntityPersonVerificationDocument o = do
        legalEntityPersonVerificationDocument__back <- o .:? "back"
        legalEntityPersonVerificationDocument__details <- o .:? "details"
        legalEntityPersonVerificationDocument__detailsCode <- o .:? "details_code"
        legalEntityPersonVerificationDocument__front <- o .:? "front"
        pure LegalEntityPersonVerificationDocument{..}

instance ToJSON LegalEntityPersonVerificationDocument where
  toJSON LegalEntityPersonVerificationDocument{..} = object
    (
      (fmap ("back" .=) legalEntityPersonVerificationDocument__back) >?>
      (fmap ("details" .=) legalEntityPersonVerificationDocument__details) >?>
      (fmap ("details_code" .=) legalEntityPersonVerificationDocument__detailsCode) >?>
      (fmap ("front" .=) legalEntityPersonVerificationDocument__front) >?>
      []
    )
  toEncoding LegalEntityPersonVerificationDocument{..} = pairs (
      maybe mempty ("back" .=) legalEntityPersonVerificationDocument__back <>
      maybe mempty ("details" .=) legalEntityPersonVerificationDocument__details <>
      maybe mempty ("details_code" .=) legalEntityPersonVerificationDocument__detailsCode <>
      maybe mempty ("front" .=) legalEntityPersonVerificationDocument__front
      )

-- Describes: "light_account_logout"

data LightAccountLogout
  = LightAccountLogout
    {
    } deriving (Show, Eq, Generic)

instance FromJSON LightAccountLogout where
  parseJSON = withObject "LightAccountLogout" parseCtors
    where
      parseCtors o = parseLightAccountLogout o
      parseLightAccountLogout o = do
        pure LightAccountLogout

instance ToJSON LightAccountLogout where
  toJSON LightAccountLogout = object
    (
      []
    )
  toEncoding LightAccountLogout = pairs (
      mempty
      )

-- Describes: "line_item"

data LineItem
  = LineItem
    { lineItem__id :: (Id LineItem)
    {- ^ Unique identifier for the object. -}
    , lineItem__object :: LineItem_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , lineItem__livemode :: Bool
    {- ^ Whether this is a test line item. -}
    , lineItem__amount :: Int
    {- ^ The amount, in %s. -}
    , lineItem__currency :: Text
    {- ^ Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). -}
    , lineItem__discountable :: Bool
    {- ^ If true, discounts will apply to this line item. Always false for prorations. -}
    , lineItem__invoiceItem :: Text
    , lineItem__metadata :: Object
    {- ^ Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Note that for line items with `type=subscription` this will reflect the metadata of the subscription that caused the line item to be created. -}
    , lineItem__period :: InvoiceLineItemPeriod
    , lineItem__proration :: Bool
    {- ^ Whether this is a proration. -}
    , lineItem__subscriptionItem :: Text
    {- ^ The subscription item that generated this invoice item. Left empty if the line item is not an explicit result of a subscription. -}
    , lineItem__type :: LineItem_Type
    {- ^ A string identifying the type of the source of this line item, either an `invoiceitem` or a `subscription`. -}
    , lineItem__unifiedProration :: Bool
    {- ^ For prorations this indicates whether Stripe automatically grouped multiple related debit and credit line items into a single combined line item. -}
    , lineItem__description :: Maybe (Text)
    {- ^ An arbitrary string attached to the object. Often useful for displaying to users. -}
    , lineItem__plan :: Maybe (Expandable '[Const (Plan)])
    {- ^ The plan of the subscription, if the line item is a subscription or a proration. -}
    , lineItem__quantity :: Maybe (Int)
    {- ^ The quantity of the subscription, if the line item is a subscription or a proration. -}
    , lineItem__subscription :: Maybe (Text)
    {- ^ The subscription that the invoice item pertains to, if any. -}
    , lineItem__taxAmounts :: Maybe (Vector (InvoiceTaxAmount))
    {- ^ The amount of tax calculated per tax rate for this line item -}
    , lineItem__taxRates :: Maybe (Vector (TaxRate))
    {- ^ The tax rates which apply to the line item. -}
    } deriving (Show, Eq, Generic)

instance FromJSON LineItem where
  parseJSON = withObject "LineItem" parseCtors
    where
      parseCtors o = parseLineItem o
      parseLineItem o = do
        lineItem__id <- o .: "id"
        lineItem__object <- o .: "object"
        lineItem__livemode <- o .: "livemode"
        lineItem__amount <- o .: "amount"
        lineItem__currency <- o .: "currency"
        lineItem__discountable <- o .: "discountable"
        lineItem__invoiceItem <- o .: "invoice_item"
        lineItem__metadata <- o .: "metadata"
        lineItem__period <- o .: "period"
        lineItem__proration <- o .: "proration"
        lineItem__subscriptionItem <- o .: "subscription_item"
        lineItem__type <- o .: "type"
        lineItem__unifiedProration <- o .: "unified_proration"
        lineItem__description <- o .:? "description"
        lineItem__plan <- o .:? "plan"
        lineItem__quantity <- o .:? "quantity"
        lineItem__subscription <- o .:? "subscription"
        lineItem__taxAmounts <- o .:? "tax_amounts"
        lineItem__taxRates <- o .:? "tax_rates"
        pure LineItem{..}

instance ToJSON LineItem where
  toJSON LineItem{..} = object
    (
      ("id" .= lineItem__id) :
      ("object" .= lineItem__object) :
      ("livemode" .= lineItem__livemode) :
      ("amount" .= lineItem__amount) :
      ("currency" .= lineItem__currency) :
      ("discountable" .= lineItem__discountable) :
      ("invoice_item" .= lineItem__invoiceItem) :
      ("metadata" .= lineItem__metadata) :
      ("period" .= lineItem__period) :
      ("proration" .= lineItem__proration) :
      ("subscription_item" .= lineItem__subscriptionItem) :
      ("type" .= lineItem__type) :
      ("unified_proration" .= lineItem__unifiedProration) :
      (fmap ("description" .=) lineItem__description) >?>
      (fmap ("plan" .=) lineItem__plan) >?>
      (fmap ("quantity" .=) lineItem__quantity) >?>
      (fmap ("subscription" .=) lineItem__subscription) >?>
      (fmap ("tax_amounts" .=) lineItem__taxAmounts) >?>
      (fmap ("tax_rates" .=) lineItem__taxRates) >?>
      []
    )
  toEncoding LineItem{..} = pairs (
      "id" .= lineItem__id <>
      "object" .= lineItem__object <>
      "livemode" .= lineItem__livemode <>
      "amount" .= lineItem__amount <>
      "currency" .= lineItem__currency <>
      "discountable" .= lineItem__discountable <>
      "invoice_item" .= lineItem__invoiceItem <>
      "metadata" .= lineItem__metadata <>
      "period" .= lineItem__period <>
      "proration" .= lineItem__proration <>
      "subscription_item" .= lineItem__subscriptionItem <>
      "type" .= lineItem__type <>
      "unified_proration" .= lineItem__unifiedProration <>
      maybe mempty ("description" .=) lineItem__description <>
      maybe mempty ("plan" .=) lineItem__plan <>
      maybe mempty ("quantity" .=) lineItem__quantity <>
      maybe mempty ("subscription" .=) lineItem__subscription <>
      maybe mempty ("tax_amounts" .=) lineItem__taxAmounts <>
      maybe mempty ("tax_rates" .=) lineItem__taxRates
      )

-- Describes: "login_link"

data LoginLink
  = LoginLink
    { loginLink__object :: LoginLink_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , loginLink__created :: POSIXTime
    {- ^ Time at which the object was created. Measured in seconds since the Unix epoch. -}
    , loginLink__url :: Text
    {- ^ The URL for the login link. -}
    } deriving (Show, Eq, Generic)

instance FromJSON LoginLink where
  parseJSON = withObject "LoginLink" parseCtors
    where
      parseCtors o = parseLoginLink o
      parseLoginLink o = do
        loginLink__object <- o .: "object"
        loginLink__created <- o .: "created"
        loginLink__url <- o .: "url"
        pure LoginLink{..}

instance ToJSON LoginLink where
  toJSON LoginLink{..} = object
    (
      ("object" .= loginLink__object) :
      ("created" .= loginLink__created) :
      ("url" .= loginLink__url) :
      []
    )
  toEncoding LoginLink{..} = pairs (
      "object" .= loginLink__object <>
      "created" .= loginLink__created <>
      "url" .= loginLink__url
      )

-- Describes: "notification_event_data"

data NotificationEventData
  = NotificationEventData
    { notificationEventData__object :: Object
    {- ^ Object containing the API resource relevant to the event. For example, an `invoice.created` event will have a full [invoice object](#invoice_object) as the value of the object key. -}
    , notificationEventData__previousAttributes :: Object
    {- ^ Object containing the names of the attributes that have changed, and their previous values (sent along only with *.updated events). -}
    } deriving (Show, Eq, Generic)

instance FromJSON NotificationEventData where
  parseJSON = withObject "NotificationEventData" parseCtors
    where
      parseCtors o = parseNotificationEventData o
      parseNotificationEventData o = do
        notificationEventData__object <- o .: "object"
        notificationEventData__previousAttributes <- o .: "previous_attributes"
        pure NotificationEventData{..}

instance ToJSON NotificationEventData where
  toJSON NotificationEventData{..} = object
    (
      ("object" .= notificationEventData__object) :
      ("previous_attributes" .= notificationEventData__previousAttributes) :
      []
    )
  toEncoding NotificationEventData{..} = pairs (
      "object" .= notificationEventData__object <>
      "previous_attributes" .= notificationEventData__previousAttributes
      )

-- Describes: "notification_event_request"

data NotificationEventRequest
  = NotificationEventRequest
    { notificationEventRequest__id :: Maybe (Text)
    {- ^ ID of the API request that caused the event. If null, the event was automatic (e.g., Stripe's automatic subscription handling). Request logs are available in the [dashboard](https://dashboard.stripe.com/logs), but currently not in the API. -}
    , notificationEventRequest__idempotencyKey :: Maybe (Text)
    {- ^ The idempotency key transmitted during the request, if any. *Note: This property is populated only for events on or after May 23, 2017*. -}
    } deriving (Show, Eq, Generic)

instance FromJSON NotificationEventRequest where
  parseJSON = withObject "NotificationEventRequest" parseCtors
    where
      parseCtors o = parseNotificationEventRequest o
      parseNotificationEventRequest o = do
        notificationEventRequest__id <- o .:? "id"
        notificationEventRequest__idempotencyKey <- o .:? "idempotency_key"
        pure NotificationEventRequest{..}

instance ToJSON NotificationEventRequest where
  toJSON NotificationEventRequest{..} = object
    (
      (fmap ("id" .=) notificationEventRequest__id) >?>
      (fmap ("idempotency_key" .=) notificationEventRequest__idempotencyKey) >?>
      []
    )
  toEncoding NotificationEventRequest{..} = pairs (
      maybe mempty ("id" .=) notificationEventRequest__id <>
      maybe mempty ("idempotency_key" .=) notificationEventRequest__idempotencyKey
      )

-- Describes: "order"

data Order
  = Order
    { order__id :: (Id Order)
    {- ^ Unique identifier for the object. -}
    , order__object :: Order_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , order__livemode :: Bool
    {- ^ Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. -}
    , order__amount :: Int
    {- ^ A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount for the order. -}
    , order__created :: POSIXTime
    {- ^ Time at which the object was created. Measured in seconds since the Unix epoch. -}
    , order__currency :: Text
    {- ^ Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). -}
    , order__externalCouponCode :: Text
    , order__items :: Vector (OrderItem)
    {- ^ List of items constituting the order. An order can have up to 25 items. -}
    , order__metadata :: Object
    {- ^ Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. -}
    , order__status :: Text
    {- ^ Current order status. One of `created`, `paid`, `canceled`, `fulfilled`, or `returned`. More details in the [Orders Guide](https://stripe.com/docs/orders/guide#understanding-order-statuses). -}
    , order__upstreamId :: Text
    {- ^ The user's order ID if it is different from the Stripe order ID. -}
    , order__amountReturned :: Maybe (Int)
    , order__application :: Maybe (Text)
    {- ^ ID of the Connect Application that created the order. -}
    , order__applicationFee :: Maybe (Int)
    , order__charge :: Maybe (Expandable '[Const (Charge)])
    {- ^ The ID of the payment used to pay for the order. Present if the order status is `paid`, `fulfilled`, or `refunded`. -}
    , order__customer :: Maybe (Expandable '[Const (Customer), Const (DeletedCustomer)])
    {- ^ The customer used for the order. -}
    , order__email :: Maybe (Text)
    {- ^ The email address of the customer placing the order. -}
    , order__returns :: Maybe (Object)
    , order__selectedShippingMethod :: Maybe (Text)
    {- ^ The shipping method that is currently selected for this order, if any. If present, it is equal to one of the `id`s of shipping methods in the `shipping_methods` array. At order creation time, if there are multiple shipping methods, Stripe will automatically selected the first method. -}
    , order__shipping :: Maybe (Expandable '[Const (Shipping)])
    {- ^ The shipping address for the order. Present if the order is for goods to be shipped. -}
    , order__shippingMethods :: Maybe (Vector (ShippingMethod))
    {- ^ A list of supported shipping methods for this order. The desired shipping method can be specified either by updating the order, or when paying it. -}
    , order__statusTransitions :: Maybe (Expandable '[Const (StatusTransitions)])
    {- ^ The timestamps at which the order status was updated. -}
    , order__updated :: Maybe (POSIXTime)
    } deriving (Show, Eq, Generic)

instance FromJSON Order where
  parseJSON = withObject "Order" parseCtors
    where
      parseCtors o = parseOrder o
      parseOrder o = do
        order__id <- o .: "id"
        order__object <- o .: "object"
        order__livemode <- o .: "livemode"
        order__amount <- o .: "amount"
        order__created <- o .: "created"
        order__currency <- o .: "currency"
        order__externalCouponCode <- o .: "external_coupon_code"
        order__items <- o .: "items"
        order__metadata <- o .: "metadata"
        order__status <- o .: "status"
        order__upstreamId <- o .: "upstream_id"
        order__amountReturned <- o .:? "amount_returned"
        order__application <- o .:? "application"
        order__applicationFee <- o .:? "application_fee"
        order__charge <- o .:? "charge"
        order__customer <- o .:? "customer"
        order__email <- o .:? "email"
        order__returns <- o .:? "returns"
        order__selectedShippingMethod <- o .:? "selected_shipping_method"
        order__shipping <- o .:? "shipping"
        order__shippingMethods <- o .:? "shipping_methods"
        order__statusTransitions <- o .:? "status_transitions"
        order__updated <- o .:? "updated"
        pure Order{..}

instance ToJSON Order where
  toJSON Order{..} = object
    (
      ("id" .= order__id) :
      ("object" .= order__object) :
      ("livemode" .= order__livemode) :
      ("amount" .= order__amount) :
      ("created" .= order__created) :
      ("currency" .= order__currency) :
      ("external_coupon_code" .= order__externalCouponCode) :
      ("items" .= order__items) :
      ("metadata" .= order__metadata) :
      ("status" .= order__status) :
      ("upstream_id" .= order__upstreamId) :
      (fmap ("amount_returned" .=) order__amountReturned) >?>
      (fmap ("application" .=) order__application) >?>
      (fmap ("application_fee" .=) order__applicationFee) >?>
      (fmap ("charge" .=) order__charge) >?>
      (fmap ("customer" .=) order__customer) >?>
      (fmap ("email" .=) order__email) >?>
      (fmap ("returns" .=) order__returns) >?>
      (fmap ("selected_shipping_method" .=) order__selectedShippingMethod) >?>
      (fmap ("shipping" .=) order__shipping) >?>
      (fmap ("shipping_methods" .=) order__shippingMethods) >?>
      (fmap ("status_transitions" .=) order__statusTransitions) >?>
      (fmap ("updated" .=) order__updated) >?>
      []
    )
  toEncoding Order{..} = pairs (
      "id" .= order__id <>
      "object" .= order__object <>
      "livemode" .= order__livemode <>
      "amount" .= order__amount <>
      "created" .= order__created <>
      "currency" .= order__currency <>
      "external_coupon_code" .= order__externalCouponCode <>
      "items" .= order__items <>
      "metadata" .= order__metadata <>
      "status" .= order__status <>
      "upstream_id" .= order__upstreamId <>
      maybe mempty ("amount_returned" .=) order__amountReturned <>
      maybe mempty ("application" .=) order__application <>
      maybe mempty ("application_fee" .=) order__applicationFee <>
      maybe mempty ("charge" .=) order__charge <>
      maybe mempty ("customer" .=) order__customer <>
      maybe mempty ("email" .=) order__email <>
      maybe mempty ("returns" .=) order__returns <>
      maybe mempty ("selected_shipping_method" .=) order__selectedShippingMethod <>
      maybe mempty ("shipping" .=) order__shipping <>
      maybe mempty ("shipping_methods" .=) order__shippingMethods <>
      maybe mempty ("status_transitions" .=) order__statusTransitions <>
      maybe mempty ("updated" .=) order__updated
      )

-- Describes: "order_item"

data OrderItem
  = OrderItem
    { orderItem__object :: OrderItem_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , orderItem__amount :: Int
    {- ^ A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount for the line item. -}
    , orderItem__currency :: Text
    {- ^ Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). -}
    , orderItem__description :: Text
    {- ^ Description of the line item, meant to be displayable to the user (e.g., `"Express shipping"`). -}
    , orderItem__type :: Text
    {- ^ The type of line item. One of `sku`, `tax`, `shipping`, or `discount`. -}
    , orderItem__parent :: Maybe (Expandable '[Const (Sku)])
    {- ^ The ID of the associated object for this line item. Expandable if not null (e.g., expandable to a SKU). -}
    , orderItem__quantity :: Maybe (Int)
    {- ^ A positive integer representing the number of instances of `parent` that are included in this order item. Applicable/present only if `type` is `sku`. -}
    } deriving (Show, Eq, Generic)

instance FromJSON OrderItem where
  parseJSON = withObject "OrderItem" parseCtors
    where
      parseCtors o = parseOrderItem o
      parseOrderItem o = do
        orderItem__object <- o .: "object"
        orderItem__amount <- o .: "amount"
        orderItem__currency <- o .: "currency"
        orderItem__description <- o .: "description"
        orderItem__type <- o .: "type"
        orderItem__parent <- o .:? "parent"
        orderItem__quantity <- o .:? "quantity"
        pure OrderItem{..}

instance ToJSON OrderItem where
  toJSON OrderItem{..} = object
    (
      ("object" .= orderItem__object) :
      ("amount" .= orderItem__amount) :
      ("currency" .= orderItem__currency) :
      ("description" .= orderItem__description) :
      ("type" .= orderItem__type) :
      (fmap ("parent" .=) orderItem__parent) >?>
      (fmap ("quantity" .=) orderItem__quantity) >?>
      []
    )
  toEncoding OrderItem{..} = pairs (
      "object" .= orderItem__object <>
      "amount" .= orderItem__amount <>
      "currency" .= orderItem__currency <>
      "description" .= orderItem__description <>
      "type" .= orderItem__type <>
      maybe mempty ("parent" .=) orderItem__parent <>
      maybe mempty ("quantity" .=) orderItem__quantity
      )

-- Describes: "order_return"

data OrderReturn
  = OrderReturn
    { orderReturn__id :: (Id OrderReturn)
    {- ^ Unique identifier for the object. -}
    , orderReturn__object :: OrderReturn_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , orderReturn__livemode :: Bool
    {- ^ Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. -}
    , orderReturn__amount :: Int
    {- ^ A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount for the returned line item. -}
    , orderReturn__created :: POSIXTime
    {- ^ Time at which the object was created. Measured in seconds since the Unix epoch. -}
    , orderReturn__currency :: Text
    {- ^ Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). -}
    , orderReturn__items :: Vector (OrderItem)
    {- ^ The items included in this order return. -}
    , orderReturn__order :: Maybe (Expandable '[Const (Order)])
    {- ^ The order that this return includes items from. -}
    , orderReturn__refund :: Maybe (Expandable '[Const (Refund)])
    {- ^ The ID of the refund issued for this return. -}
    } deriving (Show, Eq, Generic)

instance FromJSON OrderReturn where
  parseJSON = withObject "OrderReturn" parseCtors
    where
      parseCtors o = parseOrderReturn o
      parseOrderReturn o = do
        orderReturn__id <- o .: "id"
        orderReturn__object <- o .: "object"
        orderReturn__livemode <- o .: "livemode"
        orderReturn__amount <- o .: "amount"
        orderReturn__created <- o .: "created"
        orderReturn__currency <- o .: "currency"
        orderReturn__items <- o .: "items"
        orderReturn__order <- o .:? "order"
        orderReturn__refund <- o .:? "refund"
        pure OrderReturn{..}

instance ToJSON OrderReturn where
  toJSON OrderReturn{..} = object
    (
      ("id" .= orderReturn__id) :
      ("object" .= orderReturn__object) :
      ("livemode" .= orderReturn__livemode) :
      ("amount" .= orderReturn__amount) :
      ("created" .= orderReturn__created) :
      ("currency" .= orderReturn__currency) :
      ("items" .= orderReturn__items) :
      (fmap ("order" .=) orderReturn__order) >?>
      (fmap ("refund" .=) orderReturn__refund) >?>
      []
    )
  toEncoding OrderReturn{..} = pairs (
      "id" .= orderReturn__id <>
      "object" .= orderReturn__object <>
      "livemode" .= orderReturn__livemode <>
      "amount" .= orderReturn__amount <>
      "created" .= orderReturn__created <>
      "currency" .= orderReturn__currency <>
      "items" .= orderReturn__items <>
      maybe mempty ("order" .=) orderReturn__order <>
      maybe mempty ("refund" .=) orderReturn__refund
      )

-- Describes: "package_dimensions"

data PackageDimensions
  = PackageDimensions
    { packageDimensions__height :: Scientific
    {- ^ Height, in inches. -}
    , packageDimensions__length :: Scientific
    {- ^ Length, in inches. -}
    , packageDimensions__weight :: Scientific
    {- ^ Weight, in ounces. -}
    , packageDimensions__width :: Scientific
    {- ^ Width, in inches. -}
    } deriving (Show, Eq, Generic)

instance FromJSON PackageDimensions where
  parseJSON = withObject "PackageDimensions" parseCtors
    where
      parseCtors o = parsePackageDimensions o
      parsePackageDimensions o = do
        packageDimensions__height <- o .: "height"
        packageDimensions__length <- o .: "length"
        packageDimensions__weight <- o .: "weight"
        packageDimensions__width <- o .: "width"
        pure PackageDimensions{..}

instance ToJSON PackageDimensions where
  toJSON PackageDimensions{..} = object
    (
      ("height" .= packageDimensions__height) :
      ("length" .= packageDimensions__length) :
      ("weight" .= packageDimensions__weight) :
      ("width" .= packageDimensions__width) :
      []
    )
  toEncoding PackageDimensions{..} = pairs (
      "height" .= packageDimensions__height <>
      "length" .= packageDimensions__length <>
      "weight" .= packageDimensions__weight <>
      "width" .= packageDimensions__width
      )

-- Describes: "payment_intent"

data PaymentIntent
  = PaymentIntent
    { paymentIntent__id :: (Id PaymentIntent)
    {- ^ Unique identifier for the object. -}
    , paymentIntent__object :: PaymentIntent_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , paymentIntent__livemode :: Bool
    {- ^ Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. -}
    , paymentIntent__amount :: Int
    {- ^ Amount intended to be collected by this PaymentIntent. -}
    , paymentIntent__amountCapturable :: Int
    {- ^ Amount that can be captured from this PaymentIntent. -}
    , paymentIntent__amountReceived :: Int
    {- ^ Amount that was collected by this PaymentIntent. -}
    , paymentIntent__captureMethod :: PaymentIntent_CaptureMethod
    {- ^ One of `automatic` (default) or `manual`.

When the capture method is `automatic`, Stripe automatically captures funds when the customer authorizes the payment.

Change `capture_method` to manual if you wish to [separate authorization and capture](https://stripe.com/docs/payments/payment-intents/creating-payment-intents#separate-authorization-and-capture) for payment methods that support this. -}
    , paymentIntent__charges :: Object
    {- ^ Charges that were created by this PaymentIntent, if any. -}
    , paymentIntent__confirmationMethod :: PaymentIntent_ConfirmationMethod
    {- ^ One of `automatic` (default) or `manual`.

When the confirmation method is `automatic`, a PaymentIntent can be confirmed using a publishable key. After `next_action`s are handled, no additional confirmation is required to complete the payment.

When the confirmation method is `manual`, all payment attempts must be made using a secret key. The PaymentIntent returns to the `requires_confirmation` state after handling `next_action`s, and requires your server to initiate each payment attempt with an explicit confirmation.

Learn more about the different [confirmation flows](https://stripe.com/docs/payments/payment-intents/use-cases#one-time-payments). -}
    , paymentIntent__created :: POSIXTime
    {- ^ Time at which the object was created. Measured in seconds since the Unix epoch. -}
    , paymentIntent__currency :: Text
    {- ^ Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). -}
    , paymentIntent__metadata :: Object
    {- ^ Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. For more information, see the [documentation](https://stripe.com/docs/payments/payment-intents/creating-payment-intents#storing-information-in-metadata). -}
    , paymentIntent__paymentMethodTypes :: Vector (Text)
    {- ^ The list of payment method types (e.g. card) that this PaymentIntent is allowed to use. -}
    , paymentIntent__status :: PaymentIntent_Status
    {- ^ Status of this PaymentIntent, one of `requires_payment_method`, `requires_confirmation`, `requires_action`, `processing`, `requires_capture`, `canceled`, or `succeeded`. Read more about each PaymentIntent [status](https://stripe.com/docs/payments/intents#intent-statuses). -}
    , paymentIntent__application :: Maybe (Expandable '[Const (Application)])
    {- ^ ID of the Connect application that created the PaymentIntent. -}
    , paymentIntent__applicationFeeAmount :: Maybe (Int)
    {- ^ The amount of the application fee (if any) for the resulting payment. See the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/payment-intents/use-cases#connected-accounts) for details. -}
    , paymentIntent__canceledAt :: Maybe (POSIXTime)
    {- ^ Populated when `status` is `canceled`, this is the time at which the PaymentIntent was canceled. Measured in seconds since the Unix epoch. -}
    , paymentIntent__cancellationReason :: Maybe (PaymentIntent_CancellationReason)
    {- ^ Reason for cancellation of this PaymentIntent, either user-provided (`duplicate`, `fraudulent`, `requested_by_customer`, or `abandoned`) or generated by Stripe internally (`failed_invoice`, `void_invoice`, or `automatic`). -}
    , paymentIntent__clientSecret :: Maybe (Text)
    {- ^ The client secret of this PaymentIntent. Used for client-side retrieval using a publishable key. 

The client secret can be used to complete a payment from your frontend. It should not be stored, logged, embedded in URLs, or exposed to anyone other than the customer. Make sure that you have TLS enabled on any page that includes the client secret.

Please refer to our [quickstart guide](https://stripe.com/docs/payments/payment-intents/web) to learn about how `client_secret` should be handled. -}
    , paymentIntent__customer :: Maybe (Expandable '[Const (Customer), Const (DeletedCustomer)])
    {- ^ ID of the Customer this PaymentIntent belongs to, if one exists.

If present, payment methods used with this PaymentIntent can only be attached to this Customer, and payment methods attached to other Customers cannot be used with this PaymentIntent. -}
    , paymentIntent__description :: Maybe (Text)
    {- ^ An arbitrary string attached to the object. Often useful for displaying to users. -}
    , paymentIntent__invoice :: Maybe (Expandable '[Const (Invoice)])
    {- ^ ID of the invoice that created this PaymentIntent, if it exists. -}
    , paymentIntent__lastPaymentError :: Maybe (Expandable '[Const (ApiErrors)])
    {- ^ The payment error encountered in the previous PaymentIntent confirmation. -}
    , paymentIntent__nextAction :: Maybe (Expandable '[Const (PaymentIntentNextAction)])
    {- ^ If present, this property tells you what actions you need to take in order for your customer to fulfill a payment using the provided source. -}
    , paymentIntent__onBehalfOf :: Maybe (Expandable '[Const (Account)])
    {- ^ The account (if any) for which the funds of the PaymentIntent are intended. See the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/payment-intents/use-cases#connected-accounts) for details. -}
    , paymentIntent__paymentMethod :: Maybe (Expandable '[Const (PaymentMethod)])
    {- ^ ID of the payment method used in this PaymentIntent. -}
    , paymentIntent__paymentMethodOptions :: Maybe (Expandable '[Const (PaymentIntentPaymentMethodOptions)])
    {- ^ Payment-method-specific configuration for this PaymentIntent. -}
    , paymentIntent__receiptEmail :: Maybe (Text)
    {- ^ Email address that the receipt for the resulting payment will be sent to. -}
    , paymentIntent__review :: Maybe (Expandable '[Const (Review)])
    {- ^ ID of the review associated with this PaymentIntent, if any. -}
    , paymentIntent__setupFutureUsage :: Maybe (Text)
    {- ^ Indicates that you intend to make future payments with this PaymentIntent's payment method.

If present, the payment method used with this PaymentIntent can be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer, even after the transaction completes.

Use `on_session` if you intend to only reuse the payment method when your customer is present in your checkout flow. Use `off_session` if your customer may or may not be in your checkout flow. See [Saving card details after a payment](https://stripe.com/docs/payments/cards/saving-cards-after-payment) to learn more.

Stripe uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules. For example, if your customer is impacted by [SCA](https://stripe.com/docs/strong-customer-authentication), using `off_session` will ensure that they are authenticated while processing this PaymentIntent. You will then be able to collect [off-session payments](https://stripe.com/docs/payments/cards/charging-saved-cards#off-session-payments-with-saved-cards) for this customer. -}
    , paymentIntent__shipping :: Maybe (Expandable '[Const (Shipping)])
    {- ^ Shipping information for this PaymentIntent. -}
    , paymentIntent__statementDescriptor :: Maybe (Text)
    {- ^ For non-card charges, you can use this value as the complete description that appears on your customers’ statements. Must contain at least one letter, maximum 22 characters. -}
    , paymentIntent__statementDescriptorSuffix :: Maybe (Text)
    {- ^ Provides information about a card payment that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor. -}
    , paymentIntent__transferData :: Maybe (Expandable '[Const (TransferData)])
    {- ^ The data with which to automatically create a Transfer when the payment is finalized. See the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/payment-intents/use-cases#connected-accounts) for details. -}
    , paymentIntent__transferGroup :: Maybe (Text)
    {- ^ A string that identifies the resulting payment as part of a group. See the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/payment-intents/use-cases#connected-accounts) for details. -}
    } deriving (Show, Eq, Generic)

instance FromJSON PaymentIntent where
  parseJSON = withObject "PaymentIntent" parseCtors
    where
      parseCtors o = parsePaymentIntent o
      parsePaymentIntent o = do
        paymentIntent__id <- o .: "id"
        paymentIntent__object <- o .: "object"
        paymentIntent__livemode <- o .: "livemode"
        paymentIntent__amount <- o .: "amount"
        paymentIntent__amountCapturable <- o .: "amount_capturable"
        paymentIntent__amountReceived <- o .: "amount_received"
        paymentIntent__captureMethod <- o .: "capture_method"
        paymentIntent__charges <- o .: "charges"
        paymentIntent__confirmationMethod <- o .: "confirmation_method"
        paymentIntent__created <- o .: "created"
        paymentIntent__currency <- o .: "currency"
        paymentIntent__metadata <- o .: "metadata"
        paymentIntent__paymentMethodTypes <- o .: "payment_method_types"
        paymentIntent__status <- o .: "status"
        paymentIntent__application <- o .:? "application"
        paymentIntent__applicationFeeAmount <- o .:? "application_fee_amount"
        paymentIntent__canceledAt <- o .:? "canceled_at"
        paymentIntent__cancellationReason <- o .:? "cancellation_reason"
        paymentIntent__clientSecret <- o .:? "client_secret"
        paymentIntent__customer <- o .:? "customer"
        paymentIntent__description <- o .:? "description"
        paymentIntent__invoice <- o .:? "invoice"
        paymentIntent__lastPaymentError <- o .:? "last_payment_error"
        paymentIntent__nextAction <- o .:? "next_action"
        paymentIntent__onBehalfOf <- o .:? "on_behalf_of"
        paymentIntent__paymentMethod <- o .:? "payment_method"
        paymentIntent__paymentMethodOptions <- o .:? "payment_method_options"
        paymentIntent__receiptEmail <- o .:? "receipt_email"
        paymentIntent__review <- o .:? "review"
        paymentIntent__setupFutureUsage <- o .:? "setup_future_usage"
        paymentIntent__shipping <- o .:? "shipping"
        paymentIntent__statementDescriptor <- o .:? "statement_descriptor"
        paymentIntent__statementDescriptorSuffix <- o .:? "statement_descriptor_suffix"
        paymentIntent__transferData <- o .:? "transfer_data"
        paymentIntent__transferGroup <- o .:? "transfer_group"
        pure PaymentIntent{..}

instance ToJSON PaymentIntent where
  toJSON PaymentIntent{..} = object
    (
      ("id" .= paymentIntent__id) :
      ("object" .= paymentIntent__object) :
      ("livemode" .= paymentIntent__livemode) :
      ("amount" .= paymentIntent__amount) :
      ("amount_capturable" .= paymentIntent__amountCapturable) :
      ("amount_received" .= paymentIntent__amountReceived) :
      ("capture_method" .= paymentIntent__captureMethod) :
      ("charges" .= paymentIntent__charges) :
      ("confirmation_method" .= paymentIntent__confirmationMethod) :
      ("created" .= paymentIntent__created) :
      ("currency" .= paymentIntent__currency) :
      ("metadata" .= paymentIntent__metadata) :
      ("payment_method_types" .= paymentIntent__paymentMethodTypes) :
      ("status" .= paymentIntent__status) :
      (fmap ("application" .=) paymentIntent__application) >?>
      (fmap ("application_fee_amount" .=) paymentIntent__applicationFeeAmount) >?>
      (fmap ("canceled_at" .=) paymentIntent__canceledAt) >?>
      (fmap ("cancellation_reason" .=) paymentIntent__cancellationReason) >?>
      (fmap ("client_secret" .=) paymentIntent__clientSecret) >?>
      (fmap ("customer" .=) paymentIntent__customer) >?>
      (fmap ("description" .=) paymentIntent__description) >?>
      (fmap ("invoice" .=) paymentIntent__invoice) >?>
      (fmap ("last_payment_error" .=) paymentIntent__lastPaymentError) >?>
      (fmap ("next_action" .=) paymentIntent__nextAction) >?>
      (fmap ("on_behalf_of" .=) paymentIntent__onBehalfOf) >?>
      (fmap ("payment_method" .=) paymentIntent__paymentMethod) >?>
      (fmap ("payment_method_options" .=) paymentIntent__paymentMethodOptions) >?>
      (fmap ("receipt_email" .=) paymentIntent__receiptEmail) >?>
      (fmap ("review" .=) paymentIntent__review) >?>
      (fmap ("setup_future_usage" .=) paymentIntent__setupFutureUsage) >?>
      (fmap ("shipping" .=) paymentIntent__shipping) >?>
      (fmap ("statement_descriptor" .=) paymentIntent__statementDescriptor) >?>
      (fmap ("statement_descriptor_suffix" .=) paymentIntent__statementDescriptorSuffix) >?>
      (fmap ("transfer_data" .=) paymentIntent__transferData) >?>
      (fmap ("transfer_group" .=) paymentIntent__transferGroup) >?>
      []
    )
  toEncoding PaymentIntent{..} = pairs (
      "id" .= paymentIntent__id <>
      "object" .= paymentIntent__object <>
      "livemode" .= paymentIntent__livemode <>
      "amount" .= paymentIntent__amount <>
      "amount_capturable" .= paymentIntent__amountCapturable <>
      "amount_received" .= paymentIntent__amountReceived <>
      "capture_method" .= paymentIntent__captureMethod <>
      "charges" .= paymentIntent__charges <>
      "confirmation_method" .= paymentIntent__confirmationMethod <>
      "created" .= paymentIntent__created <>
      "currency" .= paymentIntent__currency <>
      "metadata" .= paymentIntent__metadata <>
      "payment_method_types" .= paymentIntent__paymentMethodTypes <>
      "status" .= paymentIntent__status <>
      maybe mempty ("application" .=) paymentIntent__application <>
      maybe mempty ("application_fee_amount" .=) paymentIntent__applicationFeeAmount <>
      maybe mempty ("canceled_at" .=) paymentIntent__canceledAt <>
      maybe mempty ("cancellation_reason" .=) paymentIntent__cancellationReason <>
      maybe mempty ("client_secret" .=) paymentIntent__clientSecret <>
      maybe mempty ("customer" .=) paymentIntent__customer <>
      maybe mempty ("description" .=) paymentIntent__description <>
      maybe mempty ("invoice" .=) paymentIntent__invoice <>
      maybe mempty ("last_payment_error" .=) paymentIntent__lastPaymentError <>
      maybe mempty ("next_action" .=) paymentIntent__nextAction <>
      maybe mempty ("on_behalf_of" .=) paymentIntent__onBehalfOf <>
      maybe mempty ("payment_method" .=) paymentIntent__paymentMethod <>
      maybe mempty ("payment_method_options" .=) paymentIntent__paymentMethodOptions <>
      maybe mempty ("receipt_email" .=) paymentIntent__receiptEmail <>
      maybe mempty ("review" .=) paymentIntent__review <>
      maybe mempty ("setup_future_usage" .=) paymentIntent__setupFutureUsage <>
      maybe mempty ("shipping" .=) paymentIntent__shipping <>
      maybe mempty ("statement_descriptor" .=) paymentIntent__statementDescriptor <>
      maybe mempty ("statement_descriptor_suffix" .=) paymentIntent__statementDescriptorSuffix <>
      maybe mempty ("transfer_data" .=) paymentIntent__transferData <>
      maybe mempty ("transfer_group" .=) paymentIntent__transferGroup
      )

-- Describes: "payment_intent_next_action"

data PaymentIntentNextAction
  = PaymentIntentNextAction
    { paymentIntentNextAction__redirectToUrl :: PaymentIntentNextActionRedirectToUrl
    , paymentIntentNextAction__type :: Text
    {- ^ Type of the next action to perform, one of `redirect_to_url` or `use_stripe_sdk`. -}
    , paymentIntentNextAction__useStripeSdk :: Object
    {- ^ When confirming a PaymentIntent with Stripe.js, Stripe.js depends on the contents of this dictionary to invoke authentication flows. The shape of the contents is subject to change and is only intended to be used by Stripe.js. -}
    } deriving (Show, Eq, Generic)

instance FromJSON PaymentIntentNextAction where
  parseJSON = withObject "PaymentIntentNextAction" parseCtors
    where
      parseCtors o = parsePaymentIntentNextAction o
      parsePaymentIntentNextAction o = do
        paymentIntentNextAction__redirectToUrl <- o .: "redirect_to_url"
        paymentIntentNextAction__type <- o .: "type"
        paymentIntentNextAction__useStripeSdk <- o .: "use_stripe_sdk"
        pure PaymentIntentNextAction{..}

instance ToJSON PaymentIntentNextAction where
  toJSON PaymentIntentNextAction{..} = object
    (
      ("redirect_to_url" .= paymentIntentNextAction__redirectToUrl) :
      ("type" .= paymentIntentNextAction__type) :
      ("use_stripe_sdk" .= paymentIntentNextAction__useStripeSdk) :
      []
    )
  toEncoding PaymentIntentNextAction{..} = pairs (
      "redirect_to_url" .= paymentIntentNextAction__redirectToUrl <>
      "type" .= paymentIntentNextAction__type <>
      "use_stripe_sdk" .= paymentIntentNextAction__useStripeSdk
      )

-- Describes: "payment_intent_next_action_redirect_to_url"

data PaymentIntentNextActionRedirectToUrl
  = PaymentIntentNextActionRedirectToUrl
    { paymentIntentNextActionRedirectToUrl__returnUrl :: Maybe (Text)
    {- ^ If the customer does not exit their browser while authenticating, they will be redirected to this specified URL after completion. -}
    , paymentIntentNextActionRedirectToUrl__url :: Maybe (Text)
    {- ^ The URL you must redirect your customer to in order to authenticate the payment. -}
    } deriving (Show, Eq, Generic)

instance FromJSON PaymentIntentNextActionRedirectToUrl where
  parseJSON = withObject "PaymentIntentNextActionRedirectToUrl" parseCtors
    where
      parseCtors o = parsePaymentIntentNextActionRedirectToUrl o
      parsePaymentIntentNextActionRedirectToUrl o = do
        paymentIntentNextActionRedirectToUrl__returnUrl <- o .:? "return_url"
        paymentIntentNextActionRedirectToUrl__url <- o .:? "url"
        pure PaymentIntentNextActionRedirectToUrl{..}

instance ToJSON PaymentIntentNextActionRedirectToUrl where
  toJSON PaymentIntentNextActionRedirectToUrl{..} = object
    (
      (fmap ("return_url" .=) paymentIntentNextActionRedirectToUrl__returnUrl) >?>
      (fmap ("url" .=) paymentIntentNextActionRedirectToUrl__url) >?>
      []
    )
  toEncoding PaymentIntentNextActionRedirectToUrl{..} = pairs (
      maybe mempty ("return_url" .=) paymentIntentNextActionRedirectToUrl__returnUrl <>
      maybe mempty ("url" .=) paymentIntentNextActionRedirectToUrl__url
      )

-- Describes: "payment_intent_payment_method_options"

data PaymentIntentPaymentMethodOptions
  = PaymentIntentPaymentMethodOptions
    { paymentIntentPaymentMethodOptions__card :: PaymentIntentPaymentMethodOptionsCard
    } deriving (Show, Eq, Generic)

instance FromJSON PaymentIntentPaymentMethodOptions where
  parseJSON = withObject "PaymentIntentPaymentMethodOptions" parseCtors
    where
      parseCtors o = parsePaymentIntentPaymentMethodOptions o
      parsePaymentIntentPaymentMethodOptions o = do
        paymentIntentPaymentMethodOptions__card <- o .: "card"
        pure PaymentIntentPaymentMethodOptions{..}

instance ToJSON PaymentIntentPaymentMethodOptions where
  toJSON PaymentIntentPaymentMethodOptions{..} = object
    (
      ("card" .= paymentIntentPaymentMethodOptions__card) :
      []
    )
  toEncoding PaymentIntentPaymentMethodOptions{..} = pairs (
      "card" .= paymentIntentPaymentMethodOptions__card
      )

-- Describes: "payment_intent_payment_method_options_card"

data PaymentIntentPaymentMethodOptionsCard
  = PaymentIntentPaymentMethodOptionsCard
    { paymentIntentPaymentMethodOptionsCard__requestThreeDSecure :: Maybe (PaymentIntentPaymentMethodOptionsCard_RequestThreeDSecure)
    {- ^ We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. Permitted values include: `automatic` or `any`. If not provided, defaults to `automatic`. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine. -}
    } deriving (Show, Eq, Generic)

instance FromJSON PaymentIntentPaymentMethodOptionsCard where
  parseJSON = withObject "PaymentIntentPaymentMethodOptionsCard" parseCtors
    where
      parseCtors o = parsePaymentIntentPaymentMethodOptionsCard o
      parsePaymentIntentPaymentMethodOptionsCard o = do
        paymentIntentPaymentMethodOptionsCard__requestThreeDSecure <- o .:? "request_three_d_secure"
        pure PaymentIntentPaymentMethodOptionsCard{..}

instance ToJSON PaymentIntentPaymentMethodOptionsCard where
  toJSON PaymentIntentPaymentMethodOptionsCard{..} = object
    (
      (fmap ("request_three_d_secure" .=) paymentIntentPaymentMethodOptionsCard__requestThreeDSecure) >?>
      []
    )
  toEncoding PaymentIntentPaymentMethodOptionsCard{..} = pairs (
      maybe mempty ("request_three_d_secure" .=) paymentIntentPaymentMethodOptionsCard__requestThreeDSecure
      )

-- Describes: "payment_method"

data PaymentMethod
  = PaymentMethod
    { paymentMethod__id :: (Id PaymentMethod)
    {- ^ Unique identifier for the object. -}
    , paymentMethod__object :: PaymentMethod_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , paymentMethod__livemode :: Bool
    {- ^ Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. -}
    , paymentMethod__billingDetails :: BillingDetails
    , paymentMethod__card :: PaymentMethodCard
    , paymentMethod__cardPresent :: PaymentMethodCardPresent
    , paymentMethod__created :: POSIXTime
    {- ^ Time at which the object was created. Measured in seconds since the Unix epoch. -}
    , paymentMethod__metadata :: Object
    {- ^ Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. -}
    , paymentMethod__type :: PaymentMethod_Type
    {- ^ The type of the PaymentMethod. An additional hash is included on the PaymentMethod with a name matching this value. It contains additional information specific to the PaymentMethod type. -}
    , paymentMethod__customer :: Maybe (Expandable '[Const (Customer)])
    {- ^ The ID of the Customer to which this PaymentMethod is saved. This will not be set when the PaymentMethod has not been saved to a Customer. -}
    } deriving (Show, Eq, Generic)

instance FromJSON PaymentMethod where
  parseJSON = withObject "PaymentMethod" parseCtors
    where
      parseCtors o = parsePaymentMethod o
      parsePaymentMethod o = do
        paymentMethod__id <- o .: "id"
        paymentMethod__object <- o .: "object"
        paymentMethod__livemode <- o .: "livemode"
        paymentMethod__billingDetails <- o .: "billing_details"
        paymentMethod__card <- o .: "card"
        paymentMethod__cardPresent <- o .: "card_present"
        paymentMethod__created <- o .: "created"
        paymentMethod__metadata <- o .: "metadata"
        paymentMethod__type <- o .: "type"
        paymentMethod__customer <- o .:? "customer"
        pure PaymentMethod{..}

instance ToJSON PaymentMethod where
  toJSON PaymentMethod{..} = object
    (
      ("id" .= paymentMethod__id) :
      ("object" .= paymentMethod__object) :
      ("livemode" .= paymentMethod__livemode) :
      ("billing_details" .= paymentMethod__billingDetails) :
      ("card" .= paymentMethod__card) :
      ("card_present" .= paymentMethod__cardPresent) :
      ("created" .= paymentMethod__created) :
      ("metadata" .= paymentMethod__metadata) :
      ("type" .= paymentMethod__type) :
      (fmap ("customer" .=) paymentMethod__customer) >?>
      []
    )
  toEncoding PaymentMethod{..} = pairs (
      "id" .= paymentMethod__id <>
      "object" .= paymentMethod__object <>
      "livemode" .= paymentMethod__livemode <>
      "billing_details" .= paymentMethod__billingDetails <>
      "card" .= paymentMethod__card <>
      "card_present" .= paymentMethod__cardPresent <>
      "created" .= paymentMethod__created <>
      "metadata" .= paymentMethod__metadata <>
      "type" .= paymentMethod__type <>
      maybe mempty ("customer" .=) paymentMethod__customer
      )

-- Describes: "payment_method_card"

data PaymentMethodCard
  = PaymentMethodCard
    { paymentMethodCard__brand :: Text
    {- ^ Card brand. Can be `amex`, `diners`, `discover`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`. -}
    , paymentMethodCard__expMonth :: Int
    {- ^ Two-digit number representing the card's expiration month. -}
    , paymentMethodCard__expYear :: Int
    {- ^ Four-digit number representing the card's expiration year. -}
    , paymentMethodCard__funding :: Text
    {- ^ Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`. -}
    , paymentMethodCard__last4 :: Text
    {- ^ The last four digits of the card. -}
    , paymentMethodCard__checks :: Maybe (Expandable '[Const (PaymentMethodCardChecks)])
    {- ^ Checks on Card address and CVC if provided. -}
    , paymentMethodCard__country :: Maybe (Text)
    {- ^ Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected. -}
    , paymentMethodCard__fingerprint :: Maybe (Text)
    {- ^ Uniquely identifies this particular card number. You can use this attribute to check whether two customers who've signed up with you are using the same card number, for example. -}
    , paymentMethodCard__generatedFrom :: Maybe (Expandable '[Const (PaymentMethodCardGeneratedCard)])
    {- ^ Details of the original PaymentMethod that created this object. -}
    , paymentMethodCard__threeDSecureUsage :: Maybe (Expandable '[Const (ThreeDSecureUsage)])
    {- ^ Contains details on how this Card maybe be used for 3D Secure authentication. -}
    , paymentMethodCard__wallet :: Maybe (Expandable '[Const (PaymentMethodCardWallet)])
    {- ^ If this Card is part of a card wallet, this contains the details of the card wallet. -}
    } deriving (Show, Eq, Generic)

instance FromJSON PaymentMethodCard where
  parseJSON = withObject "PaymentMethodCard" parseCtors
    where
      parseCtors o = parsePaymentMethodCard o
      parsePaymentMethodCard o = do
        paymentMethodCard__brand <- o .: "brand"
        paymentMethodCard__expMonth <- o .: "exp_month"
        paymentMethodCard__expYear <- o .: "exp_year"
        paymentMethodCard__funding <- o .: "funding"
        paymentMethodCard__last4 <- o .: "last4"
        paymentMethodCard__checks <- o .:? "checks"
        paymentMethodCard__country <- o .:? "country"
        paymentMethodCard__fingerprint <- o .:? "fingerprint"
        paymentMethodCard__generatedFrom <- o .:? "generated_from"
        paymentMethodCard__threeDSecureUsage <- o .:? "three_d_secure_usage"
        paymentMethodCard__wallet <- o .:? "wallet"
        pure PaymentMethodCard{..}

instance ToJSON PaymentMethodCard where
  toJSON PaymentMethodCard{..} = object
    (
      ("brand" .= paymentMethodCard__brand) :
      ("exp_month" .= paymentMethodCard__expMonth) :
      ("exp_year" .= paymentMethodCard__expYear) :
      ("funding" .= paymentMethodCard__funding) :
      ("last4" .= paymentMethodCard__last4) :
      (fmap ("checks" .=) paymentMethodCard__checks) >?>
      (fmap ("country" .=) paymentMethodCard__country) >?>
      (fmap ("fingerprint" .=) paymentMethodCard__fingerprint) >?>
      (fmap ("generated_from" .=) paymentMethodCard__generatedFrom) >?>
      (fmap ("three_d_secure_usage" .=) paymentMethodCard__threeDSecureUsage) >?>
      (fmap ("wallet" .=) paymentMethodCard__wallet) >?>
      []
    )
  toEncoding PaymentMethodCard{..} = pairs (
      "brand" .= paymentMethodCard__brand <>
      "exp_month" .= paymentMethodCard__expMonth <>
      "exp_year" .= paymentMethodCard__expYear <>
      "funding" .= paymentMethodCard__funding <>
      "last4" .= paymentMethodCard__last4 <>
      maybe mempty ("checks" .=) paymentMethodCard__checks <>
      maybe mempty ("country" .=) paymentMethodCard__country <>
      maybe mempty ("fingerprint" .=) paymentMethodCard__fingerprint <>
      maybe mempty ("generated_from" .=) paymentMethodCard__generatedFrom <>
      maybe mempty ("three_d_secure_usage" .=) paymentMethodCard__threeDSecureUsage <>
      maybe mempty ("wallet" .=) paymentMethodCard__wallet
      )

-- Describes: "payment_method_card_checks"

data PaymentMethodCardChecks
  = PaymentMethodCardChecks
    { paymentMethodCardChecks__addressLine1Check :: Maybe (Text)
    {- ^ If a address line1 was provided, results of the check, one of 'pass', 'failed', 'unavailable' or 'unchecked'. -}
    , paymentMethodCardChecks__addressPostalCodeCheck :: Maybe (Text)
    {- ^ If a address postal code was provided, results of the check, one of 'pass', 'failed', 'unavailable' or 'unchecked'. -}
    , paymentMethodCardChecks__cvcCheck :: Maybe (Text)
    {- ^ If a CVC was provided, results of the check, one of 'pass', 'failed', 'unavailable' or 'unchecked'. -}
    } deriving (Show, Eq, Generic)

instance FromJSON PaymentMethodCardChecks where
  parseJSON = withObject "PaymentMethodCardChecks" parseCtors
    where
      parseCtors o = parsePaymentMethodCardChecks o
      parsePaymentMethodCardChecks o = do
        paymentMethodCardChecks__addressLine1Check <- o .:? "address_line1_check"
        paymentMethodCardChecks__addressPostalCodeCheck <- o .:? "address_postal_code_check"
        paymentMethodCardChecks__cvcCheck <- o .:? "cvc_check"
        pure PaymentMethodCardChecks{..}

instance ToJSON PaymentMethodCardChecks where
  toJSON PaymentMethodCardChecks{..} = object
    (
      (fmap ("address_line1_check" .=) paymentMethodCardChecks__addressLine1Check) >?>
      (fmap ("address_postal_code_check" .=) paymentMethodCardChecks__addressPostalCodeCheck) >?>
      (fmap ("cvc_check" .=) paymentMethodCardChecks__cvcCheck) >?>
      []
    )
  toEncoding PaymentMethodCardChecks{..} = pairs (
      maybe mempty ("address_line1_check" .=) paymentMethodCardChecks__addressLine1Check <>
      maybe mempty ("address_postal_code_check" .=) paymentMethodCardChecks__addressPostalCodeCheck <>
      maybe mempty ("cvc_check" .=) paymentMethodCardChecks__cvcCheck
      )

-- Describes: "payment_method_card_generated_card"

data PaymentMethodCardGeneratedCard
  = PaymentMethodCardGeneratedCard
    { paymentMethodCardGeneratedCard__charge :: Maybe (Text)
    {- ^ The charge that created this object. -}
    , paymentMethodCardGeneratedCard__paymentMethodDetails :: Maybe (Expandable '[Const (PaymentMethodDetails)])
    {- ^ Transaction-specific details of the payment method used in the payment. -}
    } deriving (Show, Eq, Generic)

instance FromJSON PaymentMethodCardGeneratedCard where
  parseJSON = withObject "PaymentMethodCardGeneratedCard" parseCtors
    where
      parseCtors o = parsePaymentMethodCardGeneratedCard o
      parsePaymentMethodCardGeneratedCard o = do
        paymentMethodCardGeneratedCard__charge <- o .:? "charge"
        paymentMethodCardGeneratedCard__paymentMethodDetails <- o .:? "payment_method_details"
        pure PaymentMethodCardGeneratedCard{..}

instance ToJSON PaymentMethodCardGeneratedCard where
  toJSON PaymentMethodCardGeneratedCard{..} = object
    (
      (fmap ("charge" .=) paymentMethodCardGeneratedCard__charge) >?>
      (fmap ("payment_method_details" .=) paymentMethodCardGeneratedCard__paymentMethodDetails) >?>
      []
    )
  toEncoding PaymentMethodCardGeneratedCard{..} = pairs (
      maybe mempty ("charge" .=) paymentMethodCardGeneratedCard__charge <>
      maybe mempty ("payment_method_details" .=) paymentMethodCardGeneratedCard__paymentMethodDetails
      )

-- Describes: "payment_method_card_present"

data PaymentMethodCardPresent
  = PaymentMethodCardPresent
    {
    } deriving (Show, Eq, Generic)

instance FromJSON PaymentMethodCardPresent where
  parseJSON = withObject "PaymentMethodCardPresent" parseCtors
    where
      parseCtors o = parsePaymentMethodCardPresent o
      parsePaymentMethodCardPresent o = do
        pure PaymentMethodCardPresent

instance ToJSON PaymentMethodCardPresent where
  toJSON PaymentMethodCardPresent = object
    (
      []
    )
  toEncoding PaymentMethodCardPresent = pairs (
      mempty
      )

-- Describes: "payment_method_card_wallet"

data PaymentMethodCardWallet
  = PaymentMethodCardWallet
    { paymentMethodCardWallet__amexExpressCheckout :: PaymentMethodCardWalletAmexExpressCheckout
    , paymentMethodCardWallet__applePay :: PaymentMethodCardWalletApplePay
    , paymentMethodCardWallet__googlePay :: PaymentMethodCardWalletGooglePay
    , paymentMethodCardWallet__masterpass :: PaymentMethodCardWalletMasterpass
    , paymentMethodCardWallet__samsungPay :: PaymentMethodCardWalletSamsungPay
    , paymentMethodCardWallet__type :: PaymentMethodCardWallet_Type
    {- ^ The type of the card wallet, one of `amex_express_checkout`, `apple_pay`, `google_pay`, `masterpass`, `samsung_pay`, or `visa_checkout`. An additional hash is included on the Wallet subhash with a name matching this value. It contains additional information specific to the card wallet type. -}
    , paymentMethodCardWallet__visaCheckout :: PaymentMethodCardWalletVisaCheckout
    , paymentMethodCardWallet__dynamicLast4 :: Maybe (Text)
    {- ^ (For tokenized numbers only.) The last four digits of the device account number. -}
    } deriving (Show, Eq, Generic)

instance FromJSON PaymentMethodCardWallet where
  parseJSON = withObject "PaymentMethodCardWallet" parseCtors
    where
      parseCtors o = parsePaymentMethodCardWallet o
      parsePaymentMethodCardWallet o = do
        paymentMethodCardWallet__amexExpressCheckout <- o .: "amex_express_checkout"
        paymentMethodCardWallet__applePay <- o .: "apple_pay"
        paymentMethodCardWallet__googlePay <- o .: "google_pay"
        paymentMethodCardWallet__masterpass <- o .: "masterpass"
        paymentMethodCardWallet__samsungPay <- o .: "samsung_pay"
        paymentMethodCardWallet__type <- o .: "type"
        paymentMethodCardWallet__visaCheckout <- o .: "visa_checkout"
        paymentMethodCardWallet__dynamicLast4 <- o .:? "dynamic_last4"
        pure PaymentMethodCardWallet{..}

instance ToJSON PaymentMethodCardWallet where
  toJSON PaymentMethodCardWallet{..} = object
    (
      ("amex_express_checkout" .= paymentMethodCardWallet__amexExpressCheckout) :
      ("apple_pay" .= paymentMethodCardWallet__applePay) :
      ("google_pay" .= paymentMethodCardWallet__googlePay) :
      ("masterpass" .= paymentMethodCardWallet__masterpass) :
      ("samsung_pay" .= paymentMethodCardWallet__samsungPay) :
      ("type" .= paymentMethodCardWallet__type) :
      ("visa_checkout" .= paymentMethodCardWallet__visaCheckout) :
      (fmap ("dynamic_last4" .=) paymentMethodCardWallet__dynamicLast4) >?>
      []
    )
  toEncoding PaymentMethodCardWallet{..} = pairs (
      "amex_express_checkout" .= paymentMethodCardWallet__amexExpressCheckout <>
      "apple_pay" .= paymentMethodCardWallet__applePay <>
      "google_pay" .= paymentMethodCardWallet__googlePay <>
      "masterpass" .= paymentMethodCardWallet__masterpass <>
      "samsung_pay" .= paymentMethodCardWallet__samsungPay <>
      "type" .= paymentMethodCardWallet__type <>
      "visa_checkout" .= paymentMethodCardWallet__visaCheckout <>
      maybe mempty ("dynamic_last4" .=) paymentMethodCardWallet__dynamicLast4
      )

-- Describes: "payment_method_card_wallet_amex_express_checkout"

data PaymentMethodCardWalletAmexExpressCheckout
  = PaymentMethodCardWalletAmexExpressCheckout
    {
    } deriving (Show, Eq, Generic)

instance FromJSON PaymentMethodCardWalletAmexExpressCheckout where
  parseJSON = withObject "PaymentMethodCardWalletAmexExpressCheckout" parseCtors
    where
      parseCtors o = parsePaymentMethodCardWalletAmexExpressCheckout o
      parsePaymentMethodCardWalletAmexExpressCheckout o = do
        pure PaymentMethodCardWalletAmexExpressCheckout

instance ToJSON PaymentMethodCardWalletAmexExpressCheckout where
  toJSON PaymentMethodCardWalletAmexExpressCheckout = object
    (
      []
    )
  toEncoding PaymentMethodCardWalletAmexExpressCheckout = pairs (
      mempty
      )

-- Describes: "payment_method_card_wallet_apple_pay"

data PaymentMethodCardWalletApplePay
  = PaymentMethodCardWalletApplePay
    {
    } deriving (Show, Eq, Generic)

instance FromJSON PaymentMethodCardWalletApplePay where
  parseJSON = withObject "PaymentMethodCardWalletApplePay" parseCtors
    where
      parseCtors o = parsePaymentMethodCardWalletApplePay o
      parsePaymentMethodCardWalletApplePay o = do
        pure PaymentMethodCardWalletApplePay

instance ToJSON PaymentMethodCardWalletApplePay where
  toJSON PaymentMethodCardWalletApplePay = object
    (
      []
    )
  toEncoding PaymentMethodCardWalletApplePay = pairs (
      mempty
      )

-- Describes: "payment_method_card_wallet_google_pay"

data PaymentMethodCardWalletGooglePay
  = PaymentMethodCardWalletGooglePay
    {
    } deriving (Show, Eq, Generic)

instance FromJSON PaymentMethodCardWalletGooglePay where
  parseJSON = withObject "PaymentMethodCardWalletGooglePay" parseCtors
    where
      parseCtors o = parsePaymentMethodCardWalletGooglePay o
      parsePaymentMethodCardWalletGooglePay o = do
        pure PaymentMethodCardWalletGooglePay

instance ToJSON PaymentMethodCardWalletGooglePay where
  toJSON PaymentMethodCardWalletGooglePay = object
    (
      []
    )
  toEncoding PaymentMethodCardWalletGooglePay = pairs (
      mempty
      )

-- Describes: "payment_method_card_wallet_masterpass"

data PaymentMethodCardWalletMasterpass
  = PaymentMethodCardWalletMasterpass
    { paymentMethodCardWalletMasterpass__billingAddress :: Maybe (Expandable '[Const (Address)])
    {- ^ Owner's verified billing address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. -}
    , paymentMethodCardWalletMasterpass__email :: Maybe (Text)
    {- ^ Owner's verified email. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. -}
    , paymentMethodCardWalletMasterpass__name :: Maybe (Text)
    {- ^ Owner's verified full name. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. -}
    , paymentMethodCardWalletMasterpass__shippingAddress :: Maybe (Expandable '[Const (Address)])
    {- ^ Owner's verified shipping address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. -}
    } deriving (Show, Eq, Generic)

instance FromJSON PaymentMethodCardWalletMasterpass where
  parseJSON = withObject "PaymentMethodCardWalletMasterpass" parseCtors
    where
      parseCtors o = parsePaymentMethodCardWalletMasterpass o
      parsePaymentMethodCardWalletMasterpass o = do
        paymentMethodCardWalletMasterpass__billingAddress <- o .:? "billing_address"
        paymentMethodCardWalletMasterpass__email <- o .:? "email"
        paymentMethodCardWalletMasterpass__name <- o .:? "name"
        paymentMethodCardWalletMasterpass__shippingAddress <- o .:? "shipping_address"
        pure PaymentMethodCardWalletMasterpass{..}

instance ToJSON PaymentMethodCardWalletMasterpass where
  toJSON PaymentMethodCardWalletMasterpass{..} = object
    (
      (fmap ("billing_address" .=) paymentMethodCardWalletMasterpass__billingAddress) >?>
      (fmap ("email" .=) paymentMethodCardWalletMasterpass__email) >?>
      (fmap ("name" .=) paymentMethodCardWalletMasterpass__name) >?>
      (fmap ("shipping_address" .=) paymentMethodCardWalletMasterpass__shippingAddress) >?>
      []
    )
  toEncoding PaymentMethodCardWalletMasterpass{..} = pairs (
      maybe mempty ("billing_address" .=) paymentMethodCardWalletMasterpass__billingAddress <>
      maybe mempty ("email" .=) paymentMethodCardWalletMasterpass__email <>
      maybe mempty ("name" .=) paymentMethodCardWalletMasterpass__name <>
      maybe mempty ("shipping_address" .=) paymentMethodCardWalletMasterpass__shippingAddress
      )

-- Describes: "payment_method_card_wallet_samsung_pay"

data PaymentMethodCardWalletSamsungPay
  = PaymentMethodCardWalletSamsungPay
    {
    } deriving (Show, Eq, Generic)

instance FromJSON PaymentMethodCardWalletSamsungPay where
  parseJSON = withObject "PaymentMethodCardWalletSamsungPay" parseCtors
    where
      parseCtors o = parsePaymentMethodCardWalletSamsungPay o
      parsePaymentMethodCardWalletSamsungPay o = do
        pure PaymentMethodCardWalletSamsungPay

instance ToJSON PaymentMethodCardWalletSamsungPay where
  toJSON PaymentMethodCardWalletSamsungPay = object
    (
      []
    )
  toEncoding PaymentMethodCardWalletSamsungPay = pairs (
      mempty
      )

-- Describes: "payment_method_card_wallet_visa_checkout"

data PaymentMethodCardWalletVisaCheckout
  = PaymentMethodCardWalletVisaCheckout
    { paymentMethodCardWalletVisaCheckout__billingAddress :: Maybe (Expandable '[Const (Address)])
    {- ^ Owner's verified billing address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. -}
    , paymentMethodCardWalletVisaCheckout__email :: Maybe (Text)
    {- ^ Owner's verified email. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. -}
    , paymentMethodCardWalletVisaCheckout__name :: Maybe (Text)
    {- ^ Owner's verified full name. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. -}
    , paymentMethodCardWalletVisaCheckout__shippingAddress :: Maybe (Expandable '[Const (Address)])
    {- ^ Owner's verified shipping address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. -}
    } deriving (Show, Eq, Generic)

instance FromJSON PaymentMethodCardWalletVisaCheckout where
  parseJSON = withObject "PaymentMethodCardWalletVisaCheckout" parseCtors
    where
      parseCtors o = parsePaymentMethodCardWalletVisaCheckout o
      parsePaymentMethodCardWalletVisaCheckout o = do
        paymentMethodCardWalletVisaCheckout__billingAddress <- o .:? "billing_address"
        paymentMethodCardWalletVisaCheckout__email <- o .:? "email"
        paymentMethodCardWalletVisaCheckout__name <- o .:? "name"
        paymentMethodCardWalletVisaCheckout__shippingAddress <- o .:? "shipping_address"
        pure PaymentMethodCardWalletVisaCheckout{..}

instance ToJSON PaymentMethodCardWalletVisaCheckout where
  toJSON PaymentMethodCardWalletVisaCheckout{..} = object
    (
      (fmap ("billing_address" .=) paymentMethodCardWalletVisaCheckout__billingAddress) >?>
      (fmap ("email" .=) paymentMethodCardWalletVisaCheckout__email) >?>
      (fmap ("name" .=) paymentMethodCardWalletVisaCheckout__name) >?>
      (fmap ("shipping_address" .=) paymentMethodCardWalletVisaCheckout__shippingAddress) >?>
      []
    )
  toEncoding PaymentMethodCardWalletVisaCheckout{..} = pairs (
      maybe mempty ("billing_address" .=) paymentMethodCardWalletVisaCheckout__billingAddress <>
      maybe mempty ("email" .=) paymentMethodCardWalletVisaCheckout__email <>
      maybe mempty ("name" .=) paymentMethodCardWalletVisaCheckout__name <>
      maybe mempty ("shipping_address" .=) paymentMethodCardWalletVisaCheckout__shippingAddress
      )

-- Describes: "payment_method_details"

data PaymentMethodDetails
  = PaymentMethodDetails
    { paymentMethodDetails__achCreditTransfer :: PaymentMethodDetailsAchCreditTransfer
    , paymentMethodDetails__achDebit :: PaymentMethodDetailsAchDebit
    , paymentMethodDetails__alipay :: PaymentMethodDetailsAlipay
    , paymentMethodDetails__bancontact :: PaymentMethodDetailsBancontact
    , paymentMethodDetails__card :: PaymentMethodDetailsCard
    , paymentMethodDetails__cardPresent :: PaymentMethodDetailsCardPresent
    , paymentMethodDetails__eps :: PaymentMethodDetailsEps
    , paymentMethodDetails__giropay :: PaymentMethodDetailsGiropay
    , paymentMethodDetails__ideal :: PaymentMethodDetailsIdeal
    , paymentMethodDetails__klarna :: PaymentMethodDetailsKlarna
    , paymentMethodDetails__multibanco :: PaymentMethodDetailsMultibanco
    , paymentMethodDetails__p24 :: PaymentMethodDetailsP24
    , paymentMethodDetails__sepaDebit :: PaymentMethodDetailsSepaDebit
    , paymentMethodDetails__sofort :: PaymentMethodDetailsSofort
    , paymentMethodDetails__stripeAccount :: PaymentMethodDetailsStripeAccount
    , paymentMethodDetails__type :: Text
    {- ^ The type of transaction-specific details of the payment method used in the payment, one of `ach_credit_transfer`, `ach_debit`, `alipay`, `bancontact`, `card`, `card_present`, `eps`, `giropay`, `ideal`, `klarna`, `multibanco`, `p24`, `sepa_debit`, `sofort`, `stripe_account`, or `wechat`.
An additional hash is included on `payment_method_details` with a name matching this value.
It contains information specific to the payment method. -}
    , paymentMethodDetails__wechat :: PaymentMethodDetailsWechat
    } deriving (Show, Eq, Generic)

instance FromJSON PaymentMethodDetails where
  parseJSON = withObject "PaymentMethodDetails" parseCtors
    where
      parseCtors o = parsePaymentMethodDetails o
      parsePaymentMethodDetails o = do
        paymentMethodDetails__achCreditTransfer <- o .: "ach_credit_transfer"
        paymentMethodDetails__achDebit <- o .: "ach_debit"
        paymentMethodDetails__alipay <- o .: "alipay"
        paymentMethodDetails__bancontact <- o .: "bancontact"
        paymentMethodDetails__card <- o .: "card"
        paymentMethodDetails__cardPresent <- o .: "card_present"
        paymentMethodDetails__eps <- o .: "eps"
        paymentMethodDetails__giropay <- o .: "giropay"
        paymentMethodDetails__ideal <- o .: "ideal"
        paymentMethodDetails__klarna <- o .: "klarna"
        paymentMethodDetails__multibanco <- o .: "multibanco"
        paymentMethodDetails__p24 <- o .: "p24"
        paymentMethodDetails__sepaDebit <- o .: "sepa_debit"
        paymentMethodDetails__sofort <- o .: "sofort"
        paymentMethodDetails__stripeAccount <- o .: "stripe_account"
        paymentMethodDetails__type <- o .: "type"
        paymentMethodDetails__wechat <- o .: "wechat"
        pure PaymentMethodDetails{..}

instance ToJSON PaymentMethodDetails where
  toJSON PaymentMethodDetails{..} = object
    (
      ("ach_credit_transfer" .= paymentMethodDetails__achCreditTransfer) :
      ("ach_debit" .= paymentMethodDetails__achDebit) :
      ("alipay" .= paymentMethodDetails__alipay) :
      ("bancontact" .= paymentMethodDetails__bancontact) :
      ("card" .= paymentMethodDetails__card) :
      ("card_present" .= paymentMethodDetails__cardPresent) :
      ("eps" .= paymentMethodDetails__eps) :
      ("giropay" .= paymentMethodDetails__giropay) :
      ("ideal" .= paymentMethodDetails__ideal) :
      ("klarna" .= paymentMethodDetails__klarna) :
      ("multibanco" .= paymentMethodDetails__multibanco) :
      ("p24" .= paymentMethodDetails__p24) :
      ("sepa_debit" .= paymentMethodDetails__sepaDebit) :
      ("sofort" .= paymentMethodDetails__sofort) :
      ("stripe_account" .= paymentMethodDetails__stripeAccount) :
      ("type" .= paymentMethodDetails__type) :
      ("wechat" .= paymentMethodDetails__wechat) :
      []
    )
  toEncoding PaymentMethodDetails{..} = pairs (
      "ach_credit_transfer" .= paymentMethodDetails__achCreditTransfer <>
      "ach_debit" .= paymentMethodDetails__achDebit <>
      "alipay" .= paymentMethodDetails__alipay <>
      "bancontact" .= paymentMethodDetails__bancontact <>
      "card" .= paymentMethodDetails__card <>
      "card_present" .= paymentMethodDetails__cardPresent <>
      "eps" .= paymentMethodDetails__eps <>
      "giropay" .= paymentMethodDetails__giropay <>
      "ideal" .= paymentMethodDetails__ideal <>
      "klarna" .= paymentMethodDetails__klarna <>
      "multibanco" .= paymentMethodDetails__multibanco <>
      "p24" .= paymentMethodDetails__p24 <>
      "sepa_debit" .= paymentMethodDetails__sepaDebit <>
      "sofort" .= paymentMethodDetails__sofort <>
      "stripe_account" .= paymentMethodDetails__stripeAccount <>
      "type" .= paymentMethodDetails__type <>
      "wechat" .= paymentMethodDetails__wechat
      )

-- Describes: "payment_method_details_ach_credit_transfer"

data PaymentMethodDetailsAchCreditTransfer
  = PaymentMethodDetailsAchCreditTransfer
    { paymentMethodDetailsAchCreditTransfer__accountNumber :: Maybe (Text)
    {- ^ Account number to transfer funds to. -}
    , paymentMethodDetailsAchCreditTransfer__bankName :: Maybe (Text)
    {- ^ Name of the bank associated with the routing number. -}
    , paymentMethodDetailsAchCreditTransfer__routingNumber :: Maybe (Text)
    {- ^ Routing transit number for the bank account to transfer funds to. -}
    , paymentMethodDetailsAchCreditTransfer__swiftCode :: Maybe (Text)
    {- ^ SWIFT code of the bank associated with the routing number. -}
    } deriving (Show, Eq, Generic)

instance FromJSON PaymentMethodDetailsAchCreditTransfer where
  parseJSON = withObject "PaymentMethodDetailsAchCreditTransfer" parseCtors
    where
      parseCtors o = parsePaymentMethodDetailsAchCreditTransfer o
      parsePaymentMethodDetailsAchCreditTransfer o = do
        paymentMethodDetailsAchCreditTransfer__accountNumber <- o .:? "account_number"
        paymentMethodDetailsAchCreditTransfer__bankName <- o .:? "bank_name"
        paymentMethodDetailsAchCreditTransfer__routingNumber <- o .:? "routing_number"
        paymentMethodDetailsAchCreditTransfer__swiftCode <- o .:? "swift_code"
        pure PaymentMethodDetailsAchCreditTransfer{..}

instance ToJSON PaymentMethodDetailsAchCreditTransfer where
  toJSON PaymentMethodDetailsAchCreditTransfer{..} = object
    (
      (fmap ("account_number" .=) paymentMethodDetailsAchCreditTransfer__accountNumber) >?>
      (fmap ("bank_name" .=) paymentMethodDetailsAchCreditTransfer__bankName) >?>
      (fmap ("routing_number" .=) paymentMethodDetailsAchCreditTransfer__routingNumber) >?>
      (fmap ("swift_code" .=) paymentMethodDetailsAchCreditTransfer__swiftCode) >?>
      []
    )
  toEncoding PaymentMethodDetailsAchCreditTransfer{..} = pairs (
      maybe mempty ("account_number" .=) paymentMethodDetailsAchCreditTransfer__accountNumber <>
      maybe mempty ("bank_name" .=) paymentMethodDetailsAchCreditTransfer__bankName <>
      maybe mempty ("routing_number" .=) paymentMethodDetailsAchCreditTransfer__routingNumber <>
      maybe mempty ("swift_code" .=) paymentMethodDetailsAchCreditTransfer__swiftCode
      )

-- Describes: "payment_method_details_ach_debit"

data PaymentMethodDetailsAchDebit
  = PaymentMethodDetailsAchDebit
    { paymentMethodDetailsAchDebit__accountHolderType :: Maybe (PaymentMethodDetailsAchDebit_AccountHolderType)
    {- ^ Type of entity that holds the account. This can be either `individual` or `company`. -}
    , paymentMethodDetailsAchDebit__bankName :: Maybe (Text)
    {- ^ Name of the bank associated with the bank account. -}
    , paymentMethodDetailsAchDebit__country :: Maybe (Text)
    {- ^ Two-letter ISO code representing the country the bank account is located in. -}
    , paymentMethodDetailsAchDebit__fingerprint :: Maybe (Text)
    {- ^ Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. -}
    , paymentMethodDetailsAchDebit__last4 :: Maybe (Text)
    {- ^ Last four digits of the bank account number. -}
    , paymentMethodDetailsAchDebit__routingNumber :: Maybe (Text)
    {- ^ Routing transit number of the bank account. -}
    } deriving (Show, Eq, Generic)

instance FromJSON PaymentMethodDetailsAchDebit where
  parseJSON = withObject "PaymentMethodDetailsAchDebit" parseCtors
    where
      parseCtors o = parsePaymentMethodDetailsAchDebit o
      parsePaymentMethodDetailsAchDebit o = do
        paymentMethodDetailsAchDebit__accountHolderType <- o .:? "account_holder_type"
        paymentMethodDetailsAchDebit__bankName <- o .:? "bank_name"
        paymentMethodDetailsAchDebit__country <- o .:? "country"
        paymentMethodDetailsAchDebit__fingerprint <- o .:? "fingerprint"
        paymentMethodDetailsAchDebit__last4 <- o .:? "last4"
        paymentMethodDetailsAchDebit__routingNumber <- o .:? "routing_number"
        pure PaymentMethodDetailsAchDebit{..}

instance ToJSON PaymentMethodDetailsAchDebit where
  toJSON PaymentMethodDetailsAchDebit{..} = object
    (
      (fmap ("account_holder_type" .=) paymentMethodDetailsAchDebit__accountHolderType) >?>
      (fmap ("bank_name" .=) paymentMethodDetailsAchDebit__bankName) >?>
      (fmap ("country" .=) paymentMethodDetailsAchDebit__country) >?>
      (fmap ("fingerprint" .=) paymentMethodDetailsAchDebit__fingerprint) >?>
      (fmap ("last4" .=) paymentMethodDetailsAchDebit__last4) >?>
      (fmap ("routing_number" .=) paymentMethodDetailsAchDebit__routingNumber) >?>
      []
    )
  toEncoding PaymentMethodDetailsAchDebit{..} = pairs (
      maybe mempty ("account_holder_type" .=) paymentMethodDetailsAchDebit__accountHolderType <>
      maybe mempty ("bank_name" .=) paymentMethodDetailsAchDebit__bankName <>
      maybe mempty ("country" .=) paymentMethodDetailsAchDebit__country <>
      maybe mempty ("fingerprint" .=) paymentMethodDetailsAchDebit__fingerprint <>
      maybe mempty ("last4" .=) paymentMethodDetailsAchDebit__last4 <>
      maybe mempty ("routing_number" .=) paymentMethodDetailsAchDebit__routingNumber
      )

-- Describes: "payment_method_details_alipay"

data PaymentMethodDetailsAlipay
  = PaymentMethodDetailsAlipay
    {
    } deriving (Show, Eq, Generic)

instance FromJSON PaymentMethodDetailsAlipay where
  parseJSON = withObject "PaymentMethodDetailsAlipay" parseCtors
    where
      parseCtors o = parsePaymentMethodDetailsAlipay o
      parsePaymentMethodDetailsAlipay o = do
        pure PaymentMethodDetailsAlipay

instance ToJSON PaymentMethodDetailsAlipay where
  toJSON PaymentMethodDetailsAlipay = object
    (
      []
    )
  toEncoding PaymentMethodDetailsAlipay = pairs (
      mempty
      )

-- Describes: "payment_method_details_bancontact"

data PaymentMethodDetailsBancontact
  = PaymentMethodDetailsBancontact
    { paymentMethodDetailsBancontact__bankCode :: Maybe (Text)
    {- ^ Bank code of bank associated with the bank account. -}
    , paymentMethodDetailsBancontact__bankName :: Maybe (Text)
    {- ^ Name of the bank associated with the bank account. -}
    , paymentMethodDetailsBancontact__bic :: Maybe (Text)
    {- ^ Bank Identifier Code of the bank associated with the bank account. -}
    , paymentMethodDetailsBancontact__ibanLast4 :: Maybe (Text)
    {- ^ Last four characters of the IBAN. -}
    , paymentMethodDetailsBancontact__preferredLanguage :: Maybe (PaymentMethodDetailsBancontact_PreferredLanguage)
    {- ^ Preferred language of the Bancontact authorization page that the customer is redirected to.
Can be one of `en`, `de`, `fr`, or `nl` -}
    , paymentMethodDetailsBancontact__verifiedName :: Maybe (Text)
    {- ^ Owner's verified full name. Values are verified or provided by Bancontact directly
(if supported) at the time of authorization or settlement. They cannot be set or mutated. -}
    } deriving (Show, Eq, Generic)

instance FromJSON PaymentMethodDetailsBancontact where
  parseJSON = withObject "PaymentMethodDetailsBancontact" parseCtors
    where
      parseCtors o = parsePaymentMethodDetailsBancontact o
      parsePaymentMethodDetailsBancontact o = do
        paymentMethodDetailsBancontact__bankCode <- o .:? "bank_code"
        paymentMethodDetailsBancontact__bankName <- o .:? "bank_name"
        paymentMethodDetailsBancontact__bic <- o .:? "bic"
        paymentMethodDetailsBancontact__ibanLast4 <- o .:? "iban_last4"
        paymentMethodDetailsBancontact__preferredLanguage <- o .:? "preferred_language"
        paymentMethodDetailsBancontact__verifiedName <- o .:? "verified_name"
        pure PaymentMethodDetailsBancontact{..}

instance ToJSON PaymentMethodDetailsBancontact where
  toJSON PaymentMethodDetailsBancontact{..} = object
    (
      (fmap ("bank_code" .=) paymentMethodDetailsBancontact__bankCode) >?>
      (fmap ("bank_name" .=) paymentMethodDetailsBancontact__bankName) >?>
      (fmap ("bic" .=) paymentMethodDetailsBancontact__bic) >?>
      (fmap ("iban_last4" .=) paymentMethodDetailsBancontact__ibanLast4) >?>
      (fmap ("preferred_language" .=) paymentMethodDetailsBancontact__preferredLanguage) >?>
      (fmap ("verified_name" .=) paymentMethodDetailsBancontact__verifiedName) >?>
      []
    )
  toEncoding PaymentMethodDetailsBancontact{..} = pairs (
      maybe mempty ("bank_code" .=) paymentMethodDetailsBancontact__bankCode <>
      maybe mempty ("bank_name" .=) paymentMethodDetailsBancontact__bankName <>
      maybe mempty ("bic" .=) paymentMethodDetailsBancontact__bic <>
      maybe mempty ("iban_last4" .=) paymentMethodDetailsBancontact__ibanLast4 <>
      maybe mempty ("preferred_language" .=) paymentMethodDetailsBancontact__preferredLanguage <>
      maybe mempty ("verified_name" .=) paymentMethodDetailsBancontact__verifiedName
      )

-- Describes: "payment_method_details_card"

data PaymentMethodDetailsCard
  = PaymentMethodDetailsCard
    { paymentMethodDetailsCard__brand :: Maybe (Text)
    {- ^ Card brand. Can be `amex`, `diners`, `discover`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`. -}
    , paymentMethodDetailsCard__checks :: Maybe (Expandable '[Const (PaymentMethodDetailsCardChecks)])
    {- ^ Check results by Card networks on Card address and CVC at time of payment. -}
    , paymentMethodDetailsCard__country :: Maybe (Text)
    {- ^ Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected. -}
    , paymentMethodDetailsCard__expMonth :: Maybe (Int)
    {- ^ Two-digit number representing the card's expiration month. -}
    , paymentMethodDetailsCard__expYear :: Maybe (Int)
    {- ^ Four-digit number representing the card's expiration year. -}
    , paymentMethodDetailsCard__fingerprint :: Maybe (Text)
    {- ^ Uniquely identifies this particular card number. You can use this attribute to check whether two customers who've signed up with you are using the same card number, for example. -}
    , paymentMethodDetailsCard__funding :: Maybe (Text)
    {- ^ Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`. -}
    , paymentMethodDetailsCard__last4 :: Maybe (Text)
    {- ^ The last four digits of the card. -}
    , paymentMethodDetailsCard__threeDSecure :: Maybe (Expandable '[Const (ThreeDSecureDetails)])
    {- ^ Populated if this transaction used 3D Secure authentication. -}
    , paymentMethodDetailsCard__wallet :: Maybe (Expandable '[Const (PaymentMethodDetailsCardWallet)])
    {- ^ If this Card is part of a card wallet, this contains the details of the card wallet. -}
    } deriving (Show, Eq, Generic)

instance FromJSON PaymentMethodDetailsCard where
  parseJSON = withObject "PaymentMethodDetailsCard" parseCtors
    where
      parseCtors o = parsePaymentMethodDetailsCard o
      parsePaymentMethodDetailsCard o = do
        paymentMethodDetailsCard__brand <- o .:? "brand"
        paymentMethodDetailsCard__checks <- o .:? "checks"
        paymentMethodDetailsCard__country <- o .:? "country"
        paymentMethodDetailsCard__expMonth <- o .:? "exp_month"
        paymentMethodDetailsCard__expYear <- o .:? "exp_year"
        paymentMethodDetailsCard__fingerprint <- o .:? "fingerprint"
        paymentMethodDetailsCard__funding <- o .:? "funding"
        paymentMethodDetailsCard__last4 <- o .:? "last4"
        paymentMethodDetailsCard__threeDSecure <- o .:? "three_d_secure"
        paymentMethodDetailsCard__wallet <- o .:? "wallet"
        pure PaymentMethodDetailsCard{..}

instance ToJSON PaymentMethodDetailsCard where
  toJSON PaymentMethodDetailsCard{..} = object
    (
      (fmap ("brand" .=) paymentMethodDetailsCard__brand) >?>
      (fmap ("checks" .=) paymentMethodDetailsCard__checks) >?>
      (fmap ("country" .=) paymentMethodDetailsCard__country) >?>
      (fmap ("exp_month" .=) paymentMethodDetailsCard__expMonth) >?>
      (fmap ("exp_year" .=) paymentMethodDetailsCard__expYear) >?>
      (fmap ("fingerprint" .=) paymentMethodDetailsCard__fingerprint) >?>
      (fmap ("funding" .=) paymentMethodDetailsCard__funding) >?>
      (fmap ("last4" .=) paymentMethodDetailsCard__last4) >?>
      (fmap ("three_d_secure" .=) paymentMethodDetailsCard__threeDSecure) >?>
      (fmap ("wallet" .=) paymentMethodDetailsCard__wallet) >?>
      []
    )
  toEncoding PaymentMethodDetailsCard{..} = pairs (
      maybe mempty ("brand" .=) paymentMethodDetailsCard__brand <>
      maybe mempty ("checks" .=) paymentMethodDetailsCard__checks <>
      maybe mempty ("country" .=) paymentMethodDetailsCard__country <>
      maybe mempty ("exp_month" .=) paymentMethodDetailsCard__expMonth <>
      maybe mempty ("exp_year" .=) paymentMethodDetailsCard__expYear <>
      maybe mempty ("fingerprint" .=) paymentMethodDetailsCard__fingerprint <>
      maybe mempty ("funding" .=) paymentMethodDetailsCard__funding <>
      maybe mempty ("last4" .=) paymentMethodDetailsCard__last4 <>
      maybe mempty ("three_d_secure" .=) paymentMethodDetailsCard__threeDSecure <>
      maybe mempty ("wallet" .=) paymentMethodDetailsCard__wallet
      )

-- Describes: "payment_method_details_card_checks"

data PaymentMethodDetailsCardChecks
  = PaymentMethodDetailsCardChecks
    { paymentMethodDetailsCardChecks__addressLine1Check :: Maybe (Text)
    {- ^ If a address line1 was provided, results of the check, one of 'pass', 'failed', 'unavailable' or 'unchecked'. -}
    , paymentMethodDetailsCardChecks__addressPostalCodeCheck :: Maybe (Text)
    {- ^ If a address postal code was provided, results of the check, one of 'pass', 'failed', 'unavailable' or 'unchecked'. -}
    , paymentMethodDetailsCardChecks__cvcCheck :: Maybe (Text)
    {- ^ If a CVC was provided, results of the check, one of 'pass', 'failed', 'unavailable' or 'unchecked'. -}
    } deriving (Show, Eq, Generic)

instance FromJSON PaymentMethodDetailsCardChecks where
  parseJSON = withObject "PaymentMethodDetailsCardChecks" parseCtors
    where
      parseCtors o = parsePaymentMethodDetailsCardChecks o
      parsePaymentMethodDetailsCardChecks o = do
        paymentMethodDetailsCardChecks__addressLine1Check <- o .:? "address_line1_check"
        paymentMethodDetailsCardChecks__addressPostalCodeCheck <- o .:? "address_postal_code_check"
        paymentMethodDetailsCardChecks__cvcCheck <- o .:? "cvc_check"
        pure PaymentMethodDetailsCardChecks{..}

instance ToJSON PaymentMethodDetailsCardChecks where
  toJSON PaymentMethodDetailsCardChecks{..} = object
    (
      (fmap ("address_line1_check" .=) paymentMethodDetailsCardChecks__addressLine1Check) >?>
      (fmap ("address_postal_code_check" .=) paymentMethodDetailsCardChecks__addressPostalCodeCheck) >?>
      (fmap ("cvc_check" .=) paymentMethodDetailsCardChecks__cvcCheck) >?>
      []
    )
  toEncoding PaymentMethodDetailsCardChecks{..} = pairs (
      maybe mempty ("address_line1_check" .=) paymentMethodDetailsCardChecks__addressLine1Check <>
      maybe mempty ("address_postal_code_check" .=) paymentMethodDetailsCardChecks__addressPostalCodeCheck <>
      maybe mempty ("cvc_check" .=) paymentMethodDetailsCardChecks__cvcCheck
      )

-- Describes: "payment_method_details_card_present"

data PaymentMethodDetailsCardPresent
  = PaymentMethodDetailsCardPresent
    { paymentMethodDetailsCardPresent__brand :: Maybe (Text)
    {- ^ Card brand. Can be `amex`, `diners`, `discover`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`. -}
    , paymentMethodDetailsCardPresent__country :: Maybe (Text)
    {- ^ Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected. -}
    , paymentMethodDetailsCardPresent__emvAuthData :: Maybe (Text)
    {- ^ Authorization response cryptogram. -}
    , paymentMethodDetailsCardPresent__expMonth :: Maybe (Int)
    {- ^ Two-digit number representing the card's expiration month. -}
    , paymentMethodDetailsCardPresent__expYear :: Maybe (Int)
    {- ^ Four-digit number representing the card's expiration year. -}
    , paymentMethodDetailsCardPresent__fingerprint :: Maybe (Text)
    {- ^ Uniquely identifies this particular card number. You can use this attribute to check whether two customers who've signed up with you are using the same card number, for example. -}
    , paymentMethodDetailsCardPresent__funding :: Maybe (Text)
    {- ^ Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`. -}
    , paymentMethodDetailsCardPresent__generatedCard :: Maybe (Text)
    {- ^ ID of a card PaymentMethod generated from the card_present PaymentMethod that may be attached to a Customer for future transactions. Only present if it was possible to generate a card PaymentMethod. -}
    , paymentMethodDetailsCardPresent__last4 :: Maybe (Text)
    {- ^ The last four digits of the card. -}
    , paymentMethodDetailsCardPresent__readMethod :: Maybe (Text)
    {- ^ How were card details read in this transaction. Can be contact_emv, contactless_emv, magnetic_stripe_fallback, magnetic_stripe_track2, or contactless_magstripe_mode -}
    , paymentMethodDetailsCardPresent__receipt :: Maybe (Expandable '[Const (PaymentMethodDetailsCardPresentReceipt)])
    {- ^ A collection of fields required to be displayed on receipts. Only required for EMV transactions. -}
    } deriving (Show, Eq, Generic)

instance FromJSON PaymentMethodDetailsCardPresent where
  parseJSON = withObject "PaymentMethodDetailsCardPresent" parseCtors
    where
      parseCtors o = parsePaymentMethodDetailsCardPresent o
      parsePaymentMethodDetailsCardPresent o = do
        paymentMethodDetailsCardPresent__brand <- o .:? "brand"
        paymentMethodDetailsCardPresent__country <- o .:? "country"
        paymentMethodDetailsCardPresent__emvAuthData <- o .:? "emv_auth_data"
        paymentMethodDetailsCardPresent__expMonth <- o .:? "exp_month"
        paymentMethodDetailsCardPresent__expYear <- o .:? "exp_year"
        paymentMethodDetailsCardPresent__fingerprint <- o .:? "fingerprint"
        paymentMethodDetailsCardPresent__funding <- o .:? "funding"
        paymentMethodDetailsCardPresent__generatedCard <- o .:? "generated_card"
        paymentMethodDetailsCardPresent__last4 <- o .:? "last4"
        paymentMethodDetailsCardPresent__readMethod <- o .:? "read_method"
        paymentMethodDetailsCardPresent__receipt <- o .:? "receipt"
        pure PaymentMethodDetailsCardPresent{..}

instance ToJSON PaymentMethodDetailsCardPresent where
  toJSON PaymentMethodDetailsCardPresent{..} = object
    (
      (fmap ("brand" .=) paymentMethodDetailsCardPresent__brand) >?>
      (fmap ("country" .=) paymentMethodDetailsCardPresent__country) >?>
      (fmap ("emv_auth_data" .=) paymentMethodDetailsCardPresent__emvAuthData) >?>
      (fmap ("exp_month" .=) paymentMethodDetailsCardPresent__expMonth) >?>
      (fmap ("exp_year" .=) paymentMethodDetailsCardPresent__expYear) >?>
      (fmap ("fingerprint" .=) paymentMethodDetailsCardPresent__fingerprint) >?>
      (fmap ("funding" .=) paymentMethodDetailsCardPresent__funding) >?>
      (fmap ("generated_card" .=) paymentMethodDetailsCardPresent__generatedCard) >?>
      (fmap ("last4" .=) paymentMethodDetailsCardPresent__last4) >?>
      (fmap ("read_method" .=) paymentMethodDetailsCardPresent__readMethod) >?>
      (fmap ("receipt" .=) paymentMethodDetailsCardPresent__receipt) >?>
      []
    )
  toEncoding PaymentMethodDetailsCardPresent{..} = pairs (
      maybe mempty ("brand" .=) paymentMethodDetailsCardPresent__brand <>
      maybe mempty ("country" .=) paymentMethodDetailsCardPresent__country <>
      maybe mempty ("emv_auth_data" .=) paymentMethodDetailsCardPresent__emvAuthData <>
      maybe mempty ("exp_month" .=) paymentMethodDetailsCardPresent__expMonth <>
      maybe mempty ("exp_year" .=) paymentMethodDetailsCardPresent__expYear <>
      maybe mempty ("fingerprint" .=) paymentMethodDetailsCardPresent__fingerprint <>
      maybe mempty ("funding" .=) paymentMethodDetailsCardPresent__funding <>
      maybe mempty ("generated_card" .=) paymentMethodDetailsCardPresent__generatedCard <>
      maybe mempty ("last4" .=) paymentMethodDetailsCardPresent__last4 <>
      maybe mempty ("read_method" .=) paymentMethodDetailsCardPresent__readMethod <>
      maybe mempty ("receipt" .=) paymentMethodDetailsCardPresent__receipt
      )

-- Describes: "payment_method_details_card_present_receipt"

data PaymentMethodDetailsCardPresentReceipt
  = PaymentMethodDetailsCardPresentReceipt
    { paymentMethodDetailsCardPresentReceipt__applicationCryptogram :: Maybe (Text)
    {- ^ EMV tag 9F26, cryptogram generated by the integrated circuit chip. -}
    , paymentMethodDetailsCardPresentReceipt__applicationPreferredName :: Maybe (Text)
    {- ^ Mnenomic of the Application Identifier. -}
    , paymentMethodDetailsCardPresentReceipt__authorizationCode :: Maybe (Text)
    {- ^ Identifier for this transaction. -}
    , paymentMethodDetailsCardPresentReceipt__authorizationResponseCode :: Maybe (Text)
    {- ^ EMV tag 8A. A code returned by the card issuer. -}
    , paymentMethodDetailsCardPresentReceipt__cardholderVerificationMethod :: Maybe (Text)
    {- ^ How the cardholder verified ownership of the card. -}
    , paymentMethodDetailsCardPresentReceipt__dedicatedFileName :: Maybe (Text)
    {- ^ EMV tag 84. Similar to the application identifier stored on the integrated circuit chip. -}
    , paymentMethodDetailsCardPresentReceipt__terminalVerificationResults :: Maybe (Text)
    {- ^ The outcome of a series of EMV functions performed by the card reader. -}
    , paymentMethodDetailsCardPresentReceipt__transactionStatusInformation :: Maybe (Text)
    {- ^ An indication of various EMV functions performed during the transaction. -}
    } deriving (Show, Eq, Generic)

instance FromJSON PaymentMethodDetailsCardPresentReceipt where
  parseJSON = withObject "PaymentMethodDetailsCardPresentReceipt" parseCtors
    where
      parseCtors o = parsePaymentMethodDetailsCardPresentReceipt o
      parsePaymentMethodDetailsCardPresentReceipt o = do
        paymentMethodDetailsCardPresentReceipt__applicationCryptogram <- o .:? "application_cryptogram"
        paymentMethodDetailsCardPresentReceipt__applicationPreferredName <- o .:? "application_preferred_name"
        paymentMethodDetailsCardPresentReceipt__authorizationCode <- o .:? "authorization_code"
        paymentMethodDetailsCardPresentReceipt__authorizationResponseCode <- o .:? "authorization_response_code"
        paymentMethodDetailsCardPresentReceipt__cardholderVerificationMethod <- o .:? "cardholder_verification_method"
        paymentMethodDetailsCardPresentReceipt__dedicatedFileName <- o .:? "dedicated_file_name"
        paymentMethodDetailsCardPresentReceipt__terminalVerificationResults <- o .:? "terminal_verification_results"
        paymentMethodDetailsCardPresentReceipt__transactionStatusInformation <- o .:? "transaction_status_information"
        pure PaymentMethodDetailsCardPresentReceipt{..}

instance ToJSON PaymentMethodDetailsCardPresentReceipt where
  toJSON PaymentMethodDetailsCardPresentReceipt{..} = object
    (
      (fmap ("application_cryptogram" .=) paymentMethodDetailsCardPresentReceipt__applicationCryptogram) >?>
      (fmap ("application_preferred_name" .=) paymentMethodDetailsCardPresentReceipt__applicationPreferredName) >?>
      (fmap ("authorization_code" .=) paymentMethodDetailsCardPresentReceipt__authorizationCode) >?>
      (fmap ("authorization_response_code" .=) paymentMethodDetailsCardPresentReceipt__authorizationResponseCode) >?>
      (fmap ("cardholder_verification_method" .=) paymentMethodDetailsCardPresentReceipt__cardholderVerificationMethod) >?>
      (fmap ("dedicated_file_name" .=) paymentMethodDetailsCardPresentReceipt__dedicatedFileName) >?>
      (fmap ("terminal_verification_results" .=) paymentMethodDetailsCardPresentReceipt__terminalVerificationResults) >?>
      (fmap ("transaction_status_information" .=) paymentMethodDetailsCardPresentReceipt__transactionStatusInformation) >?>
      []
    )
  toEncoding PaymentMethodDetailsCardPresentReceipt{..} = pairs (
      maybe mempty ("application_cryptogram" .=) paymentMethodDetailsCardPresentReceipt__applicationCryptogram <>
      maybe mempty ("application_preferred_name" .=) paymentMethodDetailsCardPresentReceipt__applicationPreferredName <>
      maybe mempty ("authorization_code" .=) paymentMethodDetailsCardPresentReceipt__authorizationCode <>
      maybe mempty ("authorization_response_code" .=) paymentMethodDetailsCardPresentReceipt__authorizationResponseCode <>
      maybe mempty ("cardholder_verification_method" .=) paymentMethodDetailsCardPresentReceipt__cardholderVerificationMethod <>
      maybe mempty ("dedicated_file_name" .=) paymentMethodDetailsCardPresentReceipt__dedicatedFileName <>
      maybe mempty ("terminal_verification_results" .=) paymentMethodDetailsCardPresentReceipt__terminalVerificationResults <>
      maybe mempty ("transaction_status_information" .=) paymentMethodDetailsCardPresentReceipt__transactionStatusInformation
      )

-- Describes: "payment_method_details_card_wallet"

data PaymentMethodDetailsCardWallet
  = PaymentMethodDetailsCardWallet
    { paymentMethodDetailsCardWallet__amexExpressCheckout :: PaymentMethodDetailsCardWalletAmexExpressCheckout
    , paymentMethodDetailsCardWallet__applePay :: PaymentMethodDetailsCardWalletApplePay
    , paymentMethodDetailsCardWallet__googlePay :: PaymentMethodDetailsCardWalletGooglePay
    , paymentMethodDetailsCardWallet__masterpass :: PaymentMethodDetailsCardWalletMasterpass
    , paymentMethodDetailsCardWallet__samsungPay :: PaymentMethodDetailsCardWalletSamsungPay
    , paymentMethodDetailsCardWallet__type :: PaymentMethodDetailsCardWallet_Type
    {- ^ The type of the card wallet, one of `amex_express_checkout`, `apple_pay`, `google_pay`, `masterpass`, `samsung_pay`, or `visa_checkout`. An additional hash is included on the Wallet subhash with a name matching this value. It contains additional information specific to the card wallet type. -}
    , paymentMethodDetailsCardWallet__visaCheckout :: PaymentMethodDetailsCardWalletVisaCheckout
    , paymentMethodDetailsCardWallet__dynamicLast4 :: Maybe (Text)
    {- ^ (For tokenized numbers only.) The last four digits of the device account number. -}
    } deriving (Show, Eq, Generic)

instance FromJSON PaymentMethodDetailsCardWallet where
  parseJSON = withObject "PaymentMethodDetailsCardWallet" parseCtors
    where
      parseCtors o = parsePaymentMethodDetailsCardWallet o
      parsePaymentMethodDetailsCardWallet o = do
        paymentMethodDetailsCardWallet__amexExpressCheckout <- o .: "amex_express_checkout"
        paymentMethodDetailsCardWallet__applePay <- o .: "apple_pay"
        paymentMethodDetailsCardWallet__googlePay <- o .: "google_pay"
        paymentMethodDetailsCardWallet__masterpass <- o .: "masterpass"
        paymentMethodDetailsCardWallet__samsungPay <- o .: "samsung_pay"
        paymentMethodDetailsCardWallet__type <- o .: "type"
        paymentMethodDetailsCardWallet__visaCheckout <- o .: "visa_checkout"
        paymentMethodDetailsCardWallet__dynamicLast4 <- o .:? "dynamic_last4"
        pure PaymentMethodDetailsCardWallet{..}

instance ToJSON PaymentMethodDetailsCardWallet where
  toJSON PaymentMethodDetailsCardWallet{..} = object
    (
      ("amex_express_checkout" .= paymentMethodDetailsCardWallet__amexExpressCheckout) :
      ("apple_pay" .= paymentMethodDetailsCardWallet__applePay) :
      ("google_pay" .= paymentMethodDetailsCardWallet__googlePay) :
      ("masterpass" .= paymentMethodDetailsCardWallet__masterpass) :
      ("samsung_pay" .= paymentMethodDetailsCardWallet__samsungPay) :
      ("type" .= paymentMethodDetailsCardWallet__type) :
      ("visa_checkout" .= paymentMethodDetailsCardWallet__visaCheckout) :
      (fmap ("dynamic_last4" .=) paymentMethodDetailsCardWallet__dynamicLast4) >?>
      []
    )
  toEncoding PaymentMethodDetailsCardWallet{..} = pairs (
      "amex_express_checkout" .= paymentMethodDetailsCardWallet__amexExpressCheckout <>
      "apple_pay" .= paymentMethodDetailsCardWallet__applePay <>
      "google_pay" .= paymentMethodDetailsCardWallet__googlePay <>
      "masterpass" .= paymentMethodDetailsCardWallet__masterpass <>
      "samsung_pay" .= paymentMethodDetailsCardWallet__samsungPay <>
      "type" .= paymentMethodDetailsCardWallet__type <>
      "visa_checkout" .= paymentMethodDetailsCardWallet__visaCheckout <>
      maybe mempty ("dynamic_last4" .=) paymentMethodDetailsCardWallet__dynamicLast4
      )

-- Describes: "payment_method_details_card_wallet_amex_express_checkout"

data PaymentMethodDetailsCardWalletAmexExpressCheckout
  = PaymentMethodDetailsCardWalletAmexExpressCheckout
    {
    } deriving (Show, Eq, Generic)

instance FromJSON PaymentMethodDetailsCardWalletAmexExpressCheckout where
  parseJSON = withObject "PaymentMethodDetailsCardWalletAmexExpressCheckout" parseCtors
    where
      parseCtors o = parsePaymentMethodDetailsCardWalletAmexExpressCheckout o
      parsePaymentMethodDetailsCardWalletAmexExpressCheckout o = do
        pure PaymentMethodDetailsCardWalletAmexExpressCheckout

instance ToJSON PaymentMethodDetailsCardWalletAmexExpressCheckout where
  toJSON PaymentMethodDetailsCardWalletAmexExpressCheckout = object
    (
      []
    )
  toEncoding PaymentMethodDetailsCardWalletAmexExpressCheckout = pairs (
      mempty
      )

-- Describes: "payment_method_details_card_wallet_apple_pay"

data PaymentMethodDetailsCardWalletApplePay
  = PaymentMethodDetailsCardWalletApplePay
    {
    } deriving (Show, Eq, Generic)

instance FromJSON PaymentMethodDetailsCardWalletApplePay where
  parseJSON = withObject "PaymentMethodDetailsCardWalletApplePay" parseCtors
    where
      parseCtors o = parsePaymentMethodDetailsCardWalletApplePay o
      parsePaymentMethodDetailsCardWalletApplePay o = do
        pure PaymentMethodDetailsCardWalletApplePay

instance ToJSON PaymentMethodDetailsCardWalletApplePay where
  toJSON PaymentMethodDetailsCardWalletApplePay = object
    (
      []
    )
  toEncoding PaymentMethodDetailsCardWalletApplePay = pairs (
      mempty
      )

-- Describes: "payment_method_details_card_wallet_google_pay"

data PaymentMethodDetailsCardWalletGooglePay
  = PaymentMethodDetailsCardWalletGooglePay
    {
    } deriving (Show, Eq, Generic)

instance FromJSON PaymentMethodDetailsCardWalletGooglePay where
  parseJSON = withObject "PaymentMethodDetailsCardWalletGooglePay" parseCtors
    where
      parseCtors o = parsePaymentMethodDetailsCardWalletGooglePay o
      parsePaymentMethodDetailsCardWalletGooglePay o = do
        pure PaymentMethodDetailsCardWalletGooglePay

instance ToJSON PaymentMethodDetailsCardWalletGooglePay where
  toJSON PaymentMethodDetailsCardWalletGooglePay = object
    (
      []
    )
  toEncoding PaymentMethodDetailsCardWalletGooglePay = pairs (
      mempty
      )

-- Describes: "payment_method_details_card_wallet_masterpass"

data PaymentMethodDetailsCardWalletMasterpass
  = PaymentMethodDetailsCardWalletMasterpass
    { paymentMethodDetailsCardWalletMasterpass__billingAddress :: Maybe (Expandable '[Const (Address)])
    {- ^ Owner's verified billing address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. -}
    , paymentMethodDetailsCardWalletMasterpass__email :: Maybe (Text)
    {- ^ Owner's verified email. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. -}
    , paymentMethodDetailsCardWalletMasterpass__name :: Maybe (Text)
    {- ^ Owner's verified full name. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. -}
    , paymentMethodDetailsCardWalletMasterpass__shippingAddress :: Maybe (Expandable '[Const (Address)])
    {- ^ Owner's verified shipping address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. -}
    } deriving (Show, Eq, Generic)

instance FromJSON PaymentMethodDetailsCardWalletMasterpass where
  parseJSON = withObject "PaymentMethodDetailsCardWalletMasterpass" parseCtors
    where
      parseCtors o = parsePaymentMethodDetailsCardWalletMasterpass o
      parsePaymentMethodDetailsCardWalletMasterpass o = do
        paymentMethodDetailsCardWalletMasterpass__billingAddress <- o .:? "billing_address"
        paymentMethodDetailsCardWalletMasterpass__email <- o .:? "email"
        paymentMethodDetailsCardWalletMasterpass__name <- o .:? "name"
        paymentMethodDetailsCardWalletMasterpass__shippingAddress <- o .:? "shipping_address"
        pure PaymentMethodDetailsCardWalletMasterpass{..}

instance ToJSON PaymentMethodDetailsCardWalletMasterpass where
  toJSON PaymentMethodDetailsCardWalletMasterpass{..} = object
    (
      (fmap ("billing_address" .=) paymentMethodDetailsCardWalletMasterpass__billingAddress) >?>
      (fmap ("email" .=) paymentMethodDetailsCardWalletMasterpass__email) >?>
      (fmap ("name" .=) paymentMethodDetailsCardWalletMasterpass__name) >?>
      (fmap ("shipping_address" .=) paymentMethodDetailsCardWalletMasterpass__shippingAddress) >?>
      []
    )
  toEncoding PaymentMethodDetailsCardWalletMasterpass{..} = pairs (
      maybe mempty ("billing_address" .=) paymentMethodDetailsCardWalletMasterpass__billingAddress <>
      maybe mempty ("email" .=) paymentMethodDetailsCardWalletMasterpass__email <>
      maybe mempty ("name" .=) paymentMethodDetailsCardWalletMasterpass__name <>
      maybe mempty ("shipping_address" .=) paymentMethodDetailsCardWalletMasterpass__shippingAddress
      )

-- Describes: "payment_method_details_card_wallet_samsung_pay"

data PaymentMethodDetailsCardWalletSamsungPay
  = PaymentMethodDetailsCardWalletSamsungPay
    {
    } deriving (Show, Eq, Generic)

instance FromJSON PaymentMethodDetailsCardWalletSamsungPay where
  parseJSON = withObject "PaymentMethodDetailsCardWalletSamsungPay" parseCtors
    where
      parseCtors o = parsePaymentMethodDetailsCardWalletSamsungPay o
      parsePaymentMethodDetailsCardWalletSamsungPay o = do
        pure PaymentMethodDetailsCardWalletSamsungPay

instance ToJSON PaymentMethodDetailsCardWalletSamsungPay where
  toJSON PaymentMethodDetailsCardWalletSamsungPay = object
    (
      []
    )
  toEncoding PaymentMethodDetailsCardWalletSamsungPay = pairs (
      mempty
      )

-- Describes: "payment_method_details_card_wallet_visa_checkout"

data PaymentMethodDetailsCardWalletVisaCheckout
  = PaymentMethodDetailsCardWalletVisaCheckout
    { paymentMethodDetailsCardWalletVisaCheckout__billingAddress :: Maybe (Expandable '[Const (Address)])
    {- ^ Owner's verified billing address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. -}
    , paymentMethodDetailsCardWalletVisaCheckout__email :: Maybe (Text)
    {- ^ Owner's verified email. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. -}
    , paymentMethodDetailsCardWalletVisaCheckout__name :: Maybe (Text)
    {- ^ Owner's verified full name. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. -}
    , paymentMethodDetailsCardWalletVisaCheckout__shippingAddress :: Maybe (Expandable '[Const (Address)])
    {- ^ Owner's verified shipping address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. -}
    } deriving (Show, Eq, Generic)

instance FromJSON PaymentMethodDetailsCardWalletVisaCheckout where
  parseJSON = withObject "PaymentMethodDetailsCardWalletVisaCheckout" parseCtors
    where
      parseCtors o = parsePaymentMethodDetailsCardWalletVisaCheckout o
      parsePaymentMethodDetailsCardWalletVisaCheckout o = do
        paymentMethodDetailsCardWalletVisaCheckout__billingAddress <- o .:? "billing_address"
        paymentMethodDetailsCardWalletVisaCheckout__email <- o .:? "email"
        paymentMethodDetailsCardWalletVisaCheckout__name <- o .:? "name"
        paymentMethodDetailsCardWalletVisaCheckout__shippingAddress <- o .:? "shipping_address"
        pure PaymentMethodDetailsCardWalletVisaCheckout{..}

instance ToJSON PaymentMethodDetailsCardWalletVisaCheckout where
  toJSON PaymentMethodDetailsCardWalletVisaCheckout{..} = object
    (
      (fmap ("billing_address" .=) paymentMethodDetailsCardWalletVisaCheckout__billingAddress) >?>
      (fmap ("email" .=) paymentMethodDetailsCardWalletVisaCheckout__email) >?>
      (fmap ("name" .=) paymentMethodDetailsCardWalletVisaCheckout__name) >?>
      (fmap ("shipping_address" .=) paymentMethodDetailsCardWalletVisaCheckout__shippingAddress) >?>
      []
    )
  toEncoding PaymentMethodDetailsCardWalletVisaCheckout{..} = pairs (
      maybe mempty ("billing_address" .=) paymentMethodDetailsCardWalletVisaCheckout__billingAddress <>
      maybe mempty ("email" .=) paymentMethodDetailsCardWalletVisaCheckout__email <>
      maybe mempty ("name" .=) paymentMethodDetailsCardWalletVisaCheckout__name <>
      maybe mempty ("shipping_address" .=) paymentMethodDetailsCardWalletVisaCheckout__shippingAddress
      )

-- Describes: "payment_method_details_eps"

data PaymentMethodDetailsEps
  = PaymentMethodDetailsEps
    { paymentMethodDetailsEps__verifiedName :: Maybe (Text)
    {- ^ Owner's verified full name. Values are verified or provided by EPS directly
(if supported) at the time of authorization or settlement. They cannot be set or mutated. -}
    } deriving (Show, Eq, Generic)

instance FromJSON PaymentMethodDetailsEps where
  parseJSON = withObject "PaymentMethodDetailsEps" parseCtors
    where
      parseCtors o = parsePaymentMethodDetailsEps o
      parsePaymentMethodDetailsEps o = do
        paymentMethodDetailsEps__verifiedName <- o .:? "verified_name"
        pure PaymentMethodDetailsEps{..}

instance ToJSON PaymentMethodDetailsEps where
  toJSON PaymentMethodDetailsEps{..} = object
    (
      (fmap ("verified_name" .=) paymentMethodDetailsEps__verifiedName) >?>
      []
    )
  toEncoding PaymentMethodDetailsEps{..} = pairs (
      maybe mempty ("verified_name" .=) paymentMethodDetailsEps__verifiedName
      )

-- Describes: "payment_method_details_giropay"

data PaymentMethodDetailsGiropay
  = PaymentMethodDetailsGiropay
    { paymentMethodDetailsGiropay__bankCode :: Maybe (Text)
    {- ^ Bank code of bank associated with the bank account. -}
    , paymentMethodDetailsGiropay__bankName :: Maybe (Text)
    {- ^ Name of the bank associated with the bank account. -}
    , paymentMethodDetailsGiropay__bic :: Maybe (Text)
    {- ^ Bank Identifier Code of the bank associated with the bank account. -}
    , paymentMethodDetailsGiropay__verifiedName :: Maybe (Text)
    {- ^ Owner's verified full name. Values are verified or provided by Giropay directly
(if supported) at the time of authorization or settlement. They cannot be set or mutated. -}
    } deriving (Show, Eq, Generic)

instance FromJSON PaymentMethodDetailsGiropay where
  parseJSON = withObject "PaymentMethodDetailsGiropay" parseCtors
    where
      parseCtors o = parsePaymentMethodDetailsGiropay o
      parsePaymentMethodDetailsGiropay o = do
        paymentMethodDetailsGiropay__bankCode <- o .:? "bank_code"
        paymentMethodDetailsGiropay__bankName <- o .:? "bank_name"
        paymentMethodDetailsGiropay__bic <- o .:? "bic"
        paymentMethodDetailsGiropay__verifiedName <- o .:? "verified_name"
        pure PaymentMethodDetailsGiropay{..}

instance ToJSON PaymentMethodDetailsGiropay where
  toJSON PaymentMethodDetailsGiropay{..} = object
    (
      (fmap ("bank_code" .=) paymentMethodDetailsGiropay__bankCode) >?>
      (fmap ("bank_name" .=) paymentMethodDetailsGiropay__bankName) >?>
      (fmap ("bic" .=) paymentMethodDetailsGiropay__bic) >?>
      (fmap ("verified_name" .=) paymentMethodDetailsGiropay__verifiedName) >?>
      []
    )
  toEncoding PaymentMethodDetailsGiropay{..} = pairs (
      maybe mempty ("bank_code" .=) paymentMethodDetailsGiropay__bankCode <>
      maybe mempty ("bank_name" .=) paymentMethodDetailsGiropay__bankName <>
      maybe mempty ("bic" .=) paymentMethodDetailsGiropay__bic <>
      maybe mempty ("verified_name" .=) paymentMethodDetailsGiropay__verifiedName
      )

-- Describes: "payment_method_details_ideal"

data PaymentMethodDetailsIdeal
  = PaymentMethodDetailsIdeal
    { paymentMethodDetailsIdeal__bank :: Maybe (PaymentMethodDetailsIdeal_Bank)
    {- ^ The customer's bank. Can be one of `abn_amro`, `asn_bank`, `bunq`, `handelsbanken`, `ing`, `knab`, `moneyou`, `rabobank`, `regiobank`, `sns_bank`, `triodos_bank`, or `van_lanschot`. -}
    , paymentMethodDetailsIdeal__bic :: Maybe (PaymentMethodDetailsIdeal_Bic)
    {- ^ The Bank Identifier Code of the customer's bank. -}
    , paymentMethodDetailsIdeal__ibanLast4 :: Maybe (Text)
    {- ^ Last four characters of the IBAN. -}
    , paymentMethodDetailsIdeal__verifiedName :: Maybe (Text)
    {- ^ Owner's verified full name. Values are verified or provided by iDEAL directly
(if supported) at the time of authorization or settlement. They cannot be set or mutated. -}
    } deriving (Show, Eq, Generic)

instance FromJSON PaymentMethodDetailsIdeal where
  parseJSON = withObject "PaymentMethodDetailsIdeal" parseCtors
    where
      parseCtors o = parsePaymentMethodDetailsIdeal o
      parsePaymentMethodDetailsIdeal o = do
        paymentMethodDetailsIdeal__bank <- o .:? "bank"
        paymentMethodDetailsIdeal__bic <- o .:? "bic"
        paymentMethodDetailsIdeal__ibanLast4 <- o .:? "iban_last4"
        paymentMethodDetailsIdeal__verifiedName <- o .:? "verified_name"
        pure PaymentMethodDetailsIdeal{..}

instance ToJSON PaymentMethodDetailsIdeal where
  toJSON PaymentMethodDetailsIdeal{..} = object
    (
      (fmap ("bank" .=) paymentMethodDetailsIdeal__bank) >?>
      (fmap ("bic" .=) paymentMethodDetailsIdeal__bic) >?>
      (fmap ("iban_last4" .=) paymentMethodDetailsIdeal__ibanLast4) >?>
      (fmap ("verified_name" .=) paymentMethodDetailsIdeal__verifiedName) >?>
      []
    )
  toEncoding PaymentMethodDetailsIdeal{..} = pairs (
      maybe mempty ("bank" .=) paymentMethodDetailsIdeal__bank <>
      maybe mempty ("bic" .=) paymentMethodDetailsIdeal__bic <>
      maybe mempty ("iban_last4" .=) paymentMethodDetailsIdeal__ibanLast4 <>
      maybe mempty ("verified_name" .=) paymentMethodDetailsIdeal__verifiedName
      )

-- Describes: "payment_method_details_klarna"

data PaymentMethodDetailsKlarna
  = PaymentMethodDetailsKlarna
    {
    } deriving (Show, Eq, Generic)

instance FromJSON PaymentMethodDetailsKlarna where
  parseJSON = withObject "PaymentMethodDetailsKlarna" parseCtors
    where
      parseCtors o = parsePaymentMethodDetailsKlarna o
      parsePaymentMethodDetailsKlarna o = do
        pure PaymentMethodDetailsKlarna

instance ToJSON PaymentMethodDetailsKlarna where
  toJSON PaymentMethodDetailsKlarna = object
    (
      []
    )
  toEncoding PaymentMethodDetailsKlarna = pairs (
      mempty
      )

-- Describes: "payment_method_details_multibanco"

data PaymentMethodDetailsMultibanco
  = PaymentMethodDetailsMultibanco
    { paymentMethodDetailsMultibanco__entity :: Maybe (Text)
    {- ^ Entity number associated with this Multibanco payment. -}
    , paymentMethodDetailsMultibanco__reference :: Maybe (Text)
    {- ^ Reference number associated with this Multibanco payment. -}
    } deriving (Show, Eq, Generic)

instance FromJSON PaymentMethodDetailsMultibanco where
  parseJSON = withObject "PaymentMethodDetailsMultibanco" parseCtors
    where
      parseCtors o = parsePaymentMethodDetailsMultibanco o
      parsePaymentMethodDetailsMultibanco o = do
        paymentMethodDetailsMultibanco__entity <- o .:? "entity"
        paymentMethodDetailsMultibanco__reference <- o .:? "reference"
        pure PaymentMethodDetailsMultibanco{..}

instance ToJSON PaymentMethodDetailsMultibanco where
  toJSON PaymentMethodDetailsMultibanco{..} = object
    (
      (fmap ("entity" .=) paymentMethodDetailsMultibanco__entity) >?>
      (fmap ("reference" .=) paymentMethodDetailsMultibanco__reference) >?>
      []
    )
  toEncoding PaymentMethodDetailsMultibanco{..} = pairs (
      maybe mempty ("entity" .=) paymentMethodDetailsMultibanco__entity <>
      maybe mempty ("reference" .=) paymentMethodDetailsMultibanco__reference
      )

-- Describes: "payment_method_details_p24"

data PaymentMethodDetailsP24
  = PaymentMethodDetailsP24
    { paymentMethodDetailsP24__reference :: Maybe (Text)
    {- ^ Unique reference for this Przelewy24 payment. -}
    , paymentMethodDetailsP24__verifiedName :: Maybe (Text)
    {- ^ Owner's verified full name. Values are verified or provided by Przelewy24 directly
(if supported) at the time of authorization or settlement. They cannot be set or mutated. -}
    } deriving (Show, Eq, Generic)

instance FromJSON PaymentMethodDetailsP24 where
  parseJSON = withObject "PaymentMethodDetailsP24" parseCtors
    where
      parseCtors o = parsePaymentMethodDetailsP24 o
      parsePaymentMethodDetailsP24 o = do
        paymentMethodDetailsP24__reference <- o .:? "reference"
        paymentMethodDetailsP24__verifiedName <- o .:? "verified_name"
        pure PaymentMethodDetailsP24{..}

instance ToJSON PaymentMethodDetailsP24 where
  toJSON PaymentMethodDetailsP24{..} = object
    (
      (fmap ("reference" .=) paymentMethodDetailsP24__reference) >?>
      (fmap ("verified_name" .=) paymentMethodDetailsP24__verifiedName) >?>
      []
    )
  toEncoding PaymentMethodDetailsP24{..} = pairs (
      maybe mempty ("reference" .=) paymentMethodDetailsP24__reference <>
      maybe mempty ("verified_name" .=) paymentMethodDetailsP24__verifiedName
      )

-- Describes: "payment_method_details_sepa_debit"

data PaymentMethodDetailsSepaDebit
  = PaymentMethodDetailsSepaDebit
    { paymentMethodDetailsSepaDebit__bankCode :: Maybe (Text)
    {- ^ Bank code of bank associated with the bank account. -}
    , paymentMethodDetailsSepaDebit__branchCode :: Maybe (Text)
    {- ^ Branch code of bank associated with the bank account. -}
    , paymentMethodDetailsSepaDebit__country :: Maybe (Text)
    {- ^ Two-letter ISO code representing the country the bank account is located in. -}
    , paymentMethodDetailsSepaDebit__fingerprint :: Maybe (Text)
    {- ^ Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. -}
    , paymentMethodDetailsSepaDebit__last4 :: Maybe (Text)
    {- ^ Last four characters of the IBAN. -}
    } deriving (Show, Eq, Generic)

instance FromJSON PaymentMethodDetailsSepaDebit where
  parseJSON = withObject "PaymentMethodDetailsSepaDebit" parseCtors
    where
      parseCtors o = parsePaymentMethodDetailsSepaDebit o
      parsePaymentMethodDetailsSepaDebit o = do
        paymentMethodDetailsSepaDebit__bankCode <- o .:? "bank_code"
        paymentMethodDetailsSepaDebit__branchCode <- o .:? "branch_code"
        paymentMethodDetailsSepaDebit__country <- o .:? "country"
        paymentMethodDetailsSepaDebit__fingerprint <- o .:? "fingerprint"
        paymentMethodDetailsSepaDebit__last4 <- o .:? "last4"
        pure PaymentMethodDetailsSepaDebit{..}

instance ToJSON PaymentMethodDetailsSepaDebit where
  toJSON PaymentMethodDetailsSepaDebit{..} = object
    (
      (fmap ("bank_code" .=) paymentMethodDetailsSepaDebit__bankCode) >?>
      (fmap ("branch_code" .=) paymentMethodDetailsSepaDebit__branchCode) >?>
      (fmap ("country" .=) paymentMethodDetailsSepaDebit__country) >?>
      (fmap ("fingerprint" .=) paymentMethodDetailsSepaDebit__fingerprint) >?>
      (fmap ("last4" .=) paymentMethodDetailsSepaDebit__last4) >?>
      []
    )
  toEncoding PaymentMethodDetailsSepaDebit{..} = pairs (
      maybe mempty ("bank_code" .=) paymentMethodDetailsSepaDebit__bankCode <>
      maybe mempty ("branch_code" .=) paymentMethodDetailsSepaDebit__branchCode <>
      maybe mempty ("country" .=) paymentMethodDetailsSepaDebit__country <>
      maybe mempty ("fingerprint" .=) paymentMethodDetailsSepaDebit__fingerprint <>
      maybe mempty ("last4" .=) paymentMethodDetailsSepaDebit__last4
      )

-- Describes: "payment_method_details_sofort"

data PaymentMethodDetailsSofort
  = PaymentMethodDetailsSofort
    { paymentMethodDetailsSofort__bankCode :: Maybe (Text)
    {- ^ Bank code of bank associated with the bank account. -}
    , paymentMethodDetailsSofort__bankName :: Maybe (Text)
    {- ^ Name of the bank associated with the bank account. -}
    , paymentMethodDetailsSofort__bic :: Maybe (Text)
    {- ^ Bank Identifier Code of the bank associated with the bank account. -}
    , paymentMethodDetailsSofort__country :: Maybe (Text)
    {- ^ Two-letter ISO code representing the country the bank account is located in. -}
    , paymentMethodDetailsSofort__ibanLast4 :: Maybe (Text)
    {- ^ Last four characters of the IBAN. -}
    , paymentMethodDetailsSofort__verifiedName :: Maybe (Text)
    {- ^ Owner's verified full name. Values are verified or provided by SOFORT directly
(if supported) at the time of authorization or settlement. They cannot be set or mutated. -}
    } deriving (Show, Eq, Generic)

instance FromJSON PaymentMethodDetailsSofort where
  parseJSON = withObject "PaymentMethodDetailsSofort" parseCtors
    where
      parseCtors o = parsePaymentMethodDetailsSofort o
      parsePaymentMethodDetailsSofort o = do
        paymentMethodDetailsSofort__bankCode <- o .:? "bank_code"
        paymentMethodDetailsSofort__bankName <- o .:? "bank_name"
        paymentMethodDetailsSofort__bic <- o .:? "bic"
        paymentMethodDetailsSofort__country <- o .:? "country"
        paymentMethodDetailsSofort__ibanLast4 <- o .:? "iban_last4"
        paymentMethodDetailsSofort__verifiedName <- o .:? "verified_name"
        pure PaymentMethodDetailsSofort{..}

instance ToJSON PaymentMethodDetailsSofort where
  toJSON PaymentMethodDetailsSofort{..} = object
    (
      (fmap ("bank_code" .=) paymentMethodDetailsSofort__bankCode) >?>
      (fmap ("bank_name" .=) paymentMethodDetailsSofort__bankName) >?>
      (fmap ("bic" .=) paymentMethodDetailsSofort__bic) >?>
      (fmap ("country" .=) paymentMethodDetailsSofort__country) >?>
      (fmap ("iban_last4" .=) paymentMethodDetailsSofort__ibanLast4) >?>
      (fmap ("verified_name" .=) paymentMethodDetailsSofort__verifiedName) >?>
      []
    )
  toEncoding PaymentMethodDetailsSofort{..} = pairs (
      maybe mempty ("bank_code" .=) paymentMethodDetailsSofort__bankCode <>
      maybe mempty ("bank_name" .=) paymentMethodDetailsSofort__bankName <>
      maybe mempty ("bic" .=) paymentMethodDetailsSofort__bic <>
      maybe mempty ("country" .=) paymentMethodDetailsSofort__country <>
      maybe mempty ("iban_last4" .=) paymentMethodDetailsSofort__ibanLast4 <>
      maybe mempty ("verified_name" .=) paymentMethodDetailsSofort__verifiedName
      )

-- Describes: "payment_method_details_stripe_account"

data PaymentMethodDetailsStripeAccount
  = PaymentMethodDetailsStripeAccount
    {
    } deriving (Show, Eq, Generic)

instance FromJSON PaymentMethodDetailsStripeAccount where
  parseJSON = withObject "PaymentMethodDetailsStripeAccount" parseCtors
    where
      parseCtors o = parsePaymentMethodDetailsStripeAccount o
      parsePaymentMethodDetailsStripeAccount o = do
        pure PaymentMethodDetailsStripeAccount

instance ToJSON PaymentMethodDetailsStripeAccount where
  toJSON PaymentMethodDetailsStripeAccount = object
    (
      []
    )
  toEncoding PaymentMethodDetailsStripeAccount = pairs (
      mempty
      )

-- Describes: "payment_method_details_wechat"

data PaymentMethodDetailsWechat
  = PaymentMethodDetailsWechat
    {
    } deriving (Show, Eq, Generic)

instance FromJSON PaymentMethodDetailsWechat where
  parseJSON = withObject "PaymentMethodDetailsWechat" parseCtors
    where
      parseCtors o = parsePaymentMethodDetailsWechat o
      parsePaymentMethodDetailsWechat o = do
        pure PaymentMethodDetailsWechat

instance ToJSON PaymentMethodDetailsWechat where
  toJSON PaymentMethodDetailsWechat = object
    (
      []
    )
  toEncoding PaymentMethodDetailsWechat = pairs (
      mempty
      )

-- Describes: "payment_source"

data PaymentSource
  = PaymentSource
    {
    } deriving (Show, Eq, Generic)

instance FromJSON PaymentSource where
  parseJSON = withObject "PaymentSource" parseCtors
    where
      parseCtors o = parsePaymentSource o
      parsePaymentSource o = do
        pure PaymentSource

instance ToJSON PaymentSource where
  toJSON PaymentSource = object
    (
      []
    )
  toEncoding PaymentSource = pairs (
      mempty
      )

-- Describes: "payout"

data Payout
  = Payout
    { payout__id :: (Id Payout)
    {- ^ Unique identifier for the object. -}
    , payout__object :: Payout_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , payout__livemode :: Bool
    {- ^ Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. -}
    , payout__amount :: Int
    {- ^ Amount (in %s) to be transferred to your bank account or debit card. -}
    , payout__arrivalDate :: POSIXTime
    {- ^ Date the payout is expected to arrive in the bank. This factors in delays like weekends or bank holidays. -}
    , payout__automatic :: Bool
    {- ^ Returns `true` if the payout was created by an [automated payout schedule](https://stripe.com/docs/payouts#payout-schedule), and `false` if it was [requested manually](https://stripe.com/docs/payouts#manual-payouts). -}
    , payout__created :: POSIXTime
    {- ^ Time at which the object was created. Measured in seconds since the Unix epoch. -}
    , payout__currency :: Text
    {- ^ Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). -}
    , payout__metadata :: Object
    {- ^ Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. -}
    , payout__method :: Text
    {- ^ The method used to send this payout, which can be `standard` or `instant`. `instant` is only supported for payouts to debit cards. (See [Instant payouts for marketplaces](/blog/instant-payouts-for-marketplaces) for more information.) -}
    , payout__sourceType :: Text
    {- ^ The source balance this payout came from. One of `card` or `bank_account`. -}
    , payout__status :: Text
    {- ^ Current status of the payout (`paid`, `pending`, `in_transit`, `canceled` or `failed`). A payout will be `pending` until it is submitted to the bank, at which point it becomes `in_transit`. It will then change to `paid` if the transaction goes through. If it does not go through successfully, its status will change to `failed` or `canceled`. -}
    , payout__type :: Payout_Type
    {- ^ Can be `bank_account` or `card`. -}
    , payout__balanceTransaction :: Maybe (Expandable '[Const (BalanceTransaction)])
    {- ^ ID of the balance transaction that describes the impact of this payout on your account balance. -}
    , payout__description :: Maybe (Text)
    {- ^ An arbitrary string attached to the object. Often useful for displaying to users. -}
    , payout__destination :: Maybe (Expandable '[Const (BankAccount), Const (Card), Const (DeletedBankAccount), Const (DeletedCard)])
    {- ^ ID of the bank account or card the payout was sent to. -}
    , payout__failureBalanceTransaction :: Maybe (Expandable '[Const (BalanceTransaction)])
    {- ^ If the payout failed or was canceled, this will be the ID of the balance transaction that reversed the initial balance transaction, and puts the funds from the failed payout back in your balance. -}
    , payout__failureCode :: Maybe (Text)
    {- ^ Error code explaining reason for payout failure if available. See [Types of payout failures](https://stripe.com/docs/api#payout_failures) for a list of failure codes. -}
    , payout__failureMessage :: Maybe (Text)
    {- ^ Message to user further explaining reason for payout failure if available. -}
    , payout__statementDescriptor :: Maybe (Text)
    {- ^ Extra information about a payout to be displayed on the user's bank statement. -}
    } deriving (Show, Eq, Generic)

instance FromJSON Payout where
  parseJSON = withObject "Payout" parseCtors
    where
      parseCtors o = parsePayout o
      parsePayout o = do
        payout__id <- o .: "id"
        payout__object <- o .: "object"
        payout__livemode <- o .: "livemode"
        payout__amount <- o .: "amount"
        payout__arrivalDate <- o .: "arrival_date"
        payout__automatic <- o .: "automatic"
        payout__created <- o .: "created"
        payout__currency <- o .: "currency"
        payout__metadata <- o .: "metadata"
        payout__method <- o .: "method"
        payout__sourceType <- o .: "source_type"
        payout__status <- o .: "status"
        payout__type <- o .: "type"
        payout__balanceTransaction <- o .:? "balance_transaction"
        payout__description <- o .:? "description"
        payout__destination <- o .:? "destination"
        payout__failureBalanceTransaction <- o .:? "failure_balance_transaction"
        payout__failureCode <- o .:? "failure_code"
        payout__failureMessage <- o .:? "failure_message"
        payout__statementDescriptor <- o .:? "statement_descriptor"
        pure Payout{..}

instance ToJSON Payout where
  toJSON Payout{..} = object
    (
      ("id" .= payout__id) :
      ("object" .= payout__object) :
      ("livemode" .= payout__livemode) :
      ("amount" .= payout__amount) :
      ("arrival_date" .= payout__arrivalDate) :
      ("automatic" .= payout__automatic) :
      ("created" .= payout__created) :
      ("currency" .= payout__currency) :
      ("metadata" .= payout__metadata) :
      ("method" .= payout__method) :
      ("source_type" .= payout__sourceType) :
      ("status" .= payout__status) :
      ("type" .= payout__type) :
      (fmap ("balance_transaction" .=) payout__balanceTransaction) >?>
      (fmap ("description" .=) payout__description) >?>
      (fmap ("destination" .=) payout__destination) >?>
      (fmap ("failure_balance_transaction" .=) payout__failureBalanceTransaction) >?>
      (fmap ("failure_code" .=) payout__failureCode) >?>
      (fmap ("failure_message" .=) payout__failureMessage) >?>
      (fmap ("statement_descriptor" .=) payout__statementDescriptor) >?>
      []
    )
  toEncoding Payout{..} = pairs (
      "id" .= payout__id <>
      "object" .= payout__object <>
      "livemode" .= payout__livemode <>
      "amount" .= payout__amount <>
      "arrival_date" .= payout__arrivalDate <>
      "automatic" .= payout__automatic <>
      "created" .= payout__created <>
      "currency" .= payout__currency <>
      "metadata" .= payout__metadata <>
      "method" .= payout__method <>
      "source_type" .= payout__sourceType <>
      "status" .= payout__status <>
      "type" .= payout__type <>
      maybe mempty ("balance_transaction" .=) payout__balanceTransaction <>
      maybe mempty ("description" .=) payout__description <>
      maybe mempty ("destination" .=) payout__destination <>
      maybe mempty ("failure_balance_transaction" .=) payout__failureBalanceTransaction <>
      maybe mempty ("failure_code" .=) payout__failureCode <>
      maybe mempty ("failure_message" .=) payout__failureMessage <>
      maybe mempty ("statement_descriptor" .=) payout__statementDescriptor
      )

-- Describes: "period"

data Period
  = Period
    { period__end :: Maybe (POSIXTime)
    {- ^ The end date of this usage period. All usage up to and including this point in time is included. -}
    , period__start :: Maybe (POSIXTime)
    {- ^ The start date of this usage period. All usage after this point in time is included. -}
    } deriving (Show, Eq, Generic)

instance FromJSON Period where
  parseJSON = withObject "Period" parseCtors
    where
      parseCtors o = parsePeriod o
      parsePeriod o = do
        period__end <- o .:? "end"
        period__start <- o .:? "start"
        pure Period{..}

instance ToJSON Period where
  toJSON Period{..} = object
    (
      (fmap ("end" .=) period__end) >?>
      (fmap ("start" .=) period__start) >?>
      []
    )
  toEncoding Period{..} = pairs (
      maybe mempty ("end" .=) period__end <>
      maybe mempty ("start" .=) period__start
      )

-- Describes: "person"

data Person
  = Person
    { person__id :: (Id Person)
    {- ^ Unique identifier for the object. -}
    , person__object :: Person_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , person__account :: Text
    , person__address :: Address
    , person__created :: POSIXTime
    {- ^ Time at which the object was created. Measured in seconds since the Unix epoch. -}
    , person__dob :: LegalEntityDob
    , person__idNumberProvided :: Bool
    , person__metadata :: Object
    {- ^ Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. -}
    , person__relationship :: PersonRelationship
    , person__ssnLast4Provided :: Bool
    , person__verification :: LegalEntityPersonVerification
    , person__addressKana :: Maybe (Expandable '[Const (LegalEntityJapanAddress)])
    , person__addressKanji :: Maybe (Expandable '[Const (LegalEntityJapanAddress)])
    , person__email :: Maybe (Text)
    , person__firstName :: Maybe (Text)
    , person__firstNameKana :: Maybe (Text)
    , person__firstNameKanji :: Maybe (Text)
    , person__gender :: Maybe (Text)
    , person__lastName :: Maybe (Text)
    , person__lastNameKana :: Maybe (Text)
    , person__lastNameKanji :: Maybe (Text)
    , person__maidenName :: Maybe (Text)
    , person__phone :: Maybe (Text)
    , person__requirements :: Maybe (Expandable '[Const (PersonRequirements)])
    } deriving (Show, Eq, Generic)

instance FromJSON Person where
  parseJSON = withObject "Person" parseCtors
    where
      parseCtors o = parsePerson o
      parsePerson o = do
        person__id <- o .: "id"
        person__object <- o .: "object"
        person__account <- o .: "account"
        person__address <- o .: "address"
        person__created <- o .: "created"
        person__dob <- o .: "dob"
        person__idNumberProvided <- o .: "id_number_provided"
        person__metadata <- o .: "metadata"
        person__relationship <- o .: "relationship"
        person__ssnLast4Provided <- o .: "ssn_last_4_provided"
        person__verification <- o .: "verification"
        person__addressKana <- o .:? "address_kana"
        person__addressKanji <- o .:? "address_kanji"
        person__email <- o .:? "email"
        person__firstName <- o .:? "first_name"
        person__firstNameKana <- o .:? "first_name_kana"
        person__firstNameKanji <- o .:? "first_name_kanji"
        person__gender <- o .:? "gender"
        person__lastName <- o .:? "last_name"
        person__lastNameKana <- o .:? "last_name_kana"
        person__lastNameKanji <- o .:? "last_name_kanji"
        person__maidenName <- o .:? "maiden_name"
        person__phone <- o .:? "phone"
        person__requirements <- o .:? "requirements"
        pure Person{..}

instance ToJSON Person where
  toJSON Person{..} = object
    (
      ("id" .= person__id) :
      ("object" .= person__object) :
      ("account" .= person__account) :
      ("address" .= person__address) :
      ("created" .= person__created) :
      ("dob" .= person__dob) :
      ("id_number_provided" .= person__idNumberProvided) :
      ("metadata" .= person__metadata) :
      ("relationship" .= person__relationship) :
      ("ssn_last_4_provided" .= person__ssnLast4Provided) :
      ("verification" .= person__verification) :
      (fmap ("address_kana" .=) person__addressKana) >?>
      (fmap ("address_kanji" .=) person__addressKanji) >?>
      (fmap ("email" .=) person__email) >?>
      (fmap ("first_name" .=) person__firstName) >?>
      (fmap ("first_name_kana" .=) person__firstNameKana) >?>
      (fmap ("first_name_kanji" .=) person__firstNameKanji) >?>
      (fmap ("gender" .=) person__gender) >?>
      (fmap ("last_name" .=) person__lastName) >?>
      (fmap ("last_name_kana" .=) person__lastNameKana) >?>
      (fmap ("last_name_kanji" .=) person__lastNameKanji) >?>
      (fmap ("maiden_name" .=) person__maidenName) >?>
      (fmap ("phone" .=) person__phone) >?>
      (fmap ("requirements" .=) person__requirements) >?>
      []
    )
  toEncoding Person{..} = pairs (
      "id" .= person__id <>
      "object" .= person__object <>
      "account" .= person__account <>
      "address" .= person__address <>
      "created" .= person__created <>
      "dob" .= person__dob <>
      "id_number_provided" .= person__idNumberProvided <>
      "metadata" .= person__metadata <>
      "relationship" .= person__relationship <>
      "ssn_last_4_provided" .= person__ssnLast4Provided <>
      "verification" .= person__verification <>
      maybe mempty ("address_kana" .=) person__addressKana <>
      maybe mempty ("address_kanji" .=) person__addressKanji <>
      maybe mempty ("email" .=) person__email <>
      maybe mempty ("first_name" .=) person__firstName <>
      maybe mempty ("first_name_kana" .=) person__firstNameKana <>
      maybe mempty ("first_name_kanji" .=) person__firstNameKanji <>
      maybe mempty ("gender" .=) person__gender <>
      maybe mempty ("last_name" .=) person__lastName <>
      maybe mempty ("last_name_kana" .=) person__lastNameKana <>
      maybe mempty ("last_name_kanji" .=) person__lastNameKanji <>
      maybe mempty ("maiden_name" .=) person__maidenName <>
      maybe mempty ("phone" .=) person__phone <>
      maybe mempty ("requirements" .=) person__requirements
      )

-- Describes: "person_relationship"

data PersonRelationship
  = PersonRelationship
    { personRelationship__accountOpener :: Maybe (Bool)
    {- ^ Whether the person opened the account. This person provides information about themselves, and general information about the account. -}
    , personRelationship__director :: Maybe (Bool)
    {- ^ Whether the person is a director of the account's legal entity. Currently only required for accounts in the EU. Directors are typically members of the governing board of the company, or responsible for ensuring the company meets its regulatory obligations. -}
    , personRelationship__executive :: Maybe (Bool)
    {- ^ Whether the person has significant responsibility to control, manage, or direct the organization. -}
    , personRelationship__owner :: Maybe (Bool)
    {- ^ Whether the person is an owner of the account’s legal entity. -}
    , personRelationship__percentOwnership :: Maybe (Scientific)
    {- ^ The percent owned by the person of the account's legal entity. -}
    , personRelationship__title :: Maybe (Text)
    {- ^ The person's title (e.g., CEO, Support Engineer). -}
    } deriving (Show, Eq, Generic)

instance FromJSON PersonRelationship where
  parseJSON = withObject "PersonRelationship" parseCtors
    where
      parseCtors o = parsePersonRelationship o
      parsePersonRelationship o = do
        personRelationship__accountOpener <- o .:? "account_opener"
        personRelationship__director <- o .:? "director"
        personRelationship__executive <- o .:? "executive"
        personRelationship__owner <- o .:? "owner"
        personRelationship__percentOwnership <- o .:? "percent_ownership"
        personRelationship__title <- o .:? "title"
        pure PersonRelationship{..}

instance ToJSON PersonRelationship where
  toJSON PersonRelationship{..} = object
    (
      (fmap ("account_opener" .=) personRelationship__accountOpener) >?>
      (fmap ("director" .=) personRelationship__director) >?>
      (fmap ("executive" .=) personRelationship__executive) >?>
      (fmap ("owner" .=) personRelationship__owner) >?>
      (fmap ("percent_ownership" .=) personRelationship__percentOwnership) >?>
      (fmap ("title" .=) personRelationship__title) >?>
      []
    )
  toEncoding PersonRelationship{..} = pairs (
      maybe mempty ("account_opener" .=) personRelationship__accountOpener <>
      maybe mempty ("director" .=) personRelationship__director <>
      maybe mempty ("executive" .=) personRelationship__executive <>
      maybe mempty ("owner" .=) personRelationship__owner <>
      maybe mempty ("percent_ownership" .=) personRelationship__percentOwnership <>
      maybe mempty ("title" .=) personRelationship__title
      )

-- Describes: "person_requirements"

data PersonRequirements
  = PersonRequirements
    { personRequirements__currentlyDue :: Vector (Text)
    {- ^ Fields that need to be collected to keep the person's account enabled. If not collected by the account's `current_deadline`, these fields appear in `past_due` as well, and the account is disabled. -}
    , personRequirements__eventuallyDue :: Vector (Text)
    {- ^ Fields that need to be collected assuming all volume thresholds are reached. As fields are needed, they are moved to `currently_due` and the account's `current_deadline` is set. -}
    , personRequirements__pastDue :: Vector (Text)
    {- ^ Fields that weren't collected by the account's `current_deadline`. These fields need to be collected to enable payouts for the person's account. -}
    , personRequirements__pendingVerification :: Vector (Text)
    {- ^ Additional fields that may be required depending on the results of verification or review for provided requirements. If any of these fields become required, they appear in `currently_due` or `past_due`. -}
    } deriving (Show, Eq, Generic)

instance FromJSON PersonRequirements where
  parseJSON = withObject "PersonRequirements" parseCtors
    where
      parseCtors o = parsePersonRequirements o
      parsePersonRequirements o = do
        personRequirements__currentlyDue <- o .: "currently_due"
        personRequirements__eventuallyDue <- o .: "eventually_due"
        personRequirements__pastDue <- o .: "past_due"
        personRequirements__pendingVerification <- o .: "pending_verification"
        pure PersonRequirements{..}

instance ToJSON PersonRequirements where
  toJSON PersonRequirements{..} = object
    (
      ("currently_due" .= personRequirements__currentlyDue) :
      ("eventually_due" .= personRequirements__eventuallyDue) :
      ("past_due" .= personRequirements__pastDue) :
      ("pending_verification" .= personRequirements__pendingVerification) :
      []
    )
  toEncoding PersonRequirements{..} = pairs (
      "currently_due" .= personRequirements__currentlyDue <>
      "eventually_due" .= personRequirements__eventuallyDue <>
      "past_due" .= personRequirements__pastDue <>
      "pending_verification" .= personRequirements__pendingVerification
      )

-- Describes: "plan"

data Plan
  = Plan
    { plan__id :: (Id Plan)
    {- ^ Unique identifier for the object. -}
    , plan__object :: Plan_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , plan__livemode :: Bool
    {- ^ Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. -}
    , plan__active :: Bool
    {- ^ Whether the plan is currently available for new subscriptions. -}
    , plan__created :: POSIXTime
    {- ^ Time at which the object was created. Measured in seconds since the Unix epoch. -}
    , plan__currency :: Text
    {- ^ Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). -}
    , plan__interval :: Plan_Interval
    {- ^ One of `day`, `week`, `month` or `year`. The frequency with which a subscription should be billed. -}
    , plan__intervalCount :: Int
    {- ^ The number of intervals (specified in the `interval` property) between subscription billings. For example, `interval=month` and `interval_count=3` bills every 3 months. -}
    , plan__metadata :: Object
    {- ^ Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. -}
    , plan__usageType :: Plan_UsageType
    {- ^ Configures how the quantity per period should be determined, can be either `metered` or `licensed`. `licensed` will automatically bill the `quantity` set for a plan when adding it to a subscription, `metered` will aggregate the total usage based on usage records. Defaults to `licensed`. -}
    , plan__aggregateUsage :: Maybe (Plan_AggregateUsage)
    {- ^ Specifies a usage aggregation strategy for plans of `usage_type=metered`. Allowed values are `sum` for summing up all usage during a period, `last_during_period` for picking the last usage record reported within a period, `last_ever` for picking the last usage record ever (across period bounds) or `max` which picks the usage record with the maximum reported usage during a period. Defaults to `sum`. -}
    , plan__amount :: Maybe (Int)
    {- ^ The amount in %s to be charged on the interval specified. -}
    , plan__amountDecimal :: Maybe (Scientific)
    {- ^ Same as `amount`, but contains a decimal value with at most 12 decimal places. -}
    , plan__billingScheme :: Maybe (Plan_BillingScheme)
    {- ^ Describes how to compute the price per period. Either `per_unit` or `tiered`. `per_unit` indicates that the fixed amount (specified in `amount`) will be charged per unit in `quantity` (for plans with `usage_type=licensed`), or per unit of total usage (for plans with `usage_type=metered`). `tiered` indicates that the unit pricing will be computed using a tiering strategy as defined using the `tiers` and `tiers_mode` attributes. -}
    , plan__nickname :: Maybe (Text)
    {- ^ A brief description of the plan, hidden from customers. -}
    , plan__product :: Maybe (Expandable '[Const (Product), Const (DeletedProduct)])
    {- ^ The product whose pricing this plan determines. -}
    , plan__tiers :: Maybe (Vector (PlanTier))
    {- ^ Each element represents a pricing tier. This parameter requires `billing_scheme` to be set to `tiered`. See also the documentation for `billing_scheme`. -}
    , plan__tiersMode :: Maybe (Plan_TiersMode)
    {- ^ Defines if the tiering price should be `graduated` or `volume` based. In `volume`-based tiering, the maximum quantity within a period determines the per unit price, in `graduated` tiering pricing can successively change as the quantity grows. -}
    , plan__transformUsage :: Maybe (Expandable '[Const (TransformUsage)])
    {- ^ Apply a transformation to the reported usage or set quantity before computing the billed price. Cannot be combined with `tiers`. -}
    , plan__trialPeriodDays :: Maybe (Int)
    {- ^ Default number of trial days when subscribing a customer to this plan using [`trial_from_plan=true`](https://stripe.com/docs/api#create_subscription-trial_from_plan). -}
    } deriving (Show, Eq, Generic)

instance FromJSON Plan where
  parseJSON = withObject "Plan" parseCtors
    where
      parseCtors o = parsePlan o
      parsePlan o = do
        plan__id <- o .: "id"
        plan__object <- o .: "object"
        plan__livemode <- o .: "livemode"
        plan__active <- o .: "active"
        plan__created <- o .: "created"
        plan__currency <- o .: "currency"
        plan__interval <- o .: "interval"
        plan__intervalCount <- o .: "interval_count"
        plan__metadata <- o .: "metadata"
        plan__usageType <- o .: "usage_type"
        plan__aggregateUsage <- o .:? "aggregate_usage"
        plan__amount <- o .:? "amount"
        plan__amountDecimal <- o .:? "amount_decimal"
        plan__billingScheme <- o .:? "billing_scheme"
        plan__nickname <- o .:? "nickname"
        plan__product <- o .:? "product"
        plan__tiers <- o .:? "tiers"
        plan__tiersMode <- o .:? "tiers_mode"
        plan__transformUsage <- o .:? "transform_usage"
        plan__trialPeriodDays <- o .:? "trial_period_days"
        pure Plan{..}

instance ToJSON Plan where
  toJSON Plan{..} = object
    (
      ("id" .= plan__id) :
      ("object" .= plan__object) :
      ("livemode" .= plan__livemode) :
      ("active" .= plan__active) :
      ("created" .= plan__created) :
      ("currency" .= plan__currency) :
      ("interval" .= plan__interval) :
      ("interval_count" .= plan__intervalCount) :
      ("metadata" .= plan__metadata) :
      ("usage_type" .= plan__usageType) :
      (fmap ("aggregate_usage" .=) plan__aggregateUsage) >?>
      (fmap ("amount" .=) plan__amount) >?>
      (fmap ("amount_decimal" .=) plan__amountDecimal) >?>
      (fmap ("billing_scheme" .=) plan__billingScheme) >?>
      (fmap ("nickname" .=) plan__nickname) >?>
      (fmap ("product" .=) plan__product) >?>
      (fmap ("tiers" .=) plan__tiers) >?>
      (fmap ("tiers_mode" .=) plan__tiersMode) >?>
      (fmap ("transform_usage" .=) plan__transformUsage) >?>
      (fmap ("trial_period_days" .=) plan__trialPeriodDays) >?>
      []
    )
  toEncoding Plan{..} = pairs (
      "id" .= plan__id <>
      "object" .= plan__object <>
      "livemode" .= plan__livemode <>
      "active" .= plan__active <>
      "created" .= plan__created <>
      "currency" .= plan__currency <>
      "interval" .= plan__interval <>
      "interval_count" .= plan__intervalCount <>
      "metadata" .= plan__metadata <>
      "usage_type" .= plan__usageType <>
      maybe mempty ("aggregate_usage" .=) plan__aggregateUsage <>
      maybe mempty ("amount" .=) plan__amount <>
      maybe mempty ("amount_decimal" .=) plan__amountDecimal <>
      maybe mempty ("billing_scheme" .=) plan__billingScheme <>
      maybe mempty ("nickname" .=) plan__nickname <>
      maybe mempty ("product" .=) plan__product <>
      maybe mempty ("tiers" .=) plan__tiers <>
      maybe mempty ("tiers_mode" .=) plan__tiersMode <>
      maybe mempty ("transform_usage" .=) plan__transformUsage <>
      maybe mempty ("trial_period_days" .=) plan__trialPeriodDays
      )

-- Describes: "plan_tier"

data PlanTier
  = PlanTier
    { planTier__flatAmount :: Maybe (Int)
    {- ^ Price for the entire tier. -}
    , planTier__flatAmountDecimal :: Maybe (Scientific)
    {- ^ Same as `flat_amount`, but contains a decimal value with at most 12 decimal places. -}
    , planTier__unitAmount :: Maybe (Int)
    {- ^ Per unit price for units relevant to the tier. -}
    , planTier__unitAmountDecimal :: Maybe (Scientific)
    {- ^ Same as `unit_amount`, but contains a decimal value with at most 12 decimal places. -}
    , planTier__upTo :: Maybe (Int)
    {- ^ Up to and including to this quantity will be contained in the tier. -}
    } deriving (Show, Eq, Generic)

instance FromJSON PlanTier where
  parseJSON = withObject "PlanTier" parseCtors
    where
      parseCtors o = parsePlanTier o
      parsePlanTier o = do
        planTier__flatAmount <- o .:? "flat_amount"
        planTier__flatAmountDecimal <- o .:? "flat_amount_decimal"
        planTier__unitAmount <- o .:? "unit_amount"
        planTier__unitAmountDecimal <- o .:? "unit_amount_decimal"
        planTier__upTo <- o .:? "up_to"
        pure PlanTier{..}

instance ToJSON PlanTier where
  toJSON PlanTier{..} = object
    (
      (fmap ("flat_amount" .=) planTier__flatAmount) >?>
      (fmap ("flat_amount_decimal" .=) planTier__flatAmountDecimal) >?>
      (fmap ("unit_amount" .=) planTier__unitAmount) >?>
      (fmap ("unit_amount_decimal" .=) planTier__unitAmountDecimal) >?>
      (fmap ("up_to" .=) planTier__upTo) >?>
      []
    )
  toEncoding PlanTier{..} = pairs (
      maybe mempty ("flat_amount" .=) planTier__flatAmount <>
      maybe mempty ("flat_amount_decimal" .=) planTier__flatAmountDecimal <>
      maybe mempty ("unit_amount" .=) planTier__unitAmount <>
      maybe mempty ("unit_amount_decimal" .=) planTier__unitAmountDecimal <>
      maybe mempty ("up_to" .=) planTier__upTo
      )

-- Describes: "platform_tax_fee"

data PlatformTaxFee
  = PlatformTaxFee
    { platformTaxFee__id :: Text
    {- ^ Unique identifier for the object. -}
    , platformTaxFee__object :: PlatformTaxFee_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , platformTaxFee__account :: Text
    {- ^ The Connected account that incurred this charge. -}
    , platformTaxFee__sourceTransaction :: Text
    {- ^ The payment object that caused this tax to be inflicted. -}
    , platformTaxFee__type :: Text
    {- ^ The type of tax (VAT). -}
    } deriving (Show, Eq, Generic)

instance FromJSON PlatformTaxFee where
  parseJSON = withObject "PlatformTaxFee" parseCtors
    where
      parseCtors o = parsePlatformTaxFee o
      parsePlatformTaxFee o = do
        platformTaxFee__id <- o .: "id"
        platformTaxFee__object <- o .: "object"
        platformTaxFee__account <- o .: "account"
        platformTaxFee__sourceTransaction <- o .: "source_transaction"
        platformTaxFee__type <- o .: "type"
        pure PlatformTaxFee{..}

instance ToJSON PlatformTaxFee where
  toJSON PlatformTaxFee{..} = object
    (
      ("id" .= platformTaxFee__id) :
      ("object" .= platformTaxFee__object) :
      ("account" .= platformTaxFee__account) :
      ("source_transaction" .= platformTaxFee__sourceTransaction) :
      ("type" .= platformTaxFee__type) :
      []
    )
  toEncoding PlatformTaxFee{..} = pairs (
      "id" .= platformTaxFee__id <>
      "object" .= platformTaxFee__object <>
      "account" .= platformTaxFee__account <>
      "source_transaction" .= platformTaxFee__sourceTransaction <>
      "type" .= platformTaxFee__type
      )

-- Describes: "product"

data Product
  = Product
    { product__id :: (Id Product)
    {- ^ Unique identifier for the object. -}
    , product__object :: Product_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , product__livemode :: Bool
    {- ^ Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. -}
    , product__created :: POSIXTime
    {- ^ Time at which the object was created. Measured in seconds since the Unix epoch. -}
    , product__deactivateOn :: Vector (Text)
    {- ^ An array of connect application identifiers that cannot purchase this product. Only applicable to products of `type=good`. -}
    , product__images :: Vector (Text)
    {- ^ A list of up to 8 URLs of images for this product, meant to be displayable to the customer. Only applicable to products of `type=good`. -}
    , product__metadata :: Object
    {- ^ Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. -}
    , product__name :: Text
    {- ^ The product's name, meant to be displayable to the customer. Applicable to both `service` and `good` types. -}
    , product__type :: Product_Type
    {- ^ The type of the product. The product is either of type `good`, which is eligible for use with Orders and SKUs, or `service`, which is eligible for use with Subscriptions and Plans. -}
    , product__updated :: POSIXTime
    , product__active :: Maybe (Bool)
    {- ^ Whether the product is currently available for purchase. -}
    , product__attributes :: Maybe (Vector (Text))
    {- ^ A list of up to 5 attributes that each SKU can provide values for (e.g., `["color", "size"]`). Only applicable to products of `type=good`. -}
    , product__caption :: Maybe (Text)
    {- ^ A short one-line description of the product, meant to be displayable to the customer. Only applicable to products of `type=good`. -}
    , product__description :: Maybe (Text)
    {- ^ The product's description, meant to be displayable to the customer. Only applicable to products of `type=good`. -}
    , product__packageDimensions :: Maybe (Expandable '[Const (PackageDimensions)])
    {- ^ The dimensions of this product for shipping purposes. A SKU associated with this product can override this value by having its own `package_dimensions`. Only applicable to products of `type=good`. -}
    , product__shippable :: Maybe (Bool)
    {- ^ Whether this product is a shipped good. Only applicable to products of `type=good`. -}
    , product__statementDescriptor :: Maybe (Text)
    {- ^ Extra information about a product which will appear on your customer's credit card statement. In the case that multiple products are billed at once, the first statement descriptor will be used. Only available on products of type=`service`. -}
    , product__unitLabel :: Maybe (Text)
    {- ^ A label that represents units of this product, such as seat(s), in Stripe and on customers’ receipts and invoices. Only available on products of type=`service`. -}
    , product__url :: Maybe (Text)
    {- ^ A URL of a publicly-accessible webpage for this product. Only applicable to products of `type=good`. -}
    } deriving (Show, Eq, Generic)

instance FromJSON Product where
  parseJSON = withObject "Product" parseCtors
    where
      parseCtors o = parseProduct o
      parseProduct o = do
        product__id <- o .: "id"
        product__object <- o .: "object"
        product__livemode <- o .: "livemode"
        product__created <- o .: "created"
        product__deactivateOn <- o .: "deactivate_on"
        product__images <- o .: "images"
        product__metadata <- o .: "metadata"
        product__name <- o .: "name"
        product__type <- o .: "type"
        product__updated <- o .: "updated"
        product__active <- o .:? "active"
        product__attributes <- o .:? "attributes"
        product__caption <- o .:? "caption"
        product__description <- o .:? "description"
        product__packageDimensions <- o .:? "package_dimensions"
        product__shippable <- o .:? "shippable"
        product__statementDescriptor <- o .:? "statement_descriptor"
        product__unitLabel <- o .:? "unit_label"
        product__url <- o .:? "url"
        pure Product{..}

instance ToJSON Product where
  toJSON Product{..} = object
    (
      ("id" .= product__id) :
      ("object" .= product__object) :
      ("livemode" .= product__livemode) :
      ("created" .= product__created) :
      ("deactivate_on" .= product__deactivateOn) :
      ("images" .= product__images) :
      ("metadata" .= product__metadata) :
      ("name" .= product__name) :
      ("type" .= product__type) :
      ("updated" .= product__updated) :
      (fmap ("active" .=) product__active) >?>
      (fmap ("attributes" .=) product__attributes) >?>
      (fmap ("caption" .=) product__caption) >?>
      (fmap ("description" .=) product__description) >?>
      (fmap ("package_dimensions" .=) product__packageDimensions) >?>
      (fmap ("shippable" .=) product__shippable) >?>
      (fmap ("statement_descriptor" .=) product__statementDescriptor) >?>
      (fmap ("unit_label" .=) product__unitLabel) >?>
      (fmap ("url" .=) product__url) >?>
      []
    )
  toEncoding Product{..} = pairs (
      "id" .= product__id <>
      "object" .= product__object <>
      "livemode" .= product__livemode <>
      "created" .= product__created <>
      "deactivate_on" .= product__deactivateOn <>
      "images" .= product__images <>
      "metadata" .= product__metadata <>
      "name" .= product__name <>
      "type" .= product__type <>
      "updated" .= product__updated <>
      maybe mempty ("active" .=) product__active <>
      maybe mempty ("attributes" .=) product__attributes <>
      maybe mempty ("caption" .=) product__caption <>
      maybe mempty ("description" .=) product__description <>
      maybe mempty ("package_dimensions" .=) product__packageDimensions <>
      maybe mempty ("shippable" .=) product__shippable <>
      maybe mempty ("statement_descriptor" .=) product__statementDescriptor <>
      maybe mempty ("unit_label" .=) product__unitLabel <>
      maybe mempty ("url" .=) product__url
      )

-- Describes: "radar.early_fraud_warning"

data Radar_EarlyFraudWarning
  = Radar_EarlyFraudWarning
    { radar_earlyFraudWarning__id :: (Id Radar_EarlyFraudWarning)
    {- ^ Unique identifier for the object. -}
    , radar_earlyFraudWarning__object :: Radar_EarlyFraudWarning_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , radar_earlyFraudWarning__livemode :: Bool
    {- ^ Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. -}
    , radar_earlyFraudWarning__actionable :: Bool
    {- ^ An EFW is actionable if it has not received a dispute and has not been fully refunded. You may wish to proactively refund a charge that receives an EFW, in order to avoid receiving a dispute later. -}
    , radar_earlyFraudWarning__charge :: Expandable '[Const (Charge)]
    {- ^ ID of the charge this early fraud warning is for, optionally expanded. -}
    , radar_earlyFraudWarning__created :: POSIXTime
    {- ^ Time at which the object was created. Measured in seconds since the Unix epoch. -}
    , radar_earlyFraudWarning__fraudType :: Text
    {- ^ The type of fraud labelled by the issuer. One of `card_never_received`, `fraudulent_card_application`, `made_with_counterfeit_card`, `made_with_lost_card`, `made_with_stolen_card`, `misc`, `unauthorized_use_of_card`. -}
    } deriving (Show, Eq, Generic)

instance FromJSON Radar_EarlyFraudWarning where
  parseJSON = withObject "Radar_EarlyFraudWarning" parseCtors
    where
      parseCtors o = parseRadar_EarlyFraudWarning o
      parseRadar_EarlyFraudWarning o = do
        radar_earlyFraudWarning__id <- o .: "id"
        radar_earlyFraudWarning__object <- o .: "object"
        radar_earlyFraudWarning__livemode <- o .: "livemode"
        radar_earlyFraudWarning__actionable <- o .: "actionable"
        radar_earlyFraudWarning__charge <- o .: "charge"
        radar_earlyFraudWarning__created <- o .: "created"
        radar_earlyFraudWarning__fraudType <- o .: "fraud_type"
        pure Radar_EarlyFraudWarning{..}

instance ToJSON Radar_EarlyFraudWarning where
  toJSON Radar_EarlyFraudWarning{..} = object
    (
      ("id" .= radar_earlyFraudWarning__id) :
      ("object" .= radar_earlyFraudWarning__object) :
      ("livemode" .= radar_earlyFraudWarning__livemode) :
      ("actionable" .= radar_earlyFraudWarning__actionable) :
      ("charge" .= radar_earlyFraudWarning__charge) :
      ("created" .= radar_earlyFraudWarning__created) :
      ("fraud_type" .= radar_earlyFraudWarning__fraudType) :
      []
    )
  toEncoding Radar_EarlyFraudWarning{..} = pairs (
      "id" .= radar_earlyFraudWarning__id <>
      "object" .= radar_earlyFraudWarning__object <>
      "livemode" .= radar_earlyFraudWarning__livemode <>
      "actionable" .= radar_earlyFraudWarning__actionable <>
      "charge" .= radar_earlyFraudWarning__charge <>
      "created" .= radar_earlyFraudWarning__created <>
      "fraud_type" .= radar_earlyFraudWarning__fraudType
      )

-- Describes: "radar.value_list"

data Radar_ValueList
  = Radar_ValueList
    { radar_valueList__id :: (Id Radar_ValueList)
    {- ^ Unique identifier for the object. -}
    , radar_valueList__object :: Radar_ValueList_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , radar_valueList__livemode :: Bool
    {- ^ Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. -}
    , radar_valueList__alias :: Text
    {- ^ The name of the value list for use in rules. -}
    , radar_valueList__created :: POSIXTime
    {- ^ Time at which the object was created. Measured in seconds since the Unix epoch. -}
    , radar_valueList__createdBy :: Text
    {- ^ The name or email address of the user who created this value list. -}
    , radar_valueList__itemType :: Radar_ValueList_ItemType
    {- ^ The type of items in the value list. One of `card_fingerprint`, `card_bin`, `email`, `ip_address`, `country`, `string`, or `case_sensitive_string`. -}
    , radar_valueList__listItems :: Object
    {- ^ List of items contained within this value list. -}
    , radar_valueList__metadata :: Object
    {- ^ Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. -}
    , radar_valueList__name :: Text
    {- ^ The name of the value list. -}
    } deriving (Show, Eq, Generic)

instance FromJSON Radar_ValueList where
  parseJSON = withObject "Radar_ValueList" parseCtors
    where
      parseCtors o = parseRadar_ValueList o
      parseRadar_ValueList o = do
        radar_valueList__id <- o .: "id"
        radar_valueList__object <- o .: "object"
        radar_valueList__livemode <- o .: "livemode"
        radar_valueList__alias <- o .: "alias"
        radar_valueList__created <- o .: "created"
        radar_valueList__createdBy <- o .: "created_by"
        radar_valueList__itemType <- o .: "item_type"
        radar_valueList__listItems <- o .: "list_items"
        radar_valueList__metadata <- o .: "metadata"
        radar_valueList__name <- o .: "name"
        pure Radar_ValueList{..}

instance ToJSON Radar_ValueList where
  toJSON Radar_ValueList{..} = object
    (
      ("id" .= radar_valueList__id) :
      ("object" .= radar_valueList__object) :
      ("livemode" .= radar_valueList__livemode) :
      ("alias" .= radar_valueList__alias) :
      ("created" .= radar_valueList__created) :
      ("created_by" .= radar_valueList__createdBy) :
      ("item_type" .= radar_valueList__itemType) :
      ("list_items" .= radar_valueList__listItems) :
      ("metadata" .= radar_valueList__metadata) :
      ("name" .= radar_valueList__name) :
      []
    )
  toEncoding Radar_ValueList{..} = pairs (
      "id" .= radar_valueList__id <>
      "object" .= radar_valueList__object <>
      "livemode" .= radar_valueList__livemode <>
      "alias" .= radar_valueList__alias <>
      "created" .= radar_valueList__created <>
      "created_by" .= radar_valueList__createdBy <>
      "item_type" .= radar_valueList__itemType <>
      "list_items" .= radar_valueList__listItems <>
      "metadata" .= radar_valueList__metadata <>
      "name" .= radar_valueList__name
      )

-- Describes: "radar.value_list_item"

data Radar_ValueListItem
  = Radar_ValueListItem
    { radar_valueListItem__id :: (Id Radar_ValueListItem)
    {- ^ Unique identifier for the object. -}
    , radar_valueListItem__object :: Radar_ValueListItem_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , radar_valueListItem__livemode :: Bool
    {- ^ Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. -}
    , radar_valueListItem__created :: POSIXTime
    {- ^ Time at which the object was created. Measured in seconds since the Unix epoch. -}
    , radar_valueListItem__createdBy :: Text
    {- ^ The name or email address of the user who added this item to the value list. -}
    , radar_valueListItem__value :: Text
    {- ^ The value of the item. -}
    , radar_valueListItem__valueList :: Text
    {- ^ The identifier of the value list this item belongs to. -}
    } deriving (Show, Eq, Generic)

instance FromJSON Radar_ValueListItem where
  parseJSON = withObject "Radar_ValueListItem" parseCtors
    where
      parseCtors o = parseRadar_ValueListItem o
      parseRadar_ValueListItem o = do
        radar_valueListItem__id <- o .: "id"
        radar_valueListItem__object <- o .: "object"
        radar_valueListItem__livemode <- o .: "livemode"
        radar_valueListItem__created <- o .: "created"
        radar_valueListItem__createdBy <- o .: "created_by"
        radar_valueListItem__value <- o .: "value"
        radar_valueListItem__valueList <- o .: "value_list"
        pure Radar_ValueListItem{..}

instance ToJSON Radar_ValueListItem where
  toJSON Radar_ValueListItem{..} = object
    (
      ("id" .= radar_valueListItem__id) :
      ("object" .= radar_valueListItem__object) :
      ("livemode" .= radar_valueListItem__livemode) :
      ("created" .= radar_valueListItem__created) :
      ("created_by" .= radar_valueListItem__createdBy) :
      ("value" .= radar_valueListItem__value) :
      ("value_list" .= radar_valueListItem__valueList) :
      []
    )
  toEncoding Radar_ValueListItem{..} = pairs (
      "id" .= radar_valueListItem__id <>
      "object" .= radar_valueListItem__object <>
      "livemode" .= radar_valueListItem__livemode <>
      "created" .= radar_valueListItem__created <>
      "created_by" .= radar_valueListItem__createdBy <>
      "value" .= radar_valueListItem__value <>
      "value_list" .= radar_valueListItem__valueList
      )

-- Describes: "radar_review_resource_location"

data RadarReviewResourceLocation
  = RadarReviewResourceLocation
    { radarReviewResourceLocation__city :: Maybe (Text)
    {- ^ The city where the payment originated. -}
    , radarReviewResourceLocation__country :: Maybe (Text)
    {- ^ Two-letter ISO code representing the country where the payment originated. -}
    , radarReviewResourceLocation__latitude :: Maybe (Scientific)
    {- ^ The geographic latitude where the payment originated. -}
    , radarReviewResourceLocation__longitude :: Maybe (Scientific)
    {- ^ The geographic longitude where the payment originated. -}
    , radarReviewResourceLocation__region :: Maybe (Text)
    {- ^ The state/county/province/region where the payment originated. -}
    } deriving (Show, Eq, Generic)

instance FromJSON RadarReviewResourceLocation where
  parseJSON = withObject "RadarReviewResourceLocation" parseCtors
    where
      parseCtors o = parseRadarReviewResourceLocation o
      parseRadarReviewResourceLocation o = do
        radarReviewResourceLocation__city <- o .:? "city"
        radarReviewResourceLocation__country <- o .:? "country"
        radarReviewResourceLocation__latitude <- o .:? "latitude"
        radarReviewResourceLocation__longitude <- o .:? "longitude"
        radarReviewResourceLocation__region <- o .:? "region"
        pure RadarReviewResourceLocation{..}

instance ToJSON RadarReviewResourceLocation where
  toJSON RadarReviewResourceLocation{..} = object
    (
      (fmap ("city" .=) radarReviewResourceLocation__city) >?>
      (fmap ("country" .=) radarReviewResourceLocation__country) >?>
      (fmap ("latitude" .=) radarReviewResourceLocation__latitude) >?>
      (fmap ("longitude" .=) radarReviewResourceLocation__longitude) >?>
      (fmap ("region" .=) radarReviewResourceLocation__region) >?>
      []
    )
  toEncoding RadarReviewResourceLocation{..} = pairs (
      maybe mempty ("city" .=) radarReviewResourceLocation__city <>
      maybe mempty ("country" .=) radarReviewResourceLocation__country <>
      maybe mempty ("latitude" .=) radarReviewResourceLocation__latitude <>
      maybe mempty ("longitude" .=) radarReviewResourceLocation__longitude <>
      maybe mempty ("region" .=) radarReviewResourceLocation__region
      )

-- Describes: "radar_review_resource_session"

data RadarReviewResourceSession
  = RadarReviewResourceSession
    { radarReviewResourceSession__browser :: Maybe (Text)
    {- ^ The browser used in this browser session (e.g., `Chrome`). -}
    , radarReviewResourceSession__device :: Maybe (Text)
    {- ^ Information about the device used for the browser session (e.g., `Samsung SM-G930T`). -}
    , radarReviewResourceSession__platform :: Maybe (Text)
    {- ^ The platform for the browser session (e.g., `Macintosh`). -}
    , radarReviewResourceSession__version :: Maybe (Text)
    {- ^ The version for the browser session (e.g., `61.0.3163.100`). -}
    } deriving (Show, Eq, Generic)

instance FromJSON RadarReviewResourceSession where
  parseJSON = withObject "RadarReviewResourceSession" parseCtors
    where
      parseCtors o = parseRadarReviewResourceSession o
      parseRadarReviewResourceSession o = do
        radarReviewResourceSession__browser <- o .:? "browser"
        radarReviewResourceSession__device <- o .:? "device"
        radarReviewResourceSession__platform <- o .:? "platform"
        radarReviewResourceSession__version <- o .:? "version"
        pure RadarReviewResourceSession{..}

instance ToJSON RadarReviewResourceSession where
  toJSON RadarReviewResourceSession{..} = object
    (
      (fmap ("browser" .=) radarReviewResourceSession__browser) >?>
      (fmap ("device" .=) radarReviewResourceSession__device) >?>
      (fmap ("platform" .=) radarReviewResourceSession__platform) >?>
      (fmap ("version" .=) radarReviewResourceSession__version) >?>
      []
    )
  toEncoding RadarReviewResourceSession{..} = pairs (
      maybe mempty ("browser" .=) radarReviewResourceSession__browser <>
      maybe mempty ("device" .=) radarReviewResourceSession__device <>
      maybe mempty ("platform" .=) radarReviewResourceSession__platform <>
      maybe mempty ("version" .=) radarReviewResourceSession__version
      )

-- Describes: "recipient"

data Recipient
  = Recipient
    { recipient__id :: (Id Recipient)
    {- ^ Unique identifier for the object. -}
    , recipient__object :: Recipient_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , recipient__livemode :: Bool
    {- ^ Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. -}
    , recipient__created :: POSIXTime
    {- ^ Time at which the object was created. Measured in seconds since the Unix epoch. -}
    , recipient__metadata :: Object
    {- ^ Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. -}
    , recipient__rolledBackFrom :: Expandable '[Const (Account)]
    , recipient__type :: Text
    {- ^ Type of the recipient, one of `individual` or `corporation`. -}
    , recipient__activeAccount :: Maybe (Expandable '[Const (BankAccount)])
    {- ^ Hash describing the current account on the recipient, if there is one. -}
    , recipient__cards :: Maybe (Object)
    , recipient__defaultCard :: Maybe (Expandable '[Const (Card)])
    {- ^ The default card to use for creating transfers to this recipient. -}
    , recipient__description :: Maybe (Text)
    {- ^ An arbitrary string attached to the object. Often useful for displaying to users. -}
    , recipient__email :: Maybe (Text)
    , recipient__migratedTo :: Maybe (Expandable '[Const (Account)])
    {- ^ The ID of the [Custom account](https://stripe.com/docs/connect/custom-accounts) this recipient was migrated to. If set, the recipient can no longer be updated, nor can transfers be made to it: use the Custom account instead. -}
    , recipient__name :: Maybe (Text)
    {- ^ Full, legal name of the recipient. -}
    } deriving (Show, Eq, Generic)

instance FromJSON Recipient where
  parseJSON = withObject "Recipient" parseCtors
    where
      parseCtors o = parseRecipient o
      parseRecipient o = do
        recipient__id <- o .: "id"
        recipient__object <- o .: "object"
        recipient__livemode <- o .: "livemode"
        recipient__created <- o .: "created"
        recipient__metadata <- o .: "metadata"
        recipient__rolledBackFrom <- o .: "rolled_back_from"
        recipient__type <- o .: "type"
        recipient__activeAccount <- o .:? "active_account"
        recipient__cards <- o .:? "cards"
        recipient__defaultCard <- o .:? "default_card"
        recipient__description <- o .:? "description"
        recipient__email <- o .:? "email"
        recipient__migratedTo <- o .:? "migrated_to"
        recipient__name <- o .:? "name"
        pure Recipient{..}

instance ToJSON Recipient where
  toJSON Recipient{..} = object
    (
      ("id" .= recipient__id) :
      ("object" .= recipient__object) :
      ("livemode" .= recipient__livemode) :
      ("created" .= recipient__created) :
      ("metadata" .= recipient__metadata) :
      ("rolled_back_from" .= recipient__rolledBackFrom) :
      ("type" .= recipient__type) :
      (fmap ("active_account" .=) recipient__activeAccount) >?>
      (fmap ("cards" .=) recipient__cards) >?>
      (fmap ("default_card" .=) recipient__defaultCard) >?>
      (fmap ("description" .=) recipient__description) >?>
      (fmap ("email" .=) recipient__email) >?>
      (fmap ("migrated_to" .=) recipient__migratedTo) >?>
      (fmap ("name" .=) recipient__name) >?>
      []
    )
  toEncoding Recipient{..} = pairs (
      "id" .= recipient__id <>
      "object" .= recipient__object <>
      "livemode" .= recipient__livemode <>
      "created" .= recipient__created <>
      "metadata" .= recipient__metadata <>
      "rolled_back_from" .= recipient__rolledBackFrom <>
      "type" .= recipient__type <>
      maybe mempty ("active_account" .=) recipient__activeAccount <>
      maybe mempty ("cards" .=) recipient__cards <>
      maybe mempty ("default_card" .=) recipient__defaultCard <>
      maybe mempty ("description" .=) recipient__description <>
      maybe mempty ("email" .=) recipient__email <>
      maybe mempty ("migrated_to" .=) recipient__migratedTo <>
      maybe mempty ("name" .=) recipient__name
      )

-- Describes: "refund"

data Refund
  = Refund
    { refund__id :: (Id Refund)
    {- ^ Unique identifier for the object. -}
    , refund__object :: Refund_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , refund__amount :: Int
    {- ^ Amount, in %s. -}
    , refund__created :: POSIXTime
    {- ^ Time at which the object was created. Measured in seconds since the Unix epoch. -}
    , refund__currency :: Text
    {- ^ Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). -}
    , refund__description :: Text
    {- ^ An arbitrary string attached to the object. Often useful for displaying to users. (Available on non-card refunds only) -}
    , refund__failureBalanceTransaction :: Expandable '[Const (BalanceTransaction)]
    {- ^ If the refund failed, this balance transaction describes the adjustment made on your account balance that reverses the initial balance transaction. -}
    , refund__failureReason :: Text
    {- ^ If the refund failed, the reason for refund failure if known. Possible values are `lost_or_stolen_card`, `expired_or_canceled_card`, or `unknown`. -}
    , refund__metadata :: Object
    {- ^ Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. -}
    , refund__balanceTransaction :: Maybe (Expandable '[Const (BalanceTransaction)])
    {- ^ Balance transaction that describes the impact on your account balance. -}
    , refund__charge :: Maybe (Expandable '[Const (Charge)])
    {- ^ ID of the charge that was refunded. -}
    , refund__reason :: Maybe (Text)
    {- ^ Reason for the refund. If set, possible values are `duplicate`, `fraudulent`, and `requested_by_customer`. -}
    , refund__receiptNumber :: Maybe (Text)
    {- ^ This is the transaction number that appears on email receipts sent for this refund. -}
    , refund__sourceTransferReversal :: Maybe (Expandable '[Const (TransferReversal)])
    {- ^ The transfer reversal that is associated with the refund. Only present if the charge came from another Stripe account. See the Connect documentation for details. -}
    , refund__status :: Maybe (Text)
    {- ^ Status of the refund. For credit card refunds, this can be `pending`, `succeeded`, or `failed`. For other types of refunds, it can be `pending`, `succeeded`, `failed`, or `canceled`. Refer to our [refunds](https://stripe.com/docs/refunds#failed-refunds) documentation for more details. -}
    , refund__transferReversal :: Maybe (Expandable '[Const (TransferReversal)])
    {- ^ If the accompanying transfer was reversed, the transfer reversal object. Only applicable if the charge was created using the destination parameter. -}
    } deriving (Show, Eq, Generic)

instance FromJSON Refund where
  parseJSON = withObject "Refund" parseCtors
    where
      parseCtors o = parseRefund o
      parseRefund o = do
        refund__id <- o .: "id"
        refund__object <- o .: "object"
        refund__amount <- o .: "amount"
        refund__created <- o .: "created"
        refund__currency <- o .: "currency"
        refund__description <- o .: "description"
        refund__failureBalanceTransaction <- o .: "failure_balance_transaction"
        refund__failureReason <- o .: "failure_reason"
        refund__metadata <- o .: "metadata"
        refund__balanceTransaction <- o .:? "balance_transaction"
        refund__charge <- o .:? "charge"
        refund__reason <- o .:? "reason"
        refund__receiptNumber <- o .:? "receipt_number"
        refund__sourceTransferReversal <- o .:? "source_transfer_reversal"
        refund__status <- o .:? "status"
        refund__transferReversal <- o .:? "transfer_reversal"
        pure Refund{..}

instance ToJSON Refund where
  toJSON Refund{..} = object
    (
      ("id" .= refund__id) :
      ("object" .= refund__object) :
      ("amount" .= refund__amount) :
      ("created" .= refund__created) :
      ("currency" .= refund__currency) :
      ("description" .= refund__description) :
      ("failure_balance_transaction" .= refund__failureBalanceTransaction) :
      ("failure_reason" .= refund__failureReason) :
      ("metadata" .= refund__metadata) :
      (fmap ("balance_transaction" .=) refund__balanceTransaction) >?>
      (fmap ("charge" .=) refund__charge) >?>
      (fmap ("reason" .=) refund__reason) >?>
      (fmap ("receipt_number" .=) refund__receiptNumber) >?>
      (fmap ("source_transfer_reversal" .=) refund__sourceTransferReversal) >?>
      (fmap ("status" .=) refund__status) >?>
      (fmap ("transfer_reversal" .=) refund__transferReversal) >?>
      []
    )
  toEncoding Refund{..} = pairs (
      "id" .= refund__id <>
      "object" .= refund__object <>
      "amount" .= refund__amount <>
      "created" .= refund__created <>
      "currency" .= refund__currency <>
      "description" .= refund__description <>
      "failure_balance_transaction" .= refund__failureBalanceTransaction <>
      "failure_reason" .= refund__failureReason <>
      "metadata" .= refund__metadata <>
      maybe mempty ("balance_transaction" .=) refund__balanceTransaction <>
      maybe mempty ("charge" .=) refund__charge <>
      maybe mempty ("reason" .=) refund__reason <>
      maybe mempty ("receipt_number" .=) refund__receiptNumber <>
      maybe mempty ("source_transfer_reversal" .=) refund__sourceTransferReversal <>
      maybe mempty ("status" .=) refund__status <>
      maybe mempty ("transfer_reversal" .=) refund__transferReversal
      )

-- Describes: "reporting.report_run"

data Reporting_ReportRun
  = Reporting_ReportRun
    { reporting_reportRun__id :: (Id Reporting_ReportRun)
    {- ^ Unique identifier for the object. -}
    , reporting_reportRun__object :: Reporting_ReportRun_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , reporting_reportRun__livemode :: Bool
    {- ^ Always `true`: reports can only be run on live-mode data. -}
    , reporting_reportRun__created :: POSIXTime
    {- ^ Time at which the object was created. Measured in seconds since the Unix epoch. -}
    , reporting_reportRun__parameters :: FinancialReportingFinanceReportRunRunParameters
    , reporting_reportRun__reportType :: Text
    {- ^ The ID of the [report type](https://stripe.com/docs/reporting/statements/api#report-types) to run, such as `"balance.summary.1"`. -}
    , reporting_reportRun__status :: Text
    {- ^ Status of this report run. This will be `pending` when the run is initially created.
 When the run finishes, this will be set to `succeeded` and the `result` field will be populated.
 Rarely, we may encounter an error, at which point this will be set to `failed` and the `error` field will be populated. -}
    , reporting_reportRun__error :: Maybe (Text)
    {- ^ If something should go wrong during the run, a message about the failure (populated when
 `status=failed`). -}
    , reporting_reportRun__result :: Maybe (Expandable '[Const (File)])
    {- ^ The file object representing the result of the report run (populated when
 `status=succeeded`). -}
    , reporting_reportRun__succeededAt :: Maybe (POSIXTime)
    {- ^ Timestamp at which this run successfully finished (populated when
 `status=succeeded`). Measured in seconds since the Unix epoch. -}
    } deriving (Show, Eq, Generic)

instance FromJSON Reporting_ReportRun where
  parseJSON = withObject "Reporting_ReportRun" parseCtors
    where
      parseCtors o = parseReporting_ReportRun o
      parseReporting_ReportRun o = do
        reporting_reportRun__id <- o .: "id"
        reporting_reportRun__object <- o .: "object"
        reporting_reportRun__livemode <- o .: "livemode"
        reporting_reportRun__created <- o .: "created"
        reporting_reportRun__parameters <- o .: "parameters"
        reporting_reportRun__reportType <- o .: "report_type"
        reporting_reportRun__status <- o .: "status"
        reporting_reportRun__error <- o .:? "error"
        reporting_reportRun__result <- o .:? "result"
        reporting_reportRun__succeededAt <- o .:? "succeeded_at"
        pure Reporting_ReportRun{..}

instance ToJSON Reporting_ReportRun where
  toJSON Reporting_ReportRun{..} = object
    (
      ("id" .= reporting_reportRun__id) :
      ("object" .= reporting_reportRun__object) :
      ("livemode" .= reporting_reportRun__livemode) :
      ("created" .= reporting_reportRun__created) :
      ("parameters" .= reporting_reportRun__parameters) :
      ("report_type" .= reporting_reportRun__reportType) :
      ("status" .= reporting_reportRun__status) :
      (fmap ("error" .=) reporting_reportRun__error) >?>
      (fmap ("result" .=) reporting_reportRun__result) >?>
      (fmap ("succeeded_at" .=) reporting_reportRun__succeededAt) >?>
      []
    )
  toEncoding Reporting_ReportRun{..} = pairs (
      "id" .= reporting_reportRun__id <>
      "object" .= reporting_reportRun__object <>
      "livemode" .= reporting_reportRun__livemode <>
      "created" .= reporting_reportRun__created <>
      "parameters" .= reporting_reportRun__parameters <>
      "report_type" .= reporting_reportRun__reportType <>
      "status" .= reporting_reportRun__status <>
      maybe mempty ("error" .=) reporting_reportRun__error <>
      maybe mempty ("result" .=) reporting_reportRun__result <>
      maybe mempty ("succeeded_at" .=) reporting_reportRun__succeededAt
      )

-- Describes: "reporting.report_type"

data Reporting_ReportType
  = Reporting_ReportType
    { reporting_reportType__id :: (Id Reporting_ReportType)
    {- ^ The [ID of the Report Type](https://stripe.com/docs/reporting/statements/api#available-report-types), such as `balance.summary.1`. -}
    , reporting_reportType__object :: Reporting_ReportType_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , reporting_reportType__dataAvailableEnd :: POSIXTime
    {- ^ Most recent time for which this Report Type is available. Measured in seconds since the Unix epoch. -}
    , reporting_reportType__dataAvailableStart :: POSIXTime
    {- ^ Earliest time for which this Report Type is available. Measured in seconds since the Unix epoch. -}
    , reporting_reportType__name :: Text
    {- ^ Human-readable name of the Report Type -}
    , reporting_reportType__updated :: POSIXTime
    {- ^ When this Report Type was latest updated. Measured in seconds since the Unix epoch. -}
    , reporting_reportType__version :: Int
    {- ^ Version of the Report Type. Different versions report with the same ID will have the same purpose, but may take different run parameters or have different result schemas. -}
    , reporting_reportType__defaultColumns :: Maybe (Vector (Text))
    {- ^ List of column names that are included by default when this Report Type gets run. (If the Report Type doesn't support the `columns` parameter, this will be null.) -}
    } deriving (Show, Eq, Generic)

instance FromJSON Reporting_ReportType where
  parseJSON = withObject "Reporting_ReportType" parseCtors
    where
      parseCtors o = parseReporting_ReportType o
      parseReporting_ReportType o = do
        reporting_reportType__id <- o .: "id"
        reporting_reportType__object <- o .: "object"
        reporting_reportType__dataAvailableEnd <- o .: "data_available_end"
        reporting_reportType__dataAvailableStart <- o .: "data_available_start"
        reporting_reportType__name <- o .: "name"
        reporting_reportType__updated <- o .: "updated"
        reporting_reportType__version <- o .: "version"
        reporting_reportType__defaultColumns <- o .:? "default_columns"
        pure Reporting_ReportType{..}

instance ToJSON Reporting_ReportType where
  toJSON Reporting_ReportType{..} = object
    (
      ("id" .= reporting_reportType__id) :
      ("object" .= reporting_reportType__object) :
      ("data_available_end" .= reporting_reportType__dataAvailableEnd) :
      ("data_available_start" .= reporting_reportType__dataAvailableStart) :
      ("name" .= reporting_reportType__name) :
      ("updated" .= reporting_reportType__updated) :
      ("version" .= reporting_reportType__version) :
      (fmap ("default_columns" .=) reporting_reportType__defaultColumns) >?>
      []
    )
  toEncoding Reporting_ReportType{..} = pairs (
      "id" .= reporting_reportType__id <>
      "object" .= reporting_reportType__object <>
      "data_available_end" .= reporting_reportType__dataAvailableEnd <>
      "data_available_start" .= reporting_reportType__dataAvailableStart <>
      "name" .= reporting_reportType__name <>
      "updated" .= reporting_reportType__updated <>
      "version" .= reporting_reportType__version <>
      maybe mempty ("default_columns" .=) reporting_reportType__defaultColumns
      )

-- Describes: "reserve_transaction"

data ReserveTransaction
  = ReserveTransaction
    { reserveTransaction__id :: Text
    {- ^ Unique identifier for the object. -}
    , reserveTransaction__object :: ReserveTransaction_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , reserveTransaction__amount :: Int
    , reserveTransaction__currency :: Text
    {- ^ Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). -}
    , reserveTransaction__description :: Maybe (Text)
    {- ^ An arbitrary string attached to the object. Often useful for displaying to users. -}
    } deriving (Show, Eq, Generic)

instance FromJSON ReserveTransaction where
  parseJSON = withObject "ReserveTransaction" parseCtors
    where
      parseCtors o = parseReserveTransaction o
      parseReserveTransaction o = do
        reserveTransaction__id <- o .: "id"
        reserveTransaction__object <- o .: "object"
        reserveTransaction__amount <- o .: "amount"
        reserveTransaction__currency <- o .: "currency"
        reserveTransaction__description <- o .:? "description"
        pure ReserveTransaction{..}

instance ToJSON ReserveTransaction where
  toJSON ReserveTransaction{..} = object
    (
      ("id" .= reserveTransaction__id) :
      ("object" .= reserveTransaction__object) :
      ("amount" .= reserveTransaction__amount) :
      ("currency" .= reserveTransaction__currency) :
      (fmap ("description" .=) reserveTransaction__description) >?>
      []
    )
  toEncoding ReserveTransaction{..} = pairs (
      "id" .= reserveTransaction__id <>
      "object" .= reserveTransaction__object <>
      "amount" .= reserveTransaction__amount <>
      "currency" .= reserveTransaction__currency <>
      maybe mempty ("description" .=) reserveTransaction__description
      )

-- Describes: "review"

data Review
  = Review
    { review__id :: (Id Review)
    {- ^ Unique identifier for the object. -}
    , review__object :: Review_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , review__livemode :: Bool
    {- ^ Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. -}
    , review__created :: POSIXTime
    {- ^ Time at which the object was created. Measured in seconds since the Unix epoch. -}
    , review__open :: Bool
    {- ^ If `true`, the review needs action. -}
    , review__openedReason :: Review_OpenedReason
    {- ^ The reason the review was opened. One of `rule` or `manual`. -}
    , review__paymentIntent :: Expandable '[Const (PaymentIntent)]
    {- ^ The PaymentIntent ID associated with this review, if one exists. -}
    , review__reason :: Text
    {- ^ The reason the review is currently open or closed. One of `rule`, `manual`, `approved`, `refunded`, `refunded_as_fraud`, or `disputed`. -}
    , review__billingZip :: Maybe (Text)
    {- ^ The ZIP or postal code of the card used, if applicable. -}
    , review__charge :: Maybe (Expandable '[Const (Charge)])
    {- ^ The charge associated with this review. -}
    , review__closedReason :: Maybe (Review_ClosedReason)
    {- ^ The reason the review was closed, or null if it has not yet been closed. One of `approved`, `refunded`, `refunded_as_fraud`, or `disputed`. -}
    , review__ipAddress :: Maybe (Text)
    {- ^ The IP address where the payment originated. -}
    , review__ipAddressLocation :: Maybe (Expandable '[Const (RadarReviewResourceLocation)])
    {- ^ Information related to the location of the payment. Note that this information is an approximation and attempts to locate the nearest population center - it should not be used to determine a specific address. -}
    , review__session :: Maybe (Expandable '[Const (RadarReviewResourceSession)])
    {- ^ Information related to the browsing session of the user who initiated the payment. -}
    } deriving (Show, Eq, Generic)

instance FromJSON Review where
  parseJSON = withObject "Review" parseCtors
    where
      parseCtors o = parseReview o
      parseReview o = do
        review__id <- o .: "id"
        review__object <- o .: "object"
        review__livemode <- o .: "livemode"
        review__created <- o .: "created"
        review__open <- o .: "open"
        review__openedReason <- o .: "opened_reason"
        review__paymentIntent <- o .: "payment_intent"
        review__reason <- o .: "reason"
        review__billingZip <- o .:? "billing_zip"
        review__charge <- o .:? "charge"
        review__closedReason <- o .:? "closed_reason"
        review__ipAddress <- o .:? "ip_address"
        review__ipAddressLocation <- o .:? "ip_address_location"
        review__session <- o .:? "session"
        pure Review{..}

instance ToJSON Review where
  toJSON Review{..} = object
    (
      ("id" .= review__id) :
      ("object" .= review__object) :
      ("livemode" .= review__livemode) :
      ("created" .= review__created) :
      ("open" .= review__open) :
      ("opened_reason" .= review__openedReason) :
      ("payment_intent" .= review__paymentIntent) :
      ("reason" .= review__reason) :
      (fmap ("billing_zip" .=) review__billingZip) >?>
      (fmap ("charge" .=) review__charge) >?>
      (fmap ("closed_reason" .=) review__closedReason) >?>
      (fmap ("ip_address" .=) review__ipAddress) >?>
      (fmap ("ip_address_location" .=) review__ipAddressLocation) >?>
      (fmap ("session" .=) review__session) >?>
      []
    )
  toEncoding Review{..} = pairs (
      "id" .= review__id <>
      "object" .= review__object <>
      "livemode" .= review__livemode <>
      "created" .= review__created <>
      "open" .= review__open <>
      "opened_reason" .= review__openedReason <>
      "payment_intent" .= review__paymentIntent <>
      "reason" .= review__reason <>
      maybe mempty ("billing_zip" .=) review__billingZip <>
      maybe mempty ("charge" .=) review__charge <>
      maybe mempty ("closed_reason" .=) review__closedReason <>
      maybe mempty ("ip_address" .=) review__ipAddress <>
      maybe mempty ("ip_address_location" .=) review__ipAddressLocation <>
      maybe mempty ("session" .=) review__session
      )

-- Describes: "rule"

data Rule
  = Rule
    { rule__id :: Text
    {- ^ Unique identifier for the object. -}
    , rule__action :: Text
    {- ^ The action taken on the payment. -}
    , rule__predicate :: Text
    {- ^ The predicate to evaluate the payment against. -}
    } deriving (Show, Eq, Generic)

instance FromJSON Rule where
  parseJSON = withObject "Rule" parseCtors
    where
      parseCtors o = parseRule o
      parseRule o = do
        rule__id <- o .: "id"
        rule__action <- o .: "action"
        rule__predicate <- o .: "predicate"
        pure Rule{..}

instance ToJSON Rule where
  toJSON Rule{..} = object
    (
      ("id" .= rule__id) :
      ("action" .= rule__action) :
      ("predicate" .= rule__predicate) :
      []
    )
  toEncoding Rule{..} = pairs (
      "id" .= rule__id <>
      "action" .= rule__action <>
      "predicate" .= rule__predicate
      )

-- Describes: "scheduled_query_run"

data ScheduledQueryRun
  = ScheduledQueryRun
    { scheduledQueryRun__id :: (Id ScheduledQueryRun)
    {- ^ Unique identifier for the object. -}
    , scheduledQueryRun__object :: ScheduledQueryRun_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , scheduledQueryRun__livemode :: Bool
    {- ^ Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. -}
    , scheduledQueryRun__created :: POSIXTime
    {- ^ Time at which the object was created. Measured in seconds since the Unix epoch. -}
    , scheduledQueryRun__dataLoadTime :: POSIXTime
    {- ^ When the query was run, Sigma contained a snapshot of your Stripe data at this time. -}
    , scheduledQueryRun__error :: SigmaScheduledQueryRunError
    , scheduledQueryRun__resultAvailableUntil :: POSIXTime
    {- ^ Time at which the result expires and is no longer available for download. -}
    , scheduledQueryRun__sql :: Text
    {- ^ SQL for the query. -}
    , scheduledQueryRun__status :: Text
    {- ^ The query's execution status, which will be `completed` for successful runs, and `canceled`, `failed`, or `timed_out` otherwise. -}
    , scheduledQueryRun__title :: Text
    {- ^ Title of the query. -}
    , scheduledQueryRun__file :: Maybe (Expandable '[Const (File)])
    {- ^ The file object representing the results of the query. -}
    } deriving (Show, Eq, Generic)

instance FromJSON ScheduledQueryRun where
  parseJSON = withObject "ScheduledQueryRun" parseCtors
    where
      parseCtors o = parseScheduledQueryRun o
      parseScheduledQueryRun o = do
        scheduledQueryRun__id <- o .: "id"
        scheduledQueryRun__object <- o .: "object"
        scheduledQueryRun__livemode <- o .: "livemode"
        scheduledQueryRun__created <- o .: "created"
        scheduledQueryRun__dataLoadTime <- o .: "data_load_time"
        scheduledQueryRun__error <- o .: "error"
        scheduledQueryRun__resultAvailableUntil <- o .: "result_available_until"
        scheduledQueryRun__sql <- o .: "sql"
        scheduledQueryRun__status <- o .: "status"
        scheduledQueryRun__title <- o .: "title"
        scheduledQueryRun__file <- o .:? "file"
        pure ScheduledQueryRun{..}

instance ToJSON ScheduledQueryRun where
  toJSON ScheduledQueryRun{..} = object
    (
      ("id" .= scheduledQueryRun__id) :
      ("object" .= scheduledQueryRun__object) :
      ("livemode" .= scheduledQueryRun__livemode) :
      ("created" .= scheduledQueryRun__created) :
      ("data_load_time" .= scheduledQueryRun__dataLoadTime) :
      ("error" .= scheduledQueryRun__error) :
      ("result_available_until" .= scheduledQueryRun__resultAvailableUntil) :
      ("sql" .= scheduledQueryRun__sql) :
      ("status" .= scheduledQueryRun__status) :
      ("title" .= scheduledQueryRun__title) :
      (fmap ("file" .=) scheduledQueryRun__file) >?>
      []
    )
  toEncoding ScheduledQueryRun{..} = pairs (
      "id" .= scheduledQueryRun__id <>
      "object" .= scheduledQueryRun__object <>
      "livemode" .= scheduledQueryRun__livemode <>
      "created" .= scheduledQueryRun__created <>
      "data_load_time" .= scheduledQueryRun__dataLoadTime <>
      "error" .= scheduledQueryRun__error <>
      "result_available_until" .= scheduledQueryRun__resultAvailableUntil <>
      "sql" .= scheduledQueryRun__sql <>
      "status" .= scheduledQueryRun__status <>
      "title" .= scheduledQueryRun__title <>
      maybe mempty ("file" .=) scheduledQueryRun__file
      )

-- Describes: "setup_intent"

data SetupIntent
  = SetupIntent
    { setupIntent__id :: (Id SetupIntent)
    {- ^ Unique identifier for the object. -}
    , setupIntent__object :: SetupIntent_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , setupIntent__livemode :: Bool
    {- ^ Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. -}
    , setupIntent__created :: POSIXTime
    {- ^ Time at which the object was created. Measured in seconds since the Unix epoch. -}
    , setupIntent__metadata :: Object
    {- ^ Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. -}
    , setupIntent__paymentMethodTypes :: Vector (Text)
    {- ^ The list of payment method types (e.g. card) that this SetupIntent is allowed to set up. -}
    , setupIntent__status :: SetupIntent_Status
    {- ^ [Status](https://stripe.com/docs/payments/intents#intent-statuses) of this SetupIntent, one of `requires_payment_method`, `requires_confirmation`, `requires_action`, `processing`, `canceled`, or `succeeded`. -}
    , setupIntent__usage :: Text
    {- ^ Indicates how the payment method is intended to be used in the future.

Use `on_session` if you intend to only reuse the payment method when the customer is in your checkout flow. Use `off_session` if your customer may or may not be in your checkout flow. If not provided, this value defaults to `off_session`. -}
    , setupIntent__application :: Maybe (Expandable '[Const (Application)])
    {- ^ ID of the Connect application that created the SetupIntent. -}
    , setupIntent__cancellationReason :: Maybe (SetupIntent_CancellationReason)
    {- ^ Reason for cancellation of this SetupIntent, one of `abandoned`, `requested_by_customer`, or `duplicate`. -}
    , setupIntent__clientSecret :: Maybe (Text)
    {- ^ The client secret of this SetupIntent. Used for client-side retrieval using a publishable key.

The client secret can be used to complete payment setup from your frontend. It should not be stored, logged, embedded in URLs, or exposed to anyone other than the customer. Make sure that you have TLS enabled on any page that includes the client secret. -}
    , setupIntent__customer :: Maybe (Expandable '[Const (Customer), Const (DeletedCustomer)])
    {- ^ ID of the Customer this SetupIntent belongs to, if one exists.

If present, payment methods used with this SetupIntent can only be attached to this Customer, and payment methods attached to other Customers cannot be used with this SetupIntent. -}
    , setupIntent__description :: Maybe (Text)
    {- ^ An arbitrary string attached to the object. Often useful for displaying to users. -}
    , setupIntent__lastSetupError :: Maybe (Expandable '[Const (ApiErrors)])
    {- ^ The error encountered in the previous SetupIntent confirmation. -}
    , setupIntent__nextAction :: Maybe (Expandable '[Const (SetupIntentNextAction)])
    {- ^ If present, this property tells you what actions you need to take in order for your customer to continue payment setup. -}
    , setupIntent__onBehalfOf :: Maybe (Expandable '[Const (Account)])
    {- ^ The account (if any) for which the setup is intended. -}
    , setupIntent__paymentMethod :: Maybe (Expandable '[Const (PaymentMethod)])
    {- ^ ID of the payment method used with this SetupIntent. -}
    , setupIntent__paymentMethodOptions :: Maybe (Expandable '[Const (SetupIntentPaymentMethodOptions)])
    {- ^ Payment-method-specific configuration for this SetupIntent. -}
    } deriving (Show, Eq, Generic)

instance FromJSON SetupIntent where
  parseJSON = withObject "SetupIntent" parseCtors
    where
      parseCtors o = parseSetupIntent o
      parseSetupIntent o = do
        setupIntent__id <- o .: "id"
        setupIntent__object <- o .: "object"
        setupIntent__livemode <- o .: "livemode"
        setupIntent__created <- o .: "created"
        setupIntent__metadata <- o .: "metadata"
        setupIntent__paymentMethodTypes <- o .: "payment_method_types"
        setupIntent__status <- o .: "status"
        setupIntent__usage <- o .: "usage"
        setupIntent__application <- o .:? "application"
        setupIntent__cancellationReason <- o .:? "cancellation_reason"
        setupIntent__clientSecret <- o .:? "client_secret"
        setupIntent__customer <- o .:? "customer"
        setupIntent__description <- o .:? "description"
        setupIntent__lastSetupError <- o .:? "last_setup_error"
        setupIntent__nextAction <- o .:? "next_action"
        setupIntent__onBehalfOf <- o .:? "on_behalf_of"
        setupIntent__paymentMethod <- o .:? "payment_method"
        setupIntent__paymentMethodOptions <- o .:? "payment_method_options"
        pure SetupIntent{..}

instance ToJSON SetupIntent where
  toJSON SetupIntent{..} = object
    (
      ("id" .= setupIntent__id) :
      ("object" .= setupIntent__object) :
      ("livemode" .= setupIntent__livemode) :
      ("created" .= setupIntent__created) :
      ("metadata" .= setupIntent__metadata) :
      ("payment_method_types" .= setupIntent__paymentMethodTypes) :
      ("status" .= setupIntent__status) :
      ("usage" .= setupIntent__usage) :
      (fmap ("application" .=) setupIntent__application) >?>
      (fmap ("cancellation_reason" .=) setupIntent__cancellationReason) >?>
      (fmap ("client_secret" .=) setupIntent__clientSecret) >?>
      (fmap ("customer" .=) setupIntent__customer) >?>
      (fmap ("description" .=) setupIntent__description) >?>
      (fmap ("last_setup_error" .=) setupIntent__lastSetupError) >?>
      (fmap ("next_action" .=) setupIntent__nextAction) >?>
      (fmap ("on_behalf_of" .=) setupIntent__onBehalfOf) >?>
      (fmap ("payment_method" .=) setupIntent__paymentMethod) >?>
      (fmap ("payment_method_options" .=) setupIntent__paymentMethodOptions) >?>
      []
    )
  toEncoding SetupIntent{..} = pairs (
      "id" .= setupIntent__id <>
      "object" .= setupIntent__object <>
      "livemode" .= setupIntent__livemode <>
      "created" .= setupIntent__created <>
      "metadata" .= setupIntent__metadata <>
      "payment_method_types" .= setupIntent__paymentMethodTypes <>
      "status" .= setupIntent__status <>
      "usage" .= setupIntent__usage <>
      maybe mempty ("application" .=) setupIntent__application <>
      maybe mempty ("cancellation_reason" .=) setupIntent__cancellationReason <>
      maybe mempty ("client_secret" .=) setupIntent__clientSecret <>
      maybe mempty ("customer" .=) setupIntent__customer <>
      maybe mempty ("description" .=) setupIntent__description <>
      maybe mempty ("last_setup_error" .=) setupIntent__lastSetupError <>
      maybe mempty ("next_action" .=) setupIntent__nextAction <>
      maybe mempty ("on_behalf_of" .=) setupIntent__onBehalfOf <>
      maybe mempty ("payment_method" .=) setupIntent__paymentMethod <>
      maybe mempty ("payment_method_options" .=) setupIntent__paymentMethodOptions
      )

-- Describes: "setup_intent_next_action"

data SetupIntentNextAction
  = SetupIntentNextAction
    { setupIntentNextAction__redirectToUrl :: SetupIntentNextActionRedirectToUrl
    , setupIntentNextAction__type :: Text
    {- ^ Type of the next action to perform, one of `redirect_to_url` or `use_stripe_sdk`. -}
    , setupIntentNextAction__useStripeSdk :: Object
    {- ^ When confirming a SetupIntent with Stripe.js, Stripe.js depends on the contents of this dictionary to invoke authentication flows. The shape of the contents is subject to change and is only intended to be used by Stripe.js. -}
    } deriving (Show, Eq, Generic)

instance FromJSON SetupIntentNextAction where
  parseJSON = withObject "SetupIntentNextAction" parseCtors
    where
      parseCtors o = parseSetupIntentNextAction o
      parseSetupIntentNextAction o = do
        setupIntentNextAction__redirectToUrl <- o .: "redirect_to_url"
        setupIntentNextAction__type <- o .: "type"
        setupIntentNextAction__useStripeSdk <- o .: "use_stripe_sdk"
        pure SetupIntentNextAction{..}

instance ToJSON SetupIntentNextAction where
  toJSON SetupIntentNextAction{..} = object
    (
      ("redirect_to_url" .= setupIntentNextAction__redirectToUrl) :
      ("type" .= setupIntentNextAction__type) :
      ("use_stripe_sdk" .= setupIntentNextAction__useStripeSdk) :
      []
    )
  toEncoding SetupIntentNextAction{..} = pairs (
      "redirect_to_url" .= setupIntentNextAction__redirectToUrl <>
      "type" .= setupIntentNextAction__type <>
      "use_stripe_sdk" .= setupIntentNextAction__useStripeSdk
      )

-- Describes: "setup_intent_next_action_redirect_to_url"

data SetupIntentNextActionRedirectToUrl
  = SetupIntentNextActionRedirectToUrl
    { setupIntentNextActionRedirectToUrl__returnUrl :: Maybe (Text)
    {- ^ If the customer does not exit their browser while authenticating, they will be redirected to this specified URL after completion. -}
    , setupIntentNextActionRedirectToUrl__url :: Maybe (Text)
    {- ^ The URL you must redirect your customer to in order to authenticate. -}
    } deriving (Show, Eq, Generic)

instance FromJSON SetupIntentNextActionRedirectToUrl where
  parseJSON = withObject "SetupIntentNextActionRedirectToUrl" parseCtors
    where
      parseCtors o = parseSetupIntentNextActionRedirectToUrl o
      parseSetupIntentNextActionRedirectToUrl o = do
        setupIntentNextActionRedirectToUrl__returnUrl <- o .:? "return_url"
        setupIntentNextActionRedirectToUrl__url <- o .:? "url"
        pure SetupIntentNextActionRedirectToUrl{..}

instance ToJSON SetupIntentNextActionRedirectToUrl where
  toJSON SetupIntentNextActionRedirectToUrl{..} = object
    (
      (fmap ("return_url" .=) setupIntentNextActionRedirectToUrl__returnUrl) >?>
      (fmap ("url" .=) setupIntentNextActionRedirectToUrl__url) >?>
      []
    )
  toEncoding SetupIntentNextActionRedirectToUrl{..} = pairs (
      maybe mempty ("return_url" .=) setupIntentNextActionRedirectToUrl__returnUrl <>
      maybe mempty ("url" .=) setupIntentNextActionRedirectToUrl__url
      )

-- Describes: "setup_intent_payment_method_options"

data SetupIntentPaymentMethodOptions
  = SetupIntentPaymentMethodOptions
    { setupIntentPaymentMethodOptions__card :: SetupIntentPaymentMethodOptionsCard
    } deriving (Show, Eq, Generic)

instance FromJSON SetupIntentPaymentMethodOptions where
  parseJSON = withObject "SetupIntentPaymentMethodOptions" parseCtors
    where
      parseCtors o = parseSetupIntentPaymentMethodOptions o
      parseSetupIntentPaymentMethodOptions o = do
        setupIntentPaymentMethodOptions__card <- o .: "card"
        pure SetupIntentPaymentMethodOptions{..}

instance ToJSON SetupIntentPaymentMethodOptions where
  toJSON SetupIntentPaymentMethodOptions{..} = object
    (
      ("card" .= setupIntentPaymentMethodOptions__card) :
      []
    )
  toEncoding SetupIntentPaymentMethodOptions{..} = pairs (
      "card" .= setupIntentPaymentMethodOptions__card
      )

-- Describes: "setup_intent_payment_method_options_card"

data SetupIntentPaymentMethodOptionsCard
  = SetupIntentPaymentMethodOptionsCard
    { setupIntentPaymentMethodOptionsCard__requestThreeDSecure :: Maybe (SetupIntentPaymentMethodOptionsCard_RequestThreeDSecure)
    {- ^ We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. Permitted values include: `automatic` or `any`. If not provided, defaults to `automatic`. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine. -}
    } deriving (Show, Eq, Generic)

instance FromJSON SetupIntentPaymentMethodOptionsCard where
  parseJSON = withObject "SetupIntentPaymentMethodOptionsCard" parseCtors
    where
      parseCtors o = parseSetupIntentPaymentMethodOptionsCard o
      parseSetupIntentPaymentMethodOptionsCard o = do
        setupIntentPaymentMethodOptionsCard__requestThreeDSecure <- o .:? "request_three_d_secure"
        pure SetupIntentPaymentMethodOptionsCard{..}

instance ToJSON SetupIntentPaymentMethodOptionsCard where
  toJSON SetupIntentPaymentMethodOptionsCard{..} = object
    (
      (fmap ("request_three_d_secure" .=) setupIntentPaymentMethodOptionsCard__requestThreeDSecure) >?>
      []
    )
  toEncoding SetupIntentPaymentMethodOptionsCard{..} = pairs (
      maybe mempty ("request_three_d_secure" .=) setupIntentPaymentMethodOptionsCard__requestThreeDSecure
      )

-- Describes: "shipping"

data Shipping
  = Shipping
    { shipping__address :: Address
    , shipping__carrier :: Maybe (Text)
    {- ^ The delivery service that shipped a physical product, such as Fedex, UPS, USPS, etc. -}
    , shipping__name :: Maybe (Text)
    {- ^ Recipient name. -}
    , shipping__phone :: Maybe (Text)
    {- ^ Recipient phone (including extension). -}
    , shipping__trackingNumber :: Maybe (Text)
    {- ^ The tracking number for a physical product, obtained from the delivery service. If multiple tracking numbers were generated for this purchase, please separate them with commas. -}
    } deriving (Show, Eq, Generic)

instance FromJSON Shipping where
  parseJSON = withObject "Shipping" parseCtors
    where
      parseCtors o = parseShipping o
      parseShipping o = do
        shipping__address <- o .: "address"
        shipping__carrier <- o .:? "carrier"
        shipping__name <- o .:? "name"
        shipping__phone <- o .:? "phone"
        shipping__trackingNumber <- o .:? "tracking_number"
        pure Shipping{..}

instance ToJSON Shipping where
  toJSON Shipping{..} = object
    (
      ("address" .= shipping__address) :
      (fmap ("carrier" .=) shipping__carrier) >?>
      (fmap ("name" .=) shipping__name) >?>
      (fmap ("phone" .=) shipping__phone) >?>
      (fmap ("tracking_number" .=) shipping__trackingNumber) >?>
      []
    )
  toEncoding Shipping{..} = pairs (
      "address" .= shipping__address <>
      maybe mempty ("carrier" .=) shipping__carrier <>
      maybe mempty ("name" .=) shipping__name <>
      maybe mempty ("phone" .=) shipping__phone <>
      maybe mempty ("tracking_number" .=) shipping__trackingNumber
      )

-- Describes: "shipping_method"

data ShippingMethod
  = ShippingMethod
    { shippingMethod__id :: Text
    {- ^ Unique identifier for the object. -}
    , shippingMethod__amount :: Int
    {- ^ A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount for the line item. -}
    , shippingMethod__currency :: Text
    {- ^ Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). -}
    , shippingMethod__description :: Text
    {- ^ An arbitrary string attached to the object. Often useful for displaying to users. -}
    , shippingMethod__deliveryEstimate :: Maybe (Expandable '[Const (DeliveryEstimate)])
    {- ^ The estimated delivery date for the given shipping method. Can be either a specific date or a range. -}
    } deriving (Show, Eq, Generic)

instance FromJSON ShippingMethod where
  parseJSON = withObject "ShippingMethod" parseCtors
    where
      parseCtors o = parseShippingMethod o
      parseShippingMethod o = do
        shippingMethod__id <- o .: "id"
        shippingMethod__amount <- o .: "amount"
        shippingMethod__currency <- o .: "currency"
        shippingMethod__description <- o .: "description"
        shippingMethod__deliveryEstimate <- o .:? "delivery_estimate"
        pure ShippingMethod{..}

instance ToJSON ShippingMethod where
  toJSON ShippingMethod{..} = object
    (
      ("id" .= shippingMethod__id) :
      ("amount" .= shippingMethod__amount) :
      ("currency" .= shippingMethod__currency) :
      ("description" .= shippingMethod__description) :
      (fmap ("delivery_estimate" .=) shippingMethod__deliveryEstimate) >?>
      []
    )
  toEncoding ShippingMethod{..} = pairs (
      "id" .= shippingMethod__id <>
      "amount" .= shippingMethod__amount <>
      "currency" .= shippingMethod__currency <>
      "description" .= shippingMethod__description <>
      maybe mempty ("delivery_estimate" .=) shippingMethod__deliveryEstimate
      )

-- Describes: "sigma_scheduled_query_run_error"

data SigmaScheduledQueryRunError
  = SigmaScheduledQueryRunError
    { sigmaScheduledQueryRunError__message :: Text
    {- ^ Information about the run failure. -}
    } deriving (Show, Eq, Generic)

instance FromJSON SigmaScheduledQueryRunError where
  parseJSON = withObject "SigmaScheduledQueryRunError" parseCtors
    where
      parseCtors o = parseSigmaScheduledQueryRunError o
      parseSigmaScheduledQueryRunError o = do
        sigmaScheduledQueryRunError__message <- o .: "message"
        pure SigmaScheduledQueryRunError{..}

instance ToJSON SigmaScheduledQueryRunError where
  toJSON SigmaScheduledQueryRunError{..} = object
    (
      ("message" .= sigmaScheduledQueryRunError__message) :
      []
    )
  toEncoding SigmaScheduledQueryRunError{..} = pairs (
      "message" .= sigmaScheduledQueryRunError__message
      )

-- Describes: "sku"

data Sku
  = Sku
    { sku__id :: (Id Sku)
    {- ^ Unique identifier for the object. -}
    , sku__object :: Sku_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , sku__livemode :: Bool
    {- ^ Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. -}
    , sku__active :: Bool
    {- ^ Whether the SKU is available for purchase. -}
    , sku__attributes :: Object
    {- ^ A dictionary of attributes and values for the attributes defined by the product. If, for example, a product's attributes are `["size", "gender"]`, a valid SKU has the following dictionary of attributes: `{"size": "Medium", "gender": "Unisex"}`. -}
    , sku__created :: POSIXTime
    {- ^ Time at which the object was created. Measured in seconds since the Unix epoch. -}
    , sku__currency :: Text
    {- ^ Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). -}
    , sku__inventory :: Inventory
    , sku__metadata :: Object
    {- ^ Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. -}
    , sku__price :: Int
    {- ^ The cost of the item as a positive integer in the smallest currency unit (that is, 100 cents to charge $1.00, or 100 to charge ¥100, Japanese Yen being a zero-decimal currency). -}
    , sku__product :: Expandable '[Const (Product)]
    {- ^ The ID of the product this SKU is associated with. The product must be currently active. -}
    , sku__updated :: POSIXTime
    , sku__image :: Maybe (Text)
    {- ^ The URL of an image for this SKU, meant to be displayable to the customer. -}
    , sku__packageDimensions :: Maybe (Expandable '[Const (PackageDimensions)])
    {- ^ The dimensions of this SKU for shipping purposes. -}
    } deriving (Show, Eq, Generic)

instance FromJSON Sku where
  parseJSON = withObject "Sku" parseCtors
    where
      parseCtors o = parseSku o
      parseSku o = do
        sku__id <- o .: "id"
        sku__object <- o .: "object"
        sku__livemode <- o .: "livemode"
        sku__active <- o .: "active"
        sku__attributes <- o .: "attributes"
        sku__created <- o .: "created"
        sku__currency <- o .: "currency"
        sku__inventory <- o .: "inventory"
        sku__metadata <- o .: "metadata"
        sku__price <- o .: "price"
        sku__product <- o .: "product"
        sku__updated <- o .: "updated"
        sku__image <- o .:? "image"
        sku__packageDimensions <- o .:? "package_dimensions"
        pure Sku{..}

instance ToJSON Sku where
  toJSON Sku{..} = object
    (
      ("id" .= sku__id) :
      ("object" .= sku__object) :
      ("livemode" .= sku__livemode) :
      ("active" .= sku__active) :
      ("attributes" .= sku__attributes) :
      ("created" .= sku__created) :
      ("currency" .= sku__currency) :
      ("inventory" .= sku__inventory) :
      ("metadata" .= sku__metadata) :
      ("price" .= sku__price) :
      ("product" .= sku__product) :
      ("updated" .= sku__updated) :
      (fmap ("image" .=) sku__image) >?>
      (fmap ("package_dimensions" .=) sku__packageDimensions) >?>
      []
    )
  toEncoding Sku{..} = pairs (
      "id" .= sku__id <>
      "object" .= sku__object <>
      "livemode" .= sku__livemode <>
      "active" .= sku__active <>
      "attributes" .= sku__attributes <>
      "created" .= sku__created <>
      "currency" .= sku__currency <>
      "inventory" .= sku__inventory <>
      "metadata" .= sku__metadata <>
      "price" .= sku__price <>
      "product" .= sku__product <>
      "updated" .= sku__updated <>
      maybe mempty ("image" .=) sku__image <>
      maybe mempty ("package_dimensions" .=) sku__packageDimensions
      )

-- Describes: "source"

data Source
  = Source
    { source__id :: (Id Source)
    {- ^ Unique identifier for the object. -}
    , source__object :: Source_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , source__livemode :: Bool
    {- ^ Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. -}
    , source__achCreditTransfer :: SourceTypeAchCreditTransfer
    , source__achDebit :: SourceTypeAchDebit
    , source__alipay :: SourceTypeAlipay
    , source__bancontact :: SourceTypeBancontact
    , source__card :: SourceTypeCard
    , source__cardPresent :: SourceTypeCardPresent
    , source__clientSecret :: Text
    {- ^ The client secret of the source. Used for client-side retrieval using a publishable key. -}
    , source__codeVerification :: SourceCodeVerificationFlow
    , source__created :: POSIXTime
    {- ^ Time at which the object was created. Measured in seconds since the Unix epoch. -}
    , source__customer :: Text
    {- ^ The ID of the customer to which this source is attached. This will not be present when the source has not been attached to a customer. -}
    , source__eps :: SourceTypeEps
    , source__flow :: Text
    {- ^ The authentication `flow` of the source. `flow` is one of `redirect`, `receiver`, `code_verification`, `none`. -}
    , source__giropay :: SourceTypeGiropay
    , source__ideal :: SourceTypeIdeal
    , source__klarna :: SourceTypeKlarna
    , source__multibanco :: SourceTypeMultibanco
    , source__p24 :: SourceTypeP24
    , source__receiver :: SourceReceiverFlow
    , source__redirect :: SourceRedirectFlow
    , source__sepaDebit :: SourceTypeSepaDebit
    , source__sofort :: SourceTypeSofort
    , source__sourceOrder :: SourceOrder
    , source__status :: Text
    {- ^ The status of the source, one of `canceled`, `chargeable`, `consumed`, `failed`, or `pending`. Only `chargeable` sources can be used to create a charge. -}
    , source__threeDSecure :: SourceTypeThreeDSecure
    , source__type :: Source_Type
    {- ^ The `type` of the source. The `type` is a payment method, one of `ach_credit_transfer`, `ach_debit`, `alipay`, `bancontact`, `card`, `card_present`, `eps`, `giropay`, `ideal`, `multibanco`, `klarna`, `p24`, `sepa_debit`, `sofort`, `three_d_secure`, or `wechat`. An additional hash is included on the source with a name matching this value. It contains additional information specific to the [payment method](https://stripe.com/docs/sources) used. -}
    , source__wechat :: SourceTypeWechat
    , source__amount :: Maybe (Int)
    {- ^ A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount associated with the source. This is the amount for which the source will be chargeable once ready. Required for `single_use` sources. -}
    , source__currency :: Maybe (Text)
    {- ^ Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) associated with the source. This is the currency for which the source will be chargeable once ready. Required for `single_use` sources. -}
    , source__metadata :: Maybe (Object)
    {- ^ Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. -}
    , source__owner :: Maybe (Expandable '[Const (SourceOwner)])
    {- ^ Information about the owner of the payment instrument that may be used or required by particular source types. -}
    , source__statementDescriptor :: Maybe (Text)
    {- ^ Extra information about a source. This will appear on your customer's statement every time you charge the source. -}
    , source__usage :: Maybe (Text)
    {- ^ Either `reusable` or `single_use`. Whether this source should be reusable or not. Some source types may or may not be reusable by construction, while others may leave the option at creation. If an incompatible value is passed, an error will be returned. -}
    } deriving (Show, Eq, Generic)

instance FromJSON Source where
  parseJSON = withObject "Source" parseCtors
    where
      parseCtors o = parseSource o
      parseSource o = do
        source__id <- o .: "id"
        source__object <- o .: "object"
        source__livemode <- o .: "livemode"
        source__achCreditTransfer <- o .: "ach_credit_transfer"
        source__achDebit <- o .: "ach_debit"
        source__alipay <- o .: "alipay"
        source__bancontact <- o .: "bancontact"
        source__card <- o .: "card"
        source__cardPresent <- o .: "card_present"
        source__clientSecret <- o .: "client_secret"
        source__codeVerification <- o .: "code_verification"
        source__created <- o .: "created"
        source__customer <- o .: "customer"
        source__eps <- o .: "eps"
        source__flow <- o .: "flow"
        source__giropay <- o .: "giropay"
        source__ideal <- o .: "ideal"
        source__klarna <- o .: "klarna"
        source__multibanco <- o .: "multibanco"
        source__p24 <- o .: "p24"
        source__receiver <- o .: "receiver"
        source__redirect <- o .: "redirect"
        source__sepaDebit <- o .: "sepa_debit"
        source__sofort <- o .: "sofort"
        source__sourceOrder <- o .: "source_order"
        source__status <- o .: "status"
        source__threeDSecure <- o .: "three_d_secure"
        source__type <- o .: "type"
        source__wechat <- o .: "wechat"
        source__amount <- o .:? "amount"
        source__currency <- o .:? "currency"
        source__metadata <- o .:? "metadata"
        source__owner <- o .:? "owner"
        source__statementDescriptor <- o .:? "statement_descriptor"
        source__usage <- o .:? "usage"
        pure Source{..}

instance ToJSON Source where
  toJSON Source{..} = object
    (
      ("id" .= source__id) :
      ("object" .= source__object) :
      ("livemode" .= source__livemode) :
      ("ach_credit_transfer" .= source__achCreditTransfer) :
      ("ach_debit" .= source__achDebit) :
      ("alipay" .= source__alipay) :
      ("bancontact" .= source__bancontact) :
      ("card" .= source__card) :
      ("card_present" .= source__cardPresent) :
      ("client_secret" .= source__clientSecret) :
      ("code_verification" .= source__codeVerification) :
      ("created" .= source__created) :
      ("customer" .= source__customer) :
      ("eps" .= source__eps) :
      ("flow" .= source__flow) :
      ("giropay" .= source__giropay) :
      ("ideal" .= source__ideal) :
      ("klarna" .= source__klarna) :
      ("multibanco" .= source__multibanco) :
      ("p24" .= source__p24) :
      ("receiver" .= source__receiver) :
      ("redirect" .= source__redirect) :
      ("sepa_debit" .= source__sepaDebit) :
      ("sofort" .= source__sofort) :
      ("source_order" .= source__sourceOrder) :
      ("status" .= source__status) :
      ("three_d_secure" .= source__threeDSecure) :
      ("type" .= source__type) :
      ("wechat" .= source__wechat) :
      (fmap ("amount" .=) source__amount) >?>
      (fmap ("currency" .=) source__currency) >?>
      (fmap ("metadata" .=) source__metadata) >?>
      (fmap ("owner" .=) source__owner) >?>
      (fmap ("statement_descriptor" .=) source__statementDescriptor) >?>
      (fmap ("usage" .=) source__usage) >?>
      []
    )
  toEncoding Source{..} = pairs (
      "id" .= source__id <>
      "object" .= source__object <>
      "livemode" .= source__livemode <>
      "ach_credit_transfer" .= source__achCreditTransfer <>
      "ach_debit" .= source__achDebit <>
      "alipay" .= source__alipay <>
      "bancontact" .= source__bancontact <>
      "card" .= source__card <>
      "card_present" .= source__cardPresent <>
      "client_secret" .= source__clientSecret <>
      "code_verification" .= source__codeVerification <>
      "created" .= source__created <>
      "customer" .= source__customer <>
      "eps" .= source__eps <>
      "flow" .= source__flow <>
      "giropay" .= source__giropay <>
      "ideal" .= source__ideal <>
      "klarna" .= source__klarna <>
      "multibanco" .= source__multibanco <>
      "p24" .= source__p24 <>
      "receiver" .= source__receiver <>
      "redirect" .= source__redirect <>
      "sepa_debit" .= source__sepaDebit <>
      "sofort" .= source__sofort <>
      "source_order" .= source__sourceOrder <>
      "status" .= source__status <>
      "three_d_secure" .= source__threeDSecure <>
      "type" .= source__type <>
      "wechat" .= source__wechat <>
      maybe mempty ("amount" .=) source__amount <>
      maybe mempty ("currency" .=) source__currency <>
      maybe mempty ("metadata" .=) source__metadata <>
      maybe mempty ("owner" .=) source__owner <>
      maybe mempty ("statement_descriptor" .=) source__statementDescriptor <>
      maybe mempty ("usage" .=) source__usage
      )

-- Describes: "source_code_verification_flow"

data SourceCodeVerificationFlow
  = SourceCodeVerificationFlow
    { sourceCodeVerificationFlow__attemptsRemaining :: Int
    {- ^ The number of attempts remaining to authenticate the source object with a verification code. -}
    , sourceCodeVerificationFlow__status :: Text
    {- ^ The status of the code verification, either `pending` (awaiting verification, `attempts_remaining` should be greater than 0), `succeeded` (successful verification) or `failed` (failed verification, cannot be verified anymore as `attempts_remaining` should be 0). -}
    } deriving (Show, Eq, Generic)

instance FromJSON SourceCodeVerificationFlow where
  parseJSON = withObject "SourceCodeVerificationFlow" parseCtors
    where
      parseCtors o = parseSourceCodeVerificationFlow o
      parseSourceCodeVerificationFlow o = do
        sourceCodeVerificationFlow__attemptsRemaining <- o .: "attempts_remaining"
        sourceCodeVerificationFlow__status <- o .: "status"
        pure SourceCodeVerificationFlow{..}

instance ToJSON SourceCodeVerificationFlow where
  toJSON SourceCodeVerificationFlow{..} = object
    (
      ("attempts_remaining" .= sourceCodeVerificationFlow__attemptsRemaining) :
      ("status" .= sourceCodeVerificationFlow__status) :
      []
    )
  toEncoding SourceCodeVerificationFlow{..} = pairs (
      "attempts_remaining" .= sourceCodeVerificationFlow__attemptsRemaining <>
      "status" .= sourceCodeVerificationFlow__status
      )

-- Describes: "source_mandate_notification"

data SourceMandateNotification
  = SourceMandateNotification
    { sourceMandateNotification__id :: (Id SourceMandateNotification)
    {- ^ Unique identifier for the object. -}
    , sourceMandateNotification__object :: SourceMandateNotification_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , sourceMandateNotification__livemode :: Bool
    {- ^ Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. -}
    , sourceMandateNotification__bacsDebit :: SourceMandateNotificationBacsDebitData
    , sourceMandateNotification__created :: POSIXTime
    {- ^ Time at which the object was created. Measured in seconds since the Unix epoch. -}
    , sourceMandateNotification__reason :: Text
    {- ^ The reason of the mandate notification. Valid reasons are `mandate_confirmed` or `debit_initiated`. -}
    , sourceMandateNotification__sepaDebit :: SourceMandateNotificationSepaDebitData
    , sourceMandateNotification__source :: Source
    , sourceMandateNotification__status :: Text
    {- ^ The status of the mandate notification. Valid statuses are `pending` or `submitted`. -}
    , sourceMandateNotification__type :: Text
    {- ^ The type of source this mandate notification is attached to. Should be the source type identifier code for the payment method, such as `three_d_secure`. -}
    , sourceMandateNotification__amount :: Maybe (Int)
    {- ^ A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the amount associated with the mandate notification. The amount is expressed in the currency of the underlying source. Required if the notification type is `debit_initiated`. -}
    } deriving (Show, Eq, Generic)

instance FromJSON SourceMandateNotification where
  parseJSON = withObject "SourceMandateNotification" parseCtors
    where
      parseCtors o = parseSourceMandateNotification o
      parseSourceMandateNotification o = do
        sourceMandateNotification__id <- o .: "id"
        sourceMandateNotification__object <- o .: "object"
        sourceMandateNotification__livemode <- o .: "livemode"
        sourceMandateNotification__bacsDebit <- o .: "bacs_debit"
        sourceMandateNotification__created <- o .: "created"
        sourceMandateNotification__reason <- o .: "reason"
        sourceMandateNotification__sepaDebit <- o .: "sepa_debit"
        sourceMandateNotification__source <- o .: "source"
        sourceMandateNotification__status <- o .: "status"
        sourceMandateNotification__type <- o .: "type"
        sourceMandateNotification__amount <- o .:? "amount"
        pure SourceMandateNotification{..}

instance ToJSON SourceMandateNotification where
  toJSON SourceMandateNotification{..} = object
    (
      ("id" .= sourceMandateNotification__id) :
      ("object" .= sourceMandateNotification__object) :
      ("livemode" .= sourceMandateNotification__livemode) :
      ("bacs_debit" .= sourceMandateNotification__bacsDebit) :
      ("created" .= sourceMandateNotification__created) :
      ("reason" .= sourceMandateNotification__reason) :
      ("sepa_debit" .= sourceMandateNotification__sepaDebit) :
      ("source" .= sourceMandateNotification__source) :
      ("status" .= sourceMandateNotification__status) :
      ("type" .= sourceMandateNotification__type) :
      (fmap ("amount" .=) sourceMandateNotification__amount) >?>
      []
    )
  toEncoding SourceMandateNotification{..} = pairs (
      "id" .= sourceMandateNotification__id <>
      "object" .= sourceMandateNotification__object <>
      "livemode" .= sourceMandateNotification__livemode <>
      "bacs_debit" .= sourceMandateNotification__bacsDebit <>
      "created" .= sourceMandateNotification__created <>
      "reason" .= sourceMandateNotification__reason <>
      "sepa_debit" .= sourceMandateNotification__sepaDebit <>
      "source" .= sourceMandateNotification__source <>
      "status" .= sourceMandateNotification__status <>
      "type" .= sourceMandateNotification__type <>
      maybe mempty ("amount" .=) sourceMandateNotification__amount
      )

-- Describes: "source_mandate_notification_bacs_debit_data"

data SourceMandateNotificationBacsDebitData
  = SourceMandateNotificationBacsDebitData
    { sourceMandateNotificationBacsDebitData__last4 :: Text
    {- ^ Last 4 digits of the account number associated with the debit. -}
    } deriving (Show, Eq, Generic)

instance FromJSON SourceMandateNotificationBacsDebitData where
  parseJSON = withObject "SourceMandateNotificationBacsDebitData" parseCtors
    where
      parseCtors o = parseSourceMandateNotificationBacsDebitData o
      parseSourceMandateNotificationBacsDebitData o = do
        sourceMandateNotificationBacsDebitData__last4 <- o .: "last4"
        pure SourceMandateNotificationBacsDebitData{..}

instance ToJSON SourceMandateNotificationBacsDebitData where
  toJSON SourceMandateNotificationBacsDebitData{..} = object
    (
      ("last4" .= sourceMandateNotificationBacsDebitData__last4) :
      []
    )
  toEncoding SourceMandateNotificationBacsDebitData{..} = pairs (
      "last4" .= sourceMandateNotificationBacsDebitData__last4
      )

-- Describes: "source_mandate_notification_sepa_debit_data"

data SourceMandateNotificationSepaDebitData
  = SourceMandateNotificationSepaDebitData
    { sourceMandateNotificationSepaDebitData__creditorIdentifier :: Text
    {- ^ SEPA creditor ID. -}
    , sourceMandateNotificationSepaDebitData__last4 :: Text
    {- ^ Last 4 digits of the account number associated with the debit. -}
    , sourceMandateNotificationSepaDebitData__mandateReference :: Text
    {- ^ Mandate reference associated with the debit. -}
    } deriving (Show, Eq, Generic)

instance FromJSON SourceMandateNotificationSepaDebitData where
  parseJSON = withObject "SourceMandateNotificationSepaDebitData" parseCtors
    where
      parseCtors o = parseSourceMandateNotificationSepaDebitData o
      parseSourceMandateNotificationSepaDebitData o = do
        sourceMandateNotificationSepaDebitData__creditorIdentifier <- o .: "creditor_identifier"
        sourceMandateNotificationSepaDebitData__last4 <- o .: "last4"
        sourceMandateNotificationSepaDebitData__mandateReference <- o .: "mandate_reference"
        pure SourceMandateNotificationSepaDebitData{..}

instance ToJSON SourceMandateNotificationSepaDebitData where
  toJSON SourceMandateNotificationSepaDebitData{..} = object
    (
      ("creditor_identifier" .= sourceMandateNotificationSepaDebitData__creditorIdentifier) :
      ("last4" .= sourceMandateNotificationSepaDebitData__last4) :
      ("mandate_reference" .= sourceMandateNotificationSepaDebitData__mandateReference) :
      []
    )
  toEncoding SourceMandateNotificationSepaDebitData{..} = pairs (
      "creditor_identifier" .= sourceMandateNotificationSepaDebitData__creditorIdentifier <>
      "last4" .= sourceMandateNotificationSepaDebitData__last4 <>
      "mandate_reference" .= sourceMandateNotificationSepaDebitData__mandateReference
      )

-- Describes: "source_order"

data SourceOrder
  = SourceOrder
    { sourceOrder__amount :: Int
    {- ^ A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount for the order. -}
    , sourceOrder__currency :: Text
    {- ^ Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). -}
    , sourceOrder__email :: Text
    {- ^ The email address of the customer placing the order. -}
    , sourceOrder__shipping :: Shipping
    , sourceOrder__items :: Maybe (Vector (SourceOrderItem))
    {- ^ List of items constituting the order. -}
    } deriving (Show, Eq, Generic)

instance FromJSON SourceOrder where
  parseJSON = withObject "SourceOrder" parseCtors
    where
      parseCtors o = parseSourceOrder o
      parseSourceOrder o = do
        sourceOrder__amount <- o .: "amount"
        sourceOrder__currency <- o .: "currency"
        sourceOrder__email <- o .: "email"
        sourceOrder__shipping <- o .: "shipping"
        sourceOrder__items <- o .:? "items"
        pure SourceOrder{..}

instance ToJSON SourceOrder where
  toJSON SourceOrder{..} = object
    (
      ("amount" .= sourceOrder__amount) :
      ("currency" .= sourceOrder__currency) :
      ("email" .= sourceOrder__email) :
      ("shipping" .= sourceOrder__shipping) :
      (fmap ("items" .=) sourceOrder__items) >?>
      []
    )
  toEncoding SourceOrder{..} = pairs (
      "amount" .= sourceOrder__amount <>
      "currency" .= sourceOrder__currency <>
      "email" .= sourceOrder__email <>
      "shipping" .= sourceOrder__shipping <>
      maybe mempty ("items" .=) sourceOrder__items
      )

-- Describes: "source_order_item"

data SourceOrderItem
  = SourceOrderItem
    { sourceOrderItem__quantity :: Int
    {- ^ The quantity of this order item. When type is `sku`, this is the number of instances of the SKU to be ordered. -}
    , sourceOrderItem__amount :: Maybe (Int)
    {- ^ The amount (price) for this order item. -}
    , sourceOrderItem__currency :: Maybe (Text)
    {- ^ This currency of this order item. Required when `amount` is present. -}
    , sourceOrderItem__description :: Maybe (Text)
    {- ^ Human-readable description for this order item. -}
    , sourceOrderItem__type :: Maybe (Text)
    {- ^ The type of this order item. Must be `sku`, `tax`, or `shipping`. -}
    } deriving (Show, Eq, Generic)

instance FromJSON SourceOrderItem where
  parseJSON = withObject "SourceOrderItem" parseCtors
    where
      parseCtors o = parseSourceOrderItem o
      parseSourceOrderItem o = do
        sourceOrderItem__quantity <- o .: "quantity"
        sourceOrderItem__amount <- o .:? "amount"
        sourceOrderItem__currency <- o .:? "currency"
        sourceOrderItem__description <- o .:? "description"
        sourceOrderItem__type <- o .:? "type"
        pure SourceOrderItem{..}

instance ToJSON SourceOrderItem where
  toJSON SourceOrderItem{..} = object
    (
      ("quantity" .= sourceOrderItem__quantity) :
      (fmap ("amount" .=) sourceOrderItem__amount) >?>
      (fmap ("currency" .=) sourceOrderItem__currency) >?>
      (fmap ("description" .=) sourceOrderItem__description) >?>
      (fmap ("type" .=) sourceOrderItem__type) >?>
      []
    )
  toEncoding SourceOrderItem{..} = pairs (
      "quantity" .= sourceOrderItem__quantity <>
      maybe mempty ("amount" .=) sourceOrderItem__amount <>
      maybe mempty ("currency" .=) sourceOrderItem__currency <>
      maybe mempty ("description" .=) sourceOrderItem__description <>
      maybe mempty ("type" .=) sourceOrderItem__type
      )

-- Describes: "source_owner"

data SourceOwner
  = SourceOwner
    { sourceOwner__address :: Maybe (Expandable '[Const (Address)])
    {- ^ Owner's address. -}
    , sourceOwner__email :: Maybe (Text)
    {- ^ Owner's email address. -}
    , sourceOwner__name :: Maybe (Text)
    {- ^ Owner's full name. -}
    , sourceOwner__phone :: Maybe (Text)
    {- ^ Owner's phone number (including extension). -}
    , sourceOwner__verifiedAddress :: Maybe (Expandable '[Const (Address)])
    {- ^ Verified owner's address. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated. -}
    , sourceOwner__verifiedEmail :: Maybe (Text)
    {- ^ Verified owner's email address. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated. -}
    , sourceOwner__verifiedName :: Maybe (Text)
    {- ^ Verified owner's full name. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated. -}
    , sourceOwner__verifiedPhone :: Maybe (Text)
    {- ^ Verified owner's phone number (including extension). Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated. -}
    } deriving (Show, Eq, Generic)

instance FromJSON SourceOwner where
  parseJSON = withObject "SourceOwner" parseCtors
    where
      parseCtors o = parseSourceOwner o
      parseSourceOwner o = do
        sourceOwner__address <- o .:? "address"
        sourceOwner__email <- o .:? "email"
        sourceOwner__name <- o .:? "name"
        sourceOwner__phone <- o .:? "phone"
        sourceOwner__verifiedAddress <- o .:? "verified_address"
        sourceOwner__verifiedEmail <- o .:? "verified_email"
        sourceOwner__verifiedName <- o .:? "verified_name"
        sourceOwner__verifiedPhone <- o .:? "verified_phone"
        pure SourceOwner{..}

instance ToJSON SourceOwner where
  toJSON SourceOwner{..} = object
    (
      (fmap ("address" .=) sourceOwner__address) >?>
      (fmap ("email" .=) sourceOwner__email) >?>
      (fmap ("name" .=) sourceOwner__name) >?>
      (fmap ("phone" .=) sourceOwner__phone) >?>
      (fmap ("verified_address" .=) sourceOwner__verifiedAddress) >?>
      (fmap ("verified_email" .=) sourceOwner__verifiedEmail) >?>
      (fmap ("verified_name" .=) sourceOwner__verifiedName) >?>
      (fmap ("verified_phone" .=) sourceOwner__verifiedPhone) >?>
      []
    )
  toEncoding SourceOwner{..} = pairs (
      maybe mempty ("address" .=) sourceOwner__address <>
      maybe mempty ("email" .=) sourceOwner__email <>
      maybe mempty ("name" .=) sourceOwner__name <>
      maybe mempty ("phone" .=) sourceOwner__phone <>
      maybe mempty ("verified_address" .=) sourceOwner__verifiedAddress <>
      maybe mempty ("verified_email" .=) sourceOwner__verifiedEmail <>
      maybe mempty ("verified_name" .=) sourceOwner__verifiedName <>
      maybe mempty ("verified_phone" .=) sourceOwner__verifiedPhone
      )

-- Describes: "source_receiver_flow"

data SourceReceiverFlow
  = SourceReceiverFlow
    { sourceReceiverFlow__amountCharged :: Int
    {- ^ The total amount that was charged by you. The amount charged is expressed in the source's currency. -}
    , sourceReceiverFlow__amountReceived :: Int
    {- ^ The total amount received by the receiver source. `amount_received = amount_returned + amount_charged` is true at all time. The amount received is expressed in the source's currency. -}
    , sourceReceiverFlow__amountReturned :: Int
    {- ^ The total amount that was returned to the customer. The amount returned is expressed in the source's currency. -}
    , sourceReceiverFlow__refundAttributesMethod :: Text
    {- ^ Type of refund attribute method, one of `email`, `manual`, or `none`. -}
    , sourceReceiverFlow__refundAttributesStatus :: Text
    {- ^ Type of refund attribute status, one of `missing`, `requested`, or `available`. -}
    , sourceReceiverFlow__address :: Maybe (Text)
    {- ^ The address of the receiver source. This is the value that should be communicated to the customer to send their funds to. -}
    } deriving (Show, Eq, Generic)

instance FromJSON SourceReceiverFlow where
  parseJSON = withObject "SourceReceiverFlow" parseCtors
    where
      parseCtors o = parseSourceReceiverFlow o
      parseSourceReceiverFlow o = do
        sourceReceiverFlow__amountCharged <- o .: "amount_charged"
        sourceReceiverFlow__amountReceived <- o .: "amount_received"
        sourceReceiverFlow__amountReturned <- o .: "amount_returned"
        sourceReceiverFlow__refundAttributesMethod <- o .: "refund_attributes_method"
        sourceReceiverFlow__refundAttributesStatus <- o .: "refund_attributes_status"
        sourceReceiverFlow__address <- o .:? "address"
        pure SourceReceiverFlow{..}

instance ToJSON SourceReceiverFlow where
  toJSON SourceReceiverFlow{..} = object
    (
      ("amount_charged" .= sourceReceiverFlow__amountCharged) :
      ("amount_received" .= sourceReceiverFlow__amountReceived) :
      ("amount_returned" .= sourceReceiverFlow__amountReturned) :
      ("refund_attributes_method" .= sourceReceiverFlow__refundAttributesMethod) :
      ("refund_attributes_status" .= sourceReceiverFlow__refundAttributesStatus) :
      (fmap ("address" .=) sourceReceiverFlow__address) >?>
      []
    )
  toEncoding SourceReceiverFlow{..} = pairs (
      "amount_charged" .= sourceReceiverFlow__amountCharged <>
      "amount_received" .= sourceReceiverFlow__amountReceived <>
      "amount_returned" .= sourceReceiverFlow__amountReturned <>
      "refund_attributes_method" .= sourceReceiverFlow__refundAttributesMethod <>
      "refund_attributes_status" .= sourceReceiverFlow__refundAttributesStatus <>
      maybe mempty ("address" .=) sourceReceiverFlow__address
      )

-- Describes: "source_redirect_flow"

data SourceRedirectFlow
  = SourceRedirectFlow
    { sourceRedirectFlow__returnUrl :: Text
    {- ^ The URL you provide to redirect the customer to after they authenticated their payment. -}
    , sourceRedirectFlow__status :: Text
    {- ^ The status of the redirect, either `pending` (ready to be used by your customer to authenticate the transaction), `succeeded` (succesful authentication, cannot be reused) or `not_required` (redirect should not be used) or `failed` (failed authentication, cannot be reused). -}
    , sourceRedirectFlow__url :: Text
    {- ^ The URL provided to you to redirect a customer to as part of a `redirect` authentication flow. -}
    , sourceRedirectFlow__failureReason :: Maybe (Text)
    {- ^ The failure reason for the redirect, either `user_abort` (the customer aborted or dropped out of the redirect flow), `declined` (the authentication failed or the transaction was declined), or `processing_error` (the redirect failed due to a technical error). Present only if the redirect status is `failed`. -}
    } deriving (Show, Eq, Generic)

instance FromJSON SourceRedirectFlow where
  parseJSON = withObject "SourceRedirectFlow" parseCtors
    where
      parseCtors o = parseSourceRedirectFlow o
      parseSourceRedirectFlow o = do
        sourceRedirectFlow__returnUrl <- o .: "return_url"
        sourceRedirectFlow__status <- o .: "status"
        sourceRedirectFlow__url <- o .: "url"
        sourceRedirectFlow__failureReason <- o .:? "failure_reason"
        pure SourceRedirectFlow{..}

instance ToJSON SourceRedirectFlow where
  toJSON SourceRedirectFlow{..} = object
    (
      ("return_url" .= sourceRedirectFlow__returnUrl) :
      ("status" .= sourceRedirectFlow__status) :
      ("url" .= sourceRedirectFlow__url) :
      (fmap ("failure_reason" .=) sourceRedirectFlow__failureReason) >?>
      []
    )
  toEncoding SourceRedirectFlow{..} = pairs (
      "return_url" .= sourceRedirectFlow__returnUrl <>
      "status" .= sourceRedirectFlow__status <>
      "url" .= sourceRedirectFlow__url <>
      maybe mempty ("failure_reason" .=) sourceRedirectFlow__failureReason
      )

-- Describes: "source_transaction"

data SourceTransaction
  = SourceTransaction
    { sourceTransaction__id :: (Id SourceTransaction)
    {- ^ Unique identifier for the object. -}
    , sourceTransaction__object :: SourceTransaction_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , sourceTransaction__livemode :: Bool
    {- ^ Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. -}
    , sourceTransaction__achCreditTransfer :: SourceTransactionAchCreditTransferData
    , sourceTransaction__amount :: Int
    {- ^ A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the amount your customer has pushed to the receiver. -}
    , sourceTransaction__chfCreditTransfer :: SourceTransactionChfCreditTransferData
    , sourceTransaction__created :: POSIXTime
    {- ^ Time at which the object was created. Measured in seconds since the Unix epoch. -}
    , sourceTransaction__currency :: Text
    {- ^ Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). -}
    , sourceTransaction__gbpCreditTransfer :: SourceTransactionGbpCreditTransferData
    , sourceTransaction__paperCheck :: SourceTransactionPaperCheckData
    , sourceTransaction__sepaCreditTransfer :: SourceTransactionSepaCreditTransferData
    , sourceTransaction__source :: Text
    {- ^ The ID of the source this transaction is attached to. -}
    , sourceTransaction__status :: Text
    {- ^ The status of the transaction, one of `succeeded`, `pending`, or `failed`. -}
    , sourceTransaction__type :: SourceTransaction_Type
    {- ^ The type of source this transaction is attached to. -}
    } deriving (Show, Eq, Generic)

instance FromJSON SourceTransaction where
  parseJSON = withObject "SourceTransaction" parseCtors
    where
      parseCtors o = parseSourceTransaction o
      parseSourceTransaction o = do
        sourceTransaction__id <- o .: "id"
        sourceTransaction__object <- o .: "object"
        sourceTransaction__livemode <- o .: "livemode"
        sourceTransaction__achCreditTransfer <- o .: "ach_credit_transfer"
        sourceTransaction__amount <- o .: "amount"
        sourceTransaction__chfCreditTransfer <- o .: "chf_credit_transfer"
        sourceTransaction__created <- o .: "created"
        sourceTransaction__currency <- o .: "currency"
        sourceTransaction__gbpCreditTransfer <- o .: "gbp_credit_transfer"
        sourceTransaction__paperCheck <- o .: "paper_check"
        sourceTransaction__sepaCreditTransfer <- o .: "sepa_credit_transfer"
        sourceTransaction__source <- o .: "source"
        sourceTransaction__status <- o .: "status"
        sourceTransaction__type <- o .: "type"
        pure SourceTransaction{..}

instance ToJSON SourceTransaction where
  toJSON SourceTransaction{..} = object
    (
      ("id" .= sourceTransaction__id) :
      ("object" .= sourceTransaction__object) :
      ("livemode" .= sourceTransaction__livemode) :
      ("ach_credit_transfer" .= sourceTransaction__achCreditTransfer) :
      ("amount" .= sourceTransaction__amount) :
      ("chf_credit_transfer" .= sourceTransaction__chfCreditTransfer) :
      ("created" .= sourceTransaction__created) :
      ("currency" .= sourceTransaction__currency) :
      ("gbp_credit_transfer" .= sourceTransaction__gbpCreditTransfer) :
      ("paper_check" .= sourceTransaction__paperCheck) :
      ("sepa_credit_transfer" .= sourceTransaction__sepaCreditTransfer) :
      ("source" .= sourceTransaction__source) :
      ("status" .= sourceTransaction__status) :
      ("type" .= sourceTransaction__type) :
      []
    )
  toEncoding SourceTransaction{..} = pairs (
      "id" .= sourceTransaction__id <>
      "object" .= sourceTransaction__object <>
      "livemode" .= sourceTransaction__livemode <>
      "ach_credit_transfer" .= sourceTransaction__achCreditTransfer <>
      "amount" .= sourceTransaction__amount <>
      "chf_credit_transfer" .= sourceTransaction__chfCreditTransfer <>
      "created" .= sourceTransaction__created <>
      "currency" .= sourceTransaction__currency <>
      "gbp_credit_transfer" .= sourceTransaction__gbpCreditTransfer <>
      "paper_check" .= sourceTransaction__paperCheck <>
      "sepa_credit_transfer" .= sourceTransaction__sepaCreditTransfer <>
      "source" .= sourceTransaction__source <>
      "status" .= sourceTransaction__status <>
      "type" .= sourceTransaction__type
      )

-- Describes: "source_transaction_ach_credit_transfer_data"

data SourceTransactionAchCreditTransferData
  = SourceTransactionAchCreditTransferData
    { sourceTransactionAchCreditTransferData__customerData :: Text
    {- ^ Customer data associated with the transfer. -}
    , sourceTransactionAchCreditTransferData__fingerprint :: Text
    {- ^ Bank account fingerprint associated with the transfer. -}
    , sourceTransactionAchCreditTransferData__last4 :: Text
    {- ^ Last 4 digits of the account number associated with the transfer. -}
    , sourceTransactionAchCreditTransferData__routingNumber :: Text
    {- ^ Routing number associated with the transfer. -}
    } deriving (Show, Eq, Generic)

instance FromJSON SourceTransactionAchCreditTransferData where
  parseJSON = withObject "SourceTransactionAchCreditTransferData" parseCtors
    where
      parseCtors o = parseSourceTransactionAchCreditTransferData o
      parseSourceTransactionAchCreditTransferData o = do
        sourceTransactionAchCreditTransferData__customerData <- o .: "customer_data"
        sourceTransactionAchCreditTransferData__fingerprint <- o .: "fingerprint"
        sourceTransactionAchCreditTransferData__last4 <- o .: "last4"
        sourceTransactionAchCreditTransferData__routingNumber <- o .: "routing_number"
        pure SourceTransactionAchCreditTransferData{..}

instance ToJSON SourceTransactionAchCreditTransferData where
  toJSON SourceTransactionAchCreditTransferData{..} = object
    (
      ("customer_data" .= sourceTransactionAchCreditTransferData__customerData) :
      ("fingerprint" .= sourceTransactionAchCreditTransferData__fingerprint) :
      ("last4" .= sourceTransactionAchCreditTransferData__last4) :
      ("routing_number" .= sourceTransactionAchCreditTransferData__routingNumber) :
      []
    )
  toEncoding SourceTransactionAchCreditTransferData{..} = pairs (
      "customer_data" .= sourceTransactionAchCreditTransferData__customerData <>
      "fingerprint" .= sourceTransactionAchCreditTransferData__fingerprint <>
      "last4" .= sourceTransactionAchCreditTransferData__last4 <>
      "routing_number" .= sourceTransactionAchCreditTransferData__routingNumber
      )

-- Describes: "source_transaction_chf_credit_transfer_data"

data SourceTransactionChfCreditTransferData
  = SourceTransactionChfCreditTransferData
    { sourceTransactionChfCreditTransferData__reference :: Text
    {- ^ Reference associated with the transfer. -}
    , sourceTransactionChfCreditTransferData__senderAddressCountry :: Text
    {- ^ Sender's country address. -}
    , sourceTransactionChfCreditTransferData__senderAddressLine1 :: Text
    {- ^ Sender's line 1 address. -}
    , sourceTransactionChfCreditTransferData__senderIban :: Text
    {- ^ Sender's bank account IBAN. -}
    , sourceTransactionChfCreditTransferData__senderName :: Text
    {- ^ Sender's name. -}
    } deriving (Show, Eq, Generic)

instance FromJSON SourceTransactionChfCreditTransferData where
  parseJSON = withObject "SourceTransactionChfCreditTransferData" parseCtors
    where
      parseCtors o = parseSourceTransactionChfCreditTransferData o
      parseSourceTransactionChfCreditTransferData o = do
        sourceTransactionChfCreditTransferData__reference <- o .: "reference"
        sourceTransactionChfCreditTransferData__senderAddressCountry <- o .: "sender_address_country"
        sourceTransactionChfCreditTransferData__senderAddressLine1 <- o .: "sender_address_line1"
        sourceTransactionChfCreditTransferData__senderIban <- o .: "sender_iban"
        sourceTransactionChfCreditTransferData__senderName <- o .: "sender_name"
        pure SourceTransactionChfCreditTransferData{..}

instance ToJSON SourceTransactionChfCreditTransferData where
  toJSON SourceTransactionChfCreditTransferData{..} = object
    (
      ("reference" .= sourceTransactionChfCreditTransferData__reference) :
      ("sender_address_country" .= sourceTransactionChfCreditTransferData__senderAddressCountry) :
      ("sender_address_line1" .= sourceTransactionChfCreditTransferData__senderAddressLine1) :
      ("sender_iban" .= sourceTransactionChfCreditTransferData__senderIban) :
      ("sender_name" .= sourceTransactionChfCreditTransferData__senderName) :
      []
    )
  toEncoding SourceTransactionChfCreditTransferData{..} = pairs (
      "reference" .= sourceTransactionChfCreditTransferData__reference <>
      "sender_address_country" .= sourceTransactionChfCreditTransferData__senderAddressCountry <>
      "sender_address_line1" .= sourceTransactionChfCreditTransferData__senderAddressLine1 <>
      "sender_iban" .= sourceTransactionChfCreditTransferData__senderIban <>
      "sender_name" .= sourceTransactionChfCreditTransferData__senderName
      )

-- Describes: "source_transaction_gbp_credit_transfer_data"

data SourceTransactionGbpCreditTransferData
  = SourceTransactionGbpCreditTransferData
    { sourceTransactionGbpCreditTransferData__fingerprint :: Text
    {- ^ Bank account fingerprint associated with the transfer. -}
    , sourceTransactionGbpCreditTransferData__last4 :: Text
    {- ^ Last 4 digits of account number associated with the transfer. -}
    , sourceTransactionGbpCreditTransferData__senderName :: Text
    {- ^ Sender name associated with the transfer. -}
    , sourceTransactionGbpCreditTransferData__sortCode :: Text
    {- ^ Sort code associated with the transfer. -}
    } deriving (Show, Eq, Generic)

instance FromJSON SourceTransactionGbpCreditTransferData where
  parseJSON = withObject "SourceTransactionGbpCreditTransferData" parseCtors
    where
      parseCtors o = parseSourceTransactionGbpCreditTransferData o
      parseSourceTransactionGbpCreditTransferData o = do
        sourceTransactionGbpCreditTransferData__fingerprint <- o .: "fingerprint"
        sourceTransactionGbpCreditTransferData__last4 <- o .: "last4"
        sourceTransactionGbpCreditTransferData__senderName <- o .: "sender_name"
        sourceTransactionGbpCreditTransferData__sortCode <- o .: "sort_code"
        pure SourceTransactionGbpCreditTransferData{..}

instance ToJSON SourceTransactionGbpCreditTransferData where
  toJSON SourceTransactionGbpCreditTransferData{..} = object
    (
      ("fingerprint" .= sourceTransactionGbpCreditTransferData__fingerprint) :
      ("last4" .= sourceTransactionGbpCreditTransferData__last4) :
      ("sender_name" .= sourceTransactionGbpCreditTransferData__senderName) :
      ("sort_code" .= sourceTransactionGbpCreditTransferData__sortCode) :
      []
    )
  toEncoding SourceTransactionGbpCreditTransferData{..} = pairs (
      "fingerprint" .= sourceTransactionGbpCreditTransferData__fingerprint <>
      "last4" .= sourceTransactionGbpCreditTransferData__last4 <>
      "sender_name" .= sourceTransactionGbpCreditTransferData__senderName <>
      "sort_code" .= sourceTransactionGbpCreditTransferData__sortCode
      )

-- Describes: "source_transaction_paper_check_data"

data SourceTransactionPaperCheckData
  = SourceTransactionPaperCheckData
    { sourceTransactionPaperCheckData__availableAt :: Text
    {- ^ String unix time for the available date. -}
    , sourceTransactionPaperCheckData__invoices :: Text
    {- ^ Invoice ID associated with the paper check. -}
    } deriving (Show, Eq, Generic)

instance FromJSON SourceTransactionPaperCheckData where
  parseJSON = withObject "SourceTransactionPaperCheckData" parseCtors
    where
      parseCtors o = parseSourceTransactionPaperCheckData o
      parseSourceTransactionPaperCheckData o = do
        sourceTransactionPaperCheckData__availableAt <- o .: "available_at"
        sourceTransactionPaperCheckData__invoices <- o .: "invoices"
        pure SourceTransactionPaperCheckData{..}

instance ToJSON SourceTransactionPaperCheckData where
  toJSON SourceTransactionPaperCheckData{..} = object
    (
      ("available_at" .= sourceTransactionPaperCheckData__availableAt) :
      ("invoices" .= sourceTransactionPaperCheckData__invoices) :
      []
    )
  toEncoding SourceTransactionPaperCheckData{..} = pairs (
      "available_at" .= sourceTransactionPaperCheckData__availableAt <>
      "invoices" .= sourceTransactionPaperCheckData__invoices
      )

-- Describes: "source_transaction_sepa_credit_transfer_data"

data SourceTransactionSepaCreditTransferData
  = SourceTransactionSepaCreditTransferData
    { sourceTransactionSepaCreditTransferData__reference :: Text
    {- ^ Reference associated with the transfer. -}
    , sourceTransactionSepaCreditTransferData__senderIban :: Text
    {- ^ Sender's bank account IBAN. -}
    , sourceTransactionSepaCreditTransferData__senderName :: Text
    {- ^ Sender's name. -}
    } deriving (Show, Eq, Generic)

instance FromJSON SourceTransactionSepaCreditTransferData where
  parseJSON = withObject "SourceTransactionSepaCreditTransferData" parseCtors
    where
      parseCtors o = parseSourceTransactionSepaCreditTransferData o
      parseSourceTransactionSepaCreditTransferData o = do
        sourceTransactionSepaCreditTransferData__reference <- o .: "reference"
        sourceTransactionSepaCreditTransferData__senderIban <- o .: "sender_iban"
        sourceTransactionSepaCreditTransferData__senderName <- o .: "sender_name"
        pure SourceTransactionSepaCreditTransferData{..}

instance ToJSON SourceTransactionSepaCreditTransferData where
  toJSON SourceTransactionSepaCreditTransferData{..} = object
    (
      ("reference" .= sourceTransactionSepaCreditTransferData__reference) :
      ("sender_iban" .= sourceTransactionSepaCreditTransferData__senderIban) :
      ("sender_name" .= sourceTransactionSepaCreditTransferData__senderName) :
      []
    )
  toEncoding SourceTransactionSepaCreditTransferData{..} = pairs (
      "reference" .= sourceTransactionSepaCreditTransferData__reference <>
      "sender_iban" .= sourceTransactionSepaCreditTransferData__senderIban <>
      "sender_name" .= sourceTransactionSepaCreditTransferData__senderName
      )

-- Describes: "source_type_ach_credit_transfer"

data SourceTypeAchCreditTransfer
  = SourceTypeAchCreditTransfer
    { sourceTypeAchCreditTransfer__accountNumber :: Maybe (Text)
    , sourceTypeAchCreditTransfer__bankName :: Maybe (Text)
    , sourceTypeAchCreditTransfer__fingerprint :: Maybe (Text)
    , sourceTypeAchCreditTransfer__refundAccountHolderName :: Maybe (Text)
    , sourceTypeAchCreditTransfer__refundAccountHolderType :: Maybe (Text)
    , sourceTypeAchCreditTransfer__refundRoutingNumber :: Maybe (Text)
    , sourceTypeAchCreditTransfer__routingNumber :: Maybe (Text)
    , sourceTypeAchCreditTransfer__swiftCode :: Maybe (Text)
    } deriving (Show, Eq, Generic)

instance FromJSON SourceTypeAchCreditTransfer where
  parseJSON = withObject "SourceTypeAchCreditTransfer" parseCtors
    where
      parseCtors o = parseSourceTypeAchCreditTransfer o
      parseSourceTypeAchCreditTransfer o = do
        sourceTypeAchCreditTransfer__accountNumber <- o .:? "account_number"
        sourceTypeAchCreditTransfer__bankName <- o .:? "bank_name"
        sourceTypeAchCreditTransfer__fingerprint <- o .:? "fingerprint"
        sourceTypeAchCreditTransfer__refundAccountHolderName <- o .:? "refund_account_holder_name"
        sourceTypeAchCreditTransfer__refundAccountHolderType <- o .:? "refund_account_holder_type"
        sourceTypeAchCreditTransfer__refundRoutingNumber <- o .:? "refund_routing_number"
        sourceTypeAchCreditTransfer__routingNumber <- o .:? "routing_number"
        sourceTypeAchCreditTransfer__swiftCode <- o .:? "swift_code"
        pure SourceTypeAchCreditTransfer{..}

instance ToJSON SourceTypeAchCreditTransfer where
  toJSON SourceTypeAchCreditTransfer{..} = object
    (
      (fmap ("account_number" .=) sourceTypeAchCreditTransfer__accountNumber) >?>
      (fmap ("bank_name" .=) sourceTypeAchCreditTransfer__bankName) >?>
      (fmap ("fingerprint" .=) sourceTypeAchCreditTransfer__fingerprint) >?>
      (fmap ("refund_account_holder_name" .=) sourceTypeAchCreditTransfer__refundAccountHolderName) >?>
      (fmap ("refund_account_holder_type" .=) sourceTypeAchCreditTransfer__refundAccountHolderType) >?>
      (fmap ("refund_routing_number" .=) sourceTypeAchCreditTransfer__refundRoutingNumber) >?>
      (fmap ("routing_number" .=) sourceTypeAchCreditTransfer__routingNumber) >?>
      (fmap ("swift_code" .=) sourceTypeAchCreditTransfer__swiftCode) >?>
      []
    )
  toEncoding SourceTypeAchCreditTransfer{..} = pairs (
      maybe mempty ("account_number" .=) sourceTypeAchCreditTransfer__accountNumber <>
      maybe mempty ("bank_name" .=) sourceTypeAchCreditTransfer__bankName <>
      maybe mempty ("fingerprint" .=) sourceTypeAchCreditTransfer__fingerprint <>
      maybe mempty ("refund_account_holder_name" .=) sourceTypeAchCreditTransfer__refundAccountHolderName <>
      maybe mempty ("refund_account_holder_type" .=) sourceTypeAchCreditTransfer__refundAccountHolderType <>
      maybe mempty ("refund_routing_number" .=) sourceTypeAchCreditTransfer__refundRoutingNumber <>
      maybe mempty ("routing_number" .=) sourceTypeAchCreditTransfer__routingNumber <>
      maybe mempty ("swift_code" .=) sourceTypeAchCreditTransfer__swiftCode
      )

-- Describes: "source_type_ach_debit"

data SourceTypeAchDebit
  = SourceTypeAchDebit
    { sourceTypeAchDebit__bankName :: Maybe (Text)
    , sourceTypeAchDebit__country :: Maybe (Text)
    , sourceTypeAchDebit__fingerprint :: Maybe (Text)
    , sourceTypeAchDebit__last4 :: Maybe (Text)
    , sourceTypeAchDebit__routingNumber :: Maybe (Text)
    , sourceTypeAchDebit__type :: Maybe (Text)
    } deriving (Show, Eq, Generic)

instance FromJSON SourceTypeAchDebit where
  parseJSON = withObject "SourceTypeAchDebit" parseCtors
    where
      parseCtors o = parseSourceTypeAchDebit o
      parseSourceTypeAchDebit o = do
        sourceTypeAchDebit__bankName <- o .:? "bank_name"
        sourceTypeAchDebit__country <- o .:? "country"
        sourceTypeAchDebit__fingerprint <- o .:? "fingerprint"
        sourceTypeAchDebit__last4 <- o .:? "last4"
        sourceTypeAchDebit__routingNumber <- o .:? "routing_number"
        sourceTypeAchDebit__type <- o .:? "type"
        pure SourceTypeAchDebit{..}

instance ToJSON SourceTypeAchDebit where
  toJSON SourceTypeAchDebit{..} = object
    (
      (fmap ("bank_name" .=) sourceTypeAchDebit__bankName) >?>
      (fmap ("country" .=) sourceTypeAchDebit__country) >?>
      (fmap ("fingerprint" .=) sourceTypeAchDebit__fingerprint) >?>
      (fmap ("last4" .=) sourceTypeAchDebit__last4) >?>
      (fmap ("routing_number" .=) sourceTypeAchDebit__routingNumber) >?>
      (fmap ("type" .=) sourceTypeAchDebit__type) >?>
      []
    )
  toEncoding SourceTypeAchDebit{..} = pairs (
      maybe mempty ("bank_name" .=) sourceTypeAchDebit__bankName <>
      maybe mempty ("country" .=) sourceTypeAchDebit__country <>
      maybe mempty ("fingerprint" .=) sourceTypeAchDebit__fingerprint <>
      maybe mempty ("last4" .=) sourceTypeAchDebit__last4 <>
      maybe mempty ("routing_number" .=) sourceTypeAchDebit__routingNumber <>
      maybe mempty ("type" .=) sourceTypeAchDebit__type
      )

-- Describes: "source_type_alipay"

data SourceTypeAlipay
  = SourceTypeAlipay
    { sourceTypeAlipay__dataString :: Maybe (Text)
    , sourceTypeAlipay__nativeUrl :: Maybe (Text)
    , sourceTypeAlipay__statementDescriptor :: Maybe (Text)
    } deriving (Show, Eq, Generic)

instance FromJSON SourceTypeAlipay where
  parseJSON = withObject "SourceTypeAlipay" parseCtors
    where
      parseCtors o = parseSourceTypeAlipay o
      parseSourceTypeAlipay o = do
        sourceTypeAlipay__dataString <- o .:? "data_string"
        sourceTypeAlipay__nativeUrl <- o .:? "native_url"
        sourceTypeAlipay__statementDescriptor <- o .:? "statement_descriptor"
        pure SourceTypeAlipay{..}

instance ToJSON SourceTypeAlipay where
  toJSON SourceTypeAlipay{..} = object
    (
      (fmap ("data_string" .=) sourceTypeAlipay__dataString) >?>
      (fmap ("native_url" .=) sourceTypeAlipay__nativeUrl) >?>
      (fmap ("statement_descriptor" .=) sourceTypeAlipay__statementDescriptor) >?>
      []
    )
  toEncoding SourceTypeAlipay{..} = pairs (
      maybe mempty ("data_string" .=) sourceTypeAlipay__dataString <>
      maybe mempty ("native_url" .=) sourceTypeAlipay__nativeUrl <>
      maybe mempty ("statement_descriptor" .=) sourceTypeAlipay__statementDescriptor
      )

-- Describes: "source_type_bancontact"

data SourceTypeBancontact
  = SourceTypeBancontact
    { sourceTypeBancontact__bankCode :: Maybe (Text)
    , sourceTypeBancontact__bankName :: Maybe (Text)
    , sourceTypeBancontact__bic :: Maybe (Text)
    , sourceTypeBancontact__ibanLast4 :: Maybe (Text)
    , sourceTypeBancontact__preferredLanguage :: Maybe (Text)
    , sourceTypeBancontact__statementDescriptor :: Maybe (Text)
    } deriving (Show, Eq, Generic)

instance FromJSON SourceTypeBancontact where
  parseJSON = withObject "SourceTypeBancontact" parseCtors
    where
      parseCtors o = parseSourceTypeBancontact o
      parseSourceTypeBancontact o = do
        sourceTypeBancontact__bankCode <- o .:? "bank_code"
        sourceTypeBancontact__bankName <- o .:? "bank_name"
        sourceTypeBancontact__bic <- o .:? "bic"
        sourceTypeBancontact__ibanLast4 <- o .:? "iban_last4"
        sourceTypeBancontact__preferredLanguage <- o .:? "preferred_language"
        sourceTypeBancontact__statementDescriptor <- o .:? "statement_descriptor"
        pure SourceTypeBancontact{..}

instance ToJSON SourceTypeBancontact where
  toJSON SourceTypeBancontact{..} = object
    (
      (fmap ("bank_code" .=) sourceTypeBancontact__bankCode) >?>
      (fmap ("bank_name" .=) sourceTypeBancontact__bankName) >?>
      (fmap ("bic" .=) sourceTypeBancontact__bic) >?>
      (fmap ("iban_last4" .=) sourceTypeBancontact__ibanLast4) >?>
      (fmap ("preferred_language" .=) sourceTypeBancontact__preferredLanguage) >?>
      (fmap ("statement_descriptor" .=) sourceTypeBancontact__statementDescriptor) >?>
      []
    )
  toEncoding SourceTypeBancontact{..} = pairs (
      maybe mempty ("bank_code" .=) sourceTypeBancontact__bankCode <>
      maybe mempty ("bank_name" .=) sourceTypeBancontact__bankName <>
      maybe mempty ("bic" .=) sourceTypeBancontact__bic <>
      maybe mempty ("iban_last4" .=) sourceTypeBancontact__ibanLast4 <>
      maybe mempty ("preferred_language" .=) sourceTypeBancontact__preferredLanguage <>
      maybe mempty ("statement_descriptor" .=) sourceTypeBancontact__statementDescriptor
      )

-- Describes: "source_type_card"

data SourceTypeCard
  = SourceTypeCard
    { sourceTypeCard__fingerprint :: Text
    , sourceTypeCard__threeDSecure :: Text
    , sourceTypeCard__addressLine1Check :: Maybe (Text)
    , sourceTypeCard__addressZipCheck :: Maybe (Text)
    , sourceTypeCard__brand :: Maybe (Text)
    , sourceTypeCard__country :: Maybe (Text)
    , sourceTypeCard__cvcCheck :: Maybe (Text)
    , sourceTypeCard__dynamicLast4 :: Maybe (Text)
    , sourceTypeCard__expMonth :: Maybe (Int)
    , sourceTypeCard__expYear :: Maybe (Int)
    , sourceTypeCard__funding :: Maybe (Text)
    , sourceTypeCard__last4 :: Maybe (Text)
    , sourceTypeCard__name :: Maybe (Text)
    , sourceTypeCard__tokenizationMethod :: Maybe (Text)
    } deriving (Show, Eq, Generic)

instance FromJSON SourceTypeCard where
  parseJSON = withObject "SourceTypeCard" parseCtors
    where
      parseCtors o = parseSourceTypeCard o
      parseSourceTypeCard o = do
        sourceTypeCard__fingerprint <- o .: "fingerprint"
        sourceTypeCard__threeDSecure <- o .: "three_d_secure"
        sourceTypeCard__addressLine1Check <- o .:? "address_line1_check"
        sourceTypeCard__addressZipCheck <- o .:? "address_zip_check"
        sourceTypeCard__brand <- o .:? "brand"
        sourceTypeCard__country <- o .:? "country"
        sourceTypeCard__cvcCheck <- o .:? "cvc_check"
        sourceTypeCard__dynamicLast4 <- o .:? "dynamic_last4"
        sourceTypeCard__expMonth <- o .:? "exp_month"
        sourceTypeCard__expYear <- o .:? "exp_year"
        sourceTypeCard__funding <- o .:? "funding"
        sourceTypeCard__last4 <- o .:? "last4"
        sourceTypeCard__name <- o .:? "name"
        sourceTypeCard__tokenizationMethod <- o .:? "tokenization_method"
        pure SourceTypeCard{..}

instance ToJSON SourceTypeCard where
  toJSON SourceTypeCard{..} = object
    (
      ("fingerprint" .= sourceTypeCard__fingerprint) :
      ("three_d_secure" .= sourceTypeCard__threeDSecure) :
      (fmap ("address_line1_check" .=) sourceTypeCard__addressLine1Check) >?>
      (fmap ("address_zip_check" .=) sourceTypeCard__addressZipCheck) >?>
      (fmap ("brand" .=) sourceTypeCard__brand) >?>
      (fmap ("country" .=) sourceTypeCard__country) >?>
      (fmap ("cvc_check" .=) sourceTypeCard__cvcCheck) >?>
      (fmap ("dynamic_last4" .=) sourceTypeCard__dynamicLast4) >?>
      (fmap ("exp_month" .=) sourceTypeCard__expMonth) >?>
      (fmap ("exp_year" .=) sourceTypeCard__expYear) >?>
      (fmap ("funding" .=) sourceTypeCard__funding) >?>
      (fmap ("last4" .=) sourceTypeCard__last4) >?>
      (fmap ("name" .=) sourceTypeCard__name) >?>
      (fmap ("tokenization_method" .=) sourceTypeCard__tokenizationMethod) >?>
      []
    )
  toEncoding SourceTypeCard{..} = pairs (
      "fingerprint" .= sourceTypeCard__fingerprint <>
      "three_d_secure" .= sourceTypeCard__threeDSecure <>
      maybe mempty ("address_line1_check" .=) sourceTypeCard__addressLine1Check <>
      maybe mempty ("address_zip_check" .=) sourceTypeCard__addressZipCheck <>
      maybe mempty ("brand" .=) sourceTypeCard__brand <>
      maybe mempty ("country" .=) sourceTypeCard__country <>
      maybe mempty ("cvc_check" .=) sourceTypeCard__cvcCheck <>
      maybe mempty ("dynamic_last4" .=) sourceTypeCard__dynamicLast4 <>
      maybe mempty ("exp_month" .=) sourceTypeCard__expMonth <>
      maybe mempty ("exp_year" .=) sourceTypeCard__expYear <>
      maybe mempty ("funding" .=) sourceTypeCard__funding <>
      maybe mempty ("last4" .=) sourceTypeCard__last4 <>
      maybe mempty ("name" .=) sourceTypeCard__name <>
      maybe mempty ("tokenization_method" .=) sourceTypeCard__tokenizationMethod
      )

-- Describes: "source_type_card_present"

data SourceTypeCardPresent
  = SourceTypeCardPresent
    { sourceTypeCardPresent__applicationCryptogram :: Text
    , sourceTypeCardPresent__applicationPreferredName :: Text
    , sourceTypeCardPresent__authorizationResponseCode :: Text
    , sourceTypeCardPresent__cvmType :: Text
    , sourceTypeCardPresent__dedicatedFileName :: Text
    , sourceTypeCardPresent__emvAuthData :: Text
    , sourceTypeCardPresent__fingerprint :: Text
    , sourceTypeCardPresent__posEntryMode :: Text
    , sourceTypeCardPresent__terminalVerificationResults :: Text
    , sourceTypeCardPresent__transactionStatusInformation :: Text
    , sourceTypeCardPresent__authorizationCode :: Maybe (Text)
    , sourceTypeCardPresent__brand :: Maybe (Text)
    , sourceTypeCardPresent__country :: Maybe (Text)
    , sourceTypeCardPresent__dataType :: Maybe (Text)
    , sourceTypeCardPresent__evidenceCustomerSignature :: Maybe (Text)
    , sourceTypeCardPresent__evidenceTransactionCertificate :: Maybe (Text)
    , sourceTypeCardPresent__expMonth :: Maybe (Int)
    , sourceTypeCardPresent__expYear :: Maybe (Int)
    , sourceTypeCardPresent__funding :: Maybe (Text)
    , sourceTypeCardPresent__last4 :: Maybe (Text)
    , sourceTypeCardPresent__posDeviceId :: Maybe (Text)
    , sourceTypeCardPresent__readMethod :: Maybe (Text)
    , sourceTypeCardPresent__reader :: Maybe (Text)
    } deriving (Show, Eq, Generic)

instance FromJSON SourceTypeCardPresent where
  parseJSON = withObject "SourceTypeCardPresent" parseCtors
    where
      parseCtors o = parseSourceTypeCardPresent o
      parseSourceTypeCardPresent o = do
        sourceTypeCardPresent__applicationCryptogram <- o .: "application_cryptogram"
        sourceTypeCardPresent__applicationPreferredName <- o .: "application_preferred_name"
        sourceTypeCardPresent__authorizationResponseCode <- o .: "authorization_response_code"
        sourceTypeCardPresent__cvmType <- o .: "cvm_type"
        sourceTypeCardPresent__dedicatedFileName <- o .: "dedicated_file_name"
        sourceTypeCardPresent__emvAuthData <- o .: "emv_auth_data"
        sourceTypeCardPresent__fingerprint <- o .: "fingerprint"
        sourceTypeCardPresent__posEntryMode <- o .: "pos_entry_mode"
        sourceTypeCardPresent__terminalVerificationResults <- o .: "terminal_verification_results"
        sourceTypeCardPresent__transactionStatusInformation <- o .: "transaction_status_information"
        sourceTypeCardPresent__authorizationCode <- o .:? "authorization_code"
        sourceTypeCardPresent__brand <- o .:? "brand"
        sourceTypeCardPresent__country <- o .:? "country"
        sourceTypeCardPresent__dataType <- o .:? "data_type"
        sourceTypeCardPresent__evidenceCustomerSignature <- o .:? "evidence_customer_signature"
        sourceTypeCardPresent__evidenceTransactionCertificate <- o .:? "evidence_transaction_certificate"
        sourceTypeCardPresent__expMonth <- o .:? "exp_month"
        sourceTypeCardPresent__expYear <- o .:? "exp_year"
        sourceTypeCardPresent__funding <- o .:? "funding"
        sourceTypeCardPresent__last4 <- o .:? "last4"
        sourceTypeCardPresent__posDeviceId <- o .:? "pos_device_id"
        sourceTypeCardPresent__readMethod <- o .:? "read_method"
        sourceTypeCardPresent__reader <- o .:? "reader"
        pure SourceTypeCardPresent{..}

instance ToJSON SourceTypeCardPresent where
  toJSON SourceTypeCardPresent{..} = object
    (
      ("application_cryptogram" .= sourceTypeCardPresent__applicationCryptogram) :
      ("application_preferred_name" .= sourceTypeCardPresent__applicationPreferredName) :
      ("authorization_response_code" .= sourceTypeCardPresent__authorizationResponseCode) :
      ("cvm_type" .= sourceTypeCardPresent__cvmType) :
      ("dedicated_file_name" .= sourceTypeCardPresent__dedicatedFileName) :
      ("emv_auth_data" .= sourceTypeCardPresent__emvAuthData) :
      ("fingerprint" .= sourceTypeCardPresent__fingerprint) :
      ("pos_entry_mode" .= sourceTypeCardPresent__posEntryMode) :
      ("terminal_verification_results" .= sourceTypeCardPresent__terminalVerificationResults) :
      ("transaction_status_information" .= sourceTypeCardPresent__transactionStatusInformation) :
      (fmap ("authorization_code" .=) sourceTypeCardPresent__authorizationCode) >?>
      (fmap ("brand" .=) sourceTypeCardPresent__brand) >?>
      (fmap ("country" .=) sourceTypeCardPresent__country) >?>
      (fmap ("data_type" .=) sourceTypeCardPresent__dataType) >?>
      (fmap ("evidence_customer_signature" .=) sourceTypeCardPresent__evidenceCustomerSignature) >?>
      (fmap ("evidence_transaction_certificate" .=) sourceTypeCardPresent__evidenceTransactionCertificate) >?>
      (fmap ("exp_month" .=) sourceTypeCardPresent__expMonth) >?>
      (fmap ("exp_year" .=) sourceTypeCardPresent__expYear) >?>
      (fmap ("funding" .=) sourceTypeCardPresent__funding) >?>
      (fmap ("last4" .=) sourceTypeCardPresent__last4) >?>
      (fmap ("pos_device_id" .=) sourceTypeCardPresent__posDeviceId) >?>
      (fmap ("read_method" .=) sourceTypeCardPresent__readMethod) >?>
      (fmap ("reader" .=) sourceTypeCardPresent__reader) >?>
      []
    )
  toEncoding SourceTypeCardPresent{..} = pairs (
      "application_cryptogram" .= sourceTypeCardPresent__applicationCryptogram <>
      "application_preferred_name" .= sourceTypeCardPresent__applicationPreferredName <>
      "authorization_response_code" .= sourceTypeCardPresent__authorizationResponseCode <>
      "cvm_type" .= sourceTypeCardPresent__cvmType <>
      "dedicated_file_name" .= sourceTypeCardPresent__dedicatedFileName <>
      "emv_auth_data" .= sourceTypeCardPresent__emvAuthData <>
      "fingerprint" .= sourceTypeCardPresent__fingerprint <>
      "pos_entry_mode" .= sourceTypeCardPresent__posEntryMode <>
      "terminal_verification_results" .= sourceTypeCardPresent__terminalVerificationResults <>
      "transaction_status_information" .= sourceTypeCardPresent__transactionStatusInformation <>
      maybe mempty ("authorization_code" .=) sourceTypeCardPresent__authorizationCode <>
      maybe mempty ("brand" .=) sourceTypeCardPresent__brand <>
      maybe mempty ("country" .=) sourceTypeCardPresent__country <>
      maybe mempty ("data_type" .=) sourceTypeCardPresent__dataType <>
      maybe mempty ("evidence_customer_signature" .=) sourceTypeCardPresent__evidenceCustomerSignature <>
      maybe mempty ("evidence_transaction_certificate" .=) sourceTypeCardPresent__evidenceTransactionCertificate <>
      maybe mempty ("exp_month" .=) sourceTypeCardPresent__expMonth <>
      maybe mempty ("exp_year" .=) sourceTypeCardPresent__expYear <>
      maybe mempty ("funding" .=) sourceTypeCardPresent__funding <>
      maybe mempty ("last4" .=) sourceTypeCardPresent__last4 <>
      maybe mempty ("pos_device_id" .=) sourceTypeCardPresent__posDeviceId <>
      maybe mempty ("read_method" .=) sourceTypeCardPresent__readMethod <>
      maybe mempty ("reader" .=) sourceTypeCardPresent__reader
      )

-- Describes: "source_type_eps"

data SourceTypeEps
  = SourceTypeEps
    { sourceTypeEps__reference :: Maybe (Text)
    , sourceTypeEps__statementDescriptor :: Maybe (Text)
    } deriving (Show, Eq, Generic)

instance FromJSON SourceTypeEps where
  parseJSON = withObject "SourceTypeEps" parseCtors
    where
      parseCtors o = parseSourceTypeEps o
      parseSourceTypeEps o = do
        sourceTypeEps__reference <- o .:? "reference"
        sourceTypeEps__statementDescriptor <- o .:? "statement_descriptor"
        pure SourceTypeEps{..}

instance ToJSON SourceTypeEps where
  toJSON SourceTypeEps{..} = object
    (
      (fmap ("reference" .=) sourceTypeEps__reference) >?>
      (fmap ("statement_descriptor" .=) sourceTypeEps__statementDescriptor) >?>
      []
    )
  toEncoding SourceTypeEps{..} = pairs (
      maybe mempty ("reference" .=) sourceTypeEps__reference <>
      maybe mempty ("statement_descriptor" .=) sourceTypeEps__statementDescriptor
      )

-- Describes: "source_type_giropay"

data SourceTypeGiropay
  = SourceTypeGiropay
    { sourceTypeGiropay__bankCode :: Maybe (Text)
    , sourceTypeGiropay__bankName :: Maybe (Text)
    , sourceTypeGiropay__bic :: Maybe (Text)
    , sourceTypeGiropay__statementDescriptor :: Maybe (Text)
    } deriving (Show, Eq, Generic)

instance FromJSON SourceTypeGiropay where
  parseJSON = withObject "SourceTypeGiropay" parseCtors
    where
      parseCtors o = parseSourceTypeGiropay o
      parseSourceTypeGiropay o = do
        sourceTypeGiropay__bankCode <- o .:? "bank_code"
        sourceTypeGiropay__bankName <- o .:? "bank_name"
        sourceTypeGiropay__bic <- o .:? "bic"
        sourceTypeGiropay__statementDescriptor <- o .:? "statement_descriptor"
        pure SourceTypeGiropay{..}

instance ToJSON SourceTypeGiropay where
  toJSON SourceTypeGiropay{..} = object
    (
      (fmap ("bank_code" .=) sourceTypeGiropay__bankCode) >?>
      (fmap ("bank_name" .=) sourceTypeGiropay__bankName) >?>
      (fmap ("bic" .=) sourceTypeGiropay__bic) >?>
      (fmap ("statement_descriptor" .=) sourceTypeGiropay__statementDescriptor) >?>
      []
    )
  toEncoding SourceTypeGiropay{..} = pairs (
      maybe mempty ("bank_code" .=) sourceTypeGiropay__bankCode <>
      maybe mempty ("bank_name" .=) sourceTypeGiropay__bankName <>
      maybe mempty ("bic" .=) sourceTypeGiropay__bic <>
      maybe mempty ("statement_descriptor" .=) sourceTypeGiropay__statementDescriptor
      )

-- Describes: "source_type_ideal"

data SourceTypeIdeal
  = SourceTypeIdeal
    { sourceTypeIdeal__bank :: Maybe (Text)
    , sourceTypeIdeal__bic :: Maybe (Text)
    , sourceTypeIdeal__ibanLast4 :: Maybe (Text)
    , sourceTypeIdeal__statementDescriptor :: Maybe (Text)
    } deriving (Show, Eq, Generic)

instance FromJSON SourceTypeIdeal where
  parseJSON = withObject "SourceTypeIdeal" parseCtors
    where
      parseCtors o = parseSourceTypeIdeal o
      parseSourceTypeIdeal o = do
        sourceTypeIdeal__bank <- o .:? "bank"
        sourceTypeIdeal__bic <- o .:? "bic"
        sourceTypeIdeal__ibanLast4 <- o .:? "iban_last4"
        sourceTypeIdeal__statementDescriptor <- o .:? "statement_descriptor"
        pure SourceTypeIdeal{..}

instance ToJSON SourceTypeIdeal where
  toJSON SourceTypeIdeal{..} = object
    (
      (fmap ("bank" .=) sourceTypeIdeal__bank) >?>
      (fmap ("bic" .=) sourceTypeIdeal__bic) >?>
      (fmap ("iban_last4" .=) sourceTypeIdeal__ibanLast4) >?>
      (fmap ("statement_descriptor" .=) sourceTypeIdeal__statementDescriptor) >?>
      []
    )
  toEncoding SourceTypeIdeal{..} = pairs (
      maybe mempty ("bank" .=) sourceTypeIdeal__bank <>
      maybe mempty ("bic" .=) sourceTypeIdeal__bic <>
      maybe mempty ("iban_last4" .=) sourceTypeIdeal__ibanLast4 <>
      maybe mempty ("statement_descriptor" .=) sourceTypeIdeal__statementDescriptor
      )

-- Describes: "source_type_klarna"

data SourceTypeKlarna
  = SourceTypeKlarna
    { sourceTypeKlarna__backgroundImageUrl :: Text
    , sourceTypeKlarna__firstName :: Text
    , sourceTypeKlarna__lastName :: Text
    , sourceTypeKlarna__locale :: Text
    , sourceTypeKlarna__logoUrl :: Text
    , sourceTypeKlarna__pageTitle :: Text
    , sourceTypeKlarna__payLaterAssetUrlsDescriptive :: Text
    , sourceTypeKlarna__payLaterAssetUrlsStandard :: Text
    , sourceTypeKlarna__payLaterName :: Text
    , sourceTypeKlarna__payLaterRedirectUrl :: Text
    , sourceTypeKlarna__payNowAssetUrlsDescriptive :: Text
    , sourceTypeKlarna__payNowAssetUrlsStandard :: Text
    , sourceTypeKlarna__payNowName :: Text
    , sourceTypeKlarna__payNowRedirectUrl :: Text
    , sourceTypeKlarna__payOverTimeAssetUrlsDescriptive :: Text
    , sourceTypeKlarna__payOverTimeAssetUrlsStandard :: Text
    , sourceTypeKlarna__payOverTimeName :: Text
    , sourceTypeKlarna__payOverTimeRedirectUrl :: Text
    , sourceTypeKlarna__paymentMethodCategories :: Text
    , sourceTypeKlarna__purchaseCountry :: Text
    , sourceTypeKlarna__purchaseType :: Text
    , sourceTypeKlarna__redirectUrl :: Text
    , sourceTypeKlarna__shippingFirstName :: Text
    , sourceTypeKlarna__shippingLastName :: Text
    , sourceTypeKlarna__clientToken :: Maybe (Text)
    } deriving (Show, Eq, Generic)

instance FromJSON SourceTypeKlarna where
  parseJSON = withObject "SourceTypeKlarna" parseCtors
    where
      parseCtors o = parseSourceTypeKlarna o
      parseSourceTypeKlarna o = do
        sourceTypeKlarna__backgroundImageUrl <- o .: "background_image_url"
        sourceTypeKlarna__firstName <- o .: "first_name"
        sourceTypeKlarna__lastName <- o .: "last_name"
        sourceTypeKlarna__locale <- o .: "locale"
        sourceTypeKlarna__logoUrl <- o .: "logo_url"
        sourceTypeKlarna__pageTitle <- o .: "page_title"
        sourceTypeKlarna__payLaterAssetUrlsDescriptive <- o .: "pay_later_asset_urls_descriptive"
        sourceTypeKlarna__payLaterAssetUrlsStandard <- o .: "pay_later_asset_urls_standard"
        sourceTypeKlarna__payLaterName <- o .: "pay_later_name"
        sourceTypeKlarna__payLaterRedirectUrl <- o .: "pay_later_redirect_url"
        sourceTypeKlarna__payNowAssetUrlsDescriptive <- o .: "pay_now_asset_urls_descriptive"
        sourceTypeKlarna__payNowAssetUrlsStandard <- o .: "pay_now_asset_urls_standard"
        sourceTypeKlarna__payNowName <- o .: "pay_now_name"
        sourceTypeKlarna__payNowRedirectUrl <- o .: "pay_now_redirect_url"
        sourceTypeKlarna__payOverTimeAssetUrlsDescriptive <- o .: "pay_over_time_asset_urls_descriptive"
        sourceTypeKlarna__payOverTimeAssetUrlsStandard <- o .: "pay_over_time_asset_urls_standard"
        sourceTypeKlarna__payOverTimeName <- o .: "pay_over_time_name"
        sourceTypeKlarna__payOverTimeRedirectUrl <- o .: "pay_over_time_redirect_url"
        sourceTypeKlarna__paymentMethodCategories <- o .: "payment_method_categories"
        sourceTypeKlarna__purchaseCountry <- o .: "purchase_country"
        sourceTypeKlarna__purchaseType <- o .: "purchase_type"
        sourceTypeKlarna__redirectUrl <- o .: "redirect_url"
        sourceTypeKlarna__shippingFirstName <- o .: "shipping_first_name"
        sourceTypeKlarna__shippingLastName <- o .: "shipping_last_name"
        sourceTypeKlarna__clientToken <- o .:? "client_token"
        pure SourceTypeKlarna{..}

instance ToJSON SourceTypeKlarna where
  toJSON SourceTypeKlarna{..} = object
    (
      ("background_image_url" .= sourceTypeKlarna__backgroundImageUrl) :
      ("first_name" .= sourceTypeKlarna__firstName) :
      ("last_name" .= sourceTypeKlarna__lastName) :
      ("locale" .= sourceTypeKlarna__locale) :
      ("logo_url" .= sourceTypeKlarna__logoUrl) :
      ("page_title" .= sourceTypeKlarna__pageTitle) :
      ("pay_later_asset_urls_descriptive" .= sourceTypeKlarna__payLaterAssetUrlsDescriptive) :
      ("pay_later_asset_urls_standard" .= sourceTypeKlarna__payLaterAssetUrlsStandard) :
      ("pay_later_name" .= sourceTypeKlarna__payLaterName) :
      ("pay_later_redirect_url" .= sourceTypeKlarna__payLaterRedirectUrl) :
      ("pay_now_asset_urls_descriptive" .= sourceTypeKlarna__payNowAssetUrlsDescriptive) :
      ("pay_now_asset_urls_standard" .= sourceTypeKlarna__payNowAssetUrlsStandard) :
      ("pay_now_name" .= sourceTypeKlarna__payNowName) :
      ("pay_now_redirect_url" .= sourceTypeKlarna__payNowRedirectUrl) :
      ("pay_over_time_asset_urls_descriptive" .= sourceTypeKlarna__payOverTimeAssetUrlsDescriptive) :
      ("pay_over_time_asset_urls_standard" .= sourceTypeKlarna__payOverTimeAssetUrlsStandard) :
      ("pay_over_time_name" .= sourceTypeKlarna__payOverTimeName) :
      ("pay_over_time_redirect_url" .= sourceTypeKlarna__payOverTimeRedirectUrl) :
      ("payment_method_categories" .= sourceTypeKlarna__paymentMethodCategories) :
      ("purchase_country" .= sourceTypeKlarna__purchaseCountry) :
      ("purchase_type" .= sourceTypeKlarna__purchaseType) :
      ("redirect_url" .= sourceTypeKlarna__redirectUrl) :
      ("shipping_first_name" .= sourceTypeKlarna__shippingFirstName) :
      ("shipping_last_name" .= sourceTypeKlarna__shippingLastName) :
      (fmap ("client_token" .=) sourceTypeKlarna__clientToken) >?>
      []
    )
  toEncoding SourceTypeKlarna{..} = pairs (
      "background_image_url" .= sourceTypeKlarna__backgroundImageUrl <>
      "first_name" .= sourceTypeKlarna__firstName <>
      "last_name" .= sourceTypeKlarna__lastName <>
      "locale" .= sourceTypeKlarna__locale <>
      "logo_url" .= sourceTypeKlarna__logoUrl <>
      "page_title" .= sourceTypeKlarna__pageTitle <>
      "pay_later_asset_urls_descriptive" .= sourceTypeKlarna__payLaterAssetUrlsDescriptive <>
      "pay_later_asset_urls_standard" .= sourceTypeKlarna__payLaterAssetUrlsStandard <>
      "pay_later_name" .= sourceTypeKlarna__payLaterName <>
      "pay_later_redirect_url" .= sourceTypeKlarna__payLaterRedirectUrl <>
      "pay_now_asset_urls_descriptive" .= sourceTypeKlarna__payNowAssetUrlsDescriptive <>
      "pay_now_asset_urls_standard" .= sourceTypeKlarna__payNowAssetUrlsStandard <>
      "pay_now_name" .= sourceTypeKlarna__payNowName <>
      "pay_now_redirect_url" .= sourceTypeKlarna__payNowRedirectUrl <>
      "pay_over_time_asset_urls_descriptive" .= sourceTypeKlarna__payOverTimeAssetUrlsDescriptive <>
      "pay_over_time_asset_urls_standard" .= sourceTypeKlarna__payOverTimeAssetUrlsStandard <>
      "pay_over_time_name" .= sourceTypeKlarna__payOverTimeName <>
      "pay_over_time_redirect_url" .= sourceTypeKlarna__payOverTimeRedirectUrl <>
      "payment_method_categories" .= sourceTypeKlarna__paymentMethodCategories <>
      "purchase_country" .= sourceTypeKlarna__purchaseCountry <>
      "purchase_type" .= sourceTypeKlarna__purchaseType <>
      "redirect_url" .= sourceTypeKlarna__redirectUrl <>
      "shipping_first_name" .= sourceTypeKlarna__shippingFirstName <>
      "shipping_last_name" .= sourceTypeKlarna__shippingLastName <>
      maybe mempty ("client_token" .=) sourceTypeKlarna__clientToken
      )

-- Describes: "source_type_multibanco"

data SourceTypeMultibanco
  = SourceTypeMultibanco
    { sourceTypeMultibanco__entity :: Maybe (Text)
    , sourceTypeMultibanco__reference :: Maybe (Text)
    , sourceTypeMultibanco__refundAccountHolderAddressCity :: Maybe (Text)
    , sourceTypeMultibanco__refundAccountHolderAddressCountry :: Maybe (Text)
    , sourceTypeMultibanco__refundAccountHolderAddressLine1 :: Maybe (Text)
    , sourceTypeMultibanco__refundAccountHolderAddressLine2 :: Maybe (Text)
    , sourceTypeMultibanco__refundAccountHolderAddressPostalCode :: Maybe (Text)
    , sourceTypeMultibanco__refundAccountHolderAddressState :: Maybe (Text)
    , sourceTypeMultibanco__refundAccountHolderName :: Maybe (Text)
    , sourceTypeMultibanco__refundIban :: Maybe (Text)
    } deriving (Show, Eq, Generic)

instance FromJSON SourceTypeMultibanco where
  parseJSON = withObject "SourceTypeMultibanco" parseCtors
    where
      parseCtors o = parseSourceTypeMultibanco o
      parseSourceTypeMultibanco o = do
        sourceTypeMultibanco__entity <- o .:? "entity"
        sourceTypeMultibanco__reference <- o .:? "reference"
        sourceTypeMultibanco__refundAccountHolderAddressCity <- o .:? "refund_account_holder_address_city"
        sourceTypeMultibanco__refundAccountHolderAddressCountry <- o .:? "refund_account_holder_address_country"
        sourceTypeMultibanco__refundAccountHolderAddressLine1 <- o .:? "refund_account_holder_address_line1"
        sourceTypeMultibanco__refundAccountHolderAddressLine2 <- o .:? "refund_account_holder_address_line2"
        sourceTypeMultibanco__refundAccountHolderAddressPostalCode <- o .:? "refund_account_holder_address_postal_code"
        sourceTypeMultibanco__refundAccountHolderAddressState <- o .:? "refund_account_holder_address_state"
        sourceTypeMultibanco__refundAccountHolderName <- o .:? "refund_account_holder_name"
        sourceTypeMultibanco__refundIban <- o .:? "refund_iban"
        pure SourceTypeMultibanco{..}

instance ToJSON SourceTypeMultibanco where
  toJSON SourceTypeMultibanco{..} = object
    (
      (fmap ("entity" .=) sourceTypeMultibanco__entity) >?>
      (fmap ("reference" .=) sourceTypeMultibanco__reference) >?>
      (fmap ("refund_account_holder_address_city" .=) sourceTypeMultibanco__refundAccountHolderAddressCity) >?>
      (fmap ("refund_account_holder_address_country" .=) sourceTypeMultibanco__refundAccountHolderAddressCountry) >?>
      (fmap ("refund_account_holder_address_line1" .=) sourceTypeMultibanco__refundAccountHolderAddressLine1) >?>
      (fmap ("refund_account_holder_address_line2" .=) sourceTypeMultibanco__refundAccountHolderAddressLine2) >?>
      (fmap ("refund_account_holder_address_postal_code" .=) sourceTypeMultibanco__refundAccountHolderAddressPostalCode) >?>
      (fmap ("refund_account_holder_address_state" .=) sourceTypeMultibanco__refundAccountHolderAddressState) >?>
      (fmap ("refund_account_holder_name" .=) sourceTypeMultibanco__refundAccountHolderName) >?>
      (fmap ("refund_iban" .=) sourceTypeMultibanco__refundIban) >?>
      []
    )
  toEncoding SourceTypeMultibanco{..} = pairs (
      maybe mempty ("entity" .=) sourceTypeMultibanco__entity <>
      maybe mempty ("reference" .=) sourceTypeMultibanco__reference <>
      maybe mempty ("refund_account_holder_address_city" .=) sourceTypeMultibanco__refundAccountHolderAddressCity <>
      maybe mempty ("refund_account_holder_address_country" .=) sourceTypeMultibanco__refundAccountHolderAddressCountry <>
      maybe mempty ("refund_account_holder_address_line1" .=) sourceTypeMultibanco__refundAccountHolderAddressLine1 <>
      maybe mempty ("refund_account_holder_address_line2" .=) sourceTypeMultibanco__refundAccountHolderAddressLine2 <>
      maybe mempty ("refund_account_holder_address_postal_code" .=) sourceTypeMultibanco__refundAccountHolderAddressPostalCode <>
      maybe mempty ("refund_account_holder_address_state" .=) sourceTypeMultibanco__refundAccountHolderAddressState <>
      maybe mempty ("refund_account_holder_name" .=) sourceTypeMultibanco__refundAccountHolderName <>
      maybe mempty ("refund_iban" .=) sourceTypeMultibanco__refundIban
      )

-- Describes: "source_type_p24"

data SourceTypeP24
  = SourceTypeP24
    { sourceTypeP24__reference :: Maybe (Text)
    } deriving (Show, Eq, Generic)

instance FromJSON SourceTypeP24 where
  parseJSON = withObject "SourceTypeP24" parseCtors
    where
      parseCtors o = parseSourceTypeP24 o
      parseSourceTypeP24 o = do
        sourceTypeP24__reference <- o .:? "reference"
        pure SourceTypeP24{..}

instance ToJSON SourceTypeP24 where
  toJSON SourceTypeP24{..} = object
    (
      (fmap ("reference" .=) sourceTypeP24__reference) >?>
      []
    )
  toEncoding SourceTypeP24{..} = pairs (
      maybe mempty ("reference" .=) sourceTypeP24__reference
      )

-- Describes: "source_type_sepa_debit"

data SourceTypeSepaDebit
  = SourceTypeSepaDebit
    { sourceTypeSepaDebit__bankCode :: Maybe (Text)
    , sourceTypeSepaDebit__branchCode :: Maybe (Text)
    , sourceTypeSepaDebit__country :: Maybe (Text)
    , sourceTypeSepaDebit__fingerprint :: Maybe (Text)
    , sourceTypeSepaDebit__last4 :: Maybe (Text)
    , sourceTypeSepaDebit__mandateReference :: Maybe (Text)
    , sourceTypeSepaDebit__mandateUrl :: Maybe (Text)
    } deriving (Show, Eq, Generic)

instance FromJSON SourceTypeSepaDebit where
  parseJSON = withObject "SourceTypeSepaDebit" parseCtors
    where
      parseCtors o = parseSourceTypeSepaDebit o
      parseSourceTypeSepaDebit o = do
        sourceTypeSepaDebit__bankCode <- o .:? "bank_code"
        sourceTypeSepaDebit__branchCode <- o .:? "branch_code"
        sourceTypeSepaDebit__country <- o .:? "country"
        sourceTypeSepaDebit__fingerprint <- o .:? "fingerprint"
        sourceTypeSepaDebit__last4 <- o .:? "last4"
        sourceTypeSepaDebit__mandateReference <- o .:? "mandate_reference"
        sourceTypeSepaDebit__mandateUrl <- o .:? "mandate_url"
        pure SourceTypeSepaDebit{..}

instance ToJSON SourceTypeSepaDebit where
  toJSON SourceTypeSepaDebit{..} = object
    (
      (fmap ("bank_code" .=) sourceTypeSepaDebit__bankCode) >?>
      (fmap ("branch_code" .=) sourceTypeSepaDebit__branchCode) >?>
      (fmap ("country" .=) sourceTypeSepaDebit__country) >?>
      (fmap ("fingerprint" .=) sourceTypeSepaDebit__fingerprint) >?>
      (fmap ("last4" .=) sourceTypeSepaDebit__last4) >?>
      (fmap ("mandate_reference" .=) sourceTypeSepaDebit__mandateReference) >?>
      (fmap ("mandate_url" .=) sourceTypeSepaDebit__mandateUrl) >?>
      []
    )
  toEncoding SourceTypeSepaDebit{..} = pairs (
      maybe mempty ("bank_code" .=) sourceTypeSepaDebit__bankCode <>
      maybe mempty ("branch_code" .=) sourceTypeSepaDebit__branchCode <>
      maybe mempty ("country" .=) sourceTypeSepaDebit__country <>
      maybe mempty ("fingerprint" .=) sourceTypeSepaDebit__fingerprint <>
      maybe mempty ("last4" .=) sourceTypeSepaDebit__last4 <>
      maybe mempty ("mandate_reference" .=) sourceTypeSepaDebit__mandateReference <>
      maybe mempty ("mandate_url" .=) sourceTypeSepaDebit__mandateUrl
      )

-- Describes: "source_type_sofort"

data SourceTypeSofort
  = SourceTypeSofort
    { sourceTypeSofort__bankCode :: Maybe (Text)
    , sourceTypeSofort__bankName :: Maybe (Text)
    , sourceTypeSofort__bic :: Maybe (Text)
    , sourceTypeSofort__country :: Maybe (Text)
    , sourceTypeSofort__ibanLast4 :: Maybe (Text)
    , sourceTypeSofort__preferredLanguage :: Maybe (Text)
    , sourceTypeSofort__statementDescriptor :: Maybe (Text)
    } deriving (Show, Eq, Generic)

instance FromJSON SourceTypeSofort where
  parseJSON = withObject "SourceTypeSofort" parseCtors
    where
      parseCtors o = parseSourceTypeSofort o
      parseSourceTypeSofort o = do
        sourceTypeSofort__bankCode <- o .:? "bank_code"
        sourceTypeSofort__bankName <- o .:? "bank_name"
        sourceTypeSofort__bic <- o .:? "bic"
        sourceTypeSofort__country <- o .:? "country"
        sourceTypeSofort__ibanLast4 <- o .:? "iban_last4"
        sourceTypeSofort__preferredLanguage <- o .:? "preferred_language"
        sourceTypeSofort__statementDescriptor <- o .:? "statement_descriptor"
        pure SourceTypeSofort{..}

instance ToJSON SourceTypeSofort where
  toJSON SourceTypeSofort{..} = object
    (
      (fmap ("bank_code" .=) sourceTypeSofort__bankCode) >?>
      (fmap ("bank_name" .=) sourceTypeSofort__bankName) >?>
      (fmap ("bic" .=) sourceTypeSofort__bic) >?>
      (fmap ("country" .=) sourceTypeSofort__country) >?>
      (fmap ("iban_last4" .=) sourceTypeSofort__ibanLast4) >?>
      (fmap ("preferred_language" .=) sourceTypeSofort__preferredLanguage) >?>
      (fmap ("statement_descriptor" .=) sourceTypeSofort__statementDescriptor) >?>
      []
    )
  toEncoding SourceTypeSofort{..} = pairs (
      maybe mempty ("bank_code" .=) sourceTypeSofort__bankCode <>
      maybe mempty ("bank_name" .=) sourceTypeSofort__bankName <>
      maybe mempty ("bic" .=) sourceTypeSofort__bic <>
      maybe mempty ("country" .=) sourceTypeSofort__country <>
      maybe mempty ("iban_last4" .=) sourceTypeSofort__ibanLast4 <>
      maybe mempty ("preferred_language" .=) sourceTypeSofort__preferredLanguage <>
      maybe mempty ("statement_descriptor" .=) sourceTypeSofort__statementDescriptor
      )

-- Describes: "source_type_three_d_secure"

data SourceTypeThreeDSecure
  = SourceTypeThreeDSecure
    { sourceTypeThreeDSecure__fingerprint :: Text
    , sourceTypeThreeDSecure__threeDSecure :: Text
    , sourceTypeThreeDSecure__addressLine1Check :: Maybe (Text)
    , sourceTypeThreeDSecure__addressZipCheck :: Maybe (Text)
    , sourceTypeThreeDSecure__authenticated :: Maybe (Bool)
    , sourceTypeThreeDSecure__brand :: Maybe (Text)
    , sourceTypeThreeDSecure__card :: Maybe (Text)
    , sourceTypeThreeDSecure__country :: Maybe (Text)
    , sourceTypeThreeDSecure__customer :: Maybe (Text)
    , sourceTypeThreeDSecure__cvcCheck :: Maybe (Text)
    , sourceTypeThreeDSecure__dynamicLast4 :: Maybe (Text)
    , sourceTypeThreeDSecure__expMonth :: Maybe (Int)
    , sourceTypeThreeDSecure__expYear :: Maybe (Int)
    , sourceTypeThreeDSecure__funding :: Maybe (Text)
    , sourceTypeThreeDSecure__last4 :: Maybe (Text)
    , sourceTypeThreeDSecure__name :: Maybe (Text)
    , sourceTypeThreeDSecure__tokenizationMethod :: Maybe (Text)
    } deriving (Show, Eq, Generic)

instance FromJSON SourceTypeThreeDSecure where
  parseJSON = withObject "SourceTypeThreeDSecure" parseCtors
    where
      parseCtors o = parseSourceTypeThreeDSecure o
      parseSourceTypeThreeDSecure o = do
        sourceTypeThreeDSecure__fingerprint <- o .: "fingerprint"
        sourceTypeThreeDSecure__threeDSecure <- o .: "three_d_secure"
        sourceTypeThreeDSecure__addressLine1Check <- o .:? "address_line1_check"
        sourceTypeThreeDSecure__addressZipCheck <- o .:? "address_zip_check"
        sourceTypeThreeDSecure__authenticated <- o .:? "authenticated"
        sourceTypeThreeDSecure__brand <- o .:? "brand"
        sourceTypeThreeDSecure__card <- o .:? "card"
        sourceTypeThreeDSecure__country <- o .:? "country"
        sourceTypeThreeDSecure__customer <- o .:? "customer"
        sourceTypeThreeDSecure__cvcCheck <- o .:? "cvc_check"
        sourceTypeThreeDSecure__dynamicLast4 <- o .:? "dynamic_last4"
        sourceTypeThreeDSecure__expMonth <- o .:? "exp_month"
        sourceTypeThreeDSecure__expYear <- o .:? "exp_year"
        sourceTypeThreeDSecure__funding <- o .:? "funding"
        sourceTypeThreeDSecure__last4 <- o .:? "last4"
        sourceTypeThreeDSecure__name <- o .:? "name"
        sourceTypeThreeDSecure__tokenizationMethod <- o .:? "tokenization_method"
        pure SourceTypeThreeDSecure{..}

instance ToJSON SourceTypeThreeDSecure where
  toJSON SourceTypeThreeDSecure{..} = object
    (
      ("fingerprint" .= sourceTypeThreeDSecure__fingerprint) :
      ("three_d_secure" .= sourceTypeThreeDSecure__threeDSecure) :
      (fmap ("address_line1_check" .=) sourceTypeThreeDSecure__addressLine1Check) >?>
      (fmap ("address_zip_check" .=) sourceTypeThreeDSecure__addressZipCheck) >?>
      (fmap ("authenticated" .=) sourceTypeThreeDSecure__authenticated) >?>
      (fmap ("brand" .=) sourceTypeThreeDSecure__brand) >?>
      (fmap ("card" .=) sourceTypeThreeDSecure__card) >?>
      (fmap ("country" .=) sourceTypeThreeDSecure__country) >?>
      (fmap ("customer" .=) sourceTypeThreeDSecure__customer) >?>
      (fmap ("cvc_check" .=) sourceTypeThreeDSecure__cvcCheck) >?>
      (fmap ("dynamic_last4" .=) sourceTypeThreeDSecure__dynamicLast4) >?>
      (fmap ("exp_month" .=) sourceTypeThreeDSecure__expMonth) >?>
      (fmap ("exp_year" .=) sourceTypeThreeDSecure__expYear) >?>
      (fmap ("funding" .=) sourceTypeThreeDSecure__funding) >?>
      (fmap ("last4" .=) sourceTypeThreeDSecure__last4) >?>
      (fmap ("name" .=) sourceTypeThreeDSecure__name) >?>
      (fmap ("tokenization_method" .=) sourceTypeThreeDSecure__tokenizationMethod) >?>
      []
    )
  toEncoding SourceTypeThreeDSecure{..} = pairs (
      "fingerprint" .= sourceTypeThreeDSecure__fingerprint <>
      "three_d_secure" .= sourceTypeThreeDSecure__threeDSecure <>
      maybe mempty ("address_line1_check" .=) sourceTypeThreeDSecure__addressLine1Check <>
      maybe mempty ("address_zip_check" .=) sourceTypeThreeDSecure__addressZipCheck <>
      maybe mempty ("authenticated" .=) sourceTypeThreeDSecure__authenticated <>
      maybe mempty ("brand" .=) sourceTypeThreeDSecure__brand <>
      maybe mempty ("card" .=) sourceTypeThreeDSecure__card <>
      maybe mempty ("country" .=) sourceTypeThreeDSecure__country <>
      maybe mempty ("customer" .=) sourceTypeThreeDSecure__customer <>
      maybe mempty ("cvc_check" .=) sourceTypeThreeDSecure__cvcCheck <>
      maybe mempty ("dynamic_last4" .=) sourceTypeThreeDSecure__dynamicLast4 <>
      maybe mempty ("exp_month" .=) sourceTypeThreeDSecure__expMonth <>
      maybe mempty ("exp_year" .=) sourceTypeThreeDSecure__expYear <>
      maybe mempty ("funding" .=) sourceTypeThreeDSecure__funding <>
      maybe mempty ("last4" .=) sourceTypeThreeDSecure__last4 <>
      maybe mempty ("name" .=) sourceTypeThreeDSecure__name <>
      maybe mempty ("tokenization_method" .=) sourceTypeThreeDSecure__tokenizationMethod
      )

-- Describes: "source_type_wechat"

data SourceTypeWechat
  = SourceTypeWechat
    { sourceTypeWechat__prepayId :: Text
    , sourceTypeWechat__statementDescriptor :: Text
    , sourceTypeWechat__qrCodeUrl :: Maybe (Text)
    } deriving (Show, Eq, Generic)

instance FromJSON SourceTypeWechat where
  parseJSON = withObject "SourceTypeWechat" parseCtors
    where
      parseCtors o = parseSourceTypeWechat o
      parseSourceTypeWechat o = do
        sourceTypeWechat__prepayId <- o .: "prepay_id"
        sourceTypeWechat__statementDescriptor <- o .: "statement_descriptor"
        sourceTypeWechat__qrCodeUrl <- o .:? "qr_code_url"
        pure SourceTypeWechat{..}

instance ToJSON SourceTypeWechat where
  toJSON SourceTypeWechat{..} = object
    (
      ("prepay_id" .= sourceTypeWechat__prepayId) :
      ("statement_descriptor" .= sourceTypeWechat__statementDescriptor) :
      (fmap ("qr_code_url" .=) sourceTypeWechat__qrCodeUrl) >?>
      []
    )
  toEncoding SourceTypeWechat{..} = pairs (
      "prepay_id" .= sourceTypeWechat__prepayId <>
      "statement_descriptor" .= sourceTypeWechat__statementDescriptor <>
      maybe mempty ("qr_code_url" .=) sourceTypeWechat__qrCodeUrl
      )

-- Describes: "status_transitions"

data StatusTransitions
  = StatusTransitions
    { statusTransitions__canceled :: Maybe (POSIXTime)
    , statusTransitions__fulfiled :: Maybe (POSIXTime)
    , statusTransitions__paid :: Maybe (POSIXTime)
    , statusTransitions__returned :: Maybe (POSIXTime)
    } deriving (Show, Eq, Generic)

instance FromJSON StatusTransitions where
  parseJSON = withObject "StatusTransitions" parseCtors
    where
      parseCtors o = parseStatusTransitions o
      parseStatusTransitions o = do
        statusTransitions__canceled <- o .:? "canceled"
        statusTransitions__fulfiled <- o .:? "fulfiled"
        statusTransitions__paid <- o .:? "paid"
        statusTransitions__returned <- o .:? "returned"
        pure StatusTransitions{..}

instance ToJSON StatusTransitions where
  toJSON StatusTransitions{..} = object
    (
      (fmap ("canceled" .=) statusTransitions__canceled) >?>
      (fmap ("fulfiled" .=) statusTransitions__fulfiled) >?>
      (fmap ("paid" .=) statusTransitions__paid) >?>
      (fmap ("returned" .=) statusTransitions__returned) >?>
      []
    )
  toEncoding StatusTransitions{..} = pairs (
      maybe mempty ("canceled" .=) statusTransitions__canceled <>
      maybe mempty ("fulfiled" .=) statusTransitions__fulfiled <>
      maybe mempty ("paid" .=) statusTransitions__paid <>
      maybe mempty ("returned" .=) statusTransitions__returned
      )

-- Describes: "subscription"

data Subscription
  = Subscription
    { subscription__id :: (Id Subscription)
    {- ^ Unique identifier for the object. -}
    , subscription__object :: Subscription_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , subscription__livemode :: Bool
    {- ^ Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. -}
    , subscription__billingCycleAnchor :: POSIXTime
    {- ^ Determines the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices. -}
    , subscription__cancelAtPeriodEnd :: Bool
    {- ^ If the subscription has been canceled with the `at_period_end` flag set to `true`, `cancel_at_period_end` on the subscription will be true. You can use this attribute to determine whether a subscription that has a status of active is scheduled to be canceled at the end of the current period. -}
    , subscription__created :: POSIXTime
    {- ^ Time at which the object was created. Measured in seconds since the Unix epoch. -}
    , subscription__currentPeriodEnd :: POSIXTime
    {- ^ End of the current period that the subscription has been invoiced for. At the end of this period, a new invoice will be created. -}
    , subscription__currentPeriodStart :: POSIXTime
    {- ^ Start of the current period that the subscription has been invoiced for. -}
    , subscription__customer :: Expandable '[Const (Customer), Const (DeletedCustomer)]
    {- ^ ID of the customer who owns the subscription. -}
    , subscription__items :: Object
    {- ^ List of subscription items, each with an attached plan. -}
    , subscription__metadata :: Object
    {- ^ Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. -}
    , subscription__start :: POSIXTime
    {- ^ Date of the last substantial change to this subscription. For example, a change to the items array, or a change of status, will reset this timestamp. -}
    , subscription__startDate :: POSIXTime
    {- ^ Date when the subscription was first created. The date might differ from the `created` date due to backdating. -}
    , subscription__status :: Subscription_Status
    {- ^ Possible values are `incomplete`, `incomplete_expired`, `trialing`, `active`, `past_due`, `canceled`, or `unpaid`. 

For `collection_method=charge_automatically` a subscription moves into `incomplete` if the initial payment attempt fails. A subscription in this state can only have metadata and default_source updated. Once the first invoice is paid, the subscription moves into an `active` state. If the first invoice is not paid within 23 hours, the subscription transitions to `incomplete_expired`. This is a terminal state, the open invoice will be voided and no further invoices will be generated. 

A subscription that is currently in a trial period is `trialing` and moves to `active` when the trial period is over. 

If subscription `collection_method=charge_automatically` it becomes `past_due` when payment to renew it fails and `canceled` or `unpaid` (depending on your subscriptions settings) when Stripe has exhausted all payment retry attempts. 

If subscription `collection_method=send_invoice` it becomes `past_due` when its invoice is not paid by the due date, and `canceled` or `unpaid` if it is still not paid by an additional deadline after that. Note that when a subscription has a status of `unpaid`, no subsequent invoices will be attempted (invoices will be created, but then immediately automatically closed). After receiving updated payment information from a customer, you may choose to reopen and pay their closed invoices. -}
    , subscription__applicationFeePercent :: Maybe (Scientific)
    {- ^ A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account. -}
    , subscription__billing :: Maybe (Subscription_Billing)
    {- ^ This field has been renamed to `collection_method` and will be removed in a future API version. -}
    , subscription__billingThresholds :: Maybe (Expandable '[Const (SubscriptionBillingThresholds)])
    {- ^ Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period -}
    , subscription__cancelAt :: Maybe (POSIXTime)
    {- ^ A date in the future at which the subscription will automatically get canceled -}
    , subscription__canceledAt :: Maybe (POSIXTime)
    {- ^ If the subscription has been canceled, the date of that cancellation. If the subscription was canceled with `cancel_at_period_end`, `canceled_at` will still reflect the date of the initial cancellation request, not the end of the subscription period when the subscription is automatically moved to a canceled state. -}
    , subscription__collectionMethod :: Maybe (Subscription_CollectionMethod)
    {- ^ Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this subscription at the end of the cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions. -}
    , subscription__daysUntilDue :: Maybe (Int)
    {- ^ Number of days a customer has to pay invoices generated by this subscription. This value will be `null` for subscriptions where `collection_method=charge_automatically`. -}
    , subscription__defaultPaymentMethod :: Maybe (Expandable '[Const (PaymentMethod)])
    {- ^ ID of the default payment method for the subscription. It must belong to the customer associated with the subscription. If not set, invoices will use the default payment method in the customer's invoice settings. -}
    , subscription__defaultSource :: Maybe (Expandable '[Const (AlipayAccount), Const (BankAccount), Const (BitcoinReceiver), Const (Card), Const (Source)])
    {- ^ ID of the default payment source for the subscription. It must belong to the customer associated with the subscription and be in a chargeable state. If not set, defaults to the customer's default source. -}
    , subscription__defaultTaxRates :: Maybe (Vector (TaxRate))
    {- ^ The tax rates that will apply to any subscription item that does not have `tax_rates` set. Invoices created will have their `default_tax_rates` populated from the subscription. -}
    , subscription__discount :: Maybe (Expandable '[Const (Discount)])
    {- ^ Describes the current discount applied to this subscription, if there is one. When billing, a discount applied to a subscription overrides a discount applied on a customer-wide basis. -}
    , subscription__endedAt :: Maybe (POSIXTime)
    {- ^ If the subscription has ended, the date the subscription ended. -}
    , subscription__latestInvoice :: Maybe (Expandable '[Const (Invoice)])
    {- ^ The most recent invoice this subscription has generated. -}
    , subscription__pendingSetupIntent :: Maybe (Expandable '[Const (SetupIntent)])
    {- ^ You can use this [SetupIntent](https://stripe.com/docs/api/setup_intents) to collect user authentication when creating a subscription without immediate payment or updating a subscription's payment method, allowing you to optimize for off-session payments. Learn more in the [SCA Migration Guide](https://stripe.com/docs/billing/migration/strong-customer-authentication#scenario-2). -}
    , subscription__plan :: Maybe (Expandable '[Const (Plan)])
    {- ^ Hash describing the plan the customer is subscribed to. Only set if the subscription contains a single plan. -}
    , subscription__quantity :: Maybe (Int)
    {- ^ The quantity of the plan to which the customer is subscribed. For example, if your plan is $10/user/month, and your customer has 5 users, you could pass 5 as the quantity to have the customer charged $50 (5 x $10) monthly. Only set if the subscription contains a single plan. -}
    , subscription__schedule :: Maybe (Expandable '[Const (SubscriptionSchedule)])
    {- ^ The schedule attached to the subscription -}
    , subscription__taxPercent :: Maybe (Scientific)
    {- ^ If provided, each invoice created by this subscription will apply the tax rate, increasing the amount billed to the customer. -}
    , subscription__trialEnd :: Maybe (POSIXTime)
    {- ^ If the subscription has a trial, the end of that trial. -}
    , subscription__trialStart :: Maybe (POSIXTime)
    {- ^ If the subscription has a trial, the beginning of that trial. -}
    } deriving (Show, Eq, Generic)

instance FromJSON Subscription where
  parseJSON = withObject "Subscription" parseCtors
    where
      parseCtors o = parseSubscription o
      parseSubscription o = do
        subscription__id <- o .: "id"
        subscription__object <- o .: "object"
        subscription__livemode <- o .: "livemode"
        subscription__billingCycleAnchor <- o .: "billing_cycle_anchor"
        subscription__cancelAtPeriodEnd <- o .: "cancel_at_period_end"
        subscription__created <- o .: "created"
        subscription__currentPeriodEnd <- o .: "current_period_end"
        subscription__currentPeriodStart <- o .: "current_period_start"
        subscription__customer <- o .: "customer"
        subscription__items <- o .: "items"
        subscription__metadata <- o .: "metadata"
        subscription__start <- o .: "start"
        subscription__startDate <- o .: "start_date"
        subscription__status <- o .: "status"
        subscription__applicationFeePercent <- o .:? "application_fee_percent"
        subscription__billing <- o .:? "billing"
        subscription__billingThresholds <- o .:? "billing_thresholds"
        subscription__cancelAt <- o .:? "cancel_at"
        subscription__canceledAt <- o .:? "canceled_at"
        subscription__collectionMethod <- o .:? "collection_method"
        subscription__daysUntilDue <- o .:? "days_until_due"
        subscription__defaultPaymentMethod <- o .:? "default_payment_method"
        subscription__defaultSource <- o .:? "default_source"
        subscription__defaultTaxRates <- o .:? "default_tax_rates"
        subscription__discount <- o .:? "discount"
        subscription__endedAt <- o .:? "ended_at"
        subscription__latestInvoice <- o .:? "latest_invoice"
        subscription__pendingSetupIntent <- o .:? "pending_setup_intent"
        subscription__plan <- o .:? "plan"
        subscription__quantity <- o .:? "quantity"
        subscription__schedule <- o .:? "schedule"
        subscription__taxPercent <- o .:? "tax_percent"
        subscription__trialEnd <- o .:? "trial_end"
        subscription__trialStart <- o .:? "trial_start"
        pure Subscription{..}

instance ToJSON Subscription where
  toJSON Subscription{..} = object
    (
      ("id" .= subscription__id) :
      ("object" .= subscription__object) :
      ("livemode" .= subscription__livemode) :
      ("billing_cycle_anchor" .= subscription__billingCycleAnchor) :
      ("cancel_at_period_end" .= subscription__cancelAtPeriodEnd) :
      ("created" .= subscription__created) :
      ("current_period_end" .= subscription__currentPeriodEnd) :
      ("current_period_start" .= subscription__currentPeriodStart) :
      ("customer" .= subscription__customer) :
      ("items" .= subscription__items) :
      ("metadata" .= subscription__metadata) :
      ("start" .= subscription__start) :
      ("start_date" .= subscription__startDate) :
      ("status" .= subscription__status) :
      (fmap ("application_fee_percent" .=) subscription__applicationFeePercent) >?>
      (fmap ("billing" .=) subscription__billing) >?>
      (fmap ("billing_thresholds" .=) subscription__billingThresholds) >?>
      (fmap ("cancel_at" .=) subscription__cancelAt) >?>
      (fmap ("canceled_at" .=) subscription__canceledAt) >?>
      (fmap ("collection_method" .=) subscription__collectionMethod) >?>
      (fmap ("days_until_due" .=) subscription__daysUntilDue) >?>
      (fmap ("default_payment_method" .=) subscription__defaultPaymentMethod) >?>
      (fmap ("default_source" .=) subscription__defaultSource) >?>
      (fmap ("default_tax_rates" .=) subscription__defaultTaxRates) >?>
      (fmap ("discount" .=) subscription__discount) >?>
      (fmap ("ended_at" .=) subscription__endedAt) >?>
      (fmap ("latest_invoice" .=) subscription__latestInvoice) >?>
      (fmap ("pending_setup_intent" .=) subscription__pendingSetupIntent) >?>
      (fmap ("plan" .=) subscription__plan) >?>
      (fmap ("quantity" .=) subscription__quantity) >?>
      (fmap ("schedule" .=) subscription__schedule) >?>
      (fmap ("tax_percent" .=) subscription__taxPercent) >?>
      (fmap ("trial_end" .=) subscription__trialEnd) >?>
      (fmap ("trial_start" .=) subscription__trialStart) >?>
      []
    )
  toEncoding Subscription{..} = pairs (
      "id" .= subscription__id <>
      "object" .= subscription__object <>
      "livemode" .= subscription__livemode <>
      "billing_cycle_anchor" .= subscription__billingCycleAnchor <>
      "cancel_at_period_end" .= subscription__cancelAtPeriodEnd <>
      "created" .= subscription__created <>
      "current_period_end" .= subscription__currentPeriodEnd <>
      "current_period_start" .= subscription__currentPeriodStart <>
      "customer" .= subscription__customer <>
      "items" .= subscription__items <>
      "metadata" .= subscription__metadata <>
      "start" .= subscription__start <>
      "start_date" .= subscription__startDate <>
      "status" .= subscription__status <>
      maybe mempty ("application_fee_percent" .=) subscription__applicationFeePercent <>
      maybe mempty ("billing" .=) subscription__billing <>
      maybe mempty ("billing_thresholds" .=) subscription__billingThresholds <>
      maybe mempty ("cancel_at" .=) subscription__cancelAt <>
      maybe mempty ("canceled_at" .=) subscription__canceledAt <>
      maybe mempty ("collection_method" .=) subscription__collectionMethod <>
      maybe mempty ("days_until_due" .=) subscription__daysUntilDue <>
      maybe mempty ("default_payment_method" .=) subscription__defaultPaymentMethod <>
      maybe mempty ("default_source" .=) subscription__defaultSource <>
      maybe mempty ("default_tax_rates" .=) subscription__defaultTaxRates <>
      maybe mempty ("discount" .=) subscription__discount <>
      maybe mempty ("ended_at" .=) subscription__endedAt <>
      maybe mempty ("latest_invoice" .=) subscription__latestInvoice <>
      maybe mempty ("pending_setup_intent" .=) subscription__pendingSetupIntent <>
      maybe mempty ("plan" .=) subscription__plan <>
      maybe mempty ("quantity" .=) subscription__quantity <>
      maybe mempty ("schedule" .=) subscription__schedule <>
      maybe mempty ("tax_percent" .=) subscription__taxPercent <>
      maybe mempty ("trial_end" .=) subscription__trialEnd <>
      maybe mempty ("trial_start" .=) subscription__trialStart
      )

-- Describes: "subscription_billing_thresholds"

data SubscriptionBillingThresholds
  = SubscriptionBillingThresholds
    { subscriptionBillingThresholds__amountGte :: Maybe (Int)
    {- ^ Monetary threshold that triggers the subscription to create an invoice -}
    , subscriptionBillingThresholds__resetBillingCycleAnchor :: Maybe (Bool)
    {- ^ Indicates if the `billing_cycle_anchor` should be reset when a threshold is reached. If true, `billing_cycle_anchor` will be updated to the date/time the threshold was last reached; otherwise, the value will remain unchanged. This value may not be `true` if the subscription contains items with plans that have `aggregate_usage=last_ever`. -}
    } deriving (Show, Eq, Generic)

instance FromJSON SubscriptionBillingThresholds where
  parseJSON = withObject "SubscriptionBillingThresholds" parseCtors
    where
      parseCtors o = parseSubscriptionBillingThresholds o
      parseSubscriptionBillingThresholds o = do
        subscriptionBillingThresholds__amountGte <- o .:? "amount_gte"
        subscriptionBillingThresholds__resetBillingCycleAnchor <- o .:? "reset_billing_cycle_anchor"
        pure SubscriptionBillingThresholds{..}

instance ToJSON SubscriptionBillingThresholds where
  toJSON SubscriptionBillingThresholds{..} = object
    (
      (fmap ("amount_gte" .=) subscriptionBillingThresholds__amountGte) >?>
      (fmap ("reset_billing_cycle_anchor" .=) subscriptionBillingThresholds__resetBillingCycleAnchor) >?>
      []
    )
  toEncoding SubscriptionBillingThresholds{..} = pairs (
      maybe mempty ("amount_gte" .=) subscriptionBillingThresholds__amountGte <>
      maybe mempty ("reset_billing_cycle_anchor" .=) subscriptionBillingThresholds__resetBillingCycleAnchor
      )

-- Describes: "subscription_item"

data SubscriptionItem
  = SubscriptionItem
    { subscriptionItem__id :: (Id SubscriptionItem)
    {- ^ Unique identifier for the object. -}
    , subscriptionItem__object :: SubscriptionItem_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , subscriptionItem__created :: Int
    {- ^ Time at which the object was created. Measured in seconds since the Unix epoch. -}
    , subscriptionItem__metadata :: Object
    {- ^ Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. -}
    , subscriptionItem__plan :: Plan
    , subscriptionItem__quantity :: Int
    {- ^ The [quantity](https://stripe.com/docs/subscriptions/quantities) of the plan to which the customer should be subscribed. -}
    , subscriptionItem__subscription :: Text
    {- ^ The `subscription` this `subscription_item` belongs to. -}
    , subscriptionItem__billingThresholds :: Maybe (Expandable '[Const (SubscriptionItemBillingThresholds)])
    {- ^ Define thresholds at which an invoice will be sent, and the related subscription advanced to a new billing period -}
    , subscriptionItem__taxRates :: Maybe (Vector (TaxRate))
    {- ^ The tax rates which apply to this `subscription_item`. When set, the `default_tax_rates` on the subscription do not apply to this `subscription_item`. -}
    } deriving (Show, Eq, Generic)

instance FromJSON SubscriptionItem where
  parseJSON = withObject "SubscriptionItem" parseCtors
    where
      parseCtors o = parseSubscriptionItem o
      parseSubscriptionItem o = do
        subscriptionItem__id <- o .: "id"
        subscriptionItem__object <- o .: "object"
        subscriptionItem__created <- o .: "created"
        subscriptionItem__metadata <- o .: "metadata"
        subscriptionItem__plan <- o .: "plan"
        subscriptionItem__quantity <- o .: "quantity"
        subscriptionItem__subscription <- o .: "subscription"
        subscriptionItem__billingThresholds <- o .:? "billing_thresholds"
        subscriptionItem__taxRates <- o .:? "tax_rates"
        pure SubscriptionItem{..}

instance ToJSON SubscriptionItem where
  toJSON SubscriptionItem{..} = object
    (
      ("id" .= subscriptionItem__id) :
      ("object" .= subscriptionItem__object) :
      ("created" .= subscriptionItem__created) :
      ("metadata" .= subscriptionItem__metadata) :
      ("plan" .= subscriptionItem__plan) :
      ("quantity" .= subscriptionItem__quantity) :
      ("subscription" .= subscriptionItem__subscription) :
      (fmap ("billing_thresholds" .=) subscriptionItem__billingThresholds) >?>
      (fmap ("tax_rates" .=) subscriptionItem__taxRates) >?>
      []
    )
  toEncoding SubscriptionItem{..} = pairs (
      "id" .= subscriptionItem__id <>
      "object" .= subscriptionItem__object <>
      "created" .= subscriptionItem__created <>
      "metadata" .= subscriptionItem__metadata <>
      "plan" .= subscriptionItem__plan <>
      "quantity" .= subscriptionItem__quantity <>
      "subscription" .= subscriptionItem__subscription <>
      maybe mempty ("billing_thresholds" .=) subscriptionItem__billingThresholds <>
      maybe mempty ("tax_rates" .=) subscriptionItem__taxRates
      )

-- Describes: "subscription_item_billing_thresholds"

data SubscriptionItemBillingThresholds
  = SubscriptionItemBillingThresholds
    { subscriptionItemBillingThresholds__usageGte :: Maybe (Int)
    {- ^ Usage threshold that triggers the subscription to create an invoice -}
    } deriving (Show, Eq, Generic)

instance FromJSON SubscriptionItemBillingThresholds where
  parseJSON = withObject "SubscriptionItemBillingThresholds" parseCtors
    where
      parseCtors o = parseSubscriptionItemBillingThresholds o
      parseSubscriptionItemBillingThresholds o = do
        subscriptionItemBillingThresholds__usageGte <- o .:? "usage_gte"
        pure SubscriptionItemBillingThresholds{..}

instance ToJSON SubscriptionItemBillingThresholds where
  toJSON SubscriptionItemBillingThresholds{..} = object
    (
      (fmap ("usage_gte" .=) subscriptionItemBillingThresholds__usageGte) >?>
      []
    )
  toEncoding SubscriptionItemBillingThresholds{..} = pairs (
      maybe mempty ("usage_gte" .=) subscriptionItemBillingThresholds__usageGte
      )

-- Describes: "subscription_schedule"

data SubscriptionSchedule
  = SubscriptionSchedule
    { subscriptionSchedule__id :: (Id SubscriptionSchedule)
    {- ^ Unique identifier for the object. -}
    , subscriptionSchedule__object :: SubscriptionSchedule_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , subscriptionSchedule__livemode :: Bool
    {- ^ Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. -}
    , subscriptionSchedule__created :: POSIXTime
    {- ^ Time at which the object was created. Measured in seconds since the Unix epoch. -}
    , subscriptionSchedule__customer :: Expandable '[Const (Customer), Const (DeletedCustomer)]
    {- ^ ID of the customer who owns the subscription schedule. -}
    , subscriptionSchedule__phases :: Vector (SubscriptionSchedulePhaseConfiguration)
    {- ^ Configuration for the subscription schedule's phases. -}
    , subscriptionSchedule__status :: SubscriptionSchedule_Status
    {- ^ Possible values are `not_started`, `active`, `completed`, `released`, and `canceled`. -}
    , subscriptionSchedule__billing :: Maybe (SubscriptionSchedule_Billing)
    {- ^ This field has been renamed to `collection_method` and will be removed in a future API version. -}
    , subscriptionSchedule__billingThresholds :: Maybe (Expandable '[Const (SubscriptionBillingThresholds)])
    {- ^ Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period -}
    , subscriptionSchedule__canceledAt :: Maybe (POSIXTime)
    {- ^ Time at which the subscription schedule was canceled. Measured in seconds since the Unix epoch. -}
    , subscriptionSchedule__collectionMethod :: Maybe (SubscriptionSchedule_CollectionMethod)
    {- ^ Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay the underlying subscription at the end of each billing cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions. -}
    , subscriptionSchedule__completedAt :: Maybe (POSIXTime)
    {- ^ Time at which the subscription schedule was completed. Measured in seconds since the Unix epoch. -}
    , subscriptionSchedule__currentPhase :: Maybe (Expandable '[Const (SubscriptionScheduleCurrentPhase)])
    {- ^ Object representing the start and end dates for the current phase of the subscription schedule, if it is `active`. -}
    , subscriptionSchedule__defaultPaymentMethod :: Maybe (Expandable '[Const (PaymentMethod)])
    {- ^ ID of the default payment method for the subscription schedule. It must belong to the customer associated with the subscription schedule. If not set, invoices will use the default payment method in the customer's invoice settings. -}
    , subscriptionSchedule__endBehavior :: Maybe (SubscriptionSchedule_EndBehavior)
    {- ^ Behavior of the subscription schedule and underlying subscription when it ends. -}
    , subscriptionSchedule__invoiceSettings :: Maybe (Expandable '[Const (InvoiceSettingSubscriptionScheduleSetting)])
    {- ^ The subscription schedule's default invoice settings. -}
    , subscriptionSchedule__metadata :: Maybe (Object)
    {- ^ Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. -}
    , subscriptionSchedule__releasedAt :: Maybe (POSIXTime)
    {- ^ Time at which the subscription schedule was released. Measured in seconds since the Unix epoch. -}
    , subscriptionSchedule__releasedSubscription :: Maybe (Text)
    {- ^ ID of the subscription once managed by the subscription schedule (if it is released). -}
    , subscriptionSchedule__renewalBehavior :: Maybe (SubscriptionSchedule_RenewalBehavior)
    {- ^ Behavior of the subscription schedule and underlying subscription when it ends. -}
    , subscriptionSchedule__renewalInterval :: Maybe (Expandable '[Const (SubscriptionScheduleRenewalInterval)])
    {- ^ Interval and duration at which the subscription schedule renews for when it ends if `renewal_behavior` is `renew`. -}
    , subscriptionSchedule__subscription :: Maybe (Expandable '[Const (Subscription)])
    {- ^ ID of the subscription managed by the subscription schedule. -}
    } deriving (Show, Eq, Generic)

instance FromJSON SubscriptionSchedule where
  parseJSON = withObject "SubscriptionSchedule" parseCtors
    where
      parseCtors o = parseSubscriptionSchedule o
      parseSubscriptionSchedule o = do
        subscriptionSchedule__id <- o .: "id"
        subscriptionSchedule__object <- o .: "object"
        subscriptionSchedule__livemode <- o .: "livemode"
        subscriptionSchedule__created <- o .: "created"
        subscriptionSchedule__customer <- o .: "customer"
        subscriptionSchedule__phases <- o .: "phases"
        subscriptionSchedule__status <- o .: "status"
        subscriptionSchedule__billing <- o .:? "billing"
        subscriptionSchedule__billingThresholds <- o .:? "billing_thresholds"
        subscriptionSchedule__canceledAt <- o .:? "canceled_at"
        subscriptionSchedule__collectionMethod <- o .:? "collection_method"
        subscriptionSchedule__completedAt <- o .:? "completed_at"
        subscriptionSchedule__currentPhase <- o .:? "current_phase"
        subscriptionSchedule__defaultPaymentMethod <- o .:? "default_payment_method"
        subscriptionSchedule__endBehavior <- o .:? "end_behavior"
        subscriptionSchedule__invoiceSettings <- o .:? "invoice_settings"
        subscriptionSchedule__metadata <- o .:? "metadata"
        subscriptionSchedule__releasedAt <- o .:? "released_at"
        subscriptionSchedule__releasedSubscription <- o .:? "released_subscription"
        subscriptionSchedule__renewalBehavior <- o .:? "renewal_behavior"
        subscriptionSchedule__renewalInterval <- o .:? "renewal_interval"
        subscriptionSchedule__subscription <- o .:? "subscription"
        pure SubscriptionSchedule{..}

instance ToJSON SubscriptionSchedule where
  toJSON SubscriptionSchedule{..} = object
    (
      ("id" .= subscriptionSchedule__id) :
      ("object" .= subscriptionSchedule__object) :
      ("livemode" .= subscriptionSchedule__livemode) :
      ("created" .= subscriptionSchedule__created) :
      ("customer" .= subscriptionSchedule__customer) :
      ("phases" .= subscriptionSchedule__phases) :
      ("status" .= subscriptionSchedule__status) :
      (fmap ("billing" .=) subscriptionSchedule__billing) >?>
      (fmap ("billing_thresholds" .=) subscriptionSchedule__billingThresholds) >?>
      (fmap ("canceled_at" .=) subscriptionSchedule__canceledAt) >?>
      (fmap ("collection_method" .=) subscriptionSchedule__collectionMethod) >?>
      (fmap ("completed_at" .=) subscriptionSchedule__completedAt) >?>
      (fmap ("current_phase" .=) subscriptionSchedule__currentPhase) >?>
      (fmap ("default_payment_method" .=) subscriptionSchedule__defaultPaymentMethod) >?>
      (fmap ("end_behavior" .=) subscriptionSchedule__endBehavior) >?>
      (fmap ("invoice_settings" .=) subscriptionSchedule__invoiceSettings) >?>
      (fmap ("metadata" .=) subscriptionSchedule__metadata) >?>
      (fmap ("released_at" .=) subscriptionSchedule__releasedAt) >?>
      (fmap ("released_subscription" .=) subscriptionSchedule__releasedSubscription) >?>
      (fmap ("renewal_behavior" .=) subscriptionSchedule__renewalBehavior) >?>
      (fmap ("renewal_interval" .=) subscriptionSchedule__renewalInterval) >?>
      (fmap ("subscription" .=) subscriptionSchedule__subscription) >?>
      []
    )
  toEncoding SubscriptionSchedule{..} = pairs (
      "id" .= subscriptionSchedule__id <>
      "object" .= subscriptionSchedule__object <>
      "livemode" .= subscriptionSchedule__livemode <>
      "created" .= subscriptionSchedule__created <>
      "customer" .= subscriptionSchedule__customer <>
      "phases" .= subscriptionSchedule__phases <>
      "status" .= subscriptionSchedule__status <>
      maybe mempty ("billing" .=) subscriptionSchedule__billing <>
      maybe mempty ("billing_thresholds" .=) subscriptionSchedule__billingThresholds <>
      maybe mempty ("canceled_at" .=) subscriptionSchedule__canceledAt <>
      maybe mempty ("collection_method" .=) subscriptionSchedule__collectionMethod <>
      maybe mempty ("completed_at" .=) subscriptionSchedule__completedAt <>
      maybe mempty ("current_phase" .=) subscriptionSchedule__currentPhase <>
      maybe mempty ("default_payment_method" .=) subscriptionSchedule__defaultPaymentMethod <>
      maybe mempty ("end_behavior" .=) subscriptionSchedule__endBehavior <>
      maybe mempty ("invoice_settings" .=) subscriptionSchedule__invoiceSettings <>
      maybe mempty ("metadata" .=) subscriptionSchedule__metadata <>
      maybe mempty ("released_at" .=) subscriptionSchedule__releasedAt <>
      maybe mempty ("released_subscription" .=) subscriptionSchedule__releasedSubscription <>
      maybe mempty ("renewal_behavior" .=) subscriptionSchedule__renewalBehavior <>
      maybe mempty ("renewal_interval" .=) subscriptionSchedule__renewalInterval <>
      maybe mempty ("subscription" .=) subscriptionSchedule__subscription
      )

-- Describes: "subscription_schedule_configuration_item"

data SubscriptionScheduleConfigurationItem
  = SubscriptionScheduleConfigurationItem
    { subscriptionScheduleConfigurationItem__plan :: Expandable '[Const (Plan), Const (DeletedPlan)]
    {- ^ ID of the plan to which the customer should be subscribed. -}
    , subscriptionScheduleConfigurationItem__billingThresholds :: Maybe (Expandable '[Const (SubscriptionItemBillingThresholds)])
    {- ^ Define thresholds at which an invoice will be sent, and the related subscription advanced to a new billing period -}
    , subscriptionScheduleConfigurationItem__quantity :: Maybe (Int)
    {- ^ Quantity of the plan to which the customer should be subscribed. -}
    , subscriptionScheduleConfigurationItem__taxRates :: Maybe (Vector (TaxRate))
    {- ^ The tax rates which apply to this `phase_item`. When set, the `default_tax_rates` on the phase do not apply to this `phase_item`. -}
    } deriving (Show, Eq, Generic)

instance FromJSON SubscriptionScheduleConfigurationItem where
  parseJSON = withObject "SubscriptionScheduleConfigurationItem" parseCtors
    where
      parseCtors o = parseSubscriptionScheduleConfigurationItem o
      parseSubscriptionScheduleConfigurationItem o = do
        subscriptionScheduleConfigurationItem__plan <- o .: "plan"
        subscriptionScheduleConfigurationItem__billingThresholds <- o .:? "billing_thresholds"
        subscriptionScheduleConfigurationItem__quantity <- o .:? "quantity"
        subscriptionScheduleConfigurationItem__taxRates <- o .:? "tax_rates"
        pure SubscriptionScheduleConfigurationItem{..}

instance ToJSON SubscriptionScheduleConfigurationItem where
  toJSON SubscriptionScheduleConfigurationItem{..} = object
    (
      ("plan" .= subscriptionScheduleConfigurationItem__plan) :
      (fmap ("billing_thresholds" .=) subscriptionScheduleConfigurationItem__billingThresholds) >?>
      (fmap ("quantity" .=) subscriptionScheduleConfigurationItem__quantity) >?>
      (fmap ("tax_rates" .=) subscriptionScheduleConfigurationItem__taxRates) >?>
      []
    )
  toEncoding SubscriptionScheduleConfigurationItem{..} = pairs (
      "plan" .= subscriptionScheduleConfigurationItem__plan <>
      maybe mempty ("billing_thresholds" .=) subscriptionScheduleConfigurationItem__billingThresholds <>
      maybe mempty ("quantity" .=) subscriptionScheduleConfigurationItem__quantity <>
      maybe mempty ("tax_rates" .=) subscriptionScheduleConfigurationItem__taxRates
      )

-- Describes: "subscription_schedule_current_phase"

data SubscriptionScheduleCurrentPhase
  = SubscriptionScheduleCurrentPhase
    { subscriptionScheduleCurrentPhase__endDate :: POSIXTime
    , subscriptionScheduleCurrentPhase__startDate :: POSIXTime
    } deriving (Show, Eq, Generic)

instance FromJSON SubscriptionScheduleCurrentPhase where
  parseJSON = withObject "SubscriptionScheduleCurrentPhase" parseCtors
    where
      parseCtors o = parseSubscriptionScheduleCurrentPhase o
      parseSubscriptionScheduleCurrentPhase o = do
        subscriptionScheduleCurrentPhase__endDate <- o .: "end_date"
        subscriptionScheduleCurrentPhase__startDate <- o .: "start_date"
        pure SubscriptionScheduleCurrentPhase{..}

instance ToJSON SubscriptionScheduleCurrentPhase where
  toJSON SubscriptionScheduleCurrentPhase{..} = object
    (
      ("end_date" .= subscriptionScheduleCurrentPhase__endDate) :
      ("start_date" .= subscriptionScheduleCurrentPhase__startDate) :
      []
    )
  toEncoding SubscriptionScheduleCurrentPhase{..} = pairs (
      "end_date" .= subscriptionScheduleCurrentPhase__endDate <>
      "start_date" .= subscriptionScheduleCurrentPhase__startDate
      )

-- Describes: "subscription_schedule_phase_configuration"

data SubscriptionSchedulePhaseConfiguration
  = SubscriptionSchedulePhaseConfiguration
    { subscriptionSchedulePhaseConfiguration__endDate :: POSIXTime
    {- ^ The end of this phase of the subscription schedule. -}
    , subscriptionSchedulePhaseConfiguration__plans :: Vector (SubscriptionScheduleConfigurationItem)
    {- ^ Plans to subscribe during this phase of the subscription schedule. -}
    , subscriptionSchedulePhaseConfiguration__startDate :: POSIXTime
    {- ^ The start of this phase of the subscription schedule. -}
    , subscriptionSchedulePhaseConfiguration__applicationFeePercent :: Maybe (Scientific)
    {- ^ A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account during this phase of the schedule. -}
    , subscriptionSchedulePhaseConfiguration__billingThresholds :: Maybe (Expandable '[Const (SubscriptionBillingThresholds)])
    {- ^ Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period -}
    , subscriptionSchedulePhaseConfiguration__collectionMethod :: Maybe (SubscriptionSchedulePhaseConfiguration_CollectionMethod)
    {- ^ Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay the underlying subscription at the end of each billing cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions. -}
    , subscriptionSchedulePhaseConfiguration__coupon :: Maybe (Expandable '[Const (Coupon)])
    {- ^ ID of the coupon to use during this phase of the subscription schedule. -}
    , subscriptionSchedulePhaseConfiguration__defaultPaymentMethod :: Maybe (Expandable '[Const (PaymentMethod)])
    {- ^ ID of the default payment method for the subscription schedule. It must belong to the customer associated with the subscription schedule. If not set, invoices will use the default payment method in the customer's invoice settings. -}
    , subscriptionSchedulePhaseConfiguration__defaultTaxRates :: Maybe (Vector (TaxRate))
    , subscriptionSchedulePhaseConfiguration__invoiceSettings :: Maybe (Expandable '[Const (InvoiceSettingSubscriptionScheduleSetting)])
    {- ^ The subscription schedule's default invoice settings. -}
    , subscriptionSchedulePhaseConfiguration__taxPercent :: Maybe (Scientific)
    {- ^ If provided, each invoice created during this phase of the subscription schedule will apply the tax rate, increasing the amount billed to the customer. -}
    , subscriptionSchedulePhaseConfiguration__trialEnd :: Maybe (POSIXTime)
    {- ^ When the trial ends within the phase. -}
    } deriving (Show, Eq, Generic)

instance FromJSON SubscriptionSchedulePhaseConfiguration where
  parseJSON = withObject "SubscriptionSchedulePhaseConfiguration" parseCtors
    where
      parseCtors o = parseSubscriptionSchedulePhaseConfiguration o
      parseSubscriptionSchedulePhaseConfiguration o = do
        subscriptionSchedulePhaseConfiguration__endDate <- o .: "end_date"
        subscriptionSchedulePhaseConfiguration__plans <- o .: "plans"
        subscriptionSchedulePhaseConfiguration__startDate <- o .: "start_date"
        subscriptionSchedulePhaseConfiguration__applicationFeePercent <- o .:? "application_fee_percent"
        subscriptionSchedulePhaseConfiguration__billingThresholds <- o .:? "billing_thresholds"
        subscriptionSchedulePhaseConfiguration__collectionMethod <- o .:? "collection_method"
        subscriptionSchedulePhaseConfiguration__coupon <- o .:? "coupon"
        subscriptionSchedulePhaseConfiguration__defaultPaymentMethod <- o .:? "default_payment_method"
        subscriptionSchedulePhaseConfiguration__defaultTaxRates <- o .:? "default_tax_rates"
        subscriptionSchedulePhaseConfiguration__invoiceSettings <- o .:? "invoice_settings"
        subscriptionSchedulePhaseConfiguration__taxPercent <- o .:? "tax_percent"
        subscriptionSchedulePhaseConfiguration__trialEnd <- o .:? "trial_end"
        pure SubscriptionSchedulePhaseConfiguration{..}

instance ToJSON SubscriptionSchedulePhaseConfiguration where
  toJSON SubscriptionSchedulePhaseConfiguration{..} = object
    (
      ("end_date" .= subscriptionSchedulePhaseConfiguration__endDate) :
      ("plans" .= subscriptionSchedulePhaseConfiguration__plans) :
      ("start_date" .= subscriptionSchedulePhaseConfiguration__startDate) :
      (fmap ("application_fee_percent" .=) subscriptionSchedulePhaseConfiguration__applicationFeePercent) >?>
      (fmap ("billing_thresholds" .=) subscriptionSchedulePhaseConfiguration__billingThresholds) >?>
      (fmap ("collection_method" .=) subscriptionSchedulePhaseConfiguration__collectionMethod) >?>
      (fmap ("coupon" .=) subscriptionSchedulePhaseConfiguration__coupon) >?>
      (fmap ("default_payment_method" .=) subscriptionSchedulePhaseConfiguration__defaultPaymentMethod) >?>
      (fmap ("default_tax_rates" .=) subscriptionSchedulePhaseConfiguration__defaultTaxRates) >?>
      (fmap ("invoice_settings" .=) subscriptionSchedulePhaseConfiguration__invoiceSettings) >?>
      (fmap ("tax_percent" .=) subscriptionSchedulePhaseConfiguration__taxPercent) >?>
      (fmap ("trial_end" .=) subscriptionSchedulePhaseConfiguration__trialEnd) >?>
      []
    )
  toEncoding SubscriptionSchedulePhaseConfiguration{..} = pairs (
      "end_date" .= subscriptionSchedulePhaseConfiguration__endDate <>
      "plans" .= subscriptionSchedulePhaseConfiguration__plans <>
      "start_date" .= subscriptionSchedulePhaseConfiguration__startDate <>
      maybe mempty ("application_fee_percent" .=) subscriptionSchedulePhaseConfiguration__applicationFeePercent <>
      maybe mempty ("billing_thresholds" .=) subscriptionSchedulePhaseConfiguration__billingThresholds <>
      maybe mempty ("collection_method" .=) subscriptionSchedulePhaseConfiguration__collectionMethod <>
      maybe mempty ("coupon" .=) subscriptionSchedulePhaseConfiguration__coupon <>
      maybe mempty ("default_payment_method" .=) subscriptionSchedulePhaseConfiguration__defaultPaymentMethod <>
      maybe mempty ("default_tax_rates" .=) subscriptionSchedulePhaseConfiguration__defaultTaxRates <>
      maybe mempty ("invoice_settings" .=) subscriptionSchedulePhaseConfiguration__invoiceSettings <>
      maybe mempty ("tax_percent" .=) subscriptionSchedulePhaseConfiguration__taxPercent <>
      maybe mempty ("trial_end" .=) subscriptionSchedulePhaseConfiguration__trialEnd
      )

-- Describes: "subscription_schedule_renewal_interval"

data SubscriptionScheduleRenewalInterval
  = SubscriptionScheduleRenewalInterval
    { subscriptionScheduleRenewalInterval__interval :: SubscriptionScheduleRenewalInterval_Interval
    {- ^ Interval at which to renew the subscription schedule for when it ends. -}
    , subscriptionScheduleRenewalInterval__length :: Int
    {- ^ Number of intervals to renew the subscription schedule for when it ends. -}
    } deriving (Show, Eq, Generic)

instance FromJSON SubscriptionScheduleRenewalInterval where
  parseJSON = withObject "SubscriptionScheduleRenewalInterval" parseCtors
    where
      parseCtors o = parseSubscriptionScheduleRenewalInterval o
      parseSubscriptionScheduleRenewalInterval o = do
        subscriptionScheduleRenewalInterval__interval <- o .: "interval"
        subscriptionScheduleRenewalInterval__length <- o .: "length"
        pure SubscriptionScheduleRenewalInterval{..}

instance ToJSON SubscriptionScheduleRenewalInterval where
  toJSON SubscriptionScheduleRenewalInterval{..} = object
    (
      ("interval" .= subscriptionScheduleRenewalInterval__interval) :
      ("length" .= subscriptionScheduleRenewalInterval__length) :
      []
    )
  toEncoding SubscriptionScheduleRenewalInterval{..} = pairs (
      "interval" .= subscriptionScheduleRenewalInterval__interval <>
      "length" .= subscriptionScheduleRenewalInterval__length
      )

-- Describes: "tax_id"

data TaxId
  = TaxId
    { taxId__id :: (Id TaxId)
    {- ^ Unique identifier for the object. -}
    , taxId__object :: TaxId_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , taxId__livemode :: Bool
    {- ^ Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. -}
    , taxId__created :: POSIXTime
    {- ^ Time at which the object was created. Measured in seconds since the Unix epoch. -}
    , taxId__customer :: Expandable '[Const (Customer)]
    {- ^ ID of the customer. -}
    , taxId__type :: TaxId_Type
    {- ^ Type of the tax ID, one of `au_abn`, `eu_vat`, `in_gst`, `no_vat`, `nz_gst`, or `unknown` -}
    , taxId__value :: Text
    {- ^ Value of the tax ID. -}
    , taxId__verification :: TaxIdVerification
    , taxId__country :: Maybe (Text)
    {- ^ Two-letter ISO code representing the country of the tax ID. -}
    } deriving (Show, Eq, Generic)

instance FromJSON TaxId where
  parseJSON = withObject "TaxId" parseCtors
    where
      parseCtors o = parseTaxId o
      parseTaxId o = do
        taxId__id <- o .: "id"
        taxId__object <- o .: "object"
        taxId__livemode <- o .: "livemode"
        taxId__created <- o .: "created"
        taxId__customer <- o .: "customer"
        taxId__type <- o .: "type"
        taxId__value <- o .: "value"
        taxId__verification <- o .: "verification"
        taxId__country <- o .:? "country"
        pure TaxId{..}

instance ToJSON TaxId where
  toJSON TaxId{..} = object
    (
      ("id" .= taxId__id) :
      ("object" .= taxId__object) :
      ("livemode" .= taxId__livemode) :
      ("created" .= taxId__created) :
      ("customer" .= taxId__customer) :
      ("type" .= taxId__type) :
      ("value" .= taxId__value) :
      ("verification" .= taxId__verification) :
      (fmap ("country" .=) taxId__country) >?>
      []
    )
  toEncoding TaxId{..} = pairs (
      "id" .= taxId__id <>
      "object" .= taxId__object <>
      "livemode" .= taxId__livemode <>
      "created" .= taxId__created <>
      "customer" .= taxId__customer <>
      "type" .= taxId__type <>
      "value" .= taxId__value <>
      "verification" .= taxId__verification <>
      maybe mempty ("country" .=) taxId__country
      )

-- Describes: "tax_id_verification"

data TaxIdVerification
  = TaxIdVerification
    { taxIdVerification__status :: TaxIdVerification_Status
    {- ^ Verification status, one of `pending`, `unavailable`, `unverified`, or `verified`. -}
    , taxIdVerification__verifiedAddress :: Maybe (Text)
    {- ^ Verified address. -}
    , taxIdVerification__verifiedName :: Maybe (Text)
    {- ^ Verified name. -}
    } deriving (Show, Eq, Generic)

instance FromJSON TaxIdVerification where
  parseJSON = withObject "TaxIdVerification" parseCtors
    where
      parseCtors o = parseTaxIdVerification o
      parseTaxIdVerification o = do
        taxIdVerification__status <- o .: "status"
        taxIdVerification__verifiedAddress <- o .:? "verified_address"
        taxIdVerification__verifiedName <- o .:? "verified_name"
        pure TaxIdVerification{..}

instance ToJSON TaxIdVerification where
  toJSON TaxIdVerification{..} = object
    (
      ("status" .= taxIdVerification__status) :
      (fmap ("verified_address" .=) taxIdVerification__verifiedAddress) >?>
      (fmap ("verified_name" .=) taxIdVerification__verifiedName) >?>
      []
    )
  toEncoding TaxIdVerification{..} = pairs (
      "status" .= taxIdVerification__status <>
      maybe mempty ("verified_address" .=) taxIdVerification__verifiedAddress <>
      maybe mempty ("verified_name" .=) taxIdVerification__verifiedName
      )

-- Describes: "tax_info"

data TaxInfo
  = TaxInfo
    { taxInfo__type :: Text
    {- ^ The type of ID number. -}
    , taxInfo__taxId :: Maybe (Text)
    {- ^ The customer's tax ID number. -}
    } deriving (Show, Eq, Generic)

instance FromJSON TaxInfo where
  parseJSON = withObject "TaxInfo" parseCtors
    where
      parseCtors o = parseTaxInfo o
      parseTaxInfo o = do
        taxInfo__type <- o .: "type"
        taxInfo__taxId <- o .:? "tax_id"
        pure TaxInfo{..}

instance ToJSON TaxInfo where
  toJSON TaxInfo{..} = object
    (
      ("type" .= taxInfo__type) :
      (fmap ("tax_id" .=) taxInfo__taxId) >?>
      []
    )
  toEncoding TaxInfo{..} = pairs (
      "type" .= taxInfo__type <>
      maybe mempty ("tax_id" .=) taxInfo__taxId
      )

-- Describes: "tax_info_verification"

data TaxInfoVerification
  = TaxInfoVerification
    { taxInfoVerification__status :: Maybe (Text)
    {- ^ The state of verification for this customer. Possible values are `unverified`, `pending`, or `verified`. -}
    , taxInfoVerification__verifiedName :: Maybe (Text)
    {- ^ The official name associated with the tax ID returned from the external provider. -}
    } deriving (Show, Eq, Generic)

instance FromJSON TaxInfoVerification where
  parseJSON = withObject "TaxInfoVerification" parseCtors
    where
      parseCtors o = parseTaxInfoVerification o
      parseTaxInfoVerification o = do
        taxInfoVerification__status <- o .:? "status"
        taxInfoVerification__verifiedName <- o .:? "verified_name"
        pure TaxInfoVerification{..}

instance ToJSON TaxInfoVerification where
  toJSON TaxInfoVerification{..} = object
    (
      (fmap ("status" .=) taxInfoVerification__status) >?>
      (fmap ("verified_name" .=) taxInfoVerification__verifiedName) >?>
      []
    )
  toEncoding TaxInfoVerification{..} = pairs (
      maybe mempty ("status" .=) taxInfoVerification__status <>
      maybe mempty ("verified_name" .=) taxInfoVerification__verifiedName
      )

-- Describes: "tax_rate"

data TaxRate
  = TaxRate
    { taxRate__id :: (Id TaxRate)
    {- ^ Unique identifier for the object. -}
    , taxRate__object :: TaxRate_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , taxRate__livemode :: Bool
    {- ^ Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. -}
    , taxRate__active :: Bool
    {- ^ Defaults to `true`. When set to `false`, this tax rate cannot be applied to objects in the API, but will still be applied to subscriptions and invoices that already have it set. -}
    , taxRate__created :: POSIXTime
    {- ^ Time at which the object was created. Measured in seconds since the Unix epoch. -}
    , taxRate__displayName :: Text
    {- ^ The display name of the tax rates as it will appear to your customer on their receipt email, PDF, and the hosted invoice page. -}
    , taxRate__inclusive :: Bool
    {- ^ This specifies if the tax rate is inclusive or exclusive. -}
    , taxRate__metadata :: Object
    {- ^ Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. -}
    , taxRate__percentage :: Scientific
    {- ^ This represents the tax rate percent out of 100. -}
    , taxRate__description :: Maybe (Text)
    {- ^ An arbitrary string attached to the tax rate for your internal use only. It will not be visible to your customers. -}
    , taxRate__jurisdiction :: Maybe (Text)
    {- ^ The jurisdiction for the tax rate. -}
    } deriving (Show, Eq, Generic)

instance FromJSON TaxRate where
  parseJSON = withObject "TaxRate" parseCtors
    where
      parseCtors o = parseTaxRate o
      parseTaxRate o = do
        taxRate__id <- o .: "id"
        taxRate__object <- o .: "object"
        taxRate__livemode <- o .: "livemode"
        taxRate__active <- o .: "active"
        taxRate__created <- o .: "created"
        taxRate__displayName <- o .: "display_name"
        taxRate__inclusive <- o .: "inclusive"
        taxRate__metadata <- o .: "metadata"
        taxRate__percentage <- o .: "percentage"
        taxRate__description <- o .:? "description"
        taxRate__jurisdiction <- o .:? "jurisdiction"
        pure TaxRate{..}

instance ToJSON TaxRate where
  toJSON TaxRate{..} = object
    (
      ("id" .= taxRate__id) :
      ("object" .= taxRate__object) :
      ("livemode" .= taxRate__livemode) :
      ("active" .= taxRate__active) :
      ("created" .= taxRate__created) :
      ("display_name" .= taxRate__displayName) :
      ("inclusive" .= taxRate__inclusive) :
      ("metadata" .= taxRate__metadata) :
      ("percentage" .= taxRate__percentage) :
      (fmap ("description" .=) taxRate__description) >?>
      (fmap ("jurisdiction" .=) taxRate__jurisdiction) >?>
      []
    )
  toEncoding TaxRate{..} = pairs (
      "id" .= taxRate__id <>
      "object" .= taxRate__object <>
      "livemode" .= taxRate__livemode <>
      "active" .= taxRate__active <>
      "created" .= taxRate__created <>
      "display_name" .= taxRate__displayName <>
      "inclusive" .= taxRate__inclusive <>
      "metadata" .= taxRate__metadata <>
      "percentage" .= taxRate__percentage <>
      maybe mempty ("description" .=) taxRate__description <>
      maybe mempty ("jurisdiction" .=) taxRate__jurisdiction
      )

-- Describes: "terminal.connection_token"

data Terminal_ConnectionToken
  = Terminal_ConnectionToken
    { terminal_connectionToken__object :: Terminal_ConnectionToken_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , terminal_connectionToken__location :: Text
    {- ^ The id of the location that this connection token is scoped to. -}
    , terminal_connectionToken__secret :: Text
    {- ^ Your application should pass this token to the Stripe Terminal SDK. -}
    } deriving (Show, Eq, Generic)

instance FromJSON Terminal_ConnectionToken where
  parseJSON = withObject "Terminal_ConnectionToken" parseCtors
    where
      parseCtors o = parseTerminal_ConnectionToken o
      parseTerminal_ConnectionToken o = do
        terminal_connectionToken__object <- o .: "object"
        terminal_connectionToken__location <- o .: "location"
        terminal_connectionToken__secret <- o .: "secret"
        pure Terminal_ConnectionToken{..}

instance ToJSON Terminal_ConnectionToken where
  toJSON Terminal_ConnectionToken{..} = object
    (
      ("object" .= terminal_connectionToken__object) :
      ("location" .= terminal_connectionToken__location) :
      ("secret" .= terminal_connectionToken__secret) :
      []
    )
  toEncoding Terminal_ConnectionToken{..} = pairs (
      "object" .= terminal_connectionToken__object <>
      "location" .= terminal_connectionToken__location <>
      "secret" .= terminal_connectionToken__secret
      )

-- Describes: "terminal.location"

data Terminal_Location
  = Terminal_Location
    { terminal_location__id :: (Id Terminal_Location)
    {- ^ Unique identifier for the object. -}
    , terminal_location__object :: Terminal_Location_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , terminal_location__address :: Address
    , terminal_location__displayName :: Text
    {- ^ The display name of the location. -}
    } deriving (Show, Eq, Generic)

instance FromJSON Terminal_Location where
  parseJSON = withObject "Terminal_Location" parseCtors
    where
      parseCtors o = parseTerminal_Location o
      parseTerminal_Location o = do
        terminal_location__id <- o .: "id"
        terminal_location__object <- o .: "object"
        terminal_location__address <- o .: "address"
        terminal_location__displayName <- o .: "display_name"
        pure Terminal_Location{..}

instance ToJSON Terminal_Location where
  toJSON Terminal_Location{..} = object
    (
      ("id" .= terminal_location__id) :
      ("object" .= terminal_location__object) :
      ("address" .= terminal_location__address) :
      ("display_name" .= terminal_location__displayName) :
      []
    )
  toEncoding Terminal_Location{..} = pairs (
      "id" .= terminal_location__id <>
      "object" .= terminal_location__object <>
      "address" .= terminal_location__address <>
      "display_name" .= terminal_location__displayName
      )

-- Describes: "terminal.reader"

data Terminal_Reader
  = Terminal_Reader
    { terminal_reader__id :: (Id Terminal_Reader)
    {- ^ Unique identifier for the object. -}
    , terminal_reader__object :: Terminal_Reader_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , terminal_reader__deviceType :: Text
    {- ^ Type of reader, e.g., `verifone_P400` or `bbpos_chipper2x`. -}
    , terminal_reader__label :: Text
    {- ^ Custom label given to the reader for easier identification. -}
    , terminal_reader__serialNumber :: Text
    {- ^ Serial number of the reader. -}
    , terminal_reader__deviceSwVersion :: Maybe (Text)
    {- ^ The current software version of the reader. -}
    , terminal_reader__ipAddress :: Maybe (Text)
    {- ^ The local IP address of the reader. -}
    , terminal_reader__location :: Maybe (Text)
    {- ^ The location identifier of the reader. -}
    , terminal_reader__status :: Maybe (Text)
    {- ^ The networking status of the reader. -}
    } deriving (Show, Eq, Generic)

instance FromJSON Terminal_Reader where
  parseJSON = withObject "Terminal_Reader" parseCtors
    where
      parseCtors o = parseTerminal_Reader o
      parseTerminal_Reader o = do
        terminal_reader__id <- o .: "id"
        terminal_reader__object <- o .: "object"
        terminal_reader__deviceType <- o .: "device_type"
        terminal_reader__label <- o .: "label"
        terminal_reader__serialNumber <- o .: "serial_number"
        terminal_reader__deviceSwVersion <- o .:? "device_sw_version"
        terminal_reader__ipAddress <- o .:? "ip_address"
        terminal_reader__location <- o .:? "location"
        terminal_reader__status <- o .:? "status"
        pure Terminal_Reader{..}

instance ToJSON Terminal_Reader where
  toJSON Terminal_Reader{..} = object
    (
      ("id" .= terminal_reader__id) :
      ("object" .= terminal_reader__object) :
      ("device_type" .= terminal_reader__deviceType) :
      ("label" .= terminal_reader__label) :
      ("serial_number" .= terminal_reader__serialNumber) :
      (fmap ("device_sw_version" .=) terminal_reader__deviceSwVersion) >?>
      (fmap ("ip_address" .=) terminal_reader__ipAddress) >?>
      (fmap ("location" .=) terminal_reader__location) >?>
      (fmap ("status" .=) terminal_reader__status) >?>
      []
    )
  toEncoding Terminal_Reader{..} = pairs (
      "id" .= terminal_reader__id <>
      "object" .= terminal_reader__object <>
      "device_type" .= terminal_reader__deviceType <>
      "label" .= terminal_reader__label <>
      "serial_number" .= terminal_reader__serialNumber <>
      maybe mempty ("device_sw_version" .=) terminal_reader__deviceSwVersion <>
      maybe mempty ("ip_address" .=) terminal_reader__ipAddress <>
      maybe mempty ("location" .=) terminal_reader__location <>
      maybe mempty ("status" .=) terminal_reader__status
      )

-- Describes: "three_d_secure"

data ThreeDSecure
  = ThreeDSecure
    { threeDSecure__id :: (Id ThreeDSecure)
    {- ^ Unique identifier for the object. -}
    , threeDSecure__object :: ThreeDSecure_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , threeDSecure__livemode :: Bool
    {- ^ Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. -}
    , threeDSecure__amount :: Int
    , threeDSecure__authenticated :: Bool
    {- ^ True if the cardholder went through the authentication flow and their bank indicated that authentication succeeded. -}
    , threeDSecure__card :: Card
    , threeDSecure__created :: POSIXTime
    {- ^ Time at which the object was created. Measured in seconds since the Unix epoch. -}
    , threeDSecure__currency :: Text
    {- ^ Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). -}
    , threeDSecure__status :: Text
    {- ^ Possible values are `redirect_pending`, `succeeded`, or `failed`. When the cardholder can be authenticated, the object starts with status `redirect_pending`. When liability will be shifted to the cardholder's bank (either because the cardholder was successfully authenticated, or because the bank has not implemented 3D Secure, the object wlil be in status `succeeded`. `failed` indicates that authentication was attempted unsuccessfully. -}
    , threeDSecure__redirectUrl :: Maybe (Text)
    {- ^ If present, this is the URL that you should send the cardholder to for authentication. If you are going to use Stripe.js to display the authentication page in an iframe, you should use the value "_callback". -}
    } deriving (Show, Eq, Generic)

instance FromJSON ThreeDSecure where
  parseJSON = withObject "ThreeDSecure" parseCtors
    where
      parseCtors o = parseThreeDSecure o
      parseThreeDSecure o = do
        threeDSecure__id <- o .: "id"
        threeDSecure__object <- o .: "object"
        threeDSecure__livemode <- o .: "livemode"
        threeDSecure__amount <- o .: "amount"
        threeDSecure__authenticated <- o .: "authenticated"
        threeDSecure__card <- o .: "card"
        threeDSecure__created <- o .: "created"
        threeDSecure__currency <- o .: "currency"
        threeDSecure__status <- o .: "status"
        threeDSecure__redirectUrl <- o .:? "redirect_url"
        pure ThreeDSecure{..}

instance ToJSON ThreeDSecure where
  toJSON ThreeDSecure{..} = object
    (
      ("id" .= threeDSecure__id) :
      ("object" .= threeDSecure__object) :
      ("livemode" .= threeDSecure__livemode) :
      ("amount" .= threeDSecure__amount) :
      ("authenticated" .= threeDSecure__authenticated) :
      ("card" .= threeDSecure__card) :
      ("created" .= threeDSecure__created) :
      ("currency" .= threeDSecure__currency) :
      ("status" .= threeDSecure__status) :
      (fmap ("redirect_url" .=) threeDSecure__redirectUrl) >?>
      []
    )
  toEncoding ThreeDSecure{..} = pairs (
      "id" .= threeDSecure__id <>
      "object" .= threeDSecure__object <>
      "livemode" .= threeDSecure__livemode <>
      "amount" .= threeDSecure__amount <>
      "authenticated" .= threeDSecure__authenticated <>
      "card" .= threeDSecure__card <>
      "created" .= threeDSecure__created <>
      "currency" .= threeDSecure__currency <>
      "status" .= threeDSecure__status <>
      maybe mempty ("redirect_url" .=) threeDSecure__redirectUrl
      )

-- Describes: "three_d_secure_details"

data ThreeDSecureDetails
  = ThreeDSecureDetails
    { threeDSecureDetails__authenticated :: Bool
    {- ^ Whether or not authentication was performed. 3D Secure will succeed without authentication when the card is not enrolled. -}
    , threeDSecureDetails__succeeded :: Bool
    {- ^ Whether or not 3D Secure succeeded. -}
    , threeDSecureDetails__version :: Text
    {- ^ The version of 3D Secure that was used for this payment. -}
    } deriving (Show, Eq, Generic)

instance FromJSON ThreeDSecureDetails where
  parseJSON = withObject "ThreeDSecureDetails" parseCtors
    where
      parseCtors o = parseThreeDSecureDetails o
      parseThreeDSecureDetails o = do
        threeDSecureDetails__authenticated <- o .: "authenticated"
        threeDSecureDetails__succeeded <- o .: "succeeded"
        threeDSecureDetails__version <- o .: "version"
        pure ThreeDSecureDetails{..}

instance ToJSON ThreeDSecureDetails where
  toJSON ThreeDSecureDetails{..} = object
    (
      ("authenticated" .= threeDSecureDetails__authenticated) :
      ("succeeded" .= threeDSecureDetails__succeeded) :
      ("version" .= threeDSecureDetails__version) :
      []
    )
  toEncoding ThreeDSecureDetails{..} = pairs (
      "authenticated" .= threeDSecureDetails__authenticated <>
      "succeeded" .= threeDSecureDetails__succeeded <>
      "version" .= threeDSecureDetails__version
      )

-- Describes: "three_d_secure_usage"

data ThreeDSecureUsage
  = ThreeDSecureUsage
    { threeDSecureUsage__supported :: Bool
    {- ^ Whether 3D Secure is supported on this card. -}
    } deriving (Show, Eq, Generic)

instance FromJSON ThreeDSecureUsage where
  parseJSON = withObject "ThreeDSecureUsage" parseCtors
    where
      parseCtors o = parseThreeDSecureUsage o
      parseThreeDSecureUsage o = do
        threeDSecureUsage__supported <- o .: "supported"
        pure ThreeDSecureUsage{..}

instance ToJSON ThreeDSecureUsage where
  toJSON ThreeDSecureUsage{..} = object
    (
      ("supported" .= threeDSecureUsage__supported) :
      []
    )
  toEncoding ThreeDSecureUsage{..} = pairs (
      "supported" .= threeDSecureUsage__supported
      )

-- Describes: "token"

data Token
  = Token
    { token__id :: (Id Token)
    {- ^ Unique identifier for the object. -}
    , token__object :: Token_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , token__livemode :: Bool
    {- ^ Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. -}
    , token__bankAccount :: BankAccount
    , token__card :: Card
    , token__created :: POSIXTime
    {- ^ Time at which the object was created. Measured in seconds since the Unix epoch. -}
    , token__type :: Text
    {- ^ Type of the token: `account`, `bank_account`, `card`, or `pii`. -}
    , token__used :: Bool
    {- ^ Whether this token has already been used (tokens can be used only once). -}
    , token__clientIp :: Maybe (Text)
    {- ^ IP address of the client that generated the token. -}
    } deriving (Show, Eq, Generic)

instance FromJSON Token where
  parseJSON = withObject "Token" parseCtors
    where
      parseCtors o = parseToken o
      parseToken o = do
        token__id <- o .: "id"
        token__object <- o .: "object"
        token__livemode <- o .: "livemode"
        token__bankAccount <- o .: "bank_account"
        token__card <- o .: "card"
        token__created <- o .: "created"
        token__type <- o .: "type"
        token__used <- o .: "used"
        token__clientIp <- o .:? "client_ip"
        pure Token{..}

instance ToJSON Token where
  toJSON Token{..} = object
    (
      ("id" .= token__id) :
      ("object" .= token__object) :
      ("livemode" .= token__livemode) :
      ("bank_account" .= token__bankAccount) :
      ("card" .= token__card) :
      ("created" .= token__created) :
      ("type" .= token__type) :
      ("used" .= token__used) :
      (fmap ("client_ip" .=) token__clientIp) >?>
      []
    )
  toEncoding Token{..} = pairs (
      "id" .= token__id <>
      "object" .= token__object <>
      "livemode" .= token__livemode <>
      "bank_account" .= token__bankAccount <>
      "card" .= token__card <>
      "created" .= token__created <>
      "type" .= token__type <>
      "used" .= token__used <>
      maybe mempty ("client_ip" .=) token__clientIp
      )

-- Describes: "topup"

data Topup
  = Topup
    { topup__id :: (Id Topup)
    {- ^ Unique identifier for the object. -}
    , topup__object :: Topup_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , topup__livemode :: Bool
    {- ^ Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. -}
    , topup__amount :: Int
    {- ^ Amount transferred. -}
    , topup__created :: POSIXTime
    {- ^ Time at which the object was created. Measured in seconds since the Unix epoch. -}
    , topup__currency :: Text
    {- ^ Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). -}
    , topup__metadata :: Object
    {- ^ Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. -}
    , topup__source :: Source
    , topup__status :: Topup_Status
    {- ^ The status of the top-up is either `canceled`, `failed`, `pending`, `reversed`, or `succeeded`. -}
    , topup__balanceTransaction :: Maybe (Expandable '[Const (BalanceTransaction)])
    {- ^ ID of the balance transaction that describes the impact of this top-up on your account balance. May not be specified depending on status of top-up. -}
    , topup__description :: Maybe (Text)
    {- ^ An arbitrary string attached to the object. Often useful for displaying to users. -}
    , topup__expectedAvailabilityDate :: Maybe (Int)
    {- ^ Date the funds are expected to arrive in your Stripe account for payouts. This factors in delays like weekends or bank holidays. May not be specified depending on status of top-up. -}
    , topup__failureCode :: Maybe (Text)
    {- ^ Error code explaining reason for top-up failure if available (see [the errors section](https://stripe.com/docs/api#errors) for a list of codes). -}
    , topup__failureMessage :: Maybe (Text)
    {- ^ Message to user further explaining reason for top-up failure if available. -}
    , topup__statementDescriptor :: Maybe (Text)
    {- ^ Extra information about a top-up. This will appear on your source's bank statement. It must contain at least one letter. -}
    , topup__transferGroup :: Maybe (Text)
    {- ^ A string that identifies this top-up as part of a group. -}
    } deriving (Show, Eq, Generic)

instance FromJSON Topup where
  parseJSON = withObject "Topup" parseCtors
    where
      parseCtors o = parseTopup o
      parseTopup o = do
        topup__id <- o .: "id"
        topup__object <- o .: "object"
        topup__livemode <- o .: "livemode"
        topup__amount <- o .: "amount"
        topup__created <- o .: "created"
        topup__currency <- o .: "currency"
        topup__metadata <- o .: "metadata"
        topup__source <- o .: "source"
        topup__status <- o .: "status"
        topup__balanceTransaction <- o .:? "balance_transaction"
        topup__description <- o .:? "description"
        topup__expectedAvailabilityDate <- o .:? "expected_availability_date"
        topup__failureCode <- o .:? "failure_code"
        topup__failureMessage <- o .:? "failure_message"
        topup__statementDescriptor <- o .:? "statement_descriptor"
        topup__transferGroup <- o .:? "transfer_group"
        pure Topup{..}

instance ToJSON Topup where
  toJSON Topup{..} = object
    (
      ("id" .= topup__id) :
      ("object" .= topup__object) :
      ("livemode" .= topup__livemode) :
      ("amount" .= topup__amount) :
      ("created" .= topup__created) :
      ("currency" .= topup__currency) :
      ("metadata" .= topup__metadata) :
      ("source" .= topup__source) :
      ("status" .= topup__status) :
      (fmap ("balance_transaction" .=) topup__balanceTransaction) >?>
      (fmap ("description" .=) topup__description) >?>
      (fmap ("expected_availability_date" .=) topup__expectedAvailabilityDate) >?>
      (fmap ("failure_code" .=) topup__failureCode) >?>
      (fmap ("failure_message" .=) topup__failureMessage) >?>
      (fmap ("statement_descriptor" .=) topup__statementDescriptor) >?>
      (fmap ("transfer_group" .=) topup__transferGroup) >?>
      []
    )
  toEncoding Topup{..} = pairs (
      "id" .= topup__id <>
      "object" .= topup__object <>
      "livemode" .= topup__livemode <>
      "amount" .= topup__amount <>
      "created" .= topup__created <>
      "currency" .= topup__currency <>
      "metadata" .= topup__metadata <>
      "source" .= topup__source <>
      "status" .= topup__status <>
      maybe mempty ("balance_transaction" .=) topup__balanceTransaction <>
      maybe mempty ("description" .=) topup__description <>
      maybe mempty ("expected_availability_date" .=) topup__expectedAvailabilityDate <>
      maybe mempty ("failure_code" .=) topup__failureCode <>
      maybe mempty ("failure_message" .=) topup__failureMessage <>
      maybe mempty ("statement_descriptor" .=) topup__statementDescriptor <>
      maybe mempty ("transfer_group" .=) topup__transferGroup
      )

-- Describes: "transfer"

data Transfer
  = Transfer
    { transfer__id :: (Id Transfer)
    {- ^ Unique identifier for the object. -}
    , transfer__object :: Transfer_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , transfer__livemode :: Bool
    {- ^ Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. -}
    , transfer__amount :: Int
    {- ^ Amount in %s to be transferred. -}
    , transfer__amountReversed :: Int
    {- ^ Amount in %s reversed (can be less than the amount attribute on the transfer if a partial reversal was issued). -}
    , transfer__created :: POSIXTime
    {- ^ Time that this record of the transfer was first created. -}
    , transfer__currency :: Text
    {- ^ Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). -}
    , transfer__destinationPayment :: Expandable '[Const (Charge)]
    {- ^ If the destination is a Stripe account, this will be the ID of the payment that the destination account received for the transfer. -}
    , transfer__metadata :: Object
    {- ^ A set of key-value pairs that you can attach to a transfer object. It can be useful for storing additional information about the transfer in a structured format. -}
    , transfer__reversals :: Object
    {- ^ A list of reversals that have been applied to the transfer. -}
    , transfer__reversed :: Bool
    {- ^ Whether the transfer has been fully reversed. If the transfer is only partially reversed, this attribute will still be false. -}
    , transfer__balanceTransaction :: Maybe (Expandable '[Const (BalanceTransaction)])
    {- ^ Balance transaction that describes the impact of this transfer on your account balance. -}
    , transfer__description :: Maybe (Text)
    {- ^ An arbitrary string attached to the object. Often useful for displaying to users. -}
    , transfer__destination :: Maybe (Expandable '[Const (Account)])
    {- ^ ID of the Stripe account the transfer was sent to. -}
    , transfer__sourceTransaction :: Maybe (Expandable '[Const (Charge)])
    {- ^ ID of the charge or payment that was used to fund the transfer. If null, the transfer was funded from the available balance. -}
    , transfer__sourceType :: Maybe (Text)
    {- ^ The source balance this transfer came from. One of `card` or `bank_account`. -}
    , transfer__transferGroup :: Maybe (Text)
    {- ^ A string that identifies this transaction as part of a group. See the [Connect documentation](https://stripe.com/docs/connect/charges-transfers#grouping-transactions) for details. -}
    } deriving (Show, Eq, Generic)

instance FromJSON Transfer where
  parseJSON = withObject "Transfer" parseCtors
    where
      parseCtors o = parseTransfer o
      parseTransfer o = do
        transfer__id <- o .: "id"
        transfer__object <- o .: "object"
        transfer__livemode <- o .: "livemode"
        transfer__amount <- o .: "amount"
        transfer__amountReversed <- o .: "amount_reversed"
        transfer__created <- o .: "created"
        transfer__currency <- o .: "currency"
        transfer__destinationPayment <- o .: "destination_payment"
        transfer__metadata <- o .: "metadata"
        transfer__reversals <- o .: "reversals"
        transfer__reversed <- o .: "reversed"
        transfer__balanceTransaction <- o .:? "balance_transaction"
        transfer__description <- o .:? "description"
        transfer__destination <- o .:? "destination"
        transfer__sourceTransaction <- o .:? "source_transaction"
        transfer__sourceType <- o .:? "source_type"
        transfer__transferGroup <- o .:? "transfer_group"
        pure Transfer{..}

instance ToJSON Transfer where
  toJSON Transfer{..} = object
    (
      ("id" .= transfer__id) :
      ("object" .= transfer__object) :
      ("livemode" .= transfer__livemode) :
      ("amount" .= transfer__amount) :
      ("amount_reversed" .= transfer__amountReversed) :
      ("created" .= transfer__created) :
      ("currency" .= transfer__currency) :
      ("destination_payment" .= transfer__destinationPayment) :
      ("metadata" .= transfer__metadata) :
      ("reversals" .= transfer__reversals) :
      ("reversed" .= transfer__reversed) :
      (fmap ("balance_transaction" .=) transfer__balanceTransaction) >?>
      (fmap ("description" .=) transfer__description) >?>
      (fmap ("destination" .=) transfer__destination) >?>
      (fmap ("source_transaction" .=) transfer__sourceTransaction) >?>
      (fmap ("source_type" .=) transfer__sourceType) >?>
      (fmap ("transfer_group" .=) transfer__transferGroup) >?>
      []
    )
  toEncoding Transfer{..} = pairs (
      "id" .= transfer__id <>
      "object" .= transfer__object <>
      "livemode" .= transfer__livemode <>
      "amount" .= transfer__amount <>
      "amount_reversed" .= transfer__amountReversed <>
      "created" .= transfer__created <>
      "currency" .= transfer__currency <>
      "destination_payment" .= transfer__destinationPayment <>
      "metadata" .= transfer__metadata <>
      "reversals" .= transfer__reversals <>
      "reversed" .= transfer__reversed <>
      maybe mempty ("balance_transaction" .=) transfer__balanceTransaction <>
      maybe mempty ("description" .=) transfer__description <>
      maybe mempty ("destination" .=) transfer__destination <>
      maybe mempty ("source_transaction" .=) transfer__sourceTransaction <>
      maybe mempty ("source_type" .=) transfer__sourceType <>
      maybe mempty ("transfer_group" .=) transfer__transferGroup
      )

-- Describes: "transfer_data"

data TransferData
  = TransferData
    { transferData__amount :: Int
    {- ^ A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99). -}
    , transferData__destination :: Expandable '[Const (Account)]
    {- ^ The account (if any) the payment will be attributed to for tax
reporting, and where funds from the payment will be transferred to upon
payment success. -}
    } deriving (Show, Eq, Generic)

instance FromJSON TransferData where
  parseJSON = withObject "TransferData" parseCtors
    where
      parseCtors o = parseTransferData o
      parseTransferData o = do
        transferData__amount <- o .: "amount"
        transferData__destination <- o .: "destination"
        pure TransferData{..}

instance ToJSON TransferData where
  toJSON TransferData{..} = object
    (
      ("amount" .= transferData__amount) :
      ("destination" .= transferData__destination) :
      []
    )
  toEncoding TransferData{..} = pairs (
      "amount" .= transferData__amount <>
      "destination" .= transferData__destination
      )

-- Describes: "transfer_reversal"

data TransferReversal
  = TransferReversal
    { transferReversal__id :: (Id TransferReversal)
    {- ^ Unique identifier for the object. -}
    , transferReversal__object :: TransferReversal_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , transferReversal__amount :: Int
    {- ^ Amount, in %s. -}
    , transferReversal__created :: POSIXTime
    {- ^ Time at which the object was created. Measured in seconds since the Unix epoch. -}
    , transferReversal__currency :: Text
    {- ^ Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). -}
    , transferReversal__metadata :: Object
    {- ^ Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. -}
    , transferReversal__transfer :: Expandable '[Const (Transfer)]
    {- ^ ID of the transfer that was reversed. -}
    , transferReversal__balanceTransaction :: Maybe (Expandable '[Const (BalanceTransaction)])
    {- ^ Balance transaction that describes the impact on your account balance. -}
    , transferReversal__destinationPaymentRefund :: Maybe (Expandable '[Const (Refund)])
    {- ^ Linked payment refund for the transfer reversal. -}
    , transferReversal__sourceRefund :: Maybe (Expandable '[Const (Refund)])
    {- ^ ID of the refund responsible for the transfer reversal. -}
    } deriving (Show, Eq, Generic)

instance FromJSON TransferReversal where
  parseJSON = withObject "TransferReversal" parseCtors
    where
      parseCtors o = parseTransferReversal o
      parseTransferReversal o = do
        transferReversal__id <- o .: "id"
        transferReversal__object <- o .: "object"
        transferReversal__amount <- o .: "amount"
        transferReversal__created <- o .: "created"
        transferReversal__currency <- o .: "currency"
        transferReversal__metadata <- o .: "metadata"
        transferReversal__transfer <- o .: "transfer"
        transferReversal__balanceTransaction <- o .:? "balance_transaction"
        transferReversal__destinationPaymentRefund <- o .:? "destination_payment_refund"
        transferReversal__sourceRefund <- o .:? "source_refund"
        pure TransferReversal{..}

instance ToJSON TransferReversal where
  toJSON TransferReversal{..} = object
    (
      ("id" .= transferReversal__id) :
      ("object" .= transferReversal__object) :
      ("amount" .= transferReversal__amount) :
      ("created" .= transferReversal__created) :
      ("currency" .= transferReversal__currency) :
      ("metadata" .= transferReversal__metadata) :
      ("transfer" .= transferReversal__transfer) :
      (fmap ("balance_transaction" .=) transferReversal__balanceTransaction) >?>
      (fmap ("destination_payment_refund" .=) transferReversal__destinationPaymentRefund) >?>
      (fmap ("source_refund" .=) transferReversal__sourceRefund) >?>
      []
    )
  toEncoding TransferReversal{..} = pairs (
      "id" .= transferReversal__id <>
      "object" .= transferReversal__object <>
      "amount" .= transferReversal__amount <>
      "created" .= transferReversal__created <>
      "currency" .= transferReversal__currency <>
      "metadata" .= transferReversal__metadata <>
      "transfer" .= transferReversal__transfer <>
      maybe mempty ("balance_transaction" .=) transferReversal__balanceTransaction <>
      maybe mempty ("destination_payment_refund" .=) transferReversal__destinationPaymentRefund <>
      maybe mempty ("source_refund" .=) transferReversal__sourceRefund
      )

-- Describes: "transfer_schedule"

data TransferSchedule
  = TransferSchedule
    { transferSchedule__delayDays :: Int
    {- ^ The number of days charges for the account will be held before being paid out. -}
    , transferSchedule__interval :: Text
    {- ^ How frequently funds will be paid out. One of `manual` (payouts only created via API call), `daily`, `weekly`, or `monthly`. -}
    , transferSchedule__monthlyAnchor :: Int
    {- ^ The day of the month funds will be paid out. Only shown if `interval` is monthly. Payouts scheduled between the 29th and 31st of the month are sent on the last day of shorter months. -}
    , transferSchedule__weeklyAnchor :: Text
    {- ^ The day of the week funds will be paid out, of the style 'monday', 'tuesday', etc. Only shown if `interval` is weekly. -}
    } deriving (Show, Eq, Generic)

instance FromJSON TransferSchedule where
  parseJSON = withObject "TransferSchedule" parseCtors
    where
      parseCtors o = parseTransferSchedule o
      parseTransferSchedule o = do
        transferSchedule__delayDays <- o .: "delay_days"
        transferSchedule__interval <- o .: "interval"
        transferSchedule__monthlyAnchor <- o .: "monthly_anchor"
        transferSchedule__weeklyAnchor <- o .: "weekly_anchor"
        pure TransferSchedule{..}

instance ToJSON TransferSchedule where
  toJSON TransferSchedule{..} = object
    (
      ("delay_days" .= transferSchedule__delayDays) :
      ("interval" .= transferSchedule__interval) :
      ("monthly_anchor" .= transferSchedule__monthlyAnchor) :
      ("weekly_anchor" .= transferSchedule__weeklyAnchor) :
      []
    )
  toEncoding TransferSchedule{..} = pairs (
      "delay_days" .= transferSchedule__delayDays <>
      "interval" .= transferSchedule__interval <>
      "monthly_anchor" .= transferSchedule__monthlyAnchor <>
      "weekly_anchor" .= transferSchedule__weeklyAnchor
      )

-- Describes: "transform_usage"

data TransformUsage
  = TransformUsage
    { transformUsage__divideBy :: Int
    {- ^ Divide usage by this number. -}
    , transformUsage__round :: TransformUsage_Round
    {- ^ After division, either round the result `up` or `down`. -}
    } deriving (Show, Eq, Generic)

instance FromJSON TransformUsage where
  parseJSON = withObject "TransformUsage" parseCtors
    where
      parseCtors o = parseTransformUsage o
      parseTransformUsage o = do
        transformUsage__divideBy <- o .: "divide_by"
        transformUsage__round <- o .: "round"
        pure TransformUsage{..}

instance ToJSON TransformUsage where
  toJSON TransformUsage{..} = object
    (
      ("divide_by" .= transformUsage__divideBy) :
      ("round" .= transformUsage__round) :
      []
    )
  toEncoding TransformUsage{..} = pairs (
      "divide_by" .= transformUsage__divideBy <>
      "round" .= transformUsage__round
      )

-- Describes: "usage_record"

data UsageRecord
  = UsageRecord
    { usageRecord__id :: (Id UsageRecord)
    {- ^ Unique identifier for the object. -}
    , usageRecord__object :: UsageRecord_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , usageRecord__livemode :: Bool
    {- ^ Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. -}
    , usageRecord__quantity :: Int
    {- ^ The usage quantity for the specified date. -}
    , usageRecord__subscriptionItem :: Text
    {- ^ The ID of the subscription item this usage record contains data for. -}
    , usageRecord__timestamp :: POSIXTime
    {- ^ The timestamp when this usage occurred. -}
    } deriving (Show, Eq, Generic)

instance FromJSON UsageRecord where
  parseJSON = withObject "UsageRecord" parseCtors
    where
      parseCtors o = parseUsageRecord o
      parseUsageRecord o = do
        usageRecord__id <- o .: "id"
        usageRecord__object <- o .: "object"
        usageRecord__livemode <- o .: "livemode"
        usageRecord__quantity <- o .: "quantity"
        usageRecord__subscriptionItem <- o .: "subscription_item"
        usageRecord__timestamp <- o .: "timestamp"
        pure UsageRecord{..}

instance ToJSON UsageRecord where
  toJSON UsageRecord{..} = object
    (
      ("id" .= usageRecord__id) :
      ("object" .= usageRecord__object) :
      ("livemode" .= usageRecord__livemode) :
      ("quantity" .= usageRecord__quantity) :
      ("subscription_item" .= usageRecord__subscriptionItem) :
      ("timestamp" .= usageRecord__timestamp) :
      []
    )
  toEncoding UsageRecord{..} = pairs (
      "id" .= usageRecord__id <>
      "object" .= usageRecord__object <>
      "livemode" .= usageRecord__livemode <>
      "quantity" .= usageRecord__quantity <>
      "subscription_item" .= usageRecord__subscriptionItem <>
      "timestamp" .= usageRecord__timestamp
      )

-- Describes: "usage_record_summary"

data UsageRecordSummary
  = UsageRecordSummary
    { usageRecordSummary__id :: (Id UsageRecordSummary)
    {- ^ Unique identifier for the object. -}
    , usageRecordSummary__object :: UsageRecordSummary_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , usageRecordSummary__livemode :: Bool
    {- ^ Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. -}
    , usageRecordSummary__period :: Period
    , usageRecordSummary__subscriptionItem :: Text
    {- ^ The ID of the subscription item this summary is describing. -}
    , usageRecordSummary__totalUsage :: Int
    {- ^ The total usage within this usage period. -}
    , usageRecordSummary__invoice :: Maybe (Text)
    {- ^ The invoice in which this usage period has been billed for. -}
    } deriving (Show, Eq, Generic)

instance FromJSON UsageRecordSummary where
  parseJSON = withObject "UsageRecordSummary" parseCtors
    where
      parseCtors o = parseUsageRecordSummary o
      parseUsageRecordSummary o = do
        usageRecordSummary__id <- o .: "id"
        usageRecordSummary__object <- o .: "object"
        usageRecordSummary__livemode <- o .: "livemode"
        usageRecordSummary__period <- o .: "period"
        usageRecordSummary__subscriptionItem <- o .: "subscription_item"
        usageRecordSummary__totalUsage <- o .: "total_usage"
        usageRecordSummary__invoice <- o .:? "invoice"
        pure UsageRecordSummary{..}

instance ToJSON UsageRecordSummary where
  toJSON UsageRecordSummary{..} = object
    (
      ("id" .= usageRecordSummary__id) :
      ("object" .= usageRecordSummary__object) :
      ("livemode" .= usageRecordSummary__livemode) :
      ("period" .= usageRecordSummary__period) :
      ("subscription_item" .= usageRecordSummary__subscriptionItem) :
      ("total_usage" .= usageRecordSummary__totalUsage) :
      (fmap ("invoice" .=) usageRecordSummary__invoice) >?>
      []
    )
  toEncoding UsageRecordSummary{..} = pairs (
      "id" .= usageRecordSummary__id <>
      "object" .= usageRecordSummary__object <>
      "livemode" .= usageRecordSummary__livemode <>
      "period" .= usageRecordSummary__period <>
      "subscription_item" .= usageRecordSummary__subscriptionItem <>
      "total_usage" .= usageRecordSummary__totalUsage <>
      maybe mempty ("invoice" .=) usageRecordSummary__invoice
      )

-- Describes: "webhook_endpoint"

data WebhookEndpoint
  = WebhookEndpoint
    { webhookEndpoint__id :: (Id WebhookEndpoint)
    {- ^ Unique identifier for the object. -}
    , webhookEndpoint__object :: WebhookEndpoint_Object
    {- ^ String representing the object's type. Objects of the same type share the same value. -}
    , webhookEndpoint__livemode :: Bool
    {- ^ Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. -}
    , webhookEndpoint__created :: POSIXTime
    {- ^ Time at which the object was created. Measured in seconds since the Unix epoch. -}
    , webhookEndpoint__enabledEvents :: Vector (Text)
    {- ^ The list of events to enable for this endpoint. You may specify `['*']` to enable all events. -}
    , webhookEndpoint__secret :: Text
    {- ^ The endpoint's secret, used to generate [webhook signatures](https://stripe.com/docs/webhooks/signatures). Only returned at creation. -}
    , webhookEndpoint__status :: Text
    {- ^ The status of the webhook. It can be `enabled` or `disabled`. -}
    , webhookEndpoint__url :: Text
    {- ^ The URL of the webhook endpoint. -}
    , webhookEndpoint__apiVersion :: Maybe (Text)
    {- ^ The API version events are rendered as for this webhook endpoint. -}
    , webhookEndpoint__application :: Maybe (Text)
    {- ^ The ID of the associated Connect application. -}
    } deriving (Show, Eq, Generic)

instance FromJSON WebhookEndpoint where
  parseJSON = withObject "WebhookEndpoint" parseCtors
    where
      parseCtors o = parseWebhookEndpoint o
      parseWebhookEndpoint o = do
        webhookEndpoint__id <- o .: "id"
        webhookEndpoint__object <- o .: "object"
        webhookEndpoint__livemode <- o .: "livemode"
        webhookEndpoint__created <- o .: "created"
        webhookEndpoint__enabledEvents <- o .: "enabled_events"
        webhookEndpoint__secret <- o .: "secret"
        webhookEndpoint__status <- o .: "status"
        webhookEndpoint__url <- o .: "url"
        webhookEndpoint__apiVersion <- o .:? "api_version"
        webhookEndpoint__application <- o .:? "application"
        pure WebhookEndpoint{..}

instance ToJSON WebhookEndpoint where
  toJSON WebhookEndpoint{..} = object
    (
      ("id" .= webhookEndpoint__id) :
      ("object" .= webhookEndpoint__object) :
      ("livemode" .= webhookEndpoint__livemode) :
      ("created" .= webhookEndpoint__created) :
      ("enabled_events" .= webhookEndpoint__enabledEvents) :
      ("secret" .= webhookEndpoint__secret) :
      ("status" .= webhookEndpoint__status) :
      ("url" .= webhookEndpoint__url) :
      (fmap ("api_version" .=) webhookEndpoint__apiVersion) >?>
      (fmap ("application" .=) webhookEndpoint__application) >?>
      []
    )
  toEncoding WebhookEndpoint{..} = pairs (
      "id" .= webhookEndpoint__id <>
      "object" .= webhookEndpoint__object <>
      "livemode" .= webhookEndpoint__livemode <>
      "created" .= webhookEndpoint__created <>
      "enabled_events" .= webhookEndpoint__enabledEvents <>
      "secret" .= webhookEndpoint__secret <>
      "status" .= webhookEndpoint__status <>
      "url" .= webhookEndpoint__url <>
      maybe mempty ("api_version" .=) webhookEndpoint__apiVersion <>
      maybe mempty ("application" .=) webhookEndpoint__application
      )


makeFields ''Account
makeFields ''AccountBrandingSettings
makeFields ''AccountBusinessProfile
makeFields ''AccountCapabilities
makeFields ''AccountCapabilityRequirements
makeFields ''AccountCardPaymentsSettings
makeFields ''AccountDashboardSettings
makeFields ''AccountDeclineChargeOn
makeFields ''AccountLink
makeFields ''AccountPaymentsSettings
makeFields ''AccountPayoutSettings
makeFields ''AccountRequirements
makeFields ''AccountSettings
makeFields ''AccountTosAcceptance
makeFields ''Address
makeFields ''AlipayAccount
makeFields ''ApiErrors
makeFields ''ApplePayDomain
makeFields ''Application
makeFields ''ApplicationFee
makeFields ''Balance
makeFields ''BalanceAmount
makeFields ''BalanceAmountBySourceType
makeFields ''BalanceTransaction
makeFields ''BankAccount
makeFields ''BillingDetails
makeFields ''BitcoinReceiver
makeFields ''BitcoinTransaction
makeFields ''Capability
makeFields ''Card
makeFields ''Charge
makeFields ''ChargeFraudDetails
makeFields ''ChargeOutcome
makeFields ''ChargeTransferData
makeFields ''Checkout_Session
makeFields ''CheckoutSessionCustomDisplayItemDescription
makeFields ''CheckoutSessionDisplayItem
makeFields ''ConnectCollectionTransfer
makeFields ''CountrySpec
makeFields ''CountrySpecVerificationFieldDetails
makeFields ''CountrySpecVerificationFields
makeFields ''Coupon
makeFields ''CreditNote
makeFields ''Customer
makeFields ''CustomerBalanceTransaction
makeFields ''DeletedAccount
makeFields ''DeletedAlipayAccount
makeFields ''DeletedApplePayDomain
makeFields ''DeletedBankAccount
makeFields ''DeletedBitcoinReceiver
makeFields ''DeletedCard
makeFields ''DeletedCoupon
makeFields ''DeletedCustomer
makeFields ''DeletedDiscount
makeFields ''DeletedExternalAccount
makeFields ''DeletedInvoice
makeFields ''DeletedInvoiceitem
makeFields ''DeletedPaymentSource
makeFields ''DeletedPerson
makeFields ''DeletedPlan
makeFields ''DeletedProduct
makeFields ''DeletedRadar_ValueList
makeFields ''DeletedRadar_ValueListItem
makeFields ''DeletedRecipient
makeFields ''DeletedSku
makeFields ''DeletedSubscriptionItem
makeFields ''DeletedTaxId
makeFields ''DeletedTerminal_Location
makeFields ''DeletedTerminal_Reader
makeFields ''DeletedWebhookEndpoint
makeFields ''DeliveryEstimate
makeFields ''Discount
makeFields ''Dispute
makeFields ''DisputeEvidence
makeFields ''DisputeEvidenceDetails
makeFields ''EphemeralKey
makeFields ''Error
makeFields ''Event
makeFields ''ExchangeRate
makeFields ''ExternalAccount
makeFields ''Fee
makeFields ''FeeRefund
makeFields ''File
makeFields ''FileLink
makeFields ''FinancialReportingFinanceReportRunRunParameters
makeFields ''Inventory
makeFields ''Invoice
makeFields ''InvoiceItemThresholdReason
makeFields ''InvoiceLineItemPeriod
makeFields ''InvoiceSettingCustomField
makeFields ''InvoiceSettingCustomerSetting
makeFields ''InvoiceSettingSubscriptionScheduleSetting
makeFields ''InvoiceTaxAmount
makeFields ''InvoiceThresholdReason
makeFields ''Invoiceitem
makeFields ''InvoicesResourceInvoiceTaxId
makeFields ''InvoicesStatusTransitions
makeFields ''IssuerFraudRecord
makeFields ''Issuing_Authorization
makeFields ''Issuing_Card
makeFields ''Issuing_CardDetails
makeFields ''Issuing_CardPin
makeFields ''Issuing_Cardholder
makeFields ''Issuing_Dispute
makeFields ''Issuing_Settlement
makeFields ''Issuing_Transaction
makeFields ''Issuing_Verification
makeFields ''IssuingAuthorizationMerchantData
makeFields ''IssuingAuthorizationRequest
makeFields ''IssuingAuthorizationVerificationData
makeFields ''IssuingCardAuthorizationControls
makeFields ''IssuingCardPin
makeFields ''IssuingCardShipping
makeFields ''IssuingCardSpendingLimit
makeFields ''IssuingCardholderAddress
makeFields ''IssuingCardholderAuthorizationControls
makeFields ''IssuingCardholderSpendingLimit
makeFields ''IssuingDisputeEvidence
makeFields ''IssuingDisputeFraudulentEvidence
makeFields ''IssuingDisputeOtherEvidence
makeFields ''LegalEntityCompany
makeFields ''LegalEntityCompanyVerification
makeFields ''LegalEntityCompanyVerificationDocument
makeFields ''LegalEntityDob
makeFields ''LegalEntityJapanAddress
makeFields ''LegalEntityPersonVerification
makeFields ''LegalEntityPersonVerificationDocument
makeFields ''LightAccountLogout
makeFields ''LineItem
makeFields ''LoginLink
makeFields ''NotificationEventData
makeFields ''NotificationEventRequest
makeFields ''Order
makeFields ''OrderItem
makeFields ''OrderReturn
makeFields ''PackageDimensions
makeFields ''PaymentIntent
makeFields ''PaymentIntentNextAction
makeFields ''PaymentIntentNextActionRedirectToUrl
makeFields ''PaymentIntentPaymentMethodOptions
makeFields ''PaymentIntentPaymentMethodOptionsCard
makeFields ''PaymentMethod
makeFields ''PaymentMethodCard
makeFields ''PaymentMethodCardChecks
makeFields ''PaymentMethodCardGeneratedCard
makeFields ''PaymentMethodCardPresent
makeFields ''PaymentMethodCardWallet
makeFields ''PaymentMethodCardWalletAmexExpressCheckout
makeFields ''PaymentMethodCardWalletApplePay
makeFields ''PaymentMethodCardWalletGooglePay
makeFields ''PaymentMethodCardWalletMasterpass
makeFields ''PaymentMethodCardWalletSamsungPay
makeFields ''PaymentMethodCardWalletVisaCheckout
makeFields ''PaymentMethodDetails
makeFields ''PaymentMethodDetailsAchCreditTransfer
makeFields ''PaymentMethodDetailsAchDebit
makeFields ''PaymentMethodDetailsAlipay
makeFields ''PaymentMethodDetailsBancontact
makeFields ''PaymentMethodDetailsCard
makeFields ''PaymentMethodDetailsCardChecks
makeFields ''PaymentMethodDetailsCardPresent
makeFields ''PaymentMethodDetailsCardPresentReceipt
makeFields ''PaymentMethodDetailsCardWallet
makeFields ''PaymentMethodDetailsCardWalletAmexExpressCheckout
makeFields ''PaymentMethodDetailsCardWalletApplePay
makeFields ''PaymentMethodDetailsCardWalletGooglePay
makeFields ''PaymentMethodDetailsCardWalletMasterpass
makeFields ''PaymentMethodDetailsCardWalletSamsungPay
makeFields ''PaymentMethodDetailsCardWalletVisaCheckout
makeFields ''PaymentMethodDetailsEps
makeFields ''PaymentMethodDetailsGiropay
makeFields ''PaymentMethodDetailsIdeal
makeFields ''PaymentMethodDetailsKlarna
makeFields ''PaymentMethodDetailsMultibanco
makeFields ''PaymentMethodDetailsP24
makeFields ''PaymentMethodDetailsSepaDebit
makeFields ''PaymentMethodDetailsSofort
makeFields ''PaymentMethodDetailsStripeAccount
makeFields ''PaymentMethodDetailsWechat
makeFields ''PaymentSource
makeFields ''Payout
makeFields ''Period
makeFields ''Person
makeFields ''PersonRelationship
makeFields ''PersonRequirements
makeFields ''Plan
makeFields ''PlanTier
makeFields ''PlatformTaxFee
makeFields ''Product
makeFields ''Radar_EarlyFraudWarning
makeFields ''Radar_ValueList
makeFields ''Radar_ValueListItem
makeFields ''RadarReviewResourceLocation
makeFields ''RadarReviewResourceSession
makeFields ''Recipient
makeFields ''Refund
makeFields ''Reporting_ReportRun
makeFields ''Reporting_ReportType
makeFields ''ReserveTransaction
makeFields ''Review
makeFields ''Rule
makeFields ''ScheduledQueryRun
makeFields ''SetupIntent
makeFields ''SetupIntentNextAction
makeFields ''SetupIntentNextActionRedirectToUrl
makeFields ''SetupIntentPaymentMethodOptions
makeFields ''SetupIntentPaymentMethodOptionsCard
makeFields ''Shipping
makeFields ''ShippingMethod
makeFields ''SigmaScheduledQueryRunError
makeFields ''Sku
makeFields ''Source
makeFields ''SourceCodeVerificationFlow
makeFields ''SourceMandateNotification
makeFields ''SourceMandateNotificationBacsDebitData
makeFields ''SourceMandateNotificationSepaDebitData
makeFields ''SourceOrder
makeFields ''SourceOrderItem
makeFields ''SourceOwner
makeFields ''SourceReceiverFlow
makeFields ''SourceRedirectFlow
makeFields ''SourceTransaction
makeFields ''SourceTransactionAchCreditTransferData
makeFields ''SourceTransactionChfCreditTransferData
makeFields ''SourceTransactionGbpCreditTransferData
makeFields ''SourceTransactionPaperCheckData
makeFields ''SourceTransactionSepaCreditTransferData
makeFields ''SourceTypeAchCreditTransfer
makeFields ''SourceTypeAchDebit
makeFields ''SourceTypeAlipay
makeFields ''SourceTypeBancontact
makeFields ''SourceTypeCard
makeFields ''SourceTypeCardPresent
makeFields ''SourceTypeEps
makeFields ''SourceTypeGiropay
makeFields ''SourceTypeIdeal
makeFields ''SourceTypeKlarna
makeFields ''SourceTypeMultibanco
makeFields ''SourceTypeP24
makeFields ''SourceTypeSepaDebit
makeFields ''SourceTypeSofort
makeFields ''SourceTypeThreeDSecure
makeFields ''SourceTypeWechat
makeFields ''StatusTransitions
makeFields ''Subscription
makeFields ''SubscriptionBillingThresholds
makeFields ''SubscriptionItem
makeFields ''SubscriptionItemBillingThresholds
makeFields ''SubscriptionSchedule
makeFields ''SubscriptionScheduleConfigurationItem
makeFields ''SubscriptionScheduleCurrentPhase
makeFields ''SubscriptionSchedulePhaseConfiguration
makeFields ''SubscriptionScheduleRenewalInterval
makeFields ''TaxId
makeFields ''TaxIdVerification
makeFields ''TaxInfo
makeFields ''TaxInfoVerification
makeFields ''TaxRate
makeFields ''Terminal_ConnectionToken
makeFields ''Terminal_Location
makeFields ''Terminal_Reader
makeFields ''ThreeDSecure
makeFields ''ThreeDSecureDetails
makeFields ''ThreeDSecureUsage
makeFields ''Token
makeFields ''Topup
makeFields ''Transfer
makeFields ''TransferData
makeFields ''TransferReversal
makeFields ''TransferSchedule
makeFields ''TransformUsage
makeFields ''UsageRecord
makeFields ''UsageRecordSummary
makeFields ''WebhookEndpoint
